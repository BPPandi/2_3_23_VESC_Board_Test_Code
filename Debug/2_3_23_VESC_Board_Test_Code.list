
2_3_23_VESC_Board_Test_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a4  0800a4a4  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a4  0800a4a4  0001a4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4ac  0800a4ac  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4ac  0800a4ac  0001a4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4b0  0800a4b0  0001a4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  0800a4b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020760  2**0
                  CONTENTS
 10 .bss          00001da0  20000760  20000760  00020760  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002500  20002500  00020760  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001522a  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326f  00000000  00000000  000359ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  00038c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e8  00000000  00000000  00039e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023933  00000000  00000000  0003af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165f5  00000000  00000000  0005e8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec4b  00000000  00000000  00074ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143aeb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005028  00000000  00000000  00143b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000760 	.word	0x20000760
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a360 	.word	0x0800a360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000764 	.word	0x20000764
 80001cc:	0800a360 	.word	0x0800a360

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ledBlink>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledBlink()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	for (int ledCount=0;ledCount<6;ledCount++)
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e00a      	b.n	80005a6 <ledBlink+0x22>
	{
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin);
 8000590:	2103      	movs	r1, #3
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <ledBlink+0x3c>)
 8000594:	f002 f807 	bl	80025a6 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f001 f918 	bl	80017d0 <HAL_Delay>
	for (int ledCount=0;ledCount<6;ledCount++)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	ddf1      	ble.n	8000590 <ledBlink+0xc>
	}
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2103      	movs	r1, #3
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <ledBlink+0x3c>)
 80005b2:	f001 ffdf 	bl	8002574 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020400 	.word	0x40020400

080005c4 <USBTest>:

void USBTest()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	char *data = "Hello ST MicroController\r\n";
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <USBTest+0x2c>)
 80005cc:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS((uint8_t *)data, strlen(data));
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff fdfe 	bl	80001d0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f008 fdc4 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f001 f8f4 	bl	80017d0 <HAL_Delay>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	0800a378 	.word	0x0800a378

080005f4 <DRV8301_Enable>:
void DRV8301_Enable()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2120      	movs	r1, #32
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <DRV8301_Enable+0x14>)
 80005fe:	f001 ffb9 	bl	8002574 <HAL_GPIO_WritePin>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020400 	.word	0x40020400

0800060c <DRV8301_Disable>:
void DRV8301_Disable()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <DRV8301_Disable+0x14>)
 8000616:	f001 ffad 	bl	8002574 <HAL_GPIO_WritePin>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020400 	.word	0x40020400

08000624 <DRV8301_NormalPWM>:
void DRV8301_NormalPWM()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 51;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 800062a:	2233      	movs	r2, #51	; 0x33
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4814      	ldr	r0, [pc, #80]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000632:	f003 ff91 	bl	8004558 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000636:	2100      	movs	r1, #0
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800063a:	f004 fe99 	bl	8005370 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f001 f8c6 	bl	80017d0 <HAL_Delay>
	TIM1->CCR2 = 51;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 8000646:	2233      	movs	r2, #51	; 0x33
 8000648:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800064a:	2104      	movs	r1, #4
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800064e:	f003 ff83 	bl	8004558 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000652:	2104      	movs	r1, #4
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000656:	f004 fe8b 	bl	8005370 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f001 f8b8 	bl	80017d0 <HAL_Delay>
	TIM1->CCR3 = 51;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 8000662:	2233      	movs	r2, #51	; 0x33
 8000664:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000666:	2108      	movs	r1, #8
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800066a:	f003 ff75 	bl	8004558 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800066e:	2108      	movs	r1, #8
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000672:	f004 fe7d 	bl	8005370 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f001 f8aa 	bl	80017d0 <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010000 	.word	0x40010000
 8000684:	200007c8 	.word	0x200007c8

08000688 <DRV8301_PWM_Stop>:
void DRV8301_PWM_Stop()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800068c:	2100      	movs	r1, #0
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <DRV8301_PWM_Stop+0x40>)
 8000690:	f004 f82a 	bl	80046e8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000694:	2100      	movs	r1, #0
 8000696:	480c      	ldr	r0, [pc, #48]	; (80006c8 <DRV8301_PWM_Stop+0x40>)
 8000698:	f004 ff24 	bl	80054e4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800069c:	2104      	movs	r1, #4
 800069e:	480a      	ldr	r0, [pc, #40]	; (80006c8 <DRV8301_PWM_Stop+0x40>)
 80006a0:	f004 f822 	bl	80046e8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80006a4:	2104      	movs	r1, #4
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <DRV8301_PWM_Stop+0x40>)
 80006a8:	f004 ff1c 	bl	80054e4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80006ac:	2108      	movs	r1, #8
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <DRV8301_PWM_Stop+0x40>)
 80006b0:	f004 f81a 	bl	80046e8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80006b4:	2108      	movs	r1, #8
 80006b6:	4804      	ldr	r0, [pc, #16]	; (80006c8 <DRV8301_PWM_Stop+0x40>)
 80006b8:	f004 ff14 	bl	80054e4 <HAL_TIMEx_PWMN_Stop>
	HAL_Delay(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f001 f887 	bl	80017d0 <HAL_Delay>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200007c8 	.word	0x200007c8

080006cc <delay_us>:
void delay_us (uint16_t us)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <delay_us+0x30>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80006de:	bf00      	nop
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <delay_us+0x30>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d3f9      	bcc.n	80006e0 <delay_us+0x14>
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000810 	.word	0x20000810

08000700 <DRV8301_CommutationPWM>:
void DRV8301_CommutationPWM()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	for(k=0;k<73;k++)
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <DRV8301_CommutationPWM+0xac>)
 8000706:	2200      	movs	r2, #0
 8000708:	801a      	strh	r2, [r3, #0]
 800070a:	e03f      	b.n	800078c <DRV8301_CommutationPWM+0x8c>
	{
		PhaseA = PhaseA +1;
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <DRV8301_CommutationPWM+0xb0>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	b29a      	uxth	r2, r3
 8000714:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <DRV8301_CommutationPWM+0xb0>)
 8000716:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = PhaseA_wave[PhaseA];
 8000718:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <DRV8301_CommutationPWM+0xb0>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	4a25      	ldr	r2, [pc, #148]	; (80007b4 <DRV8301_CommutationPWM+0xb4>)
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <DRV8301_CommutationPWM+0xb8>)
 8000722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000726:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000728:	2100      	movs	r1, #0
 800072a:	4824      	ldr	r0, [pc, #144]	; (80007bc <DRV8301_CommutationPWM+0xbc>)
 800072c:	f003 ff14 	bl	8004558 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000730:	2100      	movs	r1, #0
 8000732:	4822      	ldr	r0, [pc, #136]	; (80007bc <DRV8301_CommutationPWM+0xbc>)
 8000734:	f004 fe1c 	bl	8005370 <HAL_TIMEx_PWMN_Start>
		TIM1->CCR2 = PhaseB_wave[PhaseA];
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <DRV8301_CommutationPWM+0xb0>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	4a1d      	ldr	r2, [pc, #116]	; (80007b4 <DRV8301_CommutationPWM+0xb4>)
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <DRV8301_CommutationPWM+0xc0>)
 8000742:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000746:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000748:	2104      	movs	r1, #4
 800074a:	481c      	ldr	r0, [pc, #112]	; (80007bc <DRV8301_CommutationPWM+0xbc>)
 800074c:	f003 ff04 	bl	8004558 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000750:	2104      	movs	r1, #4
 8000752:	481a      	ldr	r0, [pc, #104]	; (80007bc <DRV8301_CommutationPWM+0xbc>)
 8000754:	f004 fe0c 	bl	8005370 <HAL_TIMEx_PWMN_Start>
		TIM1->CCR3 = PhaseC_wave[PhaseA];
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <DRV8301_CommutationPWM+0xb0>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <DRV8301_CommutationPWM+0xb4>)
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <DRV8301_CommutationPWM+0xc4>)
 8000762:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000766:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000768:	2108      	movs	r1, #8
 800076a:	4814      	ldr	r0, [pc, #80]	; (80007bc <DRV8301_CommutationPWM+0xbc>)
 800076c:	f003 fef4 	bl	8004558 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000770:	2108      	movs	r1, #8
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <DRV8301_CommutationPWM+0xbc>)
 8000774:	f004 fdfc 	bl	8005370 <HAL_TIMEx_PWMN_Start>
		delay_us(330);
 8000778:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800077c:	f7ff ffa6 	bl	80006cc <delay_us>
	for(k=0;k<73;k++)
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <DRV8301_CommutationPWM+0xac>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <DRV8301_CommutationPWM+0xac>)
 800078a:	801a      	strh	r2, [r3, #0]
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <DRV8301_CommutationPWM+0xac>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	2b48      	cmp	r3, #72	; 0x48
 8000792:	d9bb      	bls.n	800070c <DRV8301_CommutationPWM+0xc>
	}
	if(k>=73)
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <DRV8301_CommutationPWM+0xac>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	2b48      	cmp	r3, #72	; 0x48
 800079a:	d905      	bls.n	80007a8 <DRV8301_CommutationPWM+0xa8>
	{
		PhaseA=0;
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <DRV8301_CommutationPWM+0xb0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	801a      	strh	r2, [r3, #0]
		k=0;
 80007a2:	4b02      	ldr	r3, [pc, #8]	; (80007ac <DRV8301_CommutationPWM+0xac>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	801a      	strh	r2, [r3, #0]
	}
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000077e 	.word	0x2000077e
 80007b0:	2000077c 	.word	0x2000077c
 80007b4:	40010000 	.word	0x40010000
 80007b8:	20000000 	.word	0x20000000
 80007bc:	200007c8 	.word	0x200007c8
 80007c0:	20000200 	.word	0x20000200
 80007c4:	20000400 	.word	0x20000400

080007c8 <VSENS_1>:
void VSENS_1()
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_0;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <VSENS_1+0x2c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <VSENS_1+0x2c>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <VSENS_1+0x2c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007de:	4905      	ldr	r1, [pc, #20]	; (80007f4 <VSENS_1+0x2c>)
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <VSENS_1+0x30>)
 80007e2:	f001 f9fb 	bl	8001bdc <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <VSENS_1+0x28>
	{
	Error_Handler();
 80007ec:	f000 fda8 	bl	8001340 <Error_Handler>
	}
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000858 	.word	0x20000858
 80007f8:	20000780 	.word	0x20000780

080007fc <VSENS_2>:

void VSENS_2()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_1;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <VSENS_2+0x2c>)
 8000802:	2201      	movs	r2, #1
 8000804:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <VSENS_2+0x2c>)
 8000808:	2201      	movs	r2, #1
 800080a:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <VSENS_2+0x2c>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <VSENS_2+0x2c>)
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <VSENS_2+0x30>)
 8000816:	f001 f9e1 	bl	8001bdc <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <VSENS_2+0x28>
	{
	Error_Handler();
 8000820:	f000 fd8e 	bl	8001340 <Error_Handler>
	}
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000858 	.word	0x20000858
 800082c:	20000780 	.word	0x20000780

08000830 <VSENS_3>:
void VSENS_3()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_2;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <VSENS_3+0x2c>)
 8000836:	2202      	movs	r2, #2
 8000838:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <VSENS_3+0x2c>)
 800083c:	2201      	movs	r2, #1
 800083e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <VSENS_3+0x2c>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000846:	4905      	ldr	r1, [pc, #20]	; (800085c <VSENS_3+0x2c>)
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <VSENS_3+0x30>)
 800084a:	f001 f9c7 	bl	8001bdc <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <VSENS_3+0x28>
	{
	Error_Handler();
 8000854:	f000 fd74 	bl	8001340 <Error_Handler>
	}
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000858 	.word	0x20000858
 8000860:	20000780 	.word	0x20000780

08000864 <TEMP_NTC>:
void TEMP_NTC()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <TEMP_NTC+0x2c>)
 800086a:	2203      	movs	r2, #3
 800086c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <TEMP_NTC+0x2c>)
 8000870:	2201      	movs	r2, #1
 8000872:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <TEMP_NTC+0x2c>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087a:	4905      	ldr	r1, [pc, #20]	; (8000890 <TEMP_NTC+0x2c>)
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <TEMP_NTC+0x30>)
 800087e:	f001 f9ad 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <TEMP_NTC+0x28>
	{
	Error_Handler();
 8000888:	f000 fd5a 	bl	8001340 <Error_Handler>
	}
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000858 	.word	0x20000858
 8000894:	20000780 	.word	0x20000780

08000898 <ADC_EXT1>:
void ADC_EXT1()
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_5;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <ADC_EXT1+0x2c>)
 800089e:	2205      	movs	r2, #5
 80008a0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <ADC_EXT1+0x2c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <ADC_EXT1+0x2c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ae:	4905      	ldr	r1, [pc, #20]	; (80008c4 <ADC_EXT1+0x2c>)
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <ADC_EXT1+0x30>)
 80008b2:	f001 f993 	bl	8001bdc <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <ADC_EXT1+0x28>
	{
	Error_Handler();
 80008bc:	f000 fd40 	bl	8001340 <Error_Handler>
	}
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000858 	.word	0x20000858
 80008c8:	20000780 	.word	0x20000780

080008cc <ADC_EXT2>:
void ADC_EXT2()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_6;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ADC_EXT2+0x2c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ADC_EXT2+0x2c>)
 80008d8:	2201      	movs	r2, #1
 80008da:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <ADC_EXT2+0x2c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e2:	4905      	ldr	r1, [pc, #20]	; (80008f8 <ADC_EXT2+0x2c>)
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <ADC_EXT2+0x30>)
 80008e6:	f001 f979 	bl	8001bdc <HAL_ADC_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <ADC_EXT2+0x28>
	{
	Error_Handler();
 80008f0:	f000 fd26 	bl	8001340 <Error_Handler>
	}
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000858 	.word	0x20000858
 80008fc:	20000780 	.word	0x20000780

08000900 <CURREN_1>:
void CURREN_1()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_10;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <CURREN_1+0x2c>)
 8000906:	220a      	movs	r2, #10
 8000908:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <CURREN_1+0x2c>)
 800090c:	2201      	movs	r2, #1
 800090e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <CURREN_1+0x2c>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000916:	4905      	ldr	r1, [pc, #20]	; (800092c <CURREN_1+0x2c>)
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <CURREN_1+0x30>)
 800091a:	f001 f95f 	bl	8001bdc <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <CURREN_1+0x28>
	{
	Error_Handler();
 8000924:	f000 fd0c 	bl	8001340 <Error_Handler>
	}
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000858 	.word	0x20000858
 8000930:	20000780 	.word	0x20000780

08000934 <CURREN_2>:
void CURREN_2()
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_11;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <CURREN_2+0x2c>)
 800093a:	220b      	movs	r2, #11
 800093c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <CURREN_2+0x2c>)
 8000940:	2201      	movs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <CURREN_2+0x2c>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094a:	4905      	ldr	r1, [pc, #20]	; (8000960 <CURREN_2+0x2c>)
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <CURREN_2+0x30>)
 800094e:	f001 f945 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <CURREN_2+0x28>
	{
	Error_Handler();
 8000958:	f000 fcf2 	bl	8001340 <Error_Handler>
	}
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000858 	.word	0x20000858
 8000964:	20000780 	.word	0x20000780

08000968 <CURREN_3>:
void CURREN_3()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_12;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <CURREN_3+0x2c>)
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <CURREN_3+0x2c>)
 8000974:	2201      	movs	r2, #1
 8000976:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <CURREN_3+0x2c>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097e:	4905      	ldr	r1, [pc, #20]	; (8000994 <CURREN_3+0x2c>)
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <CURREN_3+0x30>)
 8000982:	f001 f92b 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <CURREN_3+0x28>
	{
	Error_Handler();
 800098c:	f000 fcd8 	bl	8001340 <Error_Handler>
	}
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000858 	.word	0x20000858
 8000998:	20000780 	.word	0x20000780

0800099c <TEMP_MOTOR>:
void TEMP_MOTOR()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_14;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <TEMP_MOTOR+0x2c>)
 80009a2:	220e      	movs	r2, #14
 80009a4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <TEMP_MOTOR+0x2c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <TEMP_MOTOR+0x2c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	4905      	ldr	r1, [pc, #20]	; (80009c8 <TEMP_MOTOR+0x2c>)
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <TEMP_MOTOR+0x30>)
 80009b6:	f001 f911 	bl	8001bdc <HAL_ADC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <TEMP_MOTOR+0x28>
	{
	Error_Handler();
 80009c0:	f000 fcbe 	bl	8001340 <Error_Handler>
	}
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000858 	.word	0x20000858
 80009cc:	20000780 	.word	0x20000780

080009d0 <CAAF>:
void CAAF()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	VSENS_1();
 80009d4:	f7ff fef8 	bl	80007c8 <VSENS_1>
	HAL_ADC_Start(&hadc1);
 80009d8:	48c0      	ldr	r0, [pc, #768]	; (8000cdc <CAAF+0x30c>)
 80009da:	f000 ff61 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 80009de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009e2:	48be      	ldr	r0, [pc, #760]	; (8000cdc <CAAF+0x30c>)
 80009e4:	f001 f861 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 80009e8:	48bc      	ldr	r0, [pc, #752]	; (8000cdc <CAAF+0x30c>)
 80009ea:	f001 f8e9 	bl	8001bc0 <HAL_ADC_GetValue>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4bbb      	ldr	r3, [pc, #748]	; (8000ce0 <CAAF+0x310>)
 80009f4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80009f6:	48b9      	ldr	r0, [pc, #740]	; (8000cdc <CAAF+0x30c>)
 80009f8:	f001 f824 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[0]);
 80009fc:	4bb8      	ldr	r3, [pc, #736]	; (8000ce0 <CAAF+0x310>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	49b8      	ldr	r1, [pc, #736]	; (8000ce4 <CAAF+0x314>)
 8000a04:	48b8      	ldr	r0, [pc, #736]	; (8000ce8 <CAAF+0x318>)
 8000a06:	f009 f84b 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("VSENS_1 = ", 10);
 8000a0a:	210a      	movs	r1, #10
 8000a0c:	48b7      	ldr	r0, [pc, #732]	; (8000cec <CAAF+0x31c>)
 8000a0e:	f008 fbab 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a12:	2064      	movs	r0, #100	; 0x64
 8000a14:	f000 fedc 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000a18:	2108      	movs	r1, #8
 8000a1a:	48b3      	ldr	r0, [pc, #716]	; (8000ce8 <CAAF+0x318>)
 8000a1c:	f008 fba4 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a20:	2064      	movs	r0, #100	; 0x64
 8000a22:	f000 fed5 	bl	80017d0 <HAL_Delay>

	VSENS_2();
 8000a26:	f7ff fee9 	bl	80007fc <VSENS_2>
	HAL_ADC_Start(&hadc1);
 8000a2a:	48ac      	ldr	r0, [pc, #688]	; (8000cdc <CAAF+0x30c>)
 8000a2c:	f000 ff38 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a34:	48a9      	ldr	r0, [pc, #676]	; (8000cdc <CAAF+0x30c>)
 8000a36:	f001 f838 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 8000a3a:	48a8      	ldr	r0, [pc, #672]	; (8000cdc <CAAF+0x30c>)
 8000a3c:	f001 f8c0 	bl	8001bc0 <HAL_ADC_GetValue>
 8000a40:	4603      	mov	r3, r0
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4ba6      	ldr	r3, [pc, #664]	; (8000ce0 <CAAF+0x310>)
 8000a46:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 8000a48:	48a4      	ldr	r0, [pc, #656]	; (8000cdc <CAAF+0x30c>)
 8000a4a:	f000 fffb 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[1]);
 8000a4e:	4ba4      	ldr	r3, [pc, #656]	; (8000ce0 <CAAF+0x310>)
 8000a50:	885b      	ldrh	r3, [r3, #2]
 8000a52:	461a      	mov	r2, r3
 8000a54:	49a3      	ldr	r1, [pc, #652]	; (8000ce4 <CAAF+0x314>)
 8000a56:	48a4      	ldr	r0, [pc, #656]	; (8000ce8 <CAAF+0x318>)
 8000a58:	f009 f822 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("VSENS_2 = ", 10);
 8000a5c:	210a      	movs	r1, #10
 8000a5e:	48a4      	ldr	r0, [pc, #656]	; (8000cf0 <CAAF+0x320>)
 8000a60:	f008 fb82 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a64:	2064      	movs	r0, #100	; 0x64
 8000a66:	f000 feb3 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	489e      	ldr	r0, [pc, #632]	; (8000ce8 <CAAF+0x318>)
 8000a6e:	f008 fb7b 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a72:	2064      	movs	r0, #100	; 0x64
 8000a74:	f000 feac 	bl	80017d0 <HAL_Delay>

	VSENS_3();
 8000a78:	f7ff feda 	bl	8000830 <VSENS_3>
	HAL_ADC_Start(&hadc1);
 8000a7c:	4897      	ldr	r0, [pc, #604]	; (8000cdc <CAAF+0x30c>)
 8000a7e:	f000 ff0f 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000a82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a86:	4895      	ldr	r0, [pc, #596]	; (8000cdc <CAAF+0x30c>)
 8000a88:	f001 f80f 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8000a8c:	4893      	ldr	r0, [pc, #588]	; (8000cdc <CAAF+0x30c>)
 8000a8e:	f001 f897 	bl	8001bc0 <HAL_ADC_GetValue>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b92      	ldr	r3, [pc, #584]	; (8000ce0 <CAAF+0x310>)
 8000a98:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 8000a9a:	4890      	ldr	r0, [pc, #576]	; (8000cdc <CAAF+0x30c>)
 8000a9c:	f000 ffd2 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[2]);
 8000aa0:	4b8f      	ldr	r3, [pc, #572]	; (8000ce0 <CAAF+0x310>)
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	498f      	ldr	r1, [pc, #572]	; (8000ce4 <CAAF+0x314>)
 8000aa8:	488f      	ldr	r0, [pc, #572]	; (8000ce8 <CAAF+0x318>)
 8000aaa:	f008 fff9 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("VSENS_3 = ", 10);
 8000aae:	210a      	movs	r1, #10
 8000ab0:	4890      	ldr	r0, [pc, #576]	; (8000cf4 <CAAF+0x324>)
 8000ab2:	f008 fb59 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000ab6:	2064      	movs	r0, #100	; 0x64
 8000ab8:	f000 fe8a 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000abc:	2108      	movs	r1, #8
 8000abe:	488a      	ldr	r0, [pc, #552]	; (8000ce8 <CAAF+0x318>)
 8000ac0:	f008 fb52 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000ac4:	2064      	movs	r0, #100	; 0x64
 8000ac6:	f000 fe83 	bl	80017d0 <HAL_Delay>

	TEMP_NTC();
 8000aca:	f7ff fecb 	bl	8000864 <TEMP_NTC>
	HAL_ADC_Start(&hadc1);
 8000ace:	4883      	ldr	r0, [pc, #524]	; (8000cdc <CAAF+0x30c>)
 8000ad0:	f000 fee6 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000ad4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ad8:	4880      	ldr	r0, [pc, #512]	; (8000cdc <CAAF+0x30c>)
 8000ada:	f000 ffe6 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[3] = HAL_ADC_GetValue(&hadc1);
 8000ade:	487f      	ldr	r0, [pc, #508]	; (8000cdc <CAAF+0x30c>)
 8000ae0:	f001 f86e 	bl	8001bc0 <HAL_ADC_GetValue>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b7d      	ldr	r3, [pc, #500]	; (8000ce0 <CAAF+0x310>)
 8000aea:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(&hadc1);
 8000aec:	487b      	ldr	r0, [pc, #492]	; (8000cdc <CAAF+0x30c>)
 8000aee:	f000 ffa9 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[3]);
 8000af2:	4b7b      	ldr	r3, [pc, #492]	; (8000ce0 <CAAF+0x310>)
 8000af4:	88db      	ldrh	r3, [r3, #6]
 8000af6:	461a      	mov	r2, r3
 8000af8:	497a      	ldr	r1, [pc, #488]	; (8000ce4 <CAAF+0x314>)
 8000afa:	487b      	ldr	r0, [pc, #492]	; (8000ce8 <CAAF+0x318>)
 8000afc:	f008 ffd0 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("TEMP_NTC = ",11);
 8000b00:	210b      	movs	r1, #11
 8000b02:	487d      	ldr	r0, [pc, #500]	; (8000cf8 <CAAF+0x328>)
 8000b04:	f008 fb30 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f000 fe61 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000b0e:	2108      	movs	r1, #8
 8000b10:	4875      	ldr	r0, [pc, #468]	; (8000ce8 <CAAF+0x318>)
 8000b12:	f008 fb29 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f000 fe5a 	bl	80017d0 <HAL_Delay>

	ADC_EXT1();
 8000b1c:	f7ff febc 	bl	8000898 <ADC_EXT1>
	HAL_ADC_Start(&hadc1);
 8000b20:	486e      	ldr	r0, [pc, #440]	; (8000cdc <CAAF+0x30c>)
 8000b22:	f000 febd 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000b26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b2a:	486c      	ldr	r0, [pc, #432]	; (8000cdc <CAAF+0x30c>)
 8000b2c:	f000 ffbd 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[4] = HAL_ADC_GetValue(&hadc1);
 8000b30:	486a      	ldr	r0, [pc, #424]	; (8000cdc <CAAF+0x30c>)
 8000b32:	f001 f845 	bl	8001bc0 <HAL_ADC_GetValue>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b69      	ldr	r3, [pc, #420]	; (8000ce0 <CAAF+0x310>)
 8000b3c:	811a      	strh	r2, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 8000b3e:	4867      	ldr	r0, [pc, #412]	; (8000cdc <CAAF+0x30c>)
 8000b40:	f000 ff80 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[4]);
 8000b44:	4b66      	ldr	r3, [pc, #408]	; (8000ce0 <CAAF+0x310>)
 8000b46:	891b      	ldrh	r3, [r3, #8]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4966      	ldr	r1, [pc, #408]	; (8000ce4 <CAAF+0x314>)
 8000b4c:	4866      	ldr	r0, [pc, #408]	; (8000ce8 <CAAF+0x318>)
 8000b4e:	f008 ffa7 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("ADC_EXT1 = ", 11);
 8000b52:	210b      	movs	r1, #11
 8000b54:	4869      	ldr	r0, [pc, #420]	; (8000cfc <CAAF+0x32c>)
 8000b56:	f008 fb07 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f000 fe38 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000b60:	2108      	movs	r1, #8
 8000b62:	4861      	ldr	r0, [pc, #388]	; (8000ce8 <CAAF+0x318>)
 8000b64:	f008 fb00 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b68:	2064      	movs	r0, #100	; 0x64
 8000b6a:	f000 fe31 	bl	80017d0 <HAL_Delay>

	ADC_EXT2();
 8000b6e:	f7ff fead 	bl	80008cc <ADC_EXT2>
	HAL_ADC_Start(&hadc1);
 8000b72:	485a      	ldr	r0, [pc, #360]	; (8000cdc <CAAF+0x30c>)
 8000b74:	f000 fe94 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b7c:	4857      	ldr	r0, [pc, #348]	; (8000cdc <CAAF+0x30c>)
 8000b7e:	f000 ff94 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[5] = HAL_ADC_GetValue(&hadc1);
 8000b82:	4856      	ldr	r0, [pc, #344]	; (8000cdc <CAAF+0x30c>)
 8000b84:	f001 f81c 	bl	8001bc0 <HAL_ADC_GetValue>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b54      	ldr	r3, [pc, #336]	; (8000ce0 <CAAF+0x310>)
 8000b8e:	815a      	strh	r2, [r3, #10]
	HAL_ADC_Stop(&hadc1);
 8000b90:	4852      	ldr	r0, [pc, #328]	; (8000cdc <CAAF+0x30c>)
 8000b92:	f000 ff57 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[5]);
 8000b96:	4b52      	ldr	r3, [pc, #328]	; (8000ce0 <CAAF+0x310>)
 8000b98:	895b      	ldrh	r3, [r3, #10]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4951      	ldr	r1, [pc, #324]	; (8000ce4 <CAAF+0x314>)
 8000b9e:	4852      	ldr	r0, [pc, #328]	; (8000ce8 <CAAF+0x318>)
 8000ba0:	f008 ff7e 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("ADC_EXT2 = ", 11);
 8000ba4:	210b      	movs	r1, #11
 8000ba6:	4856      	ldr	r0, [pc, #344]	; (8000d00 <CAAF+0x330>)
 8000ba8:	f008 fade 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000bac:	2064      	movs	r0, #100	; 0x64
 8000bae:	f000 fe0f 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	484c      	ldr	r0, [pc, #304]	; (8000ce8 <CAAF+0x318>)
 8000bb6:	f008 fad7 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000bba:	2064      	movs	r0, #100	; 0x64
 8000bbc:	f000 fe08 	bl	80017d0 <HAL_Delay>

	CURREN_1();
 8000bc0:	f7ff fe9e 	bl	8000900 <CURREN_1>
	HAL_ADC_Start(&hadc1);
 8000bc4:	4845      	ldr	r0, [pc, #276]	; (8000cdc <CAAF+0x30c>)
 8000bc6:	f000 fe6b 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000bca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bce:	4843      	ldr	r0, [pc, #268]	; (8000cdc <CAAF+0x30c>)
 8000bd0:	f000 ff6b 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[6] = HAL_ADC_GetValue(&hadc1);
 8000bd4:	4841      	ldr	r0, [pc, #260]	; (8000cdc <CAAF+0x30c>)
 8000bd6:	f000 fff3 	bl	8001bc0 <HAL_ADC_GetValue>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	4b40      	ldr	r3, [pc, #256]	; (8000ce0 <CAAF+0x310>)
 8000be0:	819a      	strh	r2, [r3, #12]
	HAL_ADC_Stop(&hadc1);
 8000be2:	483e      	ldr	r0, [pc, #248]	; (8000cdc <CAAF+0x30c>)
 8000be4:	f000 ff2e 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[6]);
 8000be8:	4b3d      	ldr	r3, [pc, #244]	; (8000ce0 <CAAF+0x310>)
 8000bea:	899b      	ldrh	r3, [r3, #12]
 8000bec:	461a      	mov	r2, r3
 8000bee:	493d      	ldr	r1, [pc, #244]	; (8000ce4 <CAAF+0x314>)
 8000bf0:	483d      	ldr	r0, [pc, #244]	; (8000ce8 <CAAF+0x318>)
 8000bf2:	f008 ff55 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("CURREN_1 = ", 11);
 8000bf6:	210b      	movs	r1, #11
 8000bf8:	4842      	ldr	r0, [pc, #264]	; (8000d04 <CAAF+0x334>)
 8000bfa:	f008 fab5 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f000 fde6 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000c04:	2108      	movs	r1, #8
 8000c06:	4838      	ldr	r0, [pc, #224]	; (8000ce8 <CAAF+0x318>)
 8000c08:	f008 faae 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f000 fddf 	bl	80017d0 <HAL_Delay>

	CURREN_2();
 8000c12:	f7ff fe8f 	bl	8000934 <CURREN_2>
	HAL_ADC_Start(&hadc1);
 8000c16:	4831      	ldr	r0, [pc, #196]	; (8000cdc <CAAF+0x30c>)
 8000c18:	f000 fe42 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c20:	482e      	ldr	r0, [pc, #184]	; (8000cdc <CAAF+0x30c>)
 8000c22:	f000 ff42 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[7] = HAL_ADC_GetValue(&hadc1);
 8000c26:	482d      	ldr	r0, [pc, #180]	; (8000cdc <CAAF+0x30c>)
 8000c28:	f000 ffca 	bl	8001bc0 <HAL_ADC_GetValue>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <CAAF+0x310>)
 8000c32:	81da      	strh	r2, [r3, #14]
	HAL_ADC_Stop(&hadc1);
 8000c34:	4829      	ldr	r0, [pc, #164]	; (8000cdc <CAAF+0x30c>)
 8000c36:	f000 ff05 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[7]);
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <CAAF+0x310>)
 8000c3c:	89db      	ldrh	r3, [r3, #14]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4928      	ldr	r1, [pc, #160]	; (8000ce4 <CAAF+0x314>)
 8000c42:	4829      	ldr	r0, [pc, #164]	; (8000ce8 <CAAF+0x318>)
 8000c44:	f008 ff2c 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("CURREN_2 = ", 11);
 8000c48:	210b      	movs	r1, #11
 8000c4a:	482f      	ldr	r0, [pc, #188]	; (8000d08 <CAAF+0x338>)
 8000c4c:	f008 fa8c 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c50:	2064      	movs	r0, #100	; 0x64
 8000c52:	f000 fdbd 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000c56:	2108      	movs	r1, #8
 8000c58:	4823      	ldr	r0, [pc, #140]	; (8000ce8 <CAAF+0x318>)
 8000c5a:	f008 fa85 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c5e:	2064      	movs	r0, #100	; 0x64
 8000c60:	f000 fdb6 	bl	80017d0 <HAL_Delay>


	CURREN_3();
 8000c64:	f7ff fe80 	bl	8000968 <CURREN_3>
	HAL_ADC_Start(&hadc1);
 8000c68:	481c      	ldr	r0, [pc, #112]	; (8000cdc <CAAF+0x30c>)
 8000c6a:	f000 fe19 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000c6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c72:	481a      	ldr	r0, [pc, #104]	; (8000cdc <CAAF+0x30c>)
 8000c74:	f000 ff19 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[8] = HAL_ADC_GetValue(&hadc1);
 8000c78:	4818      	ldr	r0, [pc, #96]	; (8000cdc <CAAF+0x30c>)
 8000c7a:	f000 ffa1 	bl	8001bc0 <HAL_ADC_GetValue>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <CAAF+0x310>)
 8000c84:	821a      	strh	r2, [r3, #16]
	HAL_ADC_Stop(&hadc1);
 8000c86:	4815      	ldr	r0, [pc, #84]	; (8000cdc <CAAF+0x30c>)
 8000c88:	f000 fedc 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[8]);
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <CAAF+0x310>)
 8000c8e:	8a1b      	ldrh	r3, [r3, #16]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4914      	ldr	r1, [pc, #80]	; (8000ce4 <CAAF+0x314>)
 8000c94:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <CAAF+0x318>)
 8000c96:	f008 ff03 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("CURREN_3 = ", 11);
 8000c9a:	210b      	movs	r1, #11
 8000c9c:	481b      	ldr	r0, [pc, #108]	; (8000d0c <CAAF+0x33c>)
 8000c9e:	f008 fa63 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000ca2:	2064      	movs	r0, #100	; 0x64
 8000ca4:	f000 fd94 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000ca8:	2108      	movs	r1, #8
 8000caa:	480f      	ldr	r0, [pc, #60]	; (8000ce8 <CAAF+0x318>)
 8000cac:	f008 fa5c 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000cb0:	2064      	movs	r0, #100	; 0x64
 8000cb2:	f000 fd8d 	bl	80017d0 <HAL_Delay>

	TEMP_MOTOR();
 8000cb6:	f7ff fe71 	bl	800099c <TEMP_MOTOR>
	HAL_ADC_Start(&hadc1);
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <CAAF+0x30c>)
 8000cbc:	f000 fdf0 	bl	80018a0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <CAAF+0x30c>)
 8000cc6:	f000 fef0 	bl	8001aaa <HAL_ADC_PollForConversion>
	ADC_VAL[9] = HAL_ADC_GetValue(&hadc1);
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <CAAF+0x30c>)
 8000ccc:	f000 ff78 	bl	8001bc0 <HAL_ADC_GetValue>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b02      	ldr	r3, [pc, #8]	; (8000ce0 <CAAF+0x310>)
 8000cd6:	825a      	strh	r2, [r3, #18]
 8000cd8:	e01a      	b.n	8000d10 <CAAF+0x340>
 8000cda:	bf00      	nop
 8000cdc:	20000780 	.word	0x20000780
 8000ce0:	200008a8 	.word	0x200008a8
 8000ce4:	0800a394 	.word	0x0800a394
 8000ce8:	200008bc 	.word	0x200008bc
 8000cec:	0800a39c 	.word	0x0800a39c
 8000cf0:	0800a3a8 	.word	0x0800a3a8
 8000cf4:	0800a3b4 	.word	0x0800a3b4
 8000cf8:	0800a3c0 	.word	0x0800a3c0
 8000cfc:	0800a3cc 	.word	0x0800a3cc
 8000d00:	0800a3d8 	.word	0x0800a3d8
 8000d04:	0800a3e4 	.word	0x0800a3e4
 8000d08:	0800a3f0 	.word	0x0800a3f0
 8000d0c:	0800a3fc 	.word	0x0800a3fc
	HAL_ADC_Stop(&hadc1);
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <CAAF+0x374>)
 8000d12:	f000 fe97 	bl	8001a44 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[9]);
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <CAAF+0x378>)
 8000d18:	8a5b      	ldrh	r3, [r3, #18]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	490b      	ldr	r1, [pc, #44]	; (8000d4c <CAAF+0x37c>)
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <CAAF+0x380>)
 8000d20:	f008 febe 	bl	8009aa0 <siprintf>
	CDC_Transmit_FS("TEMP_MOTOR = ", 13);
 8000d24:	210d      	movs	r1, #13
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <CAAF+0x384>)
 8000d28:	f008 fa1e 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000d2c:	2064      	movs	r0, #100	; 0x64
 8000d2e:	f000 fd4f 	bl	80017d0 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000d32:	2108      	movs	r1, #8
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <CAAF+0x380>)
 8000d36:	f008 fa17 	bl	8009168 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000d3a:	2064      	movs	r0, #100	; 0x64
 8000d3c:	f000 fd48 	bl	80017d0 <HAL_Delay>

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000780 	.word	0x20000780
 8000d48:	200008a8 	.word	0x200008a8
 8000d4c:	0800a394 	.word	0x0800a394
 8000d50:	200008bc 	.word	0x200008bc
 8000d54:	0800a408 	.word	0x0800a408

08000d58 <IFunction>:
void IFunction()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	if (buffer[0] == '1')
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <IFunction+0x68>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b31      	cmp	r3, #49	; 0x31
 8000d62:	d101      	bne.n	8000d68 <IFunction+0x10>
	{
		ledBlink();
 8000d64:	f7ff fc0e 	bl	8000584 <ledBlink>
	}
	if (buffer[0] == '2')
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <IFunction+0x68>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b32      	cmp	r3, #50	; 0x32
 8000d6e:	d101      	bne.n	8000d74 <IFunction+0x1c>
	{
		USBTest();
 8000d70:	f7ff fc28 	bl	80005c4 <USBTest>
	}
	if (buffer[0] == '3')
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <IFunction+0x68>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b33      	cmp	r3, #51	; 0x33
 8000d7a:	d101      	bne.n	8000d80 <IFunction+0x28>
	{
		CAAF();
 8000d7c:	f7ff fe28 	bl	80009d0 <CAAF>
	}
	if (buffer[0] == '4')
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <IFunction+0x68>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b34      	cmp	r3, #52	; 0x34
 8000d86:	d101      	bne.n	8000d8c <IFunction+0x34>
	{
		DRV8301_Enable();
 8000d88:	f7ff fc34 	bl	80005f4 <DRV8301_Enable>
	}
	if (buffer[0] == '5')
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <IFunction+0x68>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b35      	cmp	r3, #53	; 0x35
 8000d92:	d101      	bne.n	8000d98 <IFunction+0x40>
	{
		DRV8301_Disable();
 8000d94:	f7ff fc3a 	bl	800060c <DRV8301_Disable>
	}
	if (buffer[0] == '6')
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <IFunction+0x68>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b36      	cmp	r3, #54	; 0x36
 8000d9e:	d101      	bne.n	8000da4 <IFunction+0x4c>
	{
		DRV8301_NormalPWM();
 8000da0:	f7ff fc40 	bl	8000624 <DRV8301_NormalPWM>
	}
	if (buffer[0] == '7')
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <IFunction+0x68>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b37      	cmp	r3, #55	; 0x37
 8000daa:	d101      	bne.n	8000db0 <IFunction+0x58>
	{
		DRV8301_CommutationPWM();
 8000dac:	f7ff fca8 	bl	8000700 <DRV8301_CommutationPWM>
	}
	if (buffer[0] == '8')
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <IFunction+0x68>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b38      	cmp	r3, #56	; 0x38
 8000db6:	d101      	bne.n	8000dbc <IFunction+0x64>
	{
		DRV8301_PWM_Stop();
 8000db8:	f7ff fc66 	bl	8000688 <DRV8301_PWM_Stop>
	}
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000868 	.word	0x20000868

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc8:	f000 fc90 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dcc:	f000 f812 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd0:	f000 fa4c 	bl	800126c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dd4:	f000 f876 	bl	8000ec4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000dd8:	f000 f944 	bl	8001064 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ddc:	f000 f9fa 	bl	80011d4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000de0:	f008 f8fa 	bl	8008fd8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <main+0x2c>)
 8000de6:	f003 faf5 	bl	80043d4 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  IFunction();
 8000dea:	f7ff ffb5 	bl	8000d58 <IFunction>
 8000dee:	e7fc      	b.n	8000dea <main+0x26>
 8000df0:	20000810 	.word	0x20000810

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	2230      	movs	r2, #48	; 0x30
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f008 fe44 	bl	8009a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <SystemClock_Config+0xc8>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <SystemClock_Config+0xc8>)
 8000e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <SystemClock_Config+0xc8>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a20      	ldr	r2, [pc, #128]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <SystemClock_Config+0xcc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e58:	2310      	movs	r3, #16
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e64:	2310      	movs	r3, #16
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e68:	23c0      	movs	r3, #192	; 0xc0
 8000e6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e70:	2304      	movs	r3, #4
 8000e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fe2b 	bl	8003ad4 <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e84:	f000 fa5c 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e88:	230f      	movs	r3, #15
 8000e8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 f88e 	bl	8003fc4 <HAL_RCC_ClockConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000eae:	f000 fa47 	bl	8001340 <Error_Handler>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3750      	adds	r7, #80	; 0x50
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40007000 	.word	0x40007000

08000ec4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed6:	4b60      	ldr	r3, [pc, #384]	; (8001058 <MX_ADC1_Init+0x194>)
 8000ed8:	4a60      	ldr	r2, [pc, #384]	; (800105c <MX_ADC1_Init+0x198>)
 8000eda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000edc:	4b5e      	ldr	r3, [pc, #376]	; (8001058 <MX_ADC1_Init+0x194>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <MX_ADC1_Init+0x194>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ee8:	4b5b      	ldr	r3, [pc, #364]	; (8001058 <MX_ADC1_Init+0x194>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eee:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <MX_ADC1_Init+0x194>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef4:	4b58      	ldr	r3, [pc, #352]	; (8001058 <MX_ADC1_Init+0x194>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efc:	4b56      	ldr	r3, [pc, #344]	; (8001058 <MX_ADC1_Init+0x194>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f02:	4b55      	ldr	r3, [pc, #340]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f04:	4a56      	ldr	r2, [pc, #344]	; (8001060 <MX_ADC1_Init+0x19c>)
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f08:	4b53      	ldr	r3, [pc, #332]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f0e:	4b52      	ldr	r3, [pc, #328]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f14:	4b50      	ldr	r3, [pc, #320]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1c:	4b4e      	ldr	r3, [pc, #312]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f22:	484d      	ldr	r0, [pc, #308]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f24:	f000 fc78 	bl	8001818 <HAL_ADC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f2e:	f000 fa07 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	4619      	mov	r1, r3
 8000f42:	4845      	ldr	r0, [pc, #276]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f44:	f000 fe4a 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f4e:	f000 f9f7 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f52:	2301      	movs	r3, #1
 8000f54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	483e      	ldr	r0, [pc, #248]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f60:	f000 fe3c 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f6a:	f000 f9e9 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f72:	2303      	movs	r3, #3
 8000f74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4837      	ldr	r0, [pc, #220]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f7c:	f000 fe2e 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f86:	f000 f9db 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4830      	ldr	r0, [pc, #192]	; (8001058 <MX_ADC1_Init+0x194>)
 8000f98:	f000 fe20 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fa2:	f000 f9cd 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000faa:	2305      	movs	r3, #5
 8000fac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4829      	ldr	r0, [pc, #164]	; (8001058 <MX_ADC1_Init+0x194>)
 8000fb4:	f000 fe12 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000fbe:	f000 f9bf 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4822      	ldr	r0, [pc, #136]	; (8001058 <MX_ADC1_Init+0x194>)
 8000fd0:	f000 fe04 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000fda:	f000 f9b1 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fde:	230a      	movs	r3, #10
 8000fe0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000fe2:	2307      	movs	r3, #7
 8000fe4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <MX_ADC1_Init+0x194>)
 8000fec:	f000 fdf6 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000ff6:	f000 f9a3 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ffa:	230b      	movs	r3, #11
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000ffe:	2308      	movs	r3, #8
 8001000:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_ADC1_Init+0x194>)
 8001008:	f000 fde8 	bl	8001bdc <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001012:	f000 f995 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001016:	230c      	movs	r3, #12
 8001018:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800101a:	2309      	movs	r3, #9
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC1_Init+0x194>)
 8001024:	f000 fdda 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800102e:	f000 f987 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001032:	230e      	movs	r3, #14
 8001034:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001036:	230a      	movs	r3, #10
 8001038:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_ADC1_Init+0x194>)
 8001040:	f000 fdcc 	bl	8001bdc <HAL_ADC_ConfigChannel>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800104a:	f000 f979 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000780 	.word	0x20000780
 800105c:	40012000 	.word	0x40012000
 8001060:	0f000001 	.word	0x0f000001

08001064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b096      	sub	sp, #88	; 0x58
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2220      	movs	r2, #32
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f008 fcf7 	bl	8009a90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a2:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <MX_TIM1_Init+0x168>)
 80010a4:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <MX_TIM1_Init+0x16c>)
 80010a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 80010a8:	4b48      	ldr	r3, [pc, #288]	; (80011cc <MX_TIM1_Init+0x168>)
 80010aa:	220d      	movs	r2, #13
 80010ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b47      	ldr	r3, [pc, #284]	; (80011cc <MX_TIM1_Init+0x168>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 102;
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <MX_TIM1_Init+0x168>)
 80010b6:	2266      	movs	r2, #102	; 0x66
 80010b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b44      	ldr	r3, [pc, #272]	; (80011cc <MX_TIM1_Init+0x168>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c0:	4b42      	ldr	r3, [pc, #264]	; (80011cc <MX_TIM1_Init+0x168>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c6:	4b41      	ldr	r3, [pc, #260]	; (80011cc <MX_TIM1_Init+0x168>)
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010cc:	483f      	ldr	r0, [pc, #252]	; (80011cc <MX_TIM1_Init+0x168>)
 80010ce:	f003 f931 	bl	8004334 <HAL_TIM_Base_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80010d8:	f000 f932 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e6:	4619      	mov	r1, r3
 80010e8:	4838      	ldr	r0, [pc, #224]	; (80011cc <MX_TIM1_Init+0x168>)
 80010ea:	f003 fd37 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80010f4:	f000 f924 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010f8:	4834      	ldr	r0, [pc, #208]	; (80011cc <MX_TIM1_Init+0x168>)
 80010fa:	f003 f9d3 	bl	80044a4 <HAL_TIM_PWM_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001104:	f000 f91c 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001110:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001114:	4619      	mov	r1, r3
 8001116:	482d      	ldr	r0, [pc, #180]	; (80011cc <MX_TIM1_Init+0x168>)
 8001118:	f004 fa42 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001122:	f000 f90d 	bl	8001340 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001126:	2360      	movs	r3, #96	; 0x60
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800113e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	481f      	ldr	r0, [pc, #124]	; (80011cc <MX_TIM1_Init+0x168>)
 800114e:	f003 fc43 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001158:	f000 f8f2 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	2204      	movs	r2, #4
 8001162:	4619      	mov	r1, r3
 8001164:	4819      	ldr	r0, [pc, #100]	; (80011cc <MX_TIM1_Init+0x168>)
 8001166:	f003 fc37 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001170:	f000 f8e6 	bl	8001340 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	2208      	movs	r2, #8
 800117a:	4619      	mov	r1, r3
 800117c:	4813      	ldr	r0, [pc, #76]	; (80011cc <MX_TIM1_Init+0x168>)
 800117e:	f003 fc2b 	bl	80049d8 <HAL_TIM_PWM_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001188:	f000 f8da 	bl	8001340 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8001198:	2314      	movs	r3, #20
 800119a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM1_Init+0x168>)
 80011b0:	f004 fa72 	bl	8005698 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80011ba:	f000 f8c1 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM1_Init+0x168>)
 80011c0:	f000 f988 	bl	80014d4 <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3758      	adds	r7, #88	; 0x58
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200007c8 	.word	0x200007c8
 80011d0:	40010000 	.word	0x40010000

080011d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_TIM2_Init+0x94>)
 80011f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_TIM2_Init+0x94>)
 80011fa:	220e      	movs	r2, #14
 80011fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM2_Init+0x94>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_TIM2_Init+0x94>)
 8001206:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800120a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <MX_TIM2_Init+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_TIM2_Init+0x94>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001218:	4813      	ldr	r0, [pc, #76]	; (8001268 <MX_TIM2_Init+0x94>)
 800121a:	f003 f88b 	bl	8004334 <HAL_TIM_Base_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001224:	f000 f88c 	bl	8001340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <MX_TIM2_Init+0x94>)
 8001236:	f003 fc91 	bl	8004b5c <HAL_TIM_ConfigClockSource>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001240:	f000 f87e 	bl	8001340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_TIM2_Init+0x94>)
 8001252:	f004 f9a5 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800125c:	f000 f870 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000810 	.word	0x20000810

0800126c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <MX_GPIO_Init+0xcc>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <MX_GPIO_Init+0xcc>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <MX_GPIO_Init+0xcc>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <MX_GPIO_Init+0xcc>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a24      	ldr	r2, [pc, #144]	; (8001338 <MX_GPIO_Init+0xcc>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <MX_GPIO_Init+0xcc>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <MX_GPIO_Init+0xcc>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <MX_GPIO_Init+0xcc>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <MX_GPIO_Init+0xcc>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_GPIO_Init+0xcc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a16      	ldr	r2, [pc, #88]	; (8001338 <MX_GPIO_Init+0xcc>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_GPIO_Init+0xcc>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2123      	movs	r1, #35	; 0x23
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <MX_GPIO_Init+0xd0>)
 80012f8:	f001 f93c 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin EN_GATE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin;
 80012fc:	2323      	movs	r3, #35	; 0x23
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	480a      	ldr	r0, [pc, #40]	; (800133c <MX_GPIO_Init+0xd0>)
 8001314:	f000 ff92 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_GPIO_Init+0xd0>)
 800132c:	f000 ff86 	bl	800223c <HAL_GPIO_Init>

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_MspInit+0x4c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a24      	ldr	r2, [pc, #144]	; (800144c <HAL_ADC_MspInit+0xb0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d141      	bne.n	8001442 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_ADC_MspInit+0xb4>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <HAL_ADC_MspInit+0xb4>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_ADC_MspInit+0xb4>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <HAL_ADC_MspInit+0xb4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <HAL_ADC_MspInit+0xb4>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_ADC_MspInit+0xb4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_ADC_MspInit+0xb4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_ADC_MspInit+0xb4>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_ADC_MspInit+0xb4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = CURREN_1_Pin|CURREN_2_Pin|CURREN_3_Pin|TEMP_MOTOR_Pin;
 8001412:	2317      	movs	r3, #23
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	480b      	ldr	r0, [pc, #44]	; (8001454 <HAL_ADC_MspInit+0xb8>)
 8001426:	f000 ff09 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VSENS_1_Pin|VSENS_2_Pin|VSENS_3_Pin|TEMP_NTC_Pin
 800142a:	236f      	movs	r3, #111	; 0x6f
 800142c:	617b      	str	r3, [r7, #20]
                          |ADC_EXT1_Pin|ADC_EXT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <HAL_ADC_MspInit+0xbc>)
 800143e:	f000 fefd 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020800 	.word	0x40020800
 8001458:	40020000 	.word	0x40020000

0800145c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a18      	ldr	r2, [pc, #96]	; (80014cc <HAL_TIM_Base_MspInit+0x70>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10e      	bne.n	800148c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_TIM_Base_MspInit+0x74>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a16      	ldr	r2, [pc, #88]	; (80014d0 <HAL_TIM_Base_MspInit+0x74>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_TIM_Base_MspInit+0x74>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800148a:	e01a      	b.n	80014c2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001494:	d115      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_TIM_Base_MspInit+0x74>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <HAL_TIM_Base_MspInit+0x74>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_TIM_Base_MspInit+0x74>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	201c      	movs	r0, #28
 80014b8:	f000 fe89 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014bc:	201c      	movs	r0, #28
 80014be:	f000 fea2 	bl	8002206 <HAL_NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40010000 	.word	0x40010000
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_TIM_MspPostInit+0xa8>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d13d      	bne.n	8001572 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_TIM_MspPostInit+0xac>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a20      	ldr	r2, [pc, #128]	; (8001580 <HAL_TIM_MspPostInit+0xac>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_TIM_MspPostInit+0xac>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_TIM_MspPostInit+0xac>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_TIM_MspPostInit+0xac>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_TIM_MspPostInit+0xac>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 800152e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001540:	2301      	movs	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	480e      	ldr	r0, [pc, #56]	; (8001584 <HAL_TIM_MspPostInit+0xb0>)
 800154c:	f000 fe76 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 8001550:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001562:	2301      	movs	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4806      	ldr	r0, [pc, #24]	; (8001588 <HAL_TIM_MspPostInit+0xb4>)
 800156e:	f000 fe65 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40010000 	.word	0x40010000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400
 8001588:	40020000 	.word	0x40020000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 f8da 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM2_IRQHandler+0x10>)
 80015e6:	f003 f8ef 	bl	80047c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000810 	.word	0x20000810

080015f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <OTG_FS_IRQHandler+0x10>)
 80015fa:	f001 f93e 	bl	800287a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20001dc4 	.word	0x20001dc4

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f008 f9f2 	bl	8009a20 <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20020000 	.word	0x20020000
 8001668:	00000400 	.word	0x00000400
 800166c:	200008dc 	.word	0x200008dc
 8001670:	20002500 	.word	0x20002500

08001674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <SystemInit+0x20>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <SystemInit+0x20>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800169e:	490e      	ldr	r1, [pc, #56]	; (80016d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b4:	4c0b      	ldr	r4, [pc, #44]	; (80016e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c2:	f7ff ffd7 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f008 f9b1 	bl	8009a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ca:	f7ff fb7b 	bl	8000dc4 <main>
  bx  lr    
 80016ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 80016dc:	0800a4b4 	.word	0x0800a4b4
  ldr r2, =_sbss
 80016e0:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 80016e4:	20002500 	.word	0x20002500

080016e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC_IRQHandler>
	...

080016ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <HAL_Init+0x40>)
 80016f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_Init+0x40>)
 8001702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_Init+0x40>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 fd4f 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171a:	200f      	movs	r0, #15
 800171c:	f000 f808 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff fe14 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x54>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x58>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	fbb3 f3f1 	udiv	r3, r3, r1
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fd67 	bl	8002222 <HAL_SYSTICK_Config>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00e      	b.n	800177c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d80a      	bhi.n	800177a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f000 fd2f 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <HAL_InitTick+0x5c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e000      	b.n	800177c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000600 	.word	0x20000600
 8001788:	20000608 	.word	0x20000608
 800178c:	20000604 	.word	0x20000604

08001790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x20>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x24>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a04      	ldr	r2, [pc, #16]	; (80017b4 <HAL_IncTick+0x24>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000608 	.word	0x20000608
 80017b4:	200008e0 	.word	0x200008e0

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_GetTick+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200008e0 	.word	0x200008e0

080017d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff ffee 	bl	80017b8 <HAL_GetTick>
 80017dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d005      	beq.n	80017f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_Delay+0x44>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f6:	bf00      	nop
 80017f8:	f7ff ffde 	bl	80017b8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	429a      	cmp	r2, r3
 8001806:	d8f7      	bhi.n	80017f8 <HAL_Delay+0x28>
  {
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000608 	.word	0x20000608

08001818 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e033      	b.n	8001896 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fdb0 	bl	800139c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800185e:	f023 0302 	bic.w	r3, r3, #2
 8001862:	f043 0202 	orr.w	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fad8 	bl	8001e20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f023 0303 	bic.w	r3, r3, #3
 800187e:	f043 0201 	orr.w	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
 8001886:	e001      	b.n	800188c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_Start+0x1a>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e0b2      	b.n	8001a20 <HAL_ADC_Start+0x180>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d018      	beq.n	8001902 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018e0:	4b52      	ldr	r3, [pc, #328]	; (8001a2c <HAL_ADC_Start+0x18c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a52      	ldr	r2, [pc, #328]	; (8001a30 <HAL_ADC_Start+0x190>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0c9a      	lsrs	r2, r3, #18
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018f4:	e002      	b.n	80018fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f9      	bne.n	80018f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b01      	cmp	r3, #1
 800190e:	d17a      	bne.n	8001a06 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800193a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194e:	d106      	bne.n	800195e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f023 0206 	bic.w	r2, r3, #6
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	645a      	str	r2, [r3, #68]	; 0x44
 800195c:	e002      	b.n	8001964 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_ADC_Start+0x194>)
 800196e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001978:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	2b00      	cmp	r3, #0
 8001984:	d12a      	bne.n	80019dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a2b      	ldr	r2, [pc, #172]	; (8001a38 <HAL_ADC_Start+0x198>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d015      	beq.n	80019bc <HAL_ADC_Start+0x11c>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a29      	ldr	r2, [pc, #164]	; (8001a3c <HAL_ADC_Start+0x19c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d105      	bne.n	80019a6 <HAL_ADC_Start+0x106>
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <HAL_ADC_Start+0x194>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <HAL_ADC_Start+0x1a0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d136      	bne.n	8001a1e <HAL_ADC_Start+0x17e>
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_ADC_Start+0x194>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d130      	bne.n	8001a1e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d129      	bne.n	8001a1e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	e020      	b.n	8001a1e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <HAL_ADC_Start+0x198>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d11b      	bne.n	8001a1e <HAL_ADC_Start+0x17e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d114      	bne.n	8001a1e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e00b      	b.n	8001a1e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f043 0210 	orr.w	r2, r3, #16
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	20000600 	.word	0x20000600
 8001a30:	431bde83 	.word	0x431bde83
 8001a34:	40012300 	.word	0x40012300
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	40012100 	.word	0x40012100
 8001a40:	40012200 	.word	0x40012200

08001a44 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Stop+0x16>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e021      	b.n	8001a9e <HAL_ADC_Stop+0x5a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d109      	bne.n	8001a94 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac6:	d113      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad6:	d10b      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f043 0220 	orr.w	r2, r3, #32
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e063      	b.n	8001bb8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001af0:	f7ff fe62 	bl	80017b8 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001af6:	e021      	b.n	8001b3c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afe:	d01d      	beq.n	8001b3c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_ADC_PollForConversion+0x6c>
 8001b06:	f7ff fe57 	bl	80017b8 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d212      	bcs.n	8001b3c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d00b      	beq.n	8001b3c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f043 0204 	orr.w	r2, r3, #4
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e03d      	b.n	8001bb8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d1d6      	bne.n	8001af8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f06f 0212 	mvn.w	r2, #18
 8001b52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d123      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11f      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d111      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x1c>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	e105      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x228>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d925      	bls.n	8001c54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68d9      	ldr	r1, [r3, #12]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b1e      	subs	r3, #30
 8001c1e:	2207      	movs	r2, #7
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43da      	mvns	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68d9      	ldr	r1, [r3, #12]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4603      	mov	r3, r0
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4403      	add	r3, r0
 8001c46:	3b1e      	subs	r3, #30
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	e022      	b.n	8001c9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6919      	ldr	r1, [r3, #16]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	2207      	movs	r2, #7
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	400a      	ands	r2, r1
 8001c76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6919      	ldr	r1, [r3, #16]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4403      	add	r3, r0
 8001c90:	409a      	lsls	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d824      	bhi.n	8001cec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3b05      	subs	r3, #5
 8001cb4:	221f      	movs	r2, #31
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b05      	subs	r3, #5
 8001cde:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cea:	e04c      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b0c      	cmp	r3, #12
 8001cf2:	d824      	bhi.n	8001d3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	3b23      	subs	r3, #35	; 0x23
 8001d06:	221f      	movs	r2, #31
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	400a      	ands	r2, r1
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b23      	subs	r3, #35	; 0x23
 8001d30:	fa00 f203 	lsl.w	r2, r0, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3c:	e023      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b41      	subs	r3, #65	; 0x41
 8001d50:	221f      	movs	r2, #31
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	3b41      	subs	r3, #65	; 0x41
 8001d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <HAL_ADC_ConfigChannel+0x234>)
 8001d88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <HAL_ADC_ConfigChannel+0x238>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d109      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1cc>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b12      	cmp	r3, #18
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_ADC_ConfigChannel+0x238>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d123      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x21e>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d003      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x1e6>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b11      	cmp	r3, #17
 8001dc0:	d11b      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d111      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_ADC_ConfigChannel+0x23c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <HAL_ADC_ConfigChannel+0x240>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	0c9a      	lsrs	r2, r3, #18
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dec:	e002      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f9      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40012300 	.word	0x40012300
 8001e14:	40012000 	.word	0x40012000
 8001e18:	20000600 	.word	0x20000600
 8001e1c:	431bde83 	.word	0x431bde83

08001e20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e28:	4b79      	ldr	r3, [pc, #484]	; (8002010 <ADC_Init+0x1f0>)
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	431a      	orrs	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	021a      	lsls	r2, r3, #8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6899      	ldr	r1, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	4a58      	ldr	r2, [pc, #352]	; (8002014 <ADC_Init+0x1f4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d022      	beq.n	8001efe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ec6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6899      	ldr	r1, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	e00f      	b.n	8001f1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0202 	bic.w	r2, r2, #2
 8001f2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6899      	ldr	r1, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7e1b      	ldrb	r3, [r3, #24]
 8001f38:	005a      	lsls	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01b      	beq.n	8001f84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	3b01      	subs	r3, #1
 8001f78:	035a      	lsls	r2, r3, #13
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	e007      	b.n	8001f94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	051a      	lsls	r2, r3, #20
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6899      	ldr	r1, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fd6:	025a      	lsls	r2, r3, #9
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	029a      	lsls	r2, r3, #10
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	609a      	str	r2, [r3, #8]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40012300 	.word	0x40012300
 8002014:	0f000001 	.word	0x0f000001

08002018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60d3      	str	r3, [r2, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0b      	blt.n	80020a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <__NVIC_EnableIRQ+0x38>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff8e 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff29 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff3e 	bl	8002060 <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff8e 	bl	800210c <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5d 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff31 	bl	800207c <__NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffa2 	bl	8002174 <SysTick_Config>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	e16b      	b.n	8002530 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	f040 815a 	bne.w	800252a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d005      	beq.n	800228e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228a:	2b02      	cmp	r3, #2
 800228c:	d130      	bne.n	80022f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c4:	2201      	movs	r2, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 0201 	and.w	r2, r3, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d017      	beq.n	800232c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d123      	bne.n	8002380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	220f      	movs	r2, #15
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	08da      	lsrs	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3208      	adds	r2, #8
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0203 	and.w	r2, r3, #3
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80b4 	beq.w	800252a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b60      	ldr	r3, [pc, #384]	; (8002548 <HAL_GPIO_Init+0x30c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a5f      	ldr	r2, [pc, #380]	; (8002548 <HAL_GPIO_Init+0x30c>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b5d      	ldr	r3, [pc, #372]	; (8002548 <HAL_GPIO_Init+0x30c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023de:	4a5b      	ldr	r2, [pc, #364]	; (800254c <HAL_GPIO_Init+0x310>)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_GPIO_Init+0x314>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d02b      	beq.n	8002462 <HAL_GPIO_Init+0x226>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a51      	ldr	r2, [pc, #324]	; (8002554 <HAL_GPIO_Init+0x318>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d025      	beq.n	800245e <HAL_GPIO_Init+0x222>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a50      	ldr	r2, [pc, #320]	; (8002558 <HAL_GPIO_Init+0x31c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01f      	beq.n	800245a <HAL_GPIO_Init+0x21e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4f      	ldr	r2, [pc, #316]	; (800255c <HAL_GPIO_Init+0x320>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d019      	beq.n	8002456 <HAL_GPIO_Init+0x21a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4e      	ldr	r2, [pc, #312]	; (8002560 <HAL_GPIO_Init+0x324>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x216>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4d      	ldr	r2, [pc, #308]	; (8002564 <HAL_GPIO_Init+0x328>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x212>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4c      	ldr	r2, [pc, #304]	; (8002568 <HAL_GPIO_Init+0x32c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x20e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4b      	ldr	r2, [pc, #300]	; (800256c <HAL_GPIO_Init+0x330>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x20a>
 8002442:	2307      	movs	r3, #7
 8002444:	e00e      	b.n	8002464 <HAL_GPIO_Init+0x228>
 8002446:	2308      	movs	r3, #8
 8002448:	e00c      	b.n	8002464 <HAL_GPIO_Init+0x228>
 800244a:	2306      	movs	r3, #6
 800244c:	e00a      	b.n	8002464 <HAL_GPIO_Init+0x228>
 800244e:	2305      	movs	r3, #5
 8002450:	e008      	b.n	8002464 <HAL_GPIO_Init+0x228>
 8002452:	2304      	movs	r3, #4
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x228>
 8002456:	2303      	movs	r3, #3
 8002458:	e004      	b.n	8002464 <HAL_GPIO_Init+0x228>
 800245a:	2302      	movs	r3, #2
 800245c:	e002      	b.n	8002464 <HAL_GPIO_Init+0x228>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_GPIO_Init+0x228>
 8002462:	2300      	movs	r3, #0
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	f002 0203 	and.w	r2, r2, #3
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	4093      	lsls	r3, r2
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002474:	4935      	ldr	r1, [pc, #212]	; (800254c <HAL_GPIO_Init+0x310>)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002482:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_GPIO_Init+0x334>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024a6:	4a32      	ldr	r2, [pc, #200]	; (8002570 <HAL_GPIO_Init+0x334>)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ac:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_GPIO_Init+0x334>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d0:	4a27      	ldr	r2, [pc, #156]	; (8002570 <HAL_GPIO_Init+0x334>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <HAL_GPIO_Init+0x334>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_GPIO_Init+0x334>)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_GPIO_Init+0x334>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002524:	4a12      	ldr	r2, [pc, #72]	; (8002570 <HAL_GPIO_Init+0x334>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3301      	adds	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b0f      	cmp	r3, #15
 8002534:	f67f ae90 	bls.w	8002258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	40013800 	.word	0x40013800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400
 8002558:	40020800 	.word	0x40020800
 800255c:	40020c00 	.word	0x40020c00
 8002560:	40021000 	.word	0x40021000
 8002564:	40021400 	.word	0x40021400
 8002568:	40021800 	.word	0x40021800
 800256c:	40021c00 	.word	0x40021c00
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002590:	e003      	b.n	800259a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b8:	887a      	ldrh	r2, [r7, #2]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	041a      	lsls	r2, r3, #16
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	400b      	ands	r3, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025dc:	b08f      	sub	sp, #60	; 0x3c
 80025de:	af0a      	add	r7, sp, #40	; 0x28
 80025e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e10f      	b.n	800280c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f006 fef6 	bl	80093f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2203      	movs	r2, #3
 8002610:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 f9d3 	bl	80059d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	687e      	ldr	r6, [r7, #4]
 8002638:	466d      	mov	r5, sp
 800263a:	f106 0410 	add.w	r4, r6, #16
 800263e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002646:	e894 0003 	ldmia.w	r4, {r0, r1}
 800264a:	e885 0003 	stmia.w	r5, {r0, r1}
 800264e:	1d33      	adds	r3, r6, #4
 8002650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f003 f8ab 	bl	80057ae <USB_CoreInit>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0d0      	b.n	800280c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f003 f9c1 	bl	80059f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	e04a      	b.n	8002712 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	333d      	adds	r3, #61	; 0x3d
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	333c      	adds	r3, #60	; 0x3c
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	b298      	uxth	r0, r3
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3344      	adds	r3, #68	; 0x44
 80026b8:	4602      	mov	r2, r0
 80026ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3340      	adds	r3, #64	; 0x40
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3348      	adds	r3, #72	; 0x48
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334c      	adds	r3, #76	; 0x4c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3354      	adds	r3, #84	; 0x54
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	3301      	adds	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d3af      	bcc.n	800267c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e044      	b.n	80027ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	3301      	adds	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d3b5      	bcc.n	8002722 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	687e      	ldr	r6, [r7, #4]
 80027be:	466d      	mov	r5, sp
 80027c0:	f106 0410 	add.w	r4, r6, #16
 80027c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80027d4:	1d33      	adds	r3, r6, #4
 80027d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d8:	6838      	ldr	r0, [r7, #0]
 80027da:	f003 f959 	bl	8005a90 <USB_DevInit>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e00d      	b.n	800280c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f004 faa8 	bl	8006d5a <USB_DevDisconnect>

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002814 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_PCD_Start+0x1c>
 800282c:	2302      	movs	r3, #2
 800282e:	e020      	b.n	8002872 <HAL_PCD_Start+0x5e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	2b01      	cmp	r3, #1
 800283e:	d109      	bne.n	8002854 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002844:	2b01      	cmp	r3, #1
 8002846:	d005      	beq.n	8002854 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 f8ab 	bl	80059b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fa58 	bl	8006d18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800287a:	b590      	push	{r4, r7, lr}
 800287c:	b08d      	sub	sp, #52	; 0x34
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f004 fb16 	bl	8006ec2 <USB_GetMode>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 848a 	bne.w	80031b2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f004 fa7a 	bl	8006d9c <USB_ReadInterrupts>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8480 	beq.w	80031b0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 fa67 	bl	8006d9c <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d107      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f002 0202 	and.w	r2, r2, #2
 80028e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 fa55 	bl	8006d9c <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d161      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0210 	bic.w	r2, r2, #16
 800290a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	3304      	adds	r3, #4
 800292a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	0c5b      	lsrs	r3, r3, #17
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	2b02      	cmp	r3, #2
 8002936:	d124      	bne.n	8002982 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d035      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800294e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	6a38      	ldr	r0, [r7, #32]
 8002958:	f004 f88c 	bl	8006a74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002968:	441a      	add	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	6a1a      	ldr	r2, [r3, #32]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800297a:	441a      	add	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	621a      	str	r2, [r3, #32]
 8002980:	e016      	b.n	80029b0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	0c5b      	lsrs	r3, r3, #17
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	2b06      	cmp	r3, #6
 800298c:	d110      	bne.n	80029b0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002994:	2208      	movs	r2, #8
 8002996:	4619      	mov	r1, r3
 8002998:	6a38      	ldr	r0, [r7, #32]
 800299a:	f004 f86b 	bl	8006a74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029aa:	441a      	add	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0210 	orr.w	r2, r2, #16
 80029be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f004 f9e9 	bl	8006d9c <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029d4:	f040 80a7 	bne.w	8002b26 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f004 f9ee 	bl	8006dc2 <USB_ReadDevAllOutEpInterrupt>
 80029e6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029e8:	e099      	b.n	8002b1e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 808e 	beq.w	8002b12 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f004 fa12 	bl	8006e2a <USB_ReadDevOutEPInterrupt>
 8002a06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2301      	movs	r3, #1
 8002a22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fec2 	bl	80037b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00c      	beq.n	8002a50 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a42:	461a      	mov	r2, r3
 8002a44:	2308      	movs	r3, #8
 8002a46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 ff98 	bl	8003980 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a66:	461a      	mov	r2, r3
 8002a68:	2310      	movs	r3, #16
 8002a6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d030      	beq.n	8002ad8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d109      	bne.n	8002a96 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a94:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	78db      	ldrb	r3, [r3, #3]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d108      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f006 fd9f 	bl	8009604 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aee:	461a      	mov	r2, r3
 8002af0:	2320      	movs	r3, #32
 8002af2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b10:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	3301      	adds	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f af62 	bne.w	80029ea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 f936 	bl	8006d9c <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b3a:	f040 80db 	bne.w	8002cf4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 f957 	bl	8006df6 <USB_ReadDevAllInEpInterrupt>
 8002b48:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b4e:	e0cd      	b.n	8002cec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80c2 	beq.w	8002ce0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 f97d 	bl	8006e66 <USB_ReadDevInEPInterrupt>
 8002b6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d057      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	2201      	movs	r2, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69f9      	ldr	r1, [r7, #28]
 8002b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b98:	4013      	ands	r3, r2
 8002b9a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2301      	movs	r3, #1
 8002bac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d132      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	334c      	adds	r3, #76	; 0x4c
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4403      	add	r3, r0
 8002bd6:	3348      	adds	r3, #72	; 0x48
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4419      	add	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4403      	add	r3, r0
 8002bea:	334c      	adds	r3, #76	; 0x4c
 8002bec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d113      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x3a2>
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3354      	adds	r3, #84	; 0x54
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d108      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c14:	461a      	mov	r2, r3
 8002c16:	2101      	movs	r1, #1
 8002c18:	f004 f984 	bl	8006f24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f006 fc69 	bl	80094fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2308      	movs	r3, #8
 8002c42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c76:	461a      	mov	r2, r3
 8002c78:	2340      	movs	r3, #64	; 0x40
 8002c7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d023      	beq.n	8002cce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c88:	6a38      	ldr	r0, [r7, #32]
 8002c8a:	f003 f865 	bl	8005d58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3338      	adds	r3, #56	; 0x38
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	78db      	ldrb	r3, [r3, #3]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f006 fcb6 	bl	8009628 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2302      	movs	r3, #2
 8002ccc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fcdb 	bl	8003696 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f47f af2e 	bne.w	8002b50 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 f84f 	bl	8006d9c <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d08:	d122      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d30:	2100      	movs	r1, #0
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fec2 	bl	8003abc <HAL_PCDEx_LPM_Callback>
 8002d38:	e002      	b.n	8002d40 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f006 fc54 	bl	80095e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 f821 	bl	8006d9c <USB_ReadInterrupts>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d64:	d112      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f006 fc10 	bl	800959c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d8a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f004 f803 	bl	8006d9c <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	f040 80b7 	bne.w	8002f12 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2110      	movs	r1, #16
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 ffca 	bl	8005d58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc8:	e046      	b.n	8002e58 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ddc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dee:	0151      	lsls	r1, r2, #5
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	440a      	add	r2, r1
 8002df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002df8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dfc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e10:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	0151      	lsls	r1, r2, #5
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	440a      	add	r2, r1
 8002e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e42:	0151      	lsls	r1, r2, #5
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	440a      	add	r2, r1
 8002e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e50:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	3301      	adds	r3, #1
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d3b3      	bcc.n	8002dca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e70:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e8e:	f043 030b 	orr.w	r3, r3, #11
 8002e92:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea4:	f043 030b 	orr.w	r3, r3, #11
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eaa:	e015      	b.n	8002ed8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ebe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ec2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed2:	f043 030b 	orr.w	r3, r3, #11
 8002ed6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002eea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002efc:	461a      	mov	r2, r3
 8002efe:	f004 f811 	bl	8006f24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 ff40 	bl	8006d9c <USB_ReadInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f26:	d124      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 ffd6 	bl	8006ede <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 ff8b 	bl	8005e52 <USB_GetDevSpeed>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681c      	ldr	r4, [r3, #0]
 8002f48:	f001 f9e8 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8002f4c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	4620      	mov	r0, r4
 8002f58:	f002 fc8a 	bl	8005870 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f006 faf4 	bl	800954a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f70:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 ff10 	bl	8006d9c <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d10a      	bne.n	8002f9c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f006 fad1 	bl	800952e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f002 0208 	and.w	r2, r2, #8
 8002f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fefb 	bl	8006d9c <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d122      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	e014      	b.n	8002fec <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fb27 	bl	8003634 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	3301      	adds	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d3e5      	bcc.n	8002fc2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fece 	bl	8006d9c <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800300a:	d13b      	bne.n	8003084 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800300c:	2301      	movs	r3, #1
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
 8003010:	e02b      	b.n	800306a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3340      	adds	r3, #64	; 0x40
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d115      	bne.n	8003064 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003038:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800303a:	2b00      	cmp	r3, #0
 800303c:	da12      	bge.n	8003064 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	333f      	adds	r3, #63	; 0x3f
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fae8 	bl	8003634 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	3301      	adds	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	429a      	cmp	r2, r3
 8003072:	d3ce      	bcc.n	8003012 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fe87 	bl	8006d9c <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003094:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003098:	d155      	bne.n	8003146 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309a:	2301      	movs	r3, #1
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
 800309e:	e045      	b.n	800312c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d12e      	bne.n	8003126 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da2b      	bge.n	8003126 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80030da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030de:	429a      	cmp	r2, r3
 80030e0:	d121      	bne.n	8003126 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030f4:	2201      	movs	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003122:	6053      	str	r3, [r2, #4]
            break;
 8003124:	e007      	b.n	8003136 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	3301      	adds	r3, #1
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003132:	429a      	cmp	r2, r3
 8003134:	d3b4      	bcc.n	80030a0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fe26 	bl	8006d9c <USB_ReadInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d10a      	bne.n	8003172 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f006 fa75 	bl	800964c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fe10 	bl	8006d9c <USB_ReadInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b04      	cmp	r3, #4
 8003184:	d115      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f006 fa65 	bl	8009668 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6859      	ldr	r1, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	e000      	b.n	80031b2 <HAL_PCD_IRQHandler+0x938>
      return;
 80031b0:	bf00      	nop
    }
  }
}
 80031b2:	3734      	adds	r7, #52	; 0x34
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd90      	pop	{r4, r7, pc}

080031b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_PCD_SetAddress+0x1a>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e013      	b.n	80031fa <HAL_PCD_SetAddress+0x42>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 fd6e 	bl	8006ccc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	4608      	mov	r0, r1
 800320c:	4611      	mov	r1, r2
 800320e:	461a      	mov	r2, r3
 8003210:	4603      	mov	r3, r0
 8003212:	70fb      	strb	r3, [r7, #3]
 8003214:	460b      	mov	r3, r1
 8003216:	803b      	strh	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da0f      	bge.n	8003248 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	3338      	adds	r3, #56	; 0x38
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	705a      	strb	r2, [r3, #1]
 8003246:	e00f      	b.n	8003268 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003274:	883a      	ldrh	r2, [r7, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	78ba      	ldrb	r2, [r7, #2]
 800327e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	785b      	ldrb	r3, [r3, #1]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003292:	78bb      	ldrb	r3, [r7, #2]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d102      	bne.n	800329e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_PCD_EP_Open+0xaa>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e00e      	b.n	80032ca <HAL_PCD_EP_Open+0xc8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68f9      	ldr	r1, [r7, #12]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f002 fdee 	bl	8005e9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80032c8:	7afb      	ldrb	r3, [r7, #11]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	da0f      	bge.n	8003306 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	3338      	adds	r3, #56	; 0x38
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	3304      	adds	r3, #4
 80032fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	705a      	strb	r2, [r3, #1]
 8003304:	e00f      	b.n	8003326 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_PCD_EP_Close+0x6e>
 800333c:	2302      	movs	r3, #2
 800333e:	e00e      	b.n	800335e <HAL_PCD_EP_Close+0x8c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68f9      	ldr	r1, [r7, #12]
 800334e:	4618      	mov	r0, r3
 8003350:	f002 fe2c 	bl	8005fac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	460b      	mov	r3, r1
 8003374:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	f003 020f 	and.w	r2, r3, #15
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2200      	movs	r2, #0
 80033a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a8:	7afb      	ldrb	r3, [r7, #11]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d102      	bne.n	80033c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	6979      	ldr	r1, [r7, #20]
 80033da:	f003 f90b 	bl	80065f4 <USB_EP0StartXfer>
 80033de:	e008      	b.n	80033f2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	6979      	ldr	r1, [r7, #20]
 80033ee:	f002 feb9 	bl	8006164 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	f003 020f 	and.w	r2, r3, #15
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	460b      	mov	r3, r1
 800343a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343c:	7afb      	ldrb	r3, [r7, #11]
 800343e:	f003 020f 	and.w	r2, r3, #15
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3338      	adds	r3, #56	; 0x38
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	3304      	adds	r3, #4
 8003452:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2200      	movs	r2, #0
 8003464:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2201      	movs	r2, #1
 800346a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	b2da      	uxtb	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d102      	bne.n	8003486 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003486:	7afb      	ldrb	r3, [r7, #11]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	6979      	ldr	r1, [r7, #20]
 800349e:	f003 f8a9 	bl	80065f4 <USB_EP0StartXfer>
 80034a2:	e008      	b.n	80034b6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	6979      	ldr	r1, [r7, #20]
 80034b2:	f002 fe57 	bl	8006164 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d901      	bls.n	80034de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e050      	b.n	8003580 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da0f      	bge.n	8003506 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	3338      	adds	r3, #56	; 0x38
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	3304      	adds	r3, #4
 80034fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	705a      	strb	r2, [r3, #1]
 8003504:	e00d      	b.n	8003522 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3304      	adds	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	b2da      	uxtb	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_PCD_EP_SetStall+0x82>
 800353e:	2302      	movs	r3, #2
 8003540:	e01e      	b.n	8003580 <HAL_PCD_EP_SetStall+0xc0>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	4618      	mov	r0, r3
 8003552:	f003 fae7 	bl	8006b24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	b2d9      	uxtb	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003570:	461a      	mov	r2, r3
 8003572:	f003 fcd7 	bl	8006f24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	f003 020f 	and.w	r2, r3, #15
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d901      	bls.n	80035a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e042      	b.n	800362c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da0f      	bge.n	80035ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	3338      	adds	r3, #56	; 0x38
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	705a      	strb	r2, [r3, #1]
 80035cc:	e00f      	b.n	80035ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	3304      	adds	r3, #4
 80035e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_PCD_EP_ClrStall+0x86>
 800360a:	2302      	movs	r3, #2
 800360c:	e00e      	b.n	800362c <HAL_PCD_EP_ClrStall+0xa4>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68f9      	ldr	r1, [r7, #12]
 800361c:	4618      	mov	r0, r3
 800361e:	f003 faef 	bl	8006c00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003644:	2b00      	cmp	r3, #0
 8003646:	da0c      	bge.n	8003662 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	f003 020f 	and.w	r2, r3, #15
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	3338      	adds	r3, #56	; 0x38
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4413      	add	r3, r2
 800365c:	3304      	adds	r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e00c      	b.n	800367c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	f003 020f 	and.w	r2, r3, #15
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4413      	add	r3, r2
 8003678:	3304      	adds	r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	4618      	mov	r0, r3
 8003684:	f003 f90e 	bl	80068a4 <USB_EPStopXfer>
 8003688:	4603      	mov	r3, r0
 800368a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800368c:	7afb      	ldrb	r3, [r7, #11]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b08a      	sub	sp, #40	; 0x28
 800369a:	af02      	add	r7, sp, #8
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	3338      	adds	r3, #56	; 0x38
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	3304      	adds	r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1a      	ldr	r2, [r3, #32]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d901      	bls.n	80036ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e06c      	b.n	80037a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d902      	bls.n	80036ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3303      	adds	r3, #3
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036f2:	e02b      	b.n	800374c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	429a      	cmp	r2, r3
 8003708:	d902      	bls.n	8003710 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	3303      	adds	r3, #3
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6919      	ldr	r1, [r3, #16]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003728:	b2db      	uxtb	r3, r3
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4603      	mov	r3, r0
 800372e:	6978      	ldr	r0, [r7, #20]
 8003730:	f003 f962 	bl	80069f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	441a      	add	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	441a      	add	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	b29b      	uxth	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	429a      	cmp	r2, r3
 8003760:	d809      	bhi.n	8003776 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800376a:	429a      	cmp	r2, r3
 800376c:	d203      	bcs.n	8003776 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1be      	bne.n	80036f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	429a      	cmp	r2, r3
 8003780:	d811      	bhi.n	80037a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	2201      	movs	r2, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	43db      	mvns	r3, r3
 800379c:	6939      	ldr	r1, [r7, #16]
 800379e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a2:	4013      	ands	r3, r2
 80037a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	333c      	adds	r3, #60	; 0x3c
 80037c8:	3304      	adds	r3, #4
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d17b      	bne.n	80038de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d015      	beq.n	800381c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	4a61      	ldr	r2, [pc, #388]	; (8003978 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	f240 80b9 	bls.w	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80b3 	beq.w	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003812:	461a      	mov	r2, r3
 8003814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003818:	6093      	str	r3, [r2, #8]
 800381a:	e0a7      	b.n	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	461a      	mov	r2, r3
 8003834:	2320      	movs	r3, #32
 8003836:	6093      	str	r3, [r2, #8]
 8003838:	e098      	b.n	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 8093 	bne.w	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4a4b      	ldr	r2, [pc, #300]	; (8003978 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d90f      	bls.n	800386e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003864:	461a      	mov	r2, r3
 8003866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386a:	6093      	str	r3, [r2, #8]
 800386c:	e07e      	b.n	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	3304      	adds	r3, #4
 8003882:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	0159      	lsls	r1, r3, #5
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	440b      	add	r3, r1
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389a:	1ad2      	subs	r2, r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d114      	bne.n	80038d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038b8:	461a      	mov	r2, r3
 80038ba:	2101      	movs	r1, #1
 80038bc:	f003 fb32 	bl	8006f24 <USB_EP0_OutStart>
 80038c0:	e006      	b.n	80038d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	441a      	add	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f005 fdf4 	bl	80094c4 <HAL_PCD_DataOutStageCallback>
 80038dc:	e046      	b.n	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	4a26      	ldr	r2, [pc, #152]	; (800397c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d124      	bne.n	8003930 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	461a      	mov	r2, r3
 80038fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003902:	6093      	str	r3, [r2, #8]
 8003904:	e032      	b.n	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	461a      	mov	r2, r3
 800391e:	2320      	movs	r3, #32
 8003920:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f005 fdcb 	bl	80094c4 <HAL_PCD_DataOutStageCallback>
 800392e:	e01d      	b.n	800396c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d114      	bne.n	8003960 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003958:	461a      	mov	r2, r3
 800395a:	2100      	movs	r1, #0
 800395c:	f003 fae2 	bl	8006f24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f005 fdac 	bl	80094c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	4f54300a 	.word	0x4f54300a
 800397c:	4f54310a 	.word	0x4f54310a

08003980 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	333c      	adds	r3, #60	; 0x3c
 8003998:	3304      	adds	r3, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d90e      	bls.n	80039d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039cc:	461a      	mov	r2, r3
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f005 fd63 	bl	80094a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d90c      	bls.n	80039fc <PCD_EP_OutSetupPacket_int+0x7c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d108      	bne.n	80039fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039f4:	461a      	mov	r2, r3
 80039f6:	2101      	movs	r1, #1
 80039f8:	f003 fa94 	bl	8006f24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	4f54300a 	.word	0x4f54300a

08003a0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d107      	bne.n	8003a3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a2a:	883b      	ldrh	r3, [r7, #0]
 8003a2c:	0419      	lsls	r1, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
 8003a38:	e028      	b.n	8003a8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4413      	add	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
 8003a4c:	e00d      	b.n	8003a6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	3340      	adds	r3, #64	; 0x40
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	4413      	add	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	3301      	adds	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3ec      	bcc.n	8003a4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a74:	883b      	ldrh	r3, [r7, #0]
 8003a76:	0418      	lsls	r0, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	4302      	orrs	r2, r0
 8003a84:	3340      	adds	r3, #64	; 0x40
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e267      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d075      	beq.n	8003bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af2:	4b88      	ldr	r3, [pc, #544]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d00c      	beq.n	8003b18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afe:	4b85      	ldr	r3, [pc, #532]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d112      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0a:	4b82      	ldr	r3, [pc, #520]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	4b7e      	ldr	r3, [pc, #504]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d05b      	beq.n	8003bdc <HAL_RCC_OscConfig+0x108>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d157      	bne.n	8003bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e242      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d106      	bne.n	8003b48 <HAL_RCC_OscConfig+0x74>
 8003b3a:	4b76      	ldr	r3, [pc, #472]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a75      	ldr	r2, [pc, #468]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e01d      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x98>
 8003b52:	4b70      	ldr	r3, [pc, #448]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6f      	ldr	r2, [pc, #444]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b6d      	ldr	r3, [pc, #436]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6c      	ldr	r2, [pc, #432]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e00b      	b.n	8003b84 <HAL_RCC_OscConfig+0xb0>
 8003b6c:	4b69      	ldr	r3, [pc, #420]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a68      	ldr	r2, [pc, #416]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b66      	ldr	r3, [pc, #408]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a65      	ldr	r2, [pc, #404]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fe14 	bl	80017b8 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b94:	f7fd fe10 	bl	80017b8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e207      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba6:	4b5b      	ldr	r3, [pc, #364]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0xc0>
 8003bb2:	e014      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd fe00 	bl	80017b8 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fd fdfc 	bl	80017b8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1f3      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	4b51      	ldr	r3, [pc, #324]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0xe8>
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d063      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bea:	4b4a      	ldr	r3, [pc, #296]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00b      	beq.n	8003c0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf6:	4b47      	ldr	r3, [pc, #284]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d11c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c02:	4b44      	ldr	r3, [pc, #272]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d116      	bne.n	8003c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_RCC_OscConfig+0x152>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d001      	beq.n	8003c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e1c7      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c26:	4b3b      	ldr	r3, [pc, #236]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4937      	ldr	r1, [pc, #220]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3a:	e03a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c44:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <HAL_RCC_OscConfig+0x244>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fdb5 	bl	80017b8 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fd fdb1 	bl	80017b8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e1a8      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c64:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4925      	ldr	r1, [pc, #148]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
 8003c84:	e015      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_OscConfig+0x244>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fd fd94 	bl	80017b8 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c94:	f7fd fd90 	bl	80017b8 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e187      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d036      	beq.n	8003d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_RCC_OscConfig+0x248>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd fd74 	bl	80017b8 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd4:	f7fd fd70 	bl	80017b8 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e167      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x200>
 8003cf2:	e01b      	b.n	8003d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_RCC_OscConfig+0x248>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfa:	f7fd fd5d 	bl	80017b8 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	e00e      	b.n	8003d20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d02:	f7fd fd59 	bl	80017b8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d907      	bls.n	8003d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e150      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
 8003d14:	40023800 	.word	0x40023800
 8003d18:	42470000 	.word	0x42470000
 8003d1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d20:	4b88      	ldr	r3, [pc, #544]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1ea      	bne.n	8003d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8097 	beq.w	8003e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3e:	4b81      	ldr	r3, [pc, #516]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10f      	bne.n	8003d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	4b7d      	ldr	r3, [pc, #500]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	4a7c      	ldr	r2, [pc, #496]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5a:	4b7a      	ldr	r3, [pc, #488]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d66:	2301      	movs	r3, #1
 8003d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6a:	4b77      	ldr	r3, [pc, #476]	; (8003f48 <HAL_RCC_OscConfig+0x474>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d118      	bne.n	8003da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d76:	4b74      	ldr	r3, [pc, #464]	; (8003f48 <HAL_RCC_OscConfig+0x474>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a73      	ldr	r2, [pc, #460]	; (8003f48 <HAL_RCC_OscConfig+0x474>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d82:	f7fd fd19 	bl	80017b8 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fd fd15 	bl	80017b8 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e10c      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9c:	4b6a      	ldr	r3, [pc, #424]	; (8003f48 <HAL_RCC_OscConfig+0x474>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x2ea>
 8003db0:	4b64      	ldr	r3, [pc, #400]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a63      	ldr	r2, [pc, #396]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	e01c      	b.n	8003df8 <HAL_RCC_OscConfig+0x324>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x30c>
 8003dc6:	4b5f      	ldr	r3, [pc, #380]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	4a5e      	ldr	r2, [pc, #376]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	f043 0304 	orr.w	r3, r3, #4
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd2:	4b5c      	ldr	r3, [pc, #368]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	4a5b      	ldr	r2, [pc, #364]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dde:	e00b      	b.n	8003df8 <HAL_RCC_OscConfig+0x324>
 8003de0:	4b58      	ldr	r3, [pc, #352]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a57      	ldr	r2, [pc, #348]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
 8003dec:	4b55      	ldr	r3, [pc, #340]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a54      	ldr	r2, [pc, #336]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003df2:	f023 0304 	bic.w	r3, r3, #4
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e00:	f7fd fcda 	bl	80017b8 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e08:	f7fd fcd6 	bl	80017b8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e0cb      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1e:	4b49      	ldr	r3, [pc, #292]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0ee      	beq.n	8003e08 <HAL_RCC_OscConfig+0x334>
 8003e2a:	e014      	b.n	8003e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2c:	f7fd fcc4 	bl	80017b8 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e32:	e00a      	b.n	8003e4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e34:	f7fd fcc0 	bl	80017b8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0b5      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4a:	4b3e      	ldr	r3, [pc, #248]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1ee      	bne.n	8003e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5c:	4b39      	ldr	r3, [pc, #228]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	4a38      	ldr	r2, [pc, #224]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80a1 	beq.w	8003fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e72:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d05c      	beq.n	8003f38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d141      	bne.n	8003f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e86:	4b31      	ldr	r3, [pc, #196]	; (8003f4c <HAL_RCC_OscConfig+0x478>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fd fc94 	bl	80017b8 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e94:	f7fd fc90 	bl	80017b8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e087      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea6:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	019b      	lsls	r3, r3, #6
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	041b      	lsls	r3, r3, #16
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	491b      	ldr	r1, [pc, #108]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <HAL_RCC_OscConfig+0x478>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fc69 	bl	80017b8 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eea:	f7fd fc65 	bl	80017b8 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e05c      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x416>
 8003f08:	e054      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <HAL_RCC_OscConfig+0x478>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fd fc52 	bl	80017b8 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fd fc4e 	bl	80017b8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e045      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x444>
 8003f36:	e03d      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e038      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <HAL_RCC_OscConfig+0x4ec>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d028      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d121      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d11a      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f80:	4013      	ands	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d111      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800

08003fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0cc      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b68      	ldr	r3, [pc, #416]	; (800417c <HAL_RCC_ClockConfig+0x1b8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d90c      	bls.n	8004000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b65      	ldr	r3, [pc, #404]	; (800417c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b63      	ldr	r3, [pc, #396]	; (800417c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0b8      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004018:	4b59      	ldr	r3, [pc, #356]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a58      	ldr	r2, [pc, #352]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004030:	4b53      	ldr	r3, [pc, #332]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	4a52      	ldr	r2, [pc, #328]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800403a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800403c:	4b50      	ldr	r3, [pc, #320]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	494d      	ldr	r1, [pc, #308]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d044      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d119      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e07f      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d003      	beq.n	8004082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407e:	2b03      	cmp	r3, #3
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004082:	4b3f      	ldr	r3, [pc, #252]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e06f      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e067      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040a2:	4b37      	ldr	r3, [pc, #220]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4934      	ldr	r1, [pc, #208]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b4:	f7fd fb80 	bl	80017b8 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fd fb7c 	bl	80017b8 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e04f      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 020c 	and.w	r2, r3, #12
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d1eb      	bne.n	80040bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040e4:	4b25      	ldr	r3, [pc, #148]	; (800417c <HAL_RCC_ClockConfig+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d20c      	bcs.n	800410c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e032      	b.n	8004172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4916      	ldr	r1, [pc, #88]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004136:	4b12      	ldr	r3, [pc, #72]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	490e      	ldr	r1, [pc, #56]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800414a:	f000 f821 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 800414e:	4602      	mov	r2, r0
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	490a      	ldr	r1, [pc, #40]	; (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 800415c:	5ccb      	ldrb	r3, [r1, r3]
 800415e:	fa22 f303 	lsr.w	r3, r2, r3
 8004162:	4a09      	ldr	r2, [pc, #36]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <HAL_RCC_ClockConfig+0x1c8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd fae0 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40023c00 	.word	0x40023c00
 8004180:	40023800 	.word	0x40023800
 8004184:	0800a460 	.word	0x0800a460
 8004188:	20000600 	.word	0x20000600
 800418c:	20000604 	.word	0x20000604

08004190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004194:	b090      	sub	sp, #64	; 0x40
 8004196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	637b      	str	r3, [r7, #52]	; 0x34
 800419c:	2300      	movs	r3, #0
 800419e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a0:	2300      	movs	r3, #0
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041a8:	4b59      	ldr	r3, [pc, #356]	; (8004310 <HAL_RCC_GetSysClockFreq+0x180>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d00d      	beq.n	80041d0 <HAL_RCC_GetSysClockFreq+0x40>
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	f200 80a1 	bhi.w	80042fc <HAL_RCC_GetSysClockFreq+0x16c>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x34>
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d003      	beq.n	80041ca <HAL_RCC_GetSysClockFreq+0x3a>
 80041c2:	e09b      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c4:	4b53      	ldr	r3, [pc, #332]	; (8004314 <HAL_RCC_GetSysClockFreq+0x184>)
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80041c8:	e09b      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ca:	4b53      	ldr	r3, [pc, #332]	; (8004318 <HAL_RCC_GetSysClockFreq+0x188>)
 80041cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041ce:	e098      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d0:	4b4f      	ldr	r3, [pc, #316]	; (8004310 <HAL_RCC_GetSysClockFreq+0x180>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041da:	4b4d      	ldr	r3, [pc, #308]	; (8004310 <HAL_RCC_GetSysClockFreq+0x180>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d028      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e6:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <HAL_RCC_GetSysClockFreq+0x180>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	099b      	lsrs	r3, r3, #6
 80041ec:	2200      	movs	r2, #0
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	627a      	str	r2, [r7, #36]	; 0x24
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041f8:	2100      	movs	r1, #0
 80041fa:	4b47      	ldr	r3, [pc, #284]	; (8004318 <HAL_RCC_GetSysClockFreq+0x188>)
 80041fc:	fb03 f201 	mul.w	r2, r3, r1
 8004200:	2300      	movs	r3, #0
 8004202:	fb00 f303 	mul.w	r3, r0, r3
 8004206:	4413      	add	r3, r2
 8004208:	4a43      	ldr	r2, [pc, #268]	; (8004318 <HAL_RCC_GetSysClockFreq+0x188>)
 800420a:	fba0 1202 	umull	r1, r2, r0, r2
 800420e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004210:	460a      	mov	r2, r1
 8004212:	62ba      	str	r2, [r7, #40]	; 0x28
 8004214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004216:	4413      	add	r3, r2
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421c:	2200      	movs	r2, #0
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	61fa      	str	r2, [r7, #28]
 8004222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004226:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800422a:	f7fc f829 	bl	8000280 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4613      	mov	r3, r2
 8004234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004236:	e053      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004238:	4b35      	ldr	r3, [pc, #212]	; (8004310 <HAL_RCC_GetSysClockFreq+0x180>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	099b      	lsrs	r3, r3, #6
 800423e:	2200      	movs	r2, #0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	617a      	str	r2, [r7, #20]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800424a:	f04f 0b00 	mov.w	fp, #0
 800424e:	4652      	mov	r2, sl
 8004250:	465b      	mov	r3, fp
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	0159      	lsls	r1, r3, #5
 800425c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004260:	0150      	lsls	r0, r2, #5
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	ebb2 080a 	subs.w	r8, r2, sl
 800426a:	eb63 090b 	sbc.w	r9, r3, fp
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800427a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800427e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004282:	ebb2 0408 	subs.w	r4, r2, r8
 8004286:	eb63 0509 	sbc.w	r5, r3, r9
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	00eb      	lsls	r3, r5, #3
 8004294:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004298:	00e2      	lsls	r2, r4, #3
 800429a:	4614      	mov	r4, r2
 800429c:	461d      	mov	r5, r3
 800429e:	eb14 030a 	adds.w	r3, r4, sl
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	eb45 030b 	adc.w	r3, r5, fp
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042b6:	4629      	mov	r1, r5
 80042b8:	028b      	lsls	r3, r1, #10
 80042ba:	4621      	mov	r1, r4
 80042bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c0:	4621      	mov	r1, r4
 80042c2:	028a      	lsls	r2, r1, #10
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ca:	2200      	movs	r2, #0
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	60fa      	str	r2, [r7, #12]
 80042d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042d4:	f7fb ffd4 	bl	8000280 <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4613      	mov	r3, r2
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCC_GetSysClockFreq+0x180>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	3301      	adds	r3, #1
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042fa:	e002      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetSysClockFreq+0x184>)
 80042fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004304:	4618      	mov	r0, r3
 8004306:	3740      	adds	r7, #64	; 0x40
 8004308:	46bd      	mov	sp, r7
 800430a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800
 8004314:	00f42400 	.word	0x00f42400
 8004318:	017d7840 	.word	0x017d7840

0800431c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <HAL_RCC_GetHCLKFreq+0x14>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000600 	.word	0x20000600

08004334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e041      	b.n	80043ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fd f87e 	bl	800145c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f000 fcec 	bl	8004d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d001      	beq.n	80043ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e046      	b.n	800447a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a23      	ldr	r2, [pc, #140]	; (8004488 <HAL_TIM_Base_Start+0xb4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d022      	beq.n	8004444 <HAL_TIM_Base_Start+0x70>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004406:	d01d      	beq.n	8004444 <HAL_TIM_Base_Start+0x70>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1f      	ldr	r2, [pc, #124]	; (800448c <HAL_TIM_Base_Start+0xb8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d018      	beq.n	8004444 <HAL_TIM_Base_Start+0x70>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1e      	ldr	r2, [pc, #120]	; (8004490 <HAL_TIM_Base_Start+0xbc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d013      	beq.n	8004444 <HAL_TIM_Base_Start+0x70>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <HAL_TIM_Base_Start+0xc0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00e      	beq.n	8004444 <HAL_TIM_Base_Start+0x70>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <HAL_TIM_Base_Start+0xc4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_TIM_Base_Start+0x70>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a19      	ldr	r2, [pc, #100]	; (800449c <HAL_TIM_Base_Start+0xc8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_TIM_Base_Start+0x70>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <HAL_TIM_Base_Start+0xcc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d111      	bne.n	8004468 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b06      	cmp	r3, #6
 8004454:	d010      	beq.n	8004478 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004466:	e007      	b.n	8004478 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40010400 	.word	0x40010400
 800449c:	40014000 	.word	0x40014000
 80044a0:	40001800 	.word	0x40001800

080044a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e041      	b.n	800453a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f839 	bl	8004542 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f000 fc34 	bl	8004d50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_TIM_PWM_Start+0x24>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e022      	b.n	80045c2 <HAL_TIM_PWM_Start+0x6a>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b04      	cmp	r3, #4
 8004580:	d109      	bne.n	8004596 <HAL_TIM_PWM_Start+0x3e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	bf14      	ite	ne
 800458e:	2301      	movne	r3, #1
 8004590:	2300      	moveq	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	e015      	b.n	80045c2 <HAL_TIM_PWM_Start+0x6a>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d109      	bne.n	80045b0 <HAL_TIM_PWM_Start+0x58>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e008      	b.n	80045c2 <HAL_TIM_PWM_Start+0x6a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e07c      	b.n	80046c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <HAL_TIM_PWM_Start+0x82>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d8:	e013      	b.n	8004602 <HAL_TIM_PWM_Start+0xaa>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d104      	bne.n	80045ea <HAL_TIM_PWM_Start+0x92>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_PWM_Start+0xaa>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_PWM_Start+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f8:	e003      	b.n	8004602 <HAL_TIM_PWM_Start+0xaa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fe8a 	bl	8005324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a2d      	ldr	r2, [pc, #180]	; (80046cc <HAL_TIM_PWM_Start+0x174>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_TIM_PWM_Start+0xcc>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a2c      	ldr	r2, [pc, #176]	; (80046d0 <HAL_TIM_PWM_Start+0x178>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <HAL_TIM_PWM_Start+0xd0>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <HAL_TIM_PWM_Start+0xd2>
 8004628:	2300      	movs	r3, #0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a22      	ldr	r2, [pc, #136]	; (80046cc <HAL_TIM_PWM_Start+0x174>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d022      	beq.n	800468e <HAL_TIM_PWM_Start+0x136>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004650:	d01d      	beq.n	800468e <HAL_TIM_PWM_Start+0x136>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <HAL_TIM_PWM_Start+0x17c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d018      	beq.n	800468e <HAL_TIM_PWM_Start+0x136>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1d      	ldr	r2, [pc, #116]	; (80046d8 <HAL_TIM_PWM_Start+0x180>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_TIM_PWM_Start+0x136>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1c      	ldr	r2, [pc, #112]	; (80046dc <HAL_TIM_PWM_Start+0x184>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_TIM_PWM_Start+0x136>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a16      	ldr	r2, [pc, #88]	; (80046d0 <HAL_TIM_PWM_Start+0x178>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_TIM_PWM_Start+0x136>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <HAL_TIM_PWM_Start+0x188>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIM_PWM_Start+0x136>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <HAL_TIM_PWM_Start+0x18c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d111      	bne.n	80046b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b06      	cmp	r3, #6
 800469e:	d010      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b0:	e007      	b.n	80046c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40010400 	.word	0x40010400
 80046d4:	40000400 	.word	0x40000400
 80046d8:	40000800 	.word	0x40000800
 80046dc:	40000c00 	.word	0x40000c00
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40001800 	.word	0x40001800

080046e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fe12 	bl	8005324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2e      	ldr	r2, [pc, #184]	; (80047c0 <HAL_TIM_PWM_Stop+0xd8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIM_PWM_Stop+0x2c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2d      	ldr	r2, [pc, #180]	; (80047c4 <HAL_TIM_PWM_Stop+0xdc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <HAL_TIM_PWM_Stop+0x30>
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <HAL_TIM_PWM_Stop+0x32>
 8004718:	2300      	movs	r3, #0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d017      	beq.n	800474e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	f241 1311 	movw	r3, #4369	; 0x1111
 8004728:	4013      	ands	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <HAL_TIM_PWM_Stop+0x66>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a1a      	ldr	r2, [r3, #32]
 8004734:	f240 4344 	movw	r3, #1092	; 0x444
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d107      	bne.n	800474e <HAL_TIM_PWM_Stop+0x66>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	f241 1311 	movw	r3, #4369	; 0x1111
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <HAL_TIM_PWM_Stop+0x96>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	f240 4344 	movw	r3, #1092	; 0x444
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d107      	bne.n	800477e <HAL_TIM_PWM_Stop+0x96>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0201 	bic.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Stop+0xa6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478c:	e013      	b.n	80047b6 <HAL_TIM_PWM_Stop+0xce>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d104      	bne.n	800479e <HAL_TIM_PWM_Stop+0xb6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	e00b      	b.n	80047b6 <HAL_TIM_PWM_Stop+0xce>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_PWM_Stop+0xc6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ac:	e003      	b.n	80047b6 <HAL_TIM_PWM_Stop+0xce>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40010000 	.word	0x40010000
 80047c4:	40010400 	.word	0x40010400

080047c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d122      	bne.n	8004824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d11b      	bne.n	8004824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0202 	mvn.w	r2, #2
 80047f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fa81 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 8004810:	e005      	b.n	800481e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fa73 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fa84 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b04      	cmp	r3, #4
 8004830:	d122      	bne.n	8004878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b04      	cmp	r3, #4
 800483e:	d11b      	bne.n	8004878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0204 	mvn.w	r2, #4
 8004848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fa57 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa49 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fa5a 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b08      	cmp	r3, #8
 8004884:	d122      	bne.n	80048cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b08      	cmp	r3, #8
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0208 	mvn.w	r2, #8
 800489c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2204      	movs	r2, #4
 80048a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fa2d 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 80048b8:	e005      	b.n	80048c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa1f 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fa30 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d122      	bne.n	8004920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d11b      	bne.n	8004920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0210 	mvn.w	r2, #16
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2208      	movs	r2, #8
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fa03 	bl	8004d12 <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9f5 	bl	8004cfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fa06 	bl	8004d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10e      	bne.n	800494c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d107      	bne.n	800494c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0201 	mvn.w	r2, #1
 8004944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f9cf 	bl	8004cea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	d10e      	bne.n	8004978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d107      	bne.n	8004978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 feec 	bl	8005750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d10e      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d107      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800499c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9cb 	bl	8004d3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d10e      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d107      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0220 	mvn.w	r2, #32
 80049c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 feb6 	bl	800573c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049d0:	bf00      	nop
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e0ae      	b.n	8004b54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	f200 809f 	bhi.w	8004b44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a06:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004b45 	.word	0x08004b45
 8004a14:	08004b45 	.word	0x08004b45
 8004a18:	08004b45 	.word	0x08004b45
 8004a1c:	08004a81 	.word	0x08004a81
 8004a20:	08004b45 	.word	0x08004b45
 8004a24:	08004b45 	.word	0x08004b45
 8004a28:	08004b45 	.word	0x08004b45
 8004a2c:	08004ac3 	.word	0x08004ac3
 8004a30:	08004b45 	.word	0x08004b45
 8004a34:	08004b45 	.word	0x08004b45
 8004a38:	08004b45 	.word	0x08004b45
 8004a3c:	08004b03 	.word	0x08004b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fa22 	bl	8004e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0208 	orr.w	r2, r2, #8
 8004a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0204 	bic.w	r2, r2, #4
 8004a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6999      	ldr	r1, [r3, #24]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	619a      	str	r2, [r3, #24]
      break;
 8004a7e:	e064      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fa72 	bl	8004f70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6999      	ldr	r1, [r3, #24]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	021a      	lsls	r2, r3, #8
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	619a      	str	r2, [r3, #24]
      break;
 8004ac0:	e043      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fac7 	bl	800505c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0208 	orr.w	r2, r2, #8
 8004adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69da      	ldr	r2, [r3, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0204 	bic.w	r2, r2, #4
 8004aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69d9      	ldr	r1, [r3, #28]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	61da      	str	r2, [r3, #28]
      break;
 8004b00:	e023      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fb1b 	bl	8005144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69d9      	ldr	r1, [r3, #28]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	021a      	lsls	r2, r3, #8
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	61da      	str	r2, [r3, #28]
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	75fb      	strb	r3, [r7, #23]
      break;
 8004b48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_TIM_ConfigClockSource+0x1c>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e0b4      	b.n	8004ce2 <HAL_TIM_ConfigClockSource+0x186>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb0:	d03e      	beq.n	8004c30 <HAL_TIM_ConfigClockSource+0xd4>
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb6:	f200 8087 	bhi.w	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	f000 8086 	beq.w	8004cce <HAL_TIM_ConfigClockSource+0x172>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	d87f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d01a      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0xa6>
 8004bcc:	2b70      	cmp	r3, #112	; 0x70
 8004bce:	d87b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d050      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0x11a>
 8004bd4:	2b60      	cmp	r3, #96	; 0x60
 8004bd6:	d877      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b50      	cmp	r3, #80	; 0x50
 8004bda:	d03c      	beq.n	8004c56 <HAL_TIM_ConfigClockSource+0xfa>
 8004bdc:	2b50      	cmp	r3, #80	; 0x50
 8004bde:	d873      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d058      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x13a>
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d86f      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d064      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d86b      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d060      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d867      	bhi.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05c      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d05a      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c00:	e062      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6899      	ldr	r1, [r3, #8]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f000 fb67 	bl	80052e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	609a      	str	r2, [r3, #8]
      break;
 8004c2e:	e04f      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	6899      	ldr	r1, [r3, #8]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f000 fb50 	bl	80052e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c52:	609a      	str	r2, [r3, #8]
      break;
 8004c54:	e03c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f000 fac4 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2150      	movs	r1, #80	; 0x50
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fb1d 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004c74:	e02c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 fae3 	bl	800524e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2160      	movs	r1, #96	; 0x60
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fb0d 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004c94:	e01c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 faa4 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fafd 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e00c      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f000 faf4 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004cc6:	e003      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ccc:	e000      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a40      	ldr	r2, [pc, #256]	; (8004e64 <TIM_Base_SetConfig+0x114>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d013      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6e:	d00f      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3d      	ldr	r2, [pc, #244]	; (8004e68 <TIM_Base_SetConfig+0x118>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00b      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3c      	ldr	r2, [pc, #240]	; (8004e6c <TIM_Base_SetConfig+0x11c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3b      	ldr	r2, [pc, #236]	; (8004e70 <TIM_Base_SetConfig+0x120>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a3a      	ldr	r2, [pc, #232]	; (8004e74 <TIM_Base_SetConfig+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d108      	bne.n	8004da2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <TIM_Base_SetConfig+0x114>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d02b      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db0:	d027      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <TIM_Base_SetConfig+0x118>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d023      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2b      	ldr	r2, [pc, #172]	; (8004e6c <TIM_Base_SetConfig+0x11c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01f      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <TIM_Base_SetConfig+0x120>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01b      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a29      	ldr	r2, [pc, #164]	; (8004e74 <TIM_Base_SetConfig+0x124>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d017      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a28      	ldr	r2, [pc, #160]	; (8004e78 <TIM_Base_SetConfig+0x128>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <TIM_Base_SetConfig+0x12c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00f      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <TIM_Base_SetConfig+0x130>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00b      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <TIM_Base_SetConfig+0x134>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a24      	ldr	r2, [pc, #144]	; (8004e88 <TIM_Base_SetConfig+0x138>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a23      	ldr	r2, [pc, #140]	; (8004e8c <TIM_Base_SetConfig+0x13c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d108      	bne.n	8004e14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <TIM_Base_SetConfig+0x114>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_Base_SetConfig+0xf8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <TIM_Base_SetConfig+0x124>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d103      	bne.n	8004e50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	615a      	str	r2, [r3, #20]
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40010400 	.word	0x40010400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800
 8004e84:	40001800 	.word	0x40001800
 8004e88:	40001c00 	.word	0x40001c00
 8004e8c:	40002000 	.word	0x40002000

08004e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0201 	bic.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0303 	bic.w	r3, r3, #3
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 0302 	bic.w	r3, r3, #2
 8004ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <TIM_OC1_SetConfig+0xd8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC1_SetConfig+0x64>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <TIM_OC1_SetConfig+0xdc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d10c      	bne.n	8004f0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0308 	bic.w	r3, r3, #8
 8004efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <TIM_OC1_SetConfig+0xd8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_OC1_SetConfig+0x8e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a14      	ldr	r2, [pc, #80]	; (8004f6c <TIM_OC1_SetConfig+0xdc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d111      	bne.n	8004f42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	40010400 	.word	0x40010400

08004f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f023 0210 	bic.w	r2, r3, #16
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0320 	bic.w	r3, r3, #32
 8004fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a22      	ldr	r2, [pc, #136]	; (8005054 <TIM_OC2_SetConfig+0xe4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC2_SetConfig+0x68>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a21      	ldr	r2, [pc, #132]	; (8005058 <TIM_OC2_SetConfig+0xe8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d10d      	bne.n	8004ff4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a17      	ldr	r2, [pc, #92]	; (8005054 <TIM_OC2_SetConfig+0xe4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_OC2_SetConfig+0x94>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	; (8005058 <TIM_OC2_SetConfig+0xe8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d113      	bne.n	800502c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800500a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40010000 	.word	0x40010000
 8005058:	40010400 	.word	0x40010400

0800505c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a21      	ldr	r2, [pc, #132]	; (800513c <TIM_OC3_SetConfig+0xe0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_OC3_SetConfig+0x66>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a20      	ldr	r2, [pc, #128]	; (8005140 <TIM_OC3_SetConfig+0xe4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10d      	bne.n	80050de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a16      	ldr	r2, [pc, #88]	; (800513c <TIM_OC3_SetConfig+0xe0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d003      	beq.n	80050ee <TIM_OC3_SetConfig+0x92>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a15      	ldr	r2, [pc, #84]	; (8005140 <TIM_OC3_SetConfig+0xe4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d113      	bne.n	8005116 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	621a      	str	r2, [r3, #32]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40010000 	.word	0x40010000
 8005140:	40010400 	.word	0x40010400

08005144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800518e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	031b      	lsls	r3, r3, #12
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a12      	ldr	r2, [pc, #72]	; (80051e8 <TIM_OC4_SetConfig+0xa4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_OC4_SetConfig+0x68>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a11      	ldr	r2, [pc, #68]	; (80051ec <TIM_OC4_SetConfig+0xa8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d109      	bne.n	80051c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	019b      	lsls	r3, r3, #6
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40010400 	.word	0x40010400

080051f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 030a 	bic.w	r3, r3, #10
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524e:	b480      	push	{r7}
 8005250:	b087      	sub	sp, #28
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f023 0210 	bic.w	r2, r3, #16
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800528a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f043 0307 	orr.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	431a      	orrs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2201      	movs	r2, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1a      	ldr	r2, [r3, #32]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	43db      	mvns	r3, r3
 8005346:	401a      	ands	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d109      	bne.n	8005394 <HAL_TIMEx_PWMN_Start+0x24>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	e022      	b.n	80053da <HAL_TIMEx_PWMN_Start+0x6a>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b04      	cmp	r3, #4
 8005398:	d109      	bne.n	80053ae <HAL_TIMEx_PWMN_Start+0x3e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	e015      	b.n	80053da <HAL_TIMEx_PWMN_Start+0x6a>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d109      	bne.n	80053c8 <HAL_TIMEx_PWMN_Start+0x58>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	e008      	b.n	80053da <HAL_TIMEx_PWMN_Start+0x6a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e06d      	b.n	80054be <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <HAL_TIMEx_PWMN_Start+0x82>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053f0:	e013      	b.n	800541a <HAL_TIMEx_PWMN_Start+0xaa>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d104      	bne.n	8005402 <HAL_TIMEx_PWMN_Start+0x92>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005400:	e00b      	b.n	800541a <HAL_TIMEx_PWMN_Start+0xaa>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d104      	bne.n	8005412 <HAL_TIMEx_PWMN_Start+0xa2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005410:	e003      	b.n	800541a <HAL_TIMEx_PWMN_Start+0xaa>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2204      	movs	r2, #4
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f99e 	bl	8005764 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <HAL_TIMEx_PWMN_Start+0x158>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d022      	beq.n	8005488 <HAL_TIMEx_PWMN_Start+0x118>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544a:	d01d      	beq.n	8005488 <HAL_TIMEx_PWMN_Start+0x118>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1e      	ldr	r2, [pc, #120]	; (80054cc <HAL_TIMEx_PWMN_Start+0x15c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_TIMEx_PWMN_Start+0x118>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <HAL_TIMEx_PWMN_Start+0x160>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <HAL_TIMEx_PWMN_Start+0x118>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1b      	ldr	r2, [pc, #108]	; (80054d4 <HAL_TIMEx_PWMN_Start+0x164>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_TIMEx_PWMN_Start+0x118>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1a      	ldr	r2, [pc, #104]	; (80054d8 <HAL_TIMEx_PWMN_Start+0x168>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIMEx_PWMN_Start+0x118>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a18      	ldr	r2, [pc, #96]	; (80054dc <HAL_TIMEx_PWMN_Start+0x16c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIMEx_PWMN_Start+0x118>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <HAL_TIMEx_PWMN_Start+0x170>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d111      	bne.n	80054ac <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b06      	cmp	r3, #6
 8005498:	d010      	beq.n	80054bc <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0201 	orr.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054aa:	e007      	b.n	80054bc <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40000c00 	.word	0x40000c00
 80054d8:	40010400 	.word	0x40010400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40001800 	.word	0x40001800

080054e4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f934 	bl	8005764 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	f241 1311 	movw	r3, #4369	; 0x1111
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10f      	bne.n	800552c <HAL_TIMEx_PWMN_Stop+0x48>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	f240 4344 	movw	r3, #1092	; 0x444
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <HAL_TIMEx_PWMN_Stop+0x48>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800552a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	f241 1311 	movw	r3, #4369	; 0x1111
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10f      	bne.n	800555c <HAL_TIMEx_PWMN_Stop+0x78>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	f240 4344 	movw	r3, #1092	; 0x444
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d107      	bne.n	800555c <HAL_TIMEx_PWMN_Stop+0x78>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <HAL_TIMEx_PWMN_Stop+0x88>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556a:	e013      	b.n	8005594 <HAL_TIMEx_PWMN_Stop+0xb0>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d104      	bne.n	800557c <HAL_TIMEx_PWMN_Stop+0x98>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800557a:	e00b      	b.n	8005594 <HAL_TIMEx_PWMN_Stop+0xb0>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b08      	cmp	r3, #8
 8005580:	d104      	bne.n	800558c <HAL_TIMEx_PWMN_Stop+0xa8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800558a:	e003      	b.n	8005594 <HAL_TIMEx_PWMN_Stop+0xb0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e05a      	b.n	800566e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a21      	ldr	r2, [pc, #132]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d022      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005604:	d01d      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d018      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d013      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1a      	ldr	r2, [pc, #104]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00e      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d009      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d004      	beq.n	8005642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a15      	ldr	r2, [pc, #84]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d10c      	bne.n	800565c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4313      	orrs	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40010000 	.word	0x40010000
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800
 8005688:	40000c00 	.word	0x40000c00
 800568c:	40010400 	.word	0x40010400
 8005690:	40014000 	.word	0x40014000
 8005694:	40001800 	.word	0x40001800

08005698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e03d      	b.n	8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2204      	movs	r2, #4
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1a      	ldr	r2, [r3, #32]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	43db      	mvns	r3, r3
 8005786:	401a      	ands	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a1a      	ldr	r2, [r3, #32]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	fa01 f303 	lsl.w	r3, r1, r3
 800579c:	431a      	orrs	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057ae:	b084      	sub	sp, #16
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	f107 001c 	add.w	r0, r7, #28
 80057bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d122      	bne.n	800580c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d105      	bne.n	8005800 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 fbed 	bl	8006fe0 <USB_CoreReset>
 8005806:	4603      	mov	r3, r0
 8005808:	73fb      	strb	r3, [r7, #15]
 800580a:	e01a      	b.n	8005842 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f001 fbe1 	bl	8006fe0 <USB_CoreReset>
 800581e:	4603      	mov	r3, r0
 8005820:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
 8005834:	e005      	b.n	8005842 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	2b01      	cmp	r3, #1
 8005846:	d10b      	bne.n	8005860 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f043 0206 	orr.w	r2, r3, #6
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800586c:	b004      	add	sp, #16
 800586e:	4770      	bx	lr

08005870 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	4613      	mov	r3, r2
 800587c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d165      	bne.n	8005950 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4a41      	ldr	r2, [pc, #260]	; (800598c <USB_SetTurnaroundTime+0x11c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d906      	bls.n	800589a <USB_SetTurnaroundTime+0x2a>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4a40      	ldr	r2, [pc, #256]	; (8005990 <USB_SetTurnaroundTime+0x120>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d202      	bcs.n	800589a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005894:	230f      	movs	r3, #15
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e062      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4a3c      	ldr	r2, [pc, #240]	; (8005990 <USB_SetTurnaroundTime+0x120>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d306      	bcc.n	80058b0 <USB_SetTurnaroundTime+0x40>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4a3b      	ldr	r2, [pc, #236]	; (8005994 <USB_SetTurnaroundTime+0x124>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d202      	bcs.n	80058b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058aa:	230e      	movs	r3, #14
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e057      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4a38      	ldr	r2, [pc, #224]	; (8005994 <USB_SetTurnaroundTime+0x124>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d306      	bcc.n	80058c6 <USB_SetTurnaroundTime+0x56>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4a37      	ldr	r2, [pc, #220]	; (8005998 <USB_SetTurnaroundTime+0x128>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d202      	bcs.n	80058c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058c0:	230d      	movs	r3, #13
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e04c      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4a33      	ldr	r2, [pc, #204]	; (8005998 <USB_SetTurnaroundTime+0x128>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d306      	bcc.n	80058dc <USB_SetTurnaroundTime+0x6c>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4a32      	ldr	r2, [pc, #200]	; (800599c <USB_SetTurnaroundTime+0x12c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d802      	bhi.n	80058dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80058d6:	230c      	movs	r3, #12
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e041      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4a2f      	ldr	r2, [pc, #188]	; (800599c <USB_SetTurnaroundTime+0x12c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d906      	bls.n	80058f2 <USB_SetTurnaroundTime+0x82>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4a2e      	ldr	r2, [pc, #184]	; (80059a0 <USB_SetTurnaroundTime+0x130>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d802      	bhi.n	80058f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058ec:	230b      	movs	r3, #11
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e036      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <USB_SetTurnaroundTime+0x130>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d906      	bls.n	8005908 <USB_SetTurnaroundTime+0x98>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4a29      	ldr	r2, [pc, #164]	; (80059a4 <USB_SetTurnaroundTime+0x134>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d802      	bhi.n	8005908 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005902:	230a      	movs	r3, #10
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e02b      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4a26      	ldr	r2, [pc, #152]	; (80059a4 <USB_SetTurnaroundTime+0x134>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d906      	bls.n	800591e <USB_SetTurnaroundTime+0xae>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4a25      	ldr	r2, [pc, #148]	; (80059a8 <USB_SetTurnaroundTime+0x138>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d202      	bcs.n	800591e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005918:	2309      	movs	r3, #9
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e020      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <USB_SetTurnaroundTime+0x138>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d306      	bcc.n	8005934 <USB_SetTurnaroundTime+0xc4>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4a20      	ldr	r2, [pc, #128]	; (80059ac <USB_SetTurnaroundTime+0x13c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d802      	bhi.n	8005934 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800592e:	2308      	movs	r3, #8
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e015      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <USB_SetTurnaroundTime+0x13c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d906      	bls.n	800594a <USB_SetTurnaroundTime+0xda>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <USB_SetTurnaroundTime+0x140>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d202      	bcs.n	800594a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005944:	2307      	movs	r3, #7
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e00a      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800594a:	2306      	movs	r3, #6
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	e007      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005956:	2309      	movs	r3, #9
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e001      	b.n	8005960 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800595c:	2309      	movs	r3, #9
 800595e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	029b      	lsls	r3, r3, #10
 8005974:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005978:	431a      	orrs	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	00d8acbf 	.word	0x00d8acbf
 8005990:	00e4e1c0 	.word	0x00e4e1c0
 8005994:	00f42400 	.word	0x00f42400
 8005998:	01067380 	.word	0x01067380
 800599c:	011a499f 	.word	0x011a499f
 80059a0:	01312cff 	.word	0x01312cff
 80059a4:	014ca43f 	.word	0x014ca43f
 80059a8:	016e3600 	.word	0x016e3600
 80059ac:	01a6ab1f 	.word	0x01a6ab1f
 80059b0:	01e84800 	.word	0x01e84800

080059b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f043 0201 	orr.w	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d115      	bne.n	8005a46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a26:	2001      	movs	r0, #1
 8005a28:	f7fb fed2 	bl	80017d0 <HAL_Delay>
      ms++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 fa45 	bl	8006ec2 <USB_GetMode>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d01e      	beq.n	8005a7c <USB_SetCurrentMode+0x84>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b31      	cmp	r3, #49	; 0x31
 8005a42:	d9f0      	bls.n	8005a26 <USB_SetCurrentMode+0x2e>
 8005a44:	e01a      	b.n	8005a7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d115      	bne.n	8005a78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a58:	2001      	movs	r0, #1
 8005a5a:	f7fb feb9 	bl	80017d0 <HAL_Delay>
      ms++;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 fa2c 	bl	8006ec2 <USB_GetMode>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <USB_SetCurrentMode+0x84>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b31      	cmp	r3, #49	; 0x31
 8005a74:	d9f0      	bls.n	8005a58 <USB_SetCurrentMode+0x60>
 8005a76:	e001      	b.n	8005a7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e005      	b.n	8005a88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b32      	cmp	r3, #50	; 0x32
 8005a80:	d101      	bne.n	8005a86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a90:	b084      	sub	sp, #16
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b086      	sub	sp, #24
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	e009      	b.n	8005ac4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	3340      	adds	r3, #64	; 0x40
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	2200      	movs	r2, #0
 8005abc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b0e      	cmp	r3, #14
 8005ac8:	d9f2      	bls.n	8005ab0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d11c      	bne.n	8005b0a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ade:	f043 0302 	orr.w	r3, r3, #2
 8005ae2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38
 8005b08:	e00b      	b.n	8005b22 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b34:	4619      	mov	r1, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	680b      	ldr	r3, [r1, #0]
 8005b40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10c      	bne.n	8005b62 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b4e:	2100      	movs	r1, #0
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f965 	bl	8005e20 <USB_SetDevSpeed>
 8005b56:	e008      	b.n	8005b6a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b58:	2101      	movs	r1, #1
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f960 	bl	8005e20 <USB_SetDevSpeed>
 8005b60:	e003      	b.n	8005b6a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b62:	2103      	movs	r1, #3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f95b 	bl	8005e20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b6a:	2110      	movs	r1, #16
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f8f3 	bl	8005d58 <USB_FlushTxFifo>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f91f 	bl	8005dc0 <USB_FlushRxFifo>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b92:	461a      	mov	r2, r3
 8005b94:	2300      	movs	r3, #0
 8005b96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	461a      	mov	r2, r3
 8005bac:	2300      	movs	r3, #0
 8005bae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	e043      	b.n	8005c3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bcc:	d118      	bne.n	8005c00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	461a      	mov	r2, r3
 8005be2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e013      	b.n	8005c12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	e008      	b.n	8005c12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2300      	movs	r3, #0
 8005c22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	461a      	mov	r2, r3
 8005c32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d3b7      	bcc.n	8005bb6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	e043      	b.n	8005cd4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c62:	d118      	bne.n	8005c96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10a      	bne.n	8005c80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c76:	461a      	mov	r2, r3
 8005c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e013      	b.n	8005ca8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e008      	b.n	8005ca8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ccc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d3b7      	bcc.n	8005c4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005cfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	f043 0210 	orr.w	r2, r3, #16
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	699a      	ldr	r2, [r3, #24]
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <USB_DevInit+0x2c4>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f043 0208 	orr.w	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d107      	bne.n	8005d44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d3c:	f043 0304 	orr.w	r3, r3, #4
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d50:	b004      	add	sp, #16
 8005d52:	4770      	bx	lr
 8005d54:	803c3800 	.word	0x803c3800

08005d58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <USB_FlushTxFifo+0x64>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d901      	bls.n	8005d78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e01b      	b.n	8005db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	daf2      	bge.n	8005d66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	019b      	lsls	r3, r3, #6
 8005d88:	f043 0220 	orr.w	r2, r3, #32
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a08      	ldr	r2, [pc, #32]	; (8005dbc <USB_FlushTxFifo+0x64>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e006      	b.n	8005db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d0f0      	beq.n	8005d90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	00030d40 	.word	0x00030d40

08005dc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a11      	ldr	r2, [pc, #68]	; (8005e1c <USB_FlushRxFifo+0x5c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d901      	bls.n	8005dde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e018      	b.n	8005e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	daf2      	bge.n	8005dcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2210      	movs	r2, #16
 8005dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <USB_FlushRxFifo+0x5c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d901      	bls.n	8005e02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e006      	b.n	8005e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d0f0      	beq.n	8005df0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	00030d40 	.word	0x00030d40

08005e20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	68f9      	ldr	r1, [r7, #12]
 8005e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e40:	4313      	orrs	r3, r2
 8005e42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b087      	sub	sp, #28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0306 	and.w	r3, r3, #6
 8005e6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d102      	bne.n	8005e78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e72:	2300      	movs	r3, #0
 8005e74:	75fb      	strb	r3, [r7, #23]
 8005e76:	e00a      	b.n	8005e8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d002      	beq.n	8005e84 <USB_GetDevSpeed+0x32>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b06      	cmp	r3, #6
 8005e82:	d102      	bne.n	8005e8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e84:	2302      	movs	r3, #2
 8005e86:	75fb      	strb	r3, [r7, #23]
 8005e88:	e001      	b.n	8005e8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e8a:	230f      	movs	r3, #15
 8005e8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d13a      	bne.n	8005f2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	2101      	movs	r1, #1
 8005eca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	68f9      	ldr	r1, [r7, #12]
 8005ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d155      	bne.n	8005f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	791b      	ldrb	r3, [r3, #4]
 8005f0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	059b      	lsls	r3, r3, #22
 8005f12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f14:	4313      	orrs	r3, r2
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	e036      	b.n	8005f9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f34:	69da      	ldr	r2, [r3, #28]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	2101      	movs	r1, #1
 8005f40:	fa01 f303 	lsl.w	r3, r1, r3
 8005f44:	041b      	lsls	r3, r3, #16
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d11a      	bne.n	8005f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	791b      	ldrb	r3, [r3, #4]
 8005f80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f82:	430b      	orrs	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
	...

08005fac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d161      	bne.n	800608c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fde:	d11f      	bne.n	8006020 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ffe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800601e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	2101      	movs	r1, #1
 8006032:	fa01 f303 	lsl.w	r3, r1, r3
 8006036:	b29b      	uxth	r3, r3
 8006038:	43db      	mvns	r3, r3
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006040:	4013      	ands	r3, r2
 8006042:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	2101      	movs	r1, #1
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	b29b      	uxth	r3, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006064:	4013      	ands	r3, r2
 8006066:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	0159      	lsls	r1, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	440b      	add	r3, r1
 800607e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006082:	4619      	mov	r1, r3
 8006084:	4b35      	ldr	r3, [pc, #212]	; (800615c <USB_DeactivateEndpoint+0x1b0>)
 8006086:	4013      	ands	r3, r2
 8006088:	600b      	str	r3, [r1, #0]
 800608a:	e060      	b.n	800614e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800609e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060a2:	d11f      	bne.n	80060e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	2101      	movs	r1, #1
 80060f6:	fa01 f303 	lsl.w	r3, r1, r3
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	43db      	mvns	r3, r3
 80060fe:	68f9      	ldr	r1, [r7, #12]
 8006100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006104:	4013      	ands	r3, r2
 8006106:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	2101      	movs	r1, #1
 800611a:	fa01 f303 	lsl.w	r3, r1, r3
 800611e:	041b      	lsls	r3, r3, #16
 8006120:	43db      	mvns	r3, r3
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006128:	4013      	ands	r3, r2
 800612a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	0159      	lsls	r1, r3, #5
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	440b      	add	r3, r1
 8006142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006146:	4619      	mov	r1, r3
 8006148:	4b05      	ldr	r3, [pc, #20]	; (8006160 <USB_DeactivateEndpoint+0x1b4>)
 800614a:	4013      	ands	r3, r2
 800614c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	ec337800 	.word	0xec337800
 8006160:	eff37800 	.word	0xeff37800

08006164 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	4613      	mov	r3, r2
 8006170:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	2b01      	cmp	r3, #1
 8006182:	f040 815c 	bne.w	800643e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d132      	bne.n	80061f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	0151      	lsls	r1, r2, #5
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	440a      	add	r2, r1
 80061e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ec:	0cdb      	lsrs	r3, r3, #19
 80061ee:	04db      	lsls	r3, r3, #19
 80061f0:	6113      	str	r3, [r2, #16]
 80061f2:	e074      	b.n	80062de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	0151      	lsls	r1, r2, #5
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	440a      	add	r2, r1
 800620a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620e:	0cdb      	lsrs	r3, r3, #19
 8006210:	04db      	lsls	r3, r3, #19
 8006212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006232:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	440b      	add	r3, r1
 8006250:	1e59      	subs	r1, r3, #1
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	fbb1 f3f3 	udiv	r3, r1, r3
 800625a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800625c:	4b9d      	ldr	r3, [pc, #628]	; (80064d4 <USB_EPStartXfer+0x370>)
 800625e:	400b      	ands	r3, r1
 8006260:	69b9      	ldr	r1, [r7, #24]
 8006262:	0148      	lsls	r0, r1, #5
 8006264:	69f9      	ldr	r1, [r7, #28]
 8006266:	4401      	add	r1, r0
 8006268:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800626c:	4313      	orrs	r3, r2
 800626e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006286:	69b9      	ldr	r1, [r7, #24]
 8006288:	0148      	lsls	r0, r1, #5
 800628a:	69f9      	ldr	r1, [r7, #28]
 800628c:	4401      	add	r1, r0
 800628e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006292:	4313      	orrs	r3, r2
 8006294:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	791b      	ldrb	r3, [r3, #4]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d11f      	bne.n	80062de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d14b      	bne.n	800637c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d009      	beq.n	8006300 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	461a      	mov	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	791b      	ldrb	r3, [r3, #4]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d128      	bne.n	800635a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d110      	bne.n	800633a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	e00f      	b.n	800635a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006358:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006374:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e133      	b.n	80065e4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800639a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	791b      	ldrb	r3, [r3, #4]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d015      	beq.n	80063d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 811b 	beq.w	80065e4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	2101      	movs	r1, #1
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	69f9      	ldr	r1, [r7, #28]
 80063c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ca:	4313      	orrs	r3, r2
 80063cc:	634b      	str	r3, [r1, #52]	; 0x34
 80063ce:	e109      	b.n	80065e4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d110      	bne.n	8006402 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	e00f      	b.n	8006422 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	440a      	add	r2, r1
 8006418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006420:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6919      	ldr	r1, [r3, #16]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	b298      	uxth	r0, r3
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	4603      	mov	r3, r0
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 fade 	bl	80069f8 <USB_WritePacket>
 800643c:	e0d2      	b.n	80065e4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006458:	0cdb      	lsrs	r3, r3, #19
 800645a:	04db      	lsls	r3, r3, #19
 800645c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	440a      	add	r2, r1
 8006474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006478:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800647c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006480:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d126      	bne.n	80064d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a0:	69b9      	ldr	r1, [r7, #24]
 80064a2:	0148      	lsls	r0, r1, #5
 80064a4:	69f9      	ldr	r1, [r7, #28]
 80064a6:	4401      	add	r1, r0
 80064a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064ac:	4313      	orrs	r3, r2
 80064ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	69fa      	ldr	r2, [r7, #28]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064ce:	6113      	str	r3, [r2, #16]
 80064d0:	e03a      	b.n	8006548 <USB_EPStartXfer+0x3e4>
 80064d2:	bf00      	nop
 80064d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	1e5a      	subs	r2, r3, #1
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	8afa      	ldrh	r2, [r7, #22]
 80064f4:	fb03 f202 	mul.w	r2, r3, r2
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	8afb      	ldrh	r3, [r7, #22]
 800650c:	04d9      	lsls	r1, r3, #19
 800650e:	4b38      	ldr	r3, [pc, #224]	; (80065f0 <USB_EPStartXfer+0x48c>)
 8006510:	400b      	ands	r3, r1
 8006512:	69b9      	ldr	r1, [r7, #24]
 8006514:	0148      	lsls	r0, r1, #5
 8006516:	69f9      	ldr	r1, [r7, #28]
 8006518:	4401      	add	r1, r0
 800651a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800651e:	4313      	orrs	r3, r2
 8006520:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006538:	69b9      	ldr	r1, [r7, #24]
 800653a:	0148      	lsls	r0, r1, #5
 800653c:	69f9      	ldr	r1, [r7, #28]
 800653e:	4401      	add	r1, r0
 8006540:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006544:	4313      	orrs	r3, r2
 8006546:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d10d      	bne.n	800656a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6919      	ldr	r1, [r3, #16]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	460a      	mov	r2, r1
 8006568:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	791b      	ldrb	r3, [r3, #4]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d128      	bne.n	80065c4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d110      	bne.n	80065a4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	e00f      	b.n	80065c4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	0151      	lsls	r1, r2, #5
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	440a      	add	r2, r1
 80065da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	1ff80000 	.word	0x1ff80000

080065f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	f040 80ce 	bne.w	80067b2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d132      	bne.n	8006684 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	440a      	add	r2, r1
 8006634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800663c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006660:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667c:	0cdb      	lsrs	r3, r3, #19
 800667e:	04db      	lsls	r3, r3, #19
 8006680:	6113      	str	r3, [r2, #16]
 8006682:	e04e      	b.n	8006722 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	440a      	add	r2, r1
 800669a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669e:	0cdb      	lsrs	r3, r3, #19
 80066a0:	04db      	lsls	r3, r3, #19
 80066a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d903      	bls.n	80066dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006712:	6939      	ldr	r1, [r7, #16]
 8006714:	0148      	lsls	r0, r1, #5
 8006716:	6979      	ldr	r1, [r7, #20]
 8006718:	4401      	add	r1, r0
 800671a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800671e:	4313      	orrs	r3, r2
 8006720:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d11e      	bne.n	8006766 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d009      	beq.n	8006744 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673c:	461a      	mov	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e097      	b.n	8006896 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006780:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006784:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8083 	beq.w	8006896 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	2101      	movs	r1, #1
 80067a2:	fa01 f303 	lsl.w	r3, r1, r3
 80067a6:	6979      	ldr	r1, [r7, #20]
 80067a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067ac:	4313      	orrs	r3, r2
 80067ae:	634b      	str	r3, [r1, #52]	; 0x34
 80067b0:	e071      	b.n	8006896 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067cc:	0cdb      	lsrs	r3, r3, #19
 80067ce:	04db      	lsls	r3, r3, #19
 80067d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800682c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	691a      	ldr	r2, [r3, #16]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006844:	6939      	ldr	r1, [r7, #16]
 8006846:	0148      	lsls	r0, r1, #5
 8006848:	6979      	ldr	r1, [r7, #20]
 800684a:	4401      	add	r1, r0
 800684c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006850:	4313      	orrs	r3, r2
 8006852:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d10d      	bne.n	8006876 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6919      	ldr	r1, [r3, #16]
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006872:	460a      	mov	r2, r1
 8006874:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	440a      	add	r2, r1
 800688c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006890:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006894:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	785b      	ldrb	r3, [r3, #1]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d14a      	bne.n	8006958 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068da:	f040 8086 	bne.w	80069ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	7812      	ldrb	r2, [r2, #0]
 80068f2:	0151      	lsls	r1, r2, #5
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	440a      	add	r2, r1
 80068f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006900:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	7812      	ldrb	r2, [r2, #0]
 8006916:	0151      	lsls	r1, r2, #5
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	440a      	add	r2, r1
 800691c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006924:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3301      	adds	r3, #1
 800692a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006932:	4293      	cmp	r3, r2
 8006934:	d902      	bls.n	800693c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
          break;
 800693a:	e056      	b.n	80069ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006954:	d0e7      	beq.n	8006926 <USB_EPStopXfer+0x82>
 8006956:	e048      	b.n	80069ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800696c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006970:	d13b      	bne.n	80069ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	7812      	ldrb	r2, [r2, #0]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	440a      	add	r2, r1
 800698c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006990:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006994:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3301      	adds	r3, #1
 80069be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d902      	bls.n	80069d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	75fb      	strb	r3, [r7, #23]
          break;
 80069ce:	e00c      	b.n	80069ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069e8:	d0e7      	beq.n	80069ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	371c      	adds	r7, #28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b089      	sub	sp, #36	; 0x24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	4611      	mov	r1, r2
 8006a04:	461a      	mov	r2, r3
 8006a06:	460b      	mov	r3, r1
 8006a08:	71fb      	strb	r3, [r7, #7]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d123      	bne.n	8006a66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a1e:	88bb      	ldrh	r3, [r7, #4]
 8006a20:	3303      	adds	r3, #3
 8006a22:	089b      	lsrs	r3, r3, #2
 8006a24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a26:	2300      	movs	r3, #0
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	e018      	b.n	8006a5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	031a      	lsls	r2, r3, #12
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a38:	461a      	mov	r2, r3
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	3301      	adds	r3, #1
 8006a44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3301      	adds	r3, #1
 8006a56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d3e2      	bcc.n	8006a2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3724      	adds	r7, #36	; 0x24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b08b      	sub	sp, #44	; 0x2c
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	089b      	lsrs	r3, r3, #2
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	623b      	str	r3, [r7, #32]
 8006a9e:	e014      	b.n	8006aca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aaa:	601a      	str	r2, [r3, #0]
    pDest++;
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	3301      	adds	r3, #1
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	3301      	adds	r3, #1
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	623b      	str	r3, [r7, #32]
 8006aca:	6a3a      	ldr	r2, [r7, #32]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d3e6      	bcc.n	8006aa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ad2:	8bfb      	ldrh	r3, [r7, #30]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01e      	beq.n	8006b16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f107 0310 	add.w	r3, r7, #16
 8006ae8:	6812      	ldr	r2, [r2, #0]
 8006aea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	701a      	strb	r2, [r3, #0]
      i++;
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	3301      	adds	r3, #1
 8006b02:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	3301      	adds	r3, #1
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b0a:	8bfb      	ldrh	r3, [r7, #30]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b10:	8bfb      	ldrh	r3, [r7, #30]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1ea      	bne.n	8006aec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	372c      	adds	r7, #44	; 0x2c
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d12c      	bne.n	8006b9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	db12      	blt.n	8006b78 <USB_EPSetStall+0x54>
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00f      	beq.n	8006b78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	0151      	lsls	r1, r2, #5
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	440a      	add	r2, r1
 8006b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	e02b      	b.n	8006bf2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	db12      	blt.n	8006bd2 <USB_EPSetStall+0xae>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00f      	beq.n	8006bd2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bd0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bf0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d128      	bne.n	8006c6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	791b      	ldrb	r3, [r3, #4]
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d003      	beq.n	8006c4c <USB_EPClearStall+0x4c>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	791b      	ldrb	r3, [r3, #4]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d138      	bne.n	8006cbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	e027      	b.n	8006cbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	0151      	lsls	r1, r2, #5
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	440a      	add	r2, r1
 8006c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	791b      	ldrb	r3, [r3, #4]
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d003      	beq.n	8006c9e <USB_EPClearStall+0x9e>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	791b      	ldrb	r3, [r3, #4]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d10f      	bne.n	8006cbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d00:	68f9      	ldr	r1, [r7, #12]
 8006d02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d06:	4313      	orrs	r3, r2
 8006d08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d32:	f023 0303 	bic.w	r3, r3, #3
 8006d36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d46:	f023 0302 	bic.w	r3, r3, #2
 8006d4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d74:	f023 0303 	bic.w	r3, r3, #3
 8006d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d88:	f043 0302 	orr.w	r3, r3, #2
 8006d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	4013      	ands	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006db4:	68fb      	ldr	r3, [r7, #12]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	0c1b      	lsrs	r3, r3, #16
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	4013      	ands	r3, r2
 8006e18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	b29b      	uxth	r3, r3
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	460b      	mov	r3, r1
 8006e34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	4013      	ands	r3, r2
 8006e56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e58:	68bb      	ldr	r3, [r7, #8]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b087      	sub	sp, #28
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	460b      	mov	r3, r1
 8006e70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	f003 030f 	and.w	r3, r3, #15
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	fa22 f303 	lsr.w	r3, r2, r3
 8006e96:	01db      	lsls	r3, r3, #7
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0301 	and.w	r3, r3, #1
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006efc:	f023 0307 	bic.w	r3, r3, #7
 8006f00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	333c      	adds	r3, #60	; 0x3c
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	4a26      	ldr	r2, [pc, #152]	; (8006fdc <USB_EP0_OutStart+0xb8>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d90a      	bls.n	8006f5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f58:	d101      	bne.n	8006f5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e037      	b.n	8006fce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	461a      	mov	r2, r3
 8006f66:	2300      	movs	r3, #0
 8006f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f8c:	f043 0318 	orr.w	r3, r3, #24
 8006f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006fa4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d10f      	bne.n	8006fcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006fca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	4f54300a 	.word	0x4f54300a

08006fe0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4a13      	ldr	r2, [pc, #76]	; (8007044 <USB_CoreReset+0x64>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e01b      	b.n	8007036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	daf2      	bge.n	8006fec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f043 0201 	orr.w	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4a09      	ldr	r2, [pc, #36]	; (8007044 <USB_CoreReset+0x64>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d901      	bls.n	8007028 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e006      	b.n	8007036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b01      	cmp	r3, #1
 8007032:	d0f0      	beq.n	8007016 <USB_CoreReset+0x36>

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	00030d40 	.word	0x00030d40

08007048 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007054:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007058:	f002 fc9e 	bl	8009998 <USBD_static_malloc>
 800705c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d109      	bne.n	8007078 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	32b0      	adds	r2, #176	; 0xb0
 800706e:	2100      	movs	r1, #0
 8007070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007074:	2302      	movs	r3, #2
 8007076:	e0d4      	b.n	8007222 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007078:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800707c:	2100      	movs	r1, #0
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f002 fd06 	bl	8009a90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	32b0      	adds	r2, #176	; 0xb0
 800708e:	68f9      	ldr	r1, [r7, #12]
 8007090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	32b0      	adds	r2, #176	; 0xb0
 800709e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7c1b      	ldrb	r3, [r3, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d138      	bne.n	8007122 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80070b0:	4b5e      	ldr	r3, [pc, #376]	; (800722c <USBD_CDC_Init+0x1e4>)
 80070b2:	7819      	ldrb	r1, [r3, #0]
 80070b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b8:	2202      	movs	r2, #2
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f002 fb49 	bl	8009752 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80070c0:	4b5a      	ldr	r3, [pc, #360]	; (800722c <USBD_CDC_Init+0x1e4>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f003 020f 	and.w	r2, r3, #15
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	4613      	mov	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	3324      	adds	r3, #36	; 0x24
 80070d6:	2201      	movs	r2, #1
 80070d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070da:	4b55      	ldr	r3, [pc, #340]	; (8007230 <USBD_CDC_Init+0x1e8>)
 80070dc:	7819      	ldrb	r1, [r3, #0]
 80070de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070e2:	2202      	movs	r2, #2
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f002 fb34 	bl	8009752 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070ea:	4b51      	ldr	r3, [pc, #324]	; (8007230 <USBD_CDC_Init+0x1e8>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f003 020f 	and.w	r2, r3, #15
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	4613      	mov	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	440b      	add	r3, r1
 80070fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007102:	2201      	movs	r2, #1
 8007104:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007106:	4b4b      	ldr	r3, [pc, #300]	; (8007234 <USBD_CDC_Init+0x1ec>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f003 020f 	and.w	r2, r3, #15
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	3326      	adds	r3, #38	; 0x26
 800711c:	2210      	movs	r2, #16
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	e035      	b.n	800718e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007122:	4b42      	ldr	r3, [pc, #264]	; (800722c <USBD_CDC_Init+0x1e4>)
 8007124:	7819      	ldrb	r1, [r3, #0]
 8007126:	2340      	movs	r3, #64	; 0x40
 8007128:	2202      	movs	r2, #2
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f002 fb11 	bl	8009752 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007130:	4b3e      	ldr	r3, [pc, #248]	; (800722c <USBD_CDC_Init+0x1e4>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	f003 020f 	and.w	r2, r3, #15
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	440b      	add	r3, r1
 8007144:	3324      	adds	r3, #36	; 0x24
 8007146:	2201      	movs	r2, #1
 8007148:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800714a:	4b39      	ldr	r3, [pc, #228]	; (8007230 <USBD_CDC_Init+0x1e8>)
 800714c:	7819      	ldrb	r1, [r3, #0]
 800714e:	2340      	movs	r3, #64	; 0x40
 8007150:	2202      	movs	r2, #2
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f002 fafd 	bl	8009752 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007158:	4b35      	ldr	r3, [pc, #212]	; (8007230 <USBD_CDC_Init+0x1e8>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 020f 	and.w	r2, r3, #15
 8007160:	6879      	ldr	r1, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007170:	2201      	movs	r2, #1
 8007172:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007174:	4b2f      	ldr	r3, [pc, #188]	; (8007234 <USBD_CDC_Init+0x1ec>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	f003 020f 	and.w	r2, r3, #15
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	3326      	adds	r3, #38	; 0x26
 800718a:	2210      	movs	r2, #16
 800718c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800718e:	4b29      	ldr	r3, [pc, #164]	; (8007234 <USBD_CDC_Init+0x1ec>)
 8007190:	7819      	ldrb	r1, [r3, #0]
 8007192:	2308      	movs	r3, #8
 8007194:	2203      	movs	r2, #3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f002 fadb 	bl	8009752 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800719c:	4b25      	ldr	r3, [pc, #148]	; (8007234 <USBD_CDC_Init+0x1ec>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 020f 	and.w	r2, r3, #15
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	3324      	adds	r3, #36	; 0x24
 80071b2:	2201      	movs	r2, #1
 80071b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	33b0      	adds	r3, #176	; 0xb0
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80071ec:	2302      	movs	r3, #2
 80071ee:	e018      	b.n	8007222 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7c1b      	ldrb	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071f8:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <USBD_CDC_Init+0x1e8>)
 80071fa:	7819      	ldrb	r1, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f002 fb92 	bl	8009930 <USBD_LL_PrepareReceive>
 800720c:	e008      	b.n	8007220 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800720e:	4b08      	ldr	r3, [pc, #32]	; (8007230 <USBD_CDC_Init+0x1e8>)
 8007210:	7819      	ldrb	r1, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f002 fb88 	bl	8009930 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000693 	.word	0x20000693
 8007230:	20000694 	.word	0x20000694
 8007234:	20000695 	.word	0x20000695

08007238 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007244:	4b3a      	ldr	r3, [pc, #232]	; (8007330 <USBD_CDC_DeInit+0xf8>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f002 faa7 	bl	800979e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007250:	4b37      	ldr	r3, [pc, #220]	; (8007330 <USBD_CDC_DeInit+0xf8>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	f003 020f 	and.w	r2, r3, #15
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	440b      	add	r3, r1
 8007264:	3324      	adds	r3, #36	; 0x24
 8007266:	2200      	movs	r2, #0
 8007268:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800726a:	4b32      	ldr	r3, [pc, #200]	; (8007334 <USBD_CDC_DeInit+0xfc>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f002 fa94 	bl	800979e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007276:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <USBD_CDC_DeInit+0xfc>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	f003 020f 	and.w	r2, r3, #15
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800728e:	2200      	movs	r2, #0
 8007290:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007292:	4b29      	ldr	r3, [pc, #164]	; (8007338 <USBD_CDC_DeInit+0x100>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f002 fa80 	bl	800979e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800729e:	4b26      	ldr	r3, [pc, #152]	; (8007338 <USBD_CDC_DeInit+0x100>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	f003 020f 	and.w	r2, r3, #15
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	3324      	adds	r3, #36	; 0x24
 80072b4:	2200      	movs	r2, #0
 80072b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80072b8:	4b1f      	ldr	r3, [pc, #124]	; (8007338 <USBD_CDC_DeInit+0x100>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	f003 020f 	and.w	r2, r3, #15
 80072c0:	6879      	ldr	r1, [r7, #4]
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	3326      	adds	r3, #38	; 0x26
 80072ce:	2200      	movs	r2, #0
 80072d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	32b0      	adds	r2, #176	; 0xb0
 80072dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01f      	beq.n	8007324 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	33b0      	adds	r3, #176	; 0xb0
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	32b0      	adds	r2, #176	; 0xb0
 8007302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007306:	4618      	mov	r0, r3
 8007308:	f002 fb54 	bl	80099b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	32b0      	adds	r2, #176	; 0xb0
 8007316:	2100      	movs	r1, #0
 8007318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000693 	.word	0x20000693
 8007334:	20000694 	.word	0x20000694
 8007338:	20000695 	.word	0x20000695

0800733c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	32b0      	adds	r2, #176	; 0xb0
 8007350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007354:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	e0bf      	b.n	80074ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007374:	2b00      	cmp	r3, #0
 8007376:	d050      	beq.n	800741a <USBD_CDC_Setup+0xde>
 8007378:	2b20      	cmp	r3, #32
 800737a:	f040 80af 	bne.w	80074dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	88db      	ldrh	r3, [r3, #6]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d03a      	beq.n	80073fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	b25b      	sxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	da1b      	bge.n	80073c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	33b0      	adds	r3, #176	; 0xb0
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80073a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	88d2      	ldrh	r2, [r2, #6]
 80073ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	88db      	ldrh	r3, [r3, #6]
 80073b2:	2b07      	cmp	r3, #7
 80073b4:	bf28      	it	cs
 80073b6:	2307      	movcs	r3, #7
 80073b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	89fa      	ldrh	r2, [r7, #14]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 fd89 	bl	8008ed8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80073c6:	e090      	b.n	80074ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	785a      	ldrb	r2, [r3, #1]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	88db      	ldrh	r3, [r3, #6]
 80073d6:	2b3f      	cmp	r3, #63	; 0x3f
 80073d8:	d803      	bhi.n	80073e2 <USBD_CDC_Setup+0xa6>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	88db      	ldrh	r3, [r3, #6]
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	e000      	b.n	80073e4 <USBD_CDC_Setup+0xa8>
 80073e2:	2240      	movs	r2, #64	; 0x40
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80073ea:	6939      	ldr	r1, [r7, #16]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80073f2:	461a      	mov	r2, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 fd9b 	bl	8008f30 <USBD_CtlPrepareRx>
      break;
 80073fa:	e076      	b.n	80074ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	33b0      	adds	r3, #176	; 0xb0
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	7850      	ldrb	r0, [r2, #1]
 8007412:	2200      	movs	r2, #0
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	4798      	blx	r3
      break;
 8007418:	e067      	b.n	80074ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b0b      	cmp	r3, #11
 8007420:	d851      	bhi.n	80074c6 <USBD_CDC_Setup+0x18a>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <USBD_CDC_Setup+0xec>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	08007459 	.word	0x08007459
 800742c:	080074d5 	.word	0x080074d5
 8007430:	080074c7 	.word	0x080074c7
 8007434:	080074c7 	.word	0x080074c7
 8007438:	080074c7 	.word	0x080074c7
 800743c:	080074c7 	.word	0x080074c7
 8007440:	080074c7 	.word	0x080074c7
 8007444:	080074c7 	.word	0x080074c7
 8007448:	080074c7 	.word	0x080074c7
 800744c:	080074c7 	.word	0x080074c7
 8007450:	08007483 	.word	0x08007483
 8007454:	080074ad 	.word	0x080074ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b03      	cmp	r3, #3
 8007462:	d107      	bne.n	8007474 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007464:	f107 030a 	add.w	r3, r7, #10
 8007468:	2202      	movs	r2, #2
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 fd33 	bl	8008ed8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007472:	e032      	b.n	80074da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 fcbd 	bl	8008df6 <USBD_CtlError>
            ret = USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	75fb      	strb	r3, [r7, #23]
          break;
 8007480:	e02b      	b.n	80074da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b03      	cmp	r3, #3
 800748c:	d107      	bne.n	800749e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800748e:	f107 030d 	add.w	r3, r7, #13
 8007492:	2201      	movs	r2, #1
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 fd1e 	bl	8008ed8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800749c:	e01d      	b.n	80074da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 fca8 	bl	8008df6 <USBD_CtlError>
            ret = USBD_FAIL;
 80074a6:	2303      	movs	r3, #3
 80074a8:	75fb      	strb	r3, [r7, #23]
          break;
 80074aa:	e016      	b.n	80074da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d00f      	beq.n	80074d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fc9b 	bl	8008df6 <USBD_CtlError>
            ret = USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074c4:	e008      	b.n	80074d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fc94 	bl	8008df6 <USBD_CtlError>
          ret = USBD_FAIL;
 80074ce:	2303      	movs	r3, #3
 80074d0:	75fb      	strb	r3, [r7, #23]
          break;
 80074d2:	e002      	b.n	80074da <USBD_CDC_Setup+0x19e>
          break;
 80074d4:	bf00      	nop
 80074d6:	e008      	b.n	80074ea <USBD_CDC_Setup+0x1ae>
          break;
 80074d8:	bf00      	nop
      }
      break;
 80074da:	e006      	b.n	80074ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 fc89 	bl	8008df6 <USBD_CtlError>
      ret = USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	75fb      	strb	r3, [r7, #23]
      break;
 80074e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007506:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	32b0      	adds	r2, #176	; 0xb0
 8007512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800751a:	2303      	movs	r3, #3
 800751c:	e065      	b.n	80075ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	32b0      	adds	r2, #176	; 0xb0
 8007528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	f003 020f 	and.w	r2, r3, #15
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	440b      	add	r3, r1
 8007540:	3318      	adds	r3, #24
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d02f      	beq.n	80075a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	3318      	adds	r3, #24
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	f003 010f 	and.w	r1, r3, #15
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	460b      	mov	r3, r1
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	440b      	add	r3, r1
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4403      	add	r3, r0
 8007570:	3348      	adds	r3, #72	; 0x48
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	fbb2 f1f3 	udiv	r1, r2, r3
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800757e:	2b00      	cmp	r3, #0
 8007580:	d112      	bne.n	80075a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	f003 020f 	and.w	r2, r3, #15
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	4613      	mov	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	440b      	add	r3, r1
 8007594:	3318      	adds	r3, #24
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800759a:	78f9      	ldrb	r1, [r7, #3]
 800759c:	2300      	movs	r3, #0
 800759e:	2200      	movs	r2, #0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f002 f9a4 	bl	80098ee <USBD_LL_Transmit>
 80075a6:	e01f      	b.n	80075e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	33b0      	adds	r3, #176	; 0xb0
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d010      	beq.n	80075e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	33b0      	adds	r3, #176	; 0xb0
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	32b0      	adds	r2, #176	; 0xb0
 8007608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	32b0      	adds	r2, #176	; 0xb0
 8007618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007620:	2303      	movs	r3, #3
 8007622:	e01a      	b.n	800765a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f002 f9a2 	bl	8009972 <USBD_LL_GetRxDataSize>
 800762e:	4602      	mov	r2, r0
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	33b0      	adds	r3, #176	; 0xb0
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007654:	4611      	mov	r1, r2
 8007656:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	32b0      	adds	r2, #176	; 0xb0
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007680:	2303      	movs	r3, #3
 8007682:	e025      	b.n	80076d0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	33b0      	adds	r3, #176	; 0xb0
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d01a      	beq.n	80076ce <USBD_CDC_EP0_RxReady+0x6c>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800769e:	2bff      	cmp	r3, #255	; 0xff
 80076a0:	d015      	beq.n	80076ce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	33b0      	adds	r3, #176	; 0xb0
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80076ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076c2:	b292      	uxth	r2, r2
 80076c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	22ff      	movs	r2, #255	; 0xff
 80076ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076e0:	2182      	movs	r1, #130	; 0x82
 80076e2:	4818      	ldr	r0, [pc, #96]	; (8007744 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076e4:	f000 fd4f 	bl	8008186 <USBD_GetEpDesc>
 80076e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076ea:	2101      	movs	r1, #1
 80076ec:	4815      	ldr	r0, [pc, #84]	; (8007744 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076ee:	f000 fd4a 	bl	8008186 <USBD_GetEpDesc>
 80076f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076f4:	2181      	movs	r1, #129	; 0x81
 80076f6:	4813      	ldr	r0, [pc, #76]	; (8007744 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076f8:	f000 fd45 	bl	8008186 <USBD_GetEpDesc>
 80076fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	2210      	movs	r2, #16
 8007708:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d006      	beq.n	800771e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	2200      	movs	r2, #0
 8007714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007718:	711a      	strb	r2, [r3, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d006      	beq.n	8007732 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800772c:	711a      	strb	r2, [r3, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2243      	movs	r2, #67	; 0x43
 8007736:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007738:	4b02      	ldr	r3, [pc, #8]	; (8007744 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000650 	.word	0x20000650

08007748 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007750:	2182      	movs	r1, #130	; 0x82
 8007752:	4818      	ldr	r0, [pc, #96]	; (80077b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007754:	f000 fd17 	bl	8008186 <USBD_GetEpDesc>
 8007758:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800775a:	2101      	movs	r1, #1
 800775c:	4815      	ldr	r0, [pc, #84]	; (80077b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800775e:	f000 fd12 	bl	8008186 <USBD_GetEpDesc>
 8007762:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007764:	2181      	movs	r1, #129	; 0x81
 8007766:	4813      	ldr	r0, [pc, #76]	; (80077b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007768:	f000 fd0d 	bl	8008186 <USBD_GetEpDesc>
 800776c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2210      	movs	r2, #16
 8007778:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	2200      	movs	r2, #0
 8007784:	711a      	strb	r2, [r3, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f042 0202 	orr.w	r2, r2, #2
 800778c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d006      	beq.n	80077a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	711a      	strb	r2, [r3, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f042 0202 	orr.w	r2, r2, #2
 80077a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2243      	movs	r2, #67	; 0x43
 80077a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077a8:	4b02      	ldr	r3, [pc, #8]	; (80077b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20000650 	.word	0x20000650

080077b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077c0:	2182      	movs	r1, #130	; 0x82
 80077c2:	4818      	ldr	r0, [pc, #96]	; (8007824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077c4:	f000 fcdf 	bl	8008186 <USBD_GetEpDesc>
 80077c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077ca:	2101      	movs	r1, #1
 80077cc:	4815      	ldr	r0, [pc, #84]	; (8007824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077ce:	f000 fcda 	bl	8008186 <USBD_GetEpDesc>
 80077d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077d4:	2181      	movs	r1, #129	; 0x81
 80077d6:	4813      	ldr	r0, [pc, #76]	; (8007824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077d8:	f000 fcd5 	bl	8008186 <USBD_GetEpDesc>
 80077dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2210      	movs	r2, #16
 80077e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077f8:	711a      	strb	r2, [r3, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800780c:	711a      	strb	r2, [r3, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2243      	movs	r2, #67	; 0x43
 8007816:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007818:	4b02      	ldr	r3, [pc, #8]	; (8007824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000650 	.word	0x20000650

08007828 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	220a      	movs	r2, #10
 8007834:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007836:	4b03      	ldr	r3, [pc, #12]	; (8007844 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	2000060c 	.word	0x2000060c

08007848 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	e009      	b.n	8007870 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	33b0      	adds	r3, #176	; 0xb0
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	32b0      	adds	r2, #176	; 0xb0
 8007892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007896:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800789e:	2303      	movs	r3, #3
 80078a0:	e008      	b.n	80078b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	32b0      	adds	r2, #176	; 0xb0
 80078d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e004      	b.n	80078ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	32b0      	adds	r2, #176	; 0xb0
 800790e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007912:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007914:	2301      	movs	r3, #1
 8007916:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	32b0      	adds	r2, #176	; 0xb0
 8007922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800792a:	2303      	movs	r3, #3
 800792c:	e025      	b.n	800797a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007934:	2b00      	cmp	r3, #0
 8007936:	d11f      	bne.n	8007978 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2201      	movs	r2, #1
 800793c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007940:	4b10      	ldr	r3, [pc, #64]	; (8007984 <USBD_CDC_TransmitPacket+0x88>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	f003 020f 	and.w	r2, r3, #15
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4403      	add	r3, r0
 800795a:	3318      	adds	r3, #24
 800795c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800795e:	4b09      	ldr	r3, [pc, #36]	; (8007984 <USBD_CDC_TransmitPacket+0x88>)
 8007960:	7819      	ldrb	r1, [r3, #0]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f001 ffbd 	bl	80098ee <USBD_LL_Transmit>

    ret = USBD_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000693 	.word	0x20000693

08007988 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	32b0      	adds	r2, #176	; 0xb0
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32b0      	adds	r2, #176	; 0xb0
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e018      	b.n	80079e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	7c1b      	ldrb	r3, [r3, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10a      	bne.n	80079d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079be:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <USBD_CDC_ReceivePacket+0x68>)
 80079c0:	7819      	ldrb	r1, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 ffaf 	bl	8009930 <USBD_LL_PrepareReceive>
 80079d2:	e008      	b.n	80079e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079d4:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <USBD_CDC_ReceivePacket+0x68>)
 80079d6:	7819      	ldrb	r1, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079de:	2340      	movs	r3, #64	; 0x40
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 ffa5 	bl	8009930 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20000694 	.word	0x20000694

080079f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	4613      	mov	r3, r2
 8007a00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e01f      	b.n	8007a4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	79fa      	ldrb	r2, [r7, #7]
 8007a3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f001 fe1f 	bl	8009684 <USBD_LL_Init>
 8007a46:	4603      	mov	r3, r0
 8007a48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e025      	b.n	8007ab8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	32ae      	adds	r2, #174	; 0xae
 8007a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00f      	beq.n	8007aa8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	32ae      	adds	r2, #174	; 0xae
 8007a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	f107 020e 	add.w	r2, r7, #14
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fe27 	bl	800971c <USBD_LL_Start>
 8007ace:	4603      	mov	r3, r0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d009      	beq.n	8007b1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	4611      	mov	r1, r2
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	4798      	blx	r3
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4611      	mov	r1, r2
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 f908 	bl	8008d82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b80:	461a      	mov	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d01a      	beq.n	8007bcc <USBD_LL_SetupStage+0x72>
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d822      	bhi.n	8007be0 <USBD_LL_SetupStage+0x86>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <USBD_LL_SetupStage+0x4a>
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d00a      	beq.n	8007bb8 <USBD_LL_SetupStage+0x5e>
 8007ba2:	e01d      	b.n	8007be0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fb5f 	bl	8008270 <USBD_StdDevReq>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb6:	e020      	b.n	8007bfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fbc7 	bl	8008354 <USBD_StdItfReq>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bca:	e016      	b.n	8007bfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fc29 	bl	800842c <USBD_StdEPReq>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8007bde:	e00c      	b.n	8007bfa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007be6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 fdf4 	bl	80097dc <USBD_LL_StallEP>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf8:	bf00      	nop
  }

  return ret;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c16:	7afb      	ldrb	r3, [r7, #11]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d16e      	bne.n	8007cfa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	f040 8098 	bne.w	8007d60 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d913      	bls.n	8007c64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	1ad2      	subs	r2, r2, r3
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	4293      	cmp	r3, r2
 8007c54:	bf28      	it	cs
 8007c56:	4613      	movcs	r3, r2
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6879      	ldr	r1, [r7, #4]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f001 f984 	bl	8008f6a <USBD_CtlContinueRx>
 8007c62:	e07d      	b.n	8007d60 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c6a:	f003 031f 	and.w	r3, r3, #31
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d014      	beq.n	8007c9c <USBD_LL_DataOutStage+0x98>
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d81d      	bhi.n	8007cb2 <USBD_LL_DataOutStage+0xae>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <USBD_LL_DataOutStage+0x7c>
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d003      	beq.n	8007c86 <USBD_LL_DataOutStage+0x82>
 8007c7e:	e018      	b.n	8007cb2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	75bb      	strb	r3, [r7, #22]
            break;
 8007c84:	e018      	b.n	8007cb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	4619      	mov	r1, r3
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 fa5e 	bl	8008152 <USBD_CoreFindIF>
 8007c96:	4603      	mov	r3, r0
 8007c98:	75bb      	strb	r3, [r7, #22]
            break;
 8007c9a:	e00d      	b.n	8007cb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fa60 	bl	800816c <USBD_CoreFindEP>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75bb      	strb	r3, [r7, #22]
            break;
 8007cb0:	e002      	b.n	8007cb8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	75bb      	strb	r3, [r7, #22]
            break;
 8007cb6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007cb8:	7dbb      	ldrb	r3, [r7, #22]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d119      	bne.n	8007cf2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d113      	bne.n	8007cf2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007cca:	7dba      	ldrb	r2, [r7, #22]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	32ae      	adds	r2, #174	; 0xae
 8007cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007cda:	7dba      	ldrb	r2, [r7, #22]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ce2:	7dba      	ldrb	r2, [r7, #22]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	32ae      	adds	r2, #174	; 0xae
 8007ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f001 f94a 	bl	8008f8c <USBD_CtlSendStatus>
 8007cf8:	e032      	b.n	8007d60 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	4619      	mov	r1, r3
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 fa31 	bl	800816c <USBD_CoreFindEP>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d0e:	7dbb      	ldrb	r3, [r7, #22]
 8007d10:	2bff      	cmp	r3, #255	; 0xff
 8007d12:	d025      	beq.n	8007d60 <USBD_LL_DataOutStage+0x15c>
 8007d14:	7dbb      	ldrb	r3, [r7, #22]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d122      	bne.n	8007d60 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d117      	bne.n	8007d56 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d26:	7dba      	ldrb	r2, [r7, #22]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	32ae      	adds	r2, #174	; 0xae
 8007d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00f      	beq.n	8007d56 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d36:	7dba      	ldrb	r2, [r7, #22]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d3e:	7dba      	ldrb	r2, [r7, #22]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	32ae      	adds	r2, #174	; 0xae
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	7afa      	ldrb	r2, [r7, #11]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	4798      	blx	r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	e000      	b.n	8007d62 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	460b      	mov	r3, r1
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007d78:	7afb      	ldrb	r3, [r7, #11]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d16f      	bne.n	8007e5e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3314      	adds	r3, #20
 8007d82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d15a      	bne.n	8007e44 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d914      	bls.n	8007dc4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	1ad2      	subs	r2, r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	461a      	mov	r2, r3
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f001 f8ac 	bl	8008f0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007db6:	2300      	movs	r3, #0
 8007db8:	2200      	movs	r2, #0
 8007dba:	2100      	movs	r1, #0
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f001 fdb7 	bl	8009930 <USBD_LL_PrepareReceive>
 8007dc2:	e03f      	b.n	8007e44 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d11c      	bne.n	8007e0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d316      	bcc.n	8007e0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d20f      	bcs.n	8007e0a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dea:	2200      	movs	r2, #0
 8007dec:	2100      	movs	r1, #0
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f001 f88d 	bl	8008f0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f001 fd94 	bl	8009930 <USBD_LL_PrepareReceive>
 8007e08:	e01c      	b.n	8007e44 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d10f      	bne.n	8007e36 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e36:	2180      	movs	r1, #128	; 0x80
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 fccf 	bl	80097dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f001 f8b7 	bl	8008fb2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d03a      	beq.n	8007ec4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff fe42 	bl	8007ad8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e5c:	e032      	b.n	8007ec4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e5e:	7afb      	ldrb	r3, [r7, #11]
 8007e60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	4619      	mov	r1, r3
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f97f 	bl	800816c <USBD_CoreFindEP>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2bff      	cmp	r3, #255	; 0xff
 8007e76:	d025      	beq.n	8007ec4 <USBD_LL_DataInStage+0x15a>
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d122      	bne.n	8007ec4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d11c      	bne.n	8007ec4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e8a:	7dfa      	ldrb	r2, [r7, #23]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	32ae      	adds	r2, #174	; 0xae
 8007e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d014      	beq.n	8007ec4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007e9a:	7dfa      	ldrb	r2, [r7, #23]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007ea2:	7dfa      	ldrb	r2, [r7, #23]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	32ae      	adds	r2, #174	; 0xae
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	7afa      	ldrb	r2, [r7, #11]
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	4798      	blx	r3
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007eba:	7dbb      	ldrb	r3, [r7, #22]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007ec0:	7dbb      	ldrb	r3, [r7, #22]
 8007ec2:	e000      	b.n	8007ec6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d014      	beq.n	8007f34 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00e      	beq.n	8007f34 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6852      	ldr	r2, [r2, #4]
 8007f22:	b2d2      	uxtb	r2, r2
 8007f24:	4611      	mov	r1, r2
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f30:	2303      	movs	r3, #3
 8007f32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f34:	2340      	movs	r3, #64	; 0x40
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fc09 	bl	8009752 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2240      	movs	r2, #64	; 0x40
 8007f4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f50:	2340      	movs	r3, #64	; 0x40
 8007f52:	2200      	movs	r2, #0
 8007f54:	2180      	movs	r1, #128	; 0x80
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fbfb 	bl	8009752 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2240      	movs	r2, #64	; 0x40
 8007f66:	621a      	str	r2, [r3, #32]

  return ret;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	78fa      	ldrb	r2, [r7, #3]
 8007f82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2204      	movs	r2, #4
 8007fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d106      	bne.n	8007fe0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d110      	bne.n	8008024 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	32ae      	adds	r2, #174	; 0xae
 8008044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	e01c      	b.n	800808a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b03      	cmp	r3, #3
 800805a:	d115      	bne.n	8008088 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	32ae      	adds	r2, #174	; 0xae
 8008066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	32ae      	adds	r2, #174	; 0xae
 800807a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	78fa      	ldrb	r2, [r7, #3]
 8008082:	4611      	mov	r1, r2
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	32ae      	adds	r2, #174	; 0xae
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e01c      	b.n	80080ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d115      	bne.n	80080ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	32ae      	adds	r2, #174	; 0xae
 80080ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00b      	beq.n	80080ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	32ae      	adds	r2, #174	; 0xae
 80080de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	78fa      	ldrb	r2, [r7, #3]
 80080e6:	4611      	mov	r1, r2
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00e      	beq.n	8008148 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6852      	ldr	r2, [r2, #4]
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	4611      	mov	r1, r2
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008144:	2303      	movs	r3, #3
 8008146:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008148:	7bfb      	ldrb	r3, [r7, #15]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800815e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008178:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800817a:	4618      	mov	r0, r3
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b086      	sub	sp, #24
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	885b      	ldrh	r3, [r3, #2]
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d920      	bls.n	80081f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80081b6:	e013      	b.n	80081e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80081b8:	f107 030a 	add.w	r3, r7, #10
 80081bc:	4619      	mov	r1, r3
 80081be:	6978      	ldr	r0, [r7, #20]
 80081c0:	f000 f81b 	bl	80081fa <USBD_GetNextDesc>
 80081c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	d108      	bne.n	80081e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	789b      	ldrb	r3, [r3, #2]
 80081d6:	78fa      	ldrb	r2, [r7, #3]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d008      	beq.n	80081ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081dc:	2300      	movs	r3, #0
 80081de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	885b      	ldrh	r3, [r3, #2]
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	897b      	ldrh	r3, [r7, #10]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d8e5      	bhi.n	80081b8 <USBD_GetEpDesc+0x32>
 80081ec:	e000      	b.n	80081f0 <USBD_GetEpDesc+0x6a>
          break;
 80081ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081f0:	693b      	ldr	r3, [r7, #16]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b085      	sub	sp, #20
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	881a      	ldrh	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	4413      	add	r3, r2
 8008214:	b29a      	uxth	r2, r3
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4413      	add	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008226:	68fb      	ldr	r3, [r7, #12]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	3301      	adds	r3, #1
 800824a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008252:	8a3b      	ldrh	r3, [r7, #16]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	b21a      	sxth	r2, r3
 8008258:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800825c:	4313      	orrs	r3, r2
 800825e:	b21b      	sxth	r3, r3
 8008260:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008262:	89fb      	ldrh	r3, [r7, #14]
}
 8008264:	4618      	mov	r0, r3
 8008266:	371c      	adds	r7, #28
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	d005      	beq.n	8008296 <USBD_StdDevReq+0x26>
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d857      	bhi.n	800833e <USBD_StdDevReq+0xce>
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00f      	beq.n	80082b2 <USBD_StdDevReq+0x42>
 8008292:	2b20      	cmp	r3, #32
 8008294:	d153      	bne.n	800833e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	32ae      	adds	r2, #174	; 0xae
 80082a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	4798      	blx	r3
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]
      break;
 80082b0:	e04a      	b.n	8008348 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	2b09      	cmp	r3, #9
 80082b8:	d83b      	bhi.n	8008332 <USBD_StdDevReq+0xc2>
 80082ba:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <USBD_StdDevReq+0x50>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	08008315 	.word	0x08008315
 80082c4:	08008329 	.word	0x08008329
 80082c8:	08008333 	.word	0x08008333
 80082cc:	0800831f 	.word	0x0800831f
 80082d0:	08008333 	.word	0x08008333
 80082d4:	080082f3 	.word	0x080082f3
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	08008333 	.word	0x08008333
 80082e0:	0800830b 	.word	0x0800830b
 80082e4:	080082fd 	.word	0x080082fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa3c 	bl	8008768 <USBD_GetDescriptor>
          break;
 80082f0:	e024      	b.n	800833c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fba1 	bl	8008a3c <USBD_SetAddress>
          break;
 80082fa:	e01f      	b.n	800833c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fbe0 	bl	8008ac4 <USBD_SetConfig>
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]
          break;
 8008308:	e018      	b.n	800833c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fc83 	bl	8008c18 <USBD_GetConfig>
          break;
 8008312:	e013      	b.n	800833c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fcb4 	bl	8008c84 <USBD_GetStatus>
          break;
 800831c:	e00e      	b.n	800833c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fce3 	bl	8008cec <USBD_SetFeature>
          break;
 8008326:	e009      	b.n	800833c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fd07 	bl	8008d3e <USBD_ClrFeature>
          break;
 8008330:	e004      	b.n	800833c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fd5e 	bl	8008df6 <USBD_CtlError>
          break;
 800833a:	bf00      	nop
      }
      break;
 800833c:	e004      	b.n	8008348 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fd58 	bl	8008df6 <USBD_CtlError>
      break;
 8008346:	bf00      	nop
  }

  return ret;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop

08008354 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800836a:	2b40      	cmp	r3, #64	; 0x40
 800836c:	d005      	beq.n	800837a <USBD_StdItfReq+0x26>
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d852      	bhi.n	8008418 <USBD_StdItfReq+0xc4>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <USBD_StdItfReq+0x26>
 8008376:	2b20      	cmp	r3, #32
 8008378:	d14e      	bne.n	8008418 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	3b01      	subs	r3, #1
 8008384:	2b02      	cmp	r3, #2
 8008386:	d840      	bhi.n	800840a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	889b      	ldrh	r3, [r3, #4]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b01      	cmp	r3, #1
 8008390:	d836      	bhi.n	8008400 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	889b      	ldrh	r3, [r3, #4]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff fed9 	bl	8008152 <USBD_CoreFindIF>
 80083a0:	4603      	mov	r3, r0
 80083a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	2bff      	cmp	r3, #255	; 0xff
 80083a8:	d01d      	beq.n	80083e6 <USBD_StdItfReq+0x92>
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11a      	bne.n	80083e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80083b0:	7bba      	ldrb	r2, [r7, #14]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	32ae      	adds	r2, #174	; 0xae
 80083b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00f      	beq.n	80083e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80083c0:	7bba      	ldrb	r2, [r7, #14]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083c8:	7bba      	ldrb	r2, [r7, #14]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	32ae      	adds	r2, #174	; 0xae
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083de:	e004      	b.n	80083ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083e4:	e001      	b.n	80083ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083e6:	2303      	movs	r3, #3
 80083e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	88db      	ldrh	r3, [r3, #6]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d110      	bne.n	8008414 <USBD_StdItfReq+0xc0>
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10d      	bne.n	8008414 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fdc7 	bl	8008f8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083fe:	e009      	b.n	8008414 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fcf7 	bl	8008df6 <USBD_CtlError>
          break;
 8008408:	e004      	b.n	8008414 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fcf2 	bl	8008df6 <USBD_CtlError>
          break;
 8008412:	e000      	b.n	8008416 <USBD_StdItfReq+0xc2>
          break;
 8008414:	bf00      	nop
      }
      break;
 8008416:	e004      	b.n	8008422 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fceb 	bl	8008df6 <USBD_CtlError>
      break;
 8008420:	bf00      	nop
  }

  return ret;
 8008422:	7bfb      	ldrb	r3, [r7, #15]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	889b      	ldrh	r3, [r3, #4]
 800843e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d007      	beq.n	800845c <USBD_StdEPReq+0x30>
 800844c:	2b40      	cmp	r3, #64	; 0x40
 800844e:	f200 817f 	bhi.w	8008750 <USBD_StdEPReq+0x324>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d02a      	beq.n	80084ac <USBD_StdEPReq+0x80>
 8008456:	2b20      	cmp	r3, #32
 8008458:	f040 817a 	bne.w	8008750 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff fe83 	bl	800816c <USBD_CoreFindEP>
 8008466:	4603      	mov	r3, r0
 8008468:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800846a:	7b7b      	ldrb	r3, [r7, #13]
 800846c:	2bff      	cmp	r3, #255	; 0xff
 800846e:	f000 8174 	beq.w	800875a <USBD_StdEPReq+0x32e>
 8008472:	7b7b      	ldrb	r3, [r7, #13]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f040 8170 	bne.w	800875a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800847a:	7b7a      	ldrb	r2, [r7, #13]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008482:	7b7a      	ldrb	r2, [r7, #13]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	32ae      	adds	r2, #174	; 0xae
 8008488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8163 	beq.w	800875a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008494:	7b7a      	ldrb	r2, [r7, #13]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	32ae      	adds	r2, #174	; 0xae
 800849a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084aa:	e156      	b.n	800875a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d008      	beq.n	80084c6 <USBD_StdEPReq+0x9a>
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	f300 8145 	bgt.w	8008744 <USBD_StdEPReq+0x318>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 809b 	beq.w	80085f6 <USBD_StdEPReq+0x1ca>
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d03c      	beq.n	800853e <USBD_StdEPReq+0x112>
 80084c4:	e13e      	b.n	8008744 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d002      	beq.n	80084d8 <USBD_StdEPReq+0xac>
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d016      	beq.n	8008504 <USBD_StdEPReq+0xd8>
 80084d6:	e02c      	b.n	8008532 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00d      	beq.n	80084fa <USBD_StdEPReq+0xce>
 80084de:	7bbb      	ldrb	r3, [r7, #14]
 80084e0:	2b80      	cmp	r3, #128	; 0x80
 80084e2:	d00a      	beq.n	80084fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 f977 	bl	80097dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084ee:	2180      	movs	r1, #128	; 0x80
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 f973 	bl	80097dc <USBD_LL_StallEP>
 80084f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084f8:	e020      	b.n	800853c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fc7a 	bl	8008df6 <USBD_CtlError>
              break;
 8008502:	e01b      	b.n	800853c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	885b      	ldrh	r3, [r3, #2]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10e      	bne.n	800852a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <USBD_StdEPReq+0xfe>
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b80      	cmp	r3, #128	; 0x80
 8008516:	d008      	beq.n	800852a <USBD_StdEPReq+0xfe>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	88db      	ldrh	r3, [r3, #6]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d104      	bne.n	800852a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 f959 	bl	80097dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fd2e 	bl	8008f8c <USBD_CtlSendStatus>

              break;
 8008530:	e004      	b.n	800853c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fc5e 	bl	8008df6 <USBD_CtlError>
              break;
 800853a:	bf00      	nop
          }
          break;
 800853c:	e107      	b.n	800874e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d002      	beq.n	8008550 <USBD_StdEPReq+0x124>
 800854a:	2b03      	cmp	r3, #3
 800854c:	d016      	beq.n	800857c <USBD_StdEPReq+0x150>
 800854e:	e04b      	b.n	80085e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00d      	beq.n	8008572 <USBD_StdEPReq+0x146>
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	2b80      	cmp	r3, #128	; 0x80
 800855a:	d00a      	beq.n	8008572 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 f93b 	bl	80097dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008566:	2180      	movs	r1, #128	; 0x80
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f001 f937 	bl	80097dc <USBD_LL_StallEP>
 800856e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008570:	e040      	b.n	80085f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fc3e 	bl	8008df6 <USBD_CtlError>
              break;
 800857a:	e03b      	b.n	80085f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	885b      	ldrh	r3, [r3, #2]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d136      	bne.n	80085f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858a:	2b00      	cmp	r3, #0
 800858c:	d004      	beq.n	8008598 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f001 f941 	bl	800981a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fcf7 	bl	8008f8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff fde2 	bl	800816c <USBD_CoreFindEP>
 80085a8:	4603      	mov	r3, r0
 80085aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085ac:	7b7b      	ldrb	r3, [r7, #13]
 80085ae:	2bff      	cmp	r3, #255	; 0xff
 80085b0:	d01f      	beq.n	80085f2 <USBD_StdEPReq+0x1c6>
 80085b2:	7b7b      	ldrb	r3, [r7, #13]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d11c      	bne.n	80085f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80085b8:	7b7a      	ldrb	r2, [r7, #13]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80085c0:	7b7a      	ldrb	r2, [r7, #13]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	32ae      	adds	r2, #174	; 0xae
 80085c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d010      	beq.n	80085f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085d0:	7b7a      	ldrb	r2, [r7, #13]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	32ae      	adds	r2, #174	; 0xae
 80085d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085e6:	e004      	b.n	80085f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fc03 	bl	8008df6 <USBD_CtlError>
              break;
 80085f0:	e000      	b.n	80085f4 <USBD_StdEPReq+0x1c8>
              break;
 80085f2:	bf00      	nop
          }
          break;
 80085f4:	e0ab      	b.n	800874e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d002      	beq.n	8008608 <USBD_StdEPReq+0x1dc>
 8008602:	2b03      	cmp	r3, #3
 8008604:	d032      	beq.n	800866c <USBD_StdEPReq+0x240>
 8008606:	e097      	b.n	8008738 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <USBD_StdEPReq+0x1f2>
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b80      	cmp	r3, #128	; 0x80
 8008612:	d004      	beq.n	800861e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fbed 	bl	8008df6 <USBD_CtlError>
                break;
 800861c:	e091      	b.n	8008742 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800861e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008622:	2b00      	cmp	r3, #0
 8008624:	da0b      	bge.n	800863e <USBD_StdEPReq+0x212>
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	3310      	adds	r3, #16
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	4413      	add	r3, r2
 800863a:	3304      	adds	r3, #4
 800863c:	e00b      	b.n	8008656 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	4413      	add	r3, r2
 8008654:	3304      	adds	r3, #4
 8008656:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	2202      	movs	r2, #2
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc37 	bl	8008ed8 <USBD_CtlSendData>
              break;
 800866a:	e06a      	b.n	8008742 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800866c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008670:	2b00      	cmp	r3, #0
 8008672:	da11      	bge.n	8008698 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	f003 020f 	and.w	r2, r3, #15
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4613      	mov	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	3324      	adds	r3, #36	; 0x24
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d117      	bne.n	80086be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fbb0 	bl	8008df6 <USBD_CtlError>
                  break;
 8008696:	e054      	b.n	8008742 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	f003 020f 	and.w	r2, r3, #15
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	440b      	add	r3, r1
 80086aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d104      	bne.n	80086be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fb9d 	bl	8008df6 <USBD_CtlError>
                  break;
 80086bc:	e041      	b.n	8008742 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	da0b      	bge.n	80086de <USBD_StdEPReq+0x2b2>
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	3310      	adds	r3, #16
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	4413      	add	r3, r2
 80086da:	3304      	adds	r3, #4
 80086dc:	e00b      	b.n	80086f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	4413      	add	r3, r2
 80086f4:	3304      	adds	r3, #4
 80086f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <USBD_StdEPReq+0x2d8>
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	2b80      	cmp	r3, #128	; 0x80
 8008702:	d103      	bne.n	800870c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	e00e      	b.n	800872a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f8a1 	bl	8009858 <USBD_LL_IsStallEP>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2201      	movs	r2, #1
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	e002      	b.n	800872a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2202      	movs	r2, #2
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fbd1 	bl	8008ed8 <USBD_CtlSendData>
              break;
 8008736:	e004      	b.n	8008742 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fb5b 	bl	8008df6 <USBD_CtlError>
              break;
 8008740:	bf00      	nop
          }
          break;
 8008742:	e004      	b.n	800874e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fb55 	bl	8008df6 <USBD_CtlError>
          break;
 800874c:	bf00      	nop
      }
      break;
 800874e:	e005      	b.n	800875c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fb4f 	bl	8008df6 <USBD_CtlError>
      break;
 8008758:	e000      	b.n	800875c <USBD_StdEPReq+0x330>
      break;
 800875a:	bf00      	nop
  }

  return ret;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800877a:	2300      	movs	r3, #0
 800877c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	885b      	ldrh	r3, [r3, #2]
 8008782:	0a1b      	lsrs	r3, r3, #8
 8008784:	b29b      	uxth	r3, r3
 8008786:	3b01      	subs	r3, #1
 8008788:	2b06      	cmp	r3, #6
 800878a:	f200 8128 	bhi.w	80089de <USBD_GetDescriptor+0x276>
 800878e:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <USBD_GetDescriptor+0x2c>)
 8008790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008794:	080087b1 	.word	0x080087b1
 8008798:	080087c9 	.word	0x080087c9
 800879c:	08008809 	.word	0x08008809
 80087a0:	080089df 	.word	0x080089df
 80087a4:	080089df 	.word	0x080089df
 80087a8:	0800897f 	.word	0x0800897f
 80087ac:	080089ab 	.word	0x080089ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	7c12      	ldrb	r2, [r2, #16]
 80087bc:	f107 0108 	add.w	r1, r7, #8
 80087c0:	4610      	mov	r0, r2
 80087c2:	4798      	blx	r3
 80087c4:	60f8      	str	r0, [r7, #12]
      break;
 80087c6:	e112      	b.n	80089ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	7c1b      	ldrb	r3, [r3, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10d      	bne.n	80087ec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d8:	f107 0208 	add.w	r2, r7, #8
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3301      	adds	r3, #1
 80087e6:	2202      	movs	r2, #2
 80087e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087ea:	e100      	b.n	80089ee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f4:	f107 0208 	add.w	r2, r7, #8
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	2202      	movs	r2, #2
 8008804:	701a      	strb	r2, [r3, #0]
      break;
 8008806:	e0f2      	b.n	80089ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	885b      	ldrh	r3, [r3, #2]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b05      	cmp	r3, #5
 8008810:	f200 80ac 	bhi.w	800896c <USBD_GetDescriptor+0x204>
 8008814:	a201      	add	r2, pc, #4	; (adr r2, 800881c <USBD_GetDescriptor+0xb4>)
 8008816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881a:	bf00      	nop
 800881c:	08008835 	.word	0x08008835
 8008820:	08008869 	.word	0x08008869
 8008824:	0800889d 	.word	0x0800889d
 8008828:	080088d1 	.word	0x080088d1
 800882c:	08008905 	.word	0x08008905
 8008830:	08008939 	.word	0x08008939
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	7c12      	ldrb	r2, [r2, #16]
 800884c:	f107 0108 	add.w	r1, r7, #8
 8008850:	4610      	mov	r0, r2
 8008852:	4798      	blx	r3
 8008854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008856:	e091      	b.n	800897c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008858:	6839      	ldr	r1, [r7, #0]
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 facb 	bl	8008df6 <USBD_CtlError>
            err++;
 8008860:	7afb      	ldrb	r3, [r7, #11]
 8008862:	3301      	adds	r3, #1
 8008864:	72fb      	strb	r3, [r7, #11]
          break;
 8008866:	e089      	b.n	800897c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	7c12      	ldrb	r2, [r2, #16]
 8008880:	f107 0108 	add.w	r1, r7, #8
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
 8008888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800888a:	e077      	b.n	800897c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fab1 	bl	8008df6 <USBD_CtlError>
            err++;
 8008894:	7afb      	ldrb	r3, [r7, #11]
 8008896:	3301      	adds	r3, #1
 8008898:	72fb      	strb	r3, [r7, #11]
          break;
 800889a:	e06f      	b.n	800897c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	7c12      	ldrb	r2, [r2, #16]
 80088b4:	f107 0108 	add.w	r1, r7, #8
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088be:	e05d      	b.n	800897c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa97 	bl	8008df6 <USBD_CtlError>
            err++;
 80088c8:	7afb      	ldrb	r3, [r7, #11]
 80088ca:	3301      	adds	r3, #1
 80088cc:	72fb      	strb	r3, [r7, #11]
          break;
 80088ce:	e055      	b.n	800897c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	7c12      	ldrb	r2, [r2, #16]
 80088e8:	f107 0108 	add.w	r1, r7, #8
 80088ec:	4610      	mov	r0, r2
 80088ee:	4798      	blx	r3
 80088f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088f2:	e043      	b.n	800897c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa7d 	bl	8008df6 <USBD_CtlError>
            err++;
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	3301      	adds	r3, #1
 8008900:	72fb      	strb	r3, [r7, #11]
          break;
 8008902:	e03b      	b.n	800897c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00b      	beq.n	8008928 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	7c12      	ldrb	r2, [r2, #16]
 800891c:	f107 0108 	add.w	r1, r7, #8
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008926:	e029      	b.n	800897c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa63 	bl	8008df6 <USBD_CtlError>
            err++;
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	3301      	adds	r3, #1
 8008934:	72fb      	strb	r3, [r7, #11]
          break;
 8008936:	e021      	b.n	800897c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00b      	beq.n	800895c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7c12      	ldrb	r2, [r2, #16]
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895a:	e00f      	b.n	800897c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa49 	bl	8008df6 <USBD_CtlError>
            err++;
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	3301      	adds	r3, #1
 8008968:	72fb      	strb	r3, [r7, #11]
          break;
 800896a:	e007      	b.n	800897c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa41 	bl	8008df6 <USBD_CtlError>
          err++;
 8008974:	7afb      	ldrb	r3, [r7, #11]
 8008976:	3301      	adds	r3, #1
 8008978:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800897a:	bf00      	nop
      }
      break;
 800897c:	e037      	b.n	80089ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	7c1b      	ldrb	r3, [r3, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	f107 0208 	add.w	r2, r7, #8
 8008992:	4610      	mov	r0, r2
 8008994:	4798      	blx	r3
 8008996:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008998:	e029      	b.n	80089ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fa2a 	bl	8008df6 <USBD_CtlError>
        err++;
 80089a2:	7afb      	ldrb	r3, [r7, #11]
 80089a4:	3301      	adds	r3, #1
 80089a6:	72fb      	strb	r3, [r7, #11]
      break;
 80089a8:	e021      	b.n	80089ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	7c1b      	ldrb	r3, [r3, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10d      	bne.n	80089ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	f107 0208 	add.w	r2, r7, #8
 80089be:	4610      	mov	r0, r2
 80089c0:	4798      	blx	r3
 80089c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	2207      	movs	r2, #7
 80089ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089cc:	e00f      	b.n	80089ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fa10 	bl	8008df6 <USBD_CtlError>
        err++;
 80089d6:	7afb      	ldrb	r3, [r7, #11]
 80089d8:	3301      	adds	r3, #1
 80089da:	72fb      	strb	r3, [r7, #11]
      break;
 80089dc:	e007      	b.n	80089ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fa08 	bl	8008df6 <USBD_CtlError>
      err++;
 80089e6:	7afb      	ldrb	r3, [r7, #11]
 80089e8:	3301      	adds	r3, #1
 80089ea:	72fb      	strb	r3, [r7, #11]
      break;
 80089ec:	bf00      	nop
  }

  if (err != 0U)
 80089ee:	7afb      	ldrb	r3, [r7, #11]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d11e      	bne.n	8008a32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	88db      	ldrh	r3, [r3, #6]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d016      	beq.n	8008a2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80089fc:	893b      	ldrh	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00e      	beq.n	8008a20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	88da      	ldrh	r2, [r3, #6]
 8008a06:	893b      	ldrh	r3, [r7, #8]
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	bf28      	it	cs
 8008a0c:	4613      	movcs	r3, r2
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a12:	893b      	ldrh	r3, [r7, #8]
 8008a14:	461a      	mov	r2, r3
 8008a16:	68f9      	ldr	r1, [r7, #12]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fa5d 	bl	8008ed8 <USBD_CtlSendData>
 8008a1e:	e009      	b.n	8008a34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f9e7 	bl	8008df6 <USBD_CtlError>
 8008a28:	e004      	b.n	8008a34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 faae 	bl	8008f8c <USBD_CtlSendStatus>
 8008a30:	e000      	b.n	8008a34 <USBD_GetDescriptor+0x2cc>
    return;
 8008a32:	bf00      	nop
  }
}
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop

08008a3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	889b      	ldrh	r3, [r3, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d131      	bne.n	8008ab2 <USBD_SetAddress+0x76>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	88db      	ldrh	r3, [r3, #6]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d12d      	bne.n	8008ab2 <USBD_SetAddress+0x76>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	885b      	ldrh	r3, [r3, #2]
 8008a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a5c:	d829      	bhi.n	8008ab2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	885b      	ldrh	r3, [r3, #2]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d104      	bne.n	8008a80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f9bc 	bl	8008df6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7e:	e01d      	b.n	8008abc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	7bfa      	ldrb	r2, [r7, #15]
 8008a84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 ff0f 	bl	80098b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa7a 	bl	8008f8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d004      	beq.n	8008aa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa6:	e009      	b.n	8008abc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab0:	e004      	b.n	8008abc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f99e 	bl	8008df6 <USBD_CtlError>
  }
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	4b4e      	ldr	r3, [pc, #312]	; (8008c14 <USBD_SetConfig+0x150>)
 8008ada:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008adc:	4b4d      	ldr	r3, [pc, #308]	; (8008c14 <USBD_SetConfig+0x150>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d905      	bls.n	8008af0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f985 	bl	8008df6 <USBD_CtlError>
    return USBD_FAIL;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e08c      	b.n	8008c0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d002      	beq.n	8008b02 <USBD_SetConfig+0x3e>
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d029      	beq.n	8008b54 <USBD_SetConfig+0x90>
 8008b00:	e075      	b.n	8008bee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b02:	4b44      	ldr	r3, [pc, #272]	; (8008c14 <USBD_SetConfig+0x150>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d020      	beq.n	8008b4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b0a:	4b42      	ldr	r3, [pc, #264]	; (8008c14 <USBD_SetConfig+0x150>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b14:	4b3f      	ldr	r3, [pc, #252]	; (8008c14 <USBD_SetConfig+0x150>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7fe ffe7 	bl	8007aee <USBD_SetClassConfig>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d008      	beq.n	8008b3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f962 	bl	8008df6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2202      	movs	r2, #2
 8008b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b3a:	e065      	b.n	8008c08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fa25 	bl	8008f8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2203      	movs	r2, #3
 8008b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b4a:	e05d      	b.n	8008c08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fa1d 	bl	8008f8c <USBD_CtlSendStatus>
      break;
 8008b52:	e059      	b.n	8008c08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b54:	4b2f      	ldr	r3, [pc, #188]	; (8008c14 <USBD_SetConfig+0x150>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d112      	bne.n	8008b82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008b64:	4b2b      	ldr	r3, [pc, #172]	; (8008c14 <USBD_SetConfig+0x150>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b6e:	4b29      	ldr	r3, [pc, #164]	; (8008c14 <USBD_SetConfig+0x150>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7fe ffd6 	bl	8007b26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fa06 	bl	8008f8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b80:	e042      	b.n	8008c08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008b82:	4b24      	ldr	r3, [pc, #144]	; (8008c14 <USBD_SetConfig+0x150>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d02a      	beq.n	8008be6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7fe ffc4 	bl	8007b26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b9e:	4b1d      	ldr	r3, [pc, #116]	; (8008c14 <USBD_SetConfig+0x150>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ba8:	4b1a      	ldr	r3, [pc, #104]	; (8008c14 <USBD_SetConfig+0x150>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7fe ff9d 	bl	8007aee <USBD_SetClassConfig>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00f      	beq.n	8008bde <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f918 	bl	8008df6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7fe ffa9 	bl	8007b26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bdc:	e014      	b.n	8008c08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f9d4 	bl	8008f8c <USBD_CtlSendStatus>
      break;
 8008be4:	e010      	b.n	8008c08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f9d0 	bl	8008f8c <USBD_CtlSendStatus>
      break;
 8008bec:	e00c      	b.n	8008c08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f900 	bl	8008df6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bf6:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <USBD_SetConfig+0x150>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7fe ff92 	bl	8007b26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c02:	2303      	movs	r3, #3
 8008c04:	73fb      	strb	r3, [r7, #15]
      break;
 8008c06:	bf00      	nop
  }

  return ret;
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	200008e4 	.word	0x200008e4

08008c18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	88db      	ldrh	r3, [r3, #6]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d004      	beq.n	8008c34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f8e2 	bl	8008df6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c32:	e023      	b.n	8008c7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	dc02      	bgt.n	8008c46 <USBD_GetConfig+0x2e>
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	dc03      	bgt.n	8008c4c <USBD_GetConfig+0x34>
 8008c44:	e015      	b.n	8008c72 <USBD_GetConfig+0x5a>
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d00b      	beq.n	8008c62 <USBD_GetConfig+0x4a>
 8008c4a:	e012      	b.n	8008c72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3308      	adds	r3, #8
 8008c56:	2201      	movs	r2, #1
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f93c 	bl	8008ed8 <USBD_CtlSendData>
        break;
 8008c60:	e00c      	b.n	8008c7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3304      	adds	r3, #4
 8008c66:	2201      	movs	r2, #1
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f934 	bl	8008ed8 <USBD_CtlSendData>
        break;
 8008c70:	e004      	b.n	8008c7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f8be 	bl	8008df6 <USBD_CtlError>
        break;
 8008c7a:	bf00      	nop
}
 8008c7c:	bf00      	nop
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	3b01      	subs	r3, #1
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d81e      	bhi.n	8008cda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	88db      	ldrh	r3, [r3, #6]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d004      	beq.n	8008cae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f8a5 	bl	8008df6 <USBD_CtlError>
        break;
 8008cac:	e01a      	b.n	8008ce4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d005      	beq.n	8008cca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f043 0202 	orr.w	r2, r3, #2
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	330c      	adds	r3, #12
 8008cce:	2202      	movs	r2, #2
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f900 	bl	8008ed8 <USBD_CtlSendData>
      break;
 8008cd8:	e004      	b.n	8008ce4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f88a 	bl	8008df6 <USBD_CtlError>
      break;
 8008ce2:	bf00      	nop
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	885b      	ldrh	r3, [r3, #2]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d107      	bne.n	8008d0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f940 	bl	8008f8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d0c:	e013      	b.n	8008d36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	885b      	ldrh	r3, [r3, #2]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d10b      	bne.n	8008d2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	889b      	ldrh	r3, [r3, #4]
 8008d1a:	0a1b      	lsrs	r3, r3, #8
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f930 	bl	8008f8c <USBD_CtlSendStatus>
}
 8008d2c:	e003      	b.n	8008d36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f860 	bl	8008df6 <USBD_CtlError>
}
 8008d36:	bf00      	nop
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	3b01      	subs	r3, #1
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d80b      	bhi.n	8008d6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	885b      	ldrh	r3, [r3, #2]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d10c      	bne.n	8008d78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f910 	bl	8008f8c <USBD_CtlSendStatus>
      }
      break;
 8008d6c:	e004      	b.n	8008d78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f840 	bl	8008df6 <USBD_CtlError>
      break;
 8008d76:	e000      	b.n	8008d7a <USBD_ClrFeature+0x3c>
      break;
 8008d78:	bf00      	nop
  }
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	781a      	ldrb	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff fa41 	bl	8008234 <SWAPBYTE>
 8008db2:	4603      	mov	r3, r0
 8008db4:	461a      	mov	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f7ff fa34 	bl	8008234 <SWAPBYTE>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7ff fa27 	bl	8008234 <SWAPBYTE>
 8008de6:	4603      	mov	r3, r0
 8008de8:	461a      	mov	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	80da      	strh	r2, [r3, #6]
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b082      	sub	sp, #8
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e00:	2180      	movs	r1, #128	; 0x80
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fcea 	bl	80097dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e08:	2100      	movs	r1, #0
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fce6 	bl	80097dc <USBD_LL_StallEP>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d036      	beq.n	8008e9c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e32:	6938      	ldr	r0, [r7, #16]
 8008e34:	f000 f836 	bl	8008ea4 <USBD_GetLen>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	7812      	ldrb	r2, [r2, #0]
 8008e50:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	3301      	adds	r3, #1
 8008e56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	2203      	movs	r2, #3
 8008e60:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	3301      	adds	r3, #1
 8008e66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e68:	e013      	b.n	8008e92 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	4413      	add	r3, r2
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	7812      	ldrb	r2, [r2, #0]
 8008e74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	613b      	str	r3, [r7, #16]
    idx++;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	4413      	add	r3, r2
 8008e88:	2200      	movs	r2, #0
 8008e8a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e7      	bne.n	8008e6a <USBD_GetString+0x52>
 8008e9a:	e000      	b.n	8008e9e <USBD_GetString+0x86>
    return;
 8008e9c:	bf00      	nop
  }
}
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008eb4:	e005      	b.n	8008ec2 <USBD_GetLen+0x1e>
  {
    len++;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f5      	bne.n	8008eb6 <USBD_GetLen+0x12>
  }

  return len;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	2100      	movs	r1, #0
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 fcf5 	bl	80098ee <USBD_LL_Transmit>

  return USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	2100      	movs	r1, #0
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 fce4 	bl	80098ee <USBD_LL_Transmit>

  return USBD_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2203      	movs	r2, #3
 8008f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	2100      	movs	r1, #0
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 fce8 	bl	8009930 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fcd7 	bl	8009930 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2204      	movs	r2, #4
 8008f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fca3 	bl	80098ee <USBD_LL_Transmit>

  return USBD_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2205      	movs	r2, #5
 8008fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fcb1 	bl	8009930 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4912      	ldr	r1, [pc, #72]	; (8009028 <MX_USB_DEVICE_Init+0x50>)
 8008fe0:	4812      	ldr	r0, [pc, #72]	; (800902c <MX_USB_DEVICE_Init+0x54>)
 8008fe2:	f7fe fd07 	bl	80079f4 <USBD_Init>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fec:	f7f8 f9a8 	bl	8001340 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ff0:	490f      	ldr	r1, [pc, #60]	; (8009030 <MX_USB_DEVICE_Init+0x58>)
 8008ff2:	480e      	ldr	r0, [pc, #56]	; (800902c <MX_USB_DEVICE_Init+0x54>)
 8008ff4:	f7fe fd2e 	bl	8007a54 <USBD_RegisterClass>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ffe:	f7f8 f99f 	bl	8001340 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009002:	490c      	ldr	r1, [pc, #48]	; (8009034 <MX_USB_DEVICE_Init+0x5c>)
 8009004:	4809      	ldr	r0, [pc, #36]	; (800902c <MX_USB_DEVICE_Init+0x54>)
 8009006:	f7fe fc1f 	bl	8007848 <USBD_CDC_RegisterInterface>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009010:	f7f8 f996 	bl	8001340 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009014:	4805      	ldr	r0, [pc, #20]	; (800902c <MX_USB_DEVICE_Init+0x54>)
 8009016:	f7fe fd53 	bl	8007ac0 <USBD_Start>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009020:	f7f8 f98e 	bl	8001340 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009024:	bf00      	nop
 8009026:	bd80      	pop	{r7, pc}
 8009028:	200006ac 	.word	0x200006ac
 800902c:	200008e8 	.word	0x200008e8
 8009030:	20000618 	.word	0x20000618
 8009034:	20000698 	.word	0x20000698

08009038 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800903c:	2200      	movs	r2, #0
 800903e:	4905      	ldr	r1, [pc, #20]	; (8009054 <CDC_Init_FS+0x1c>)
 8009040:	4805      	ldr	r0, [pc, #20]	; (8009058 <CDC_Init_FS+0x20>)
 8009042:	f7fe fc1b 	bl	800787c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009046:	4905      	ldr	r1, [pc, #20]	; (800905c <CDC_Init_FS+0x24>)
 8009048:	4803      	ldr	r0, [pc, #12]	; (8009058 <CDC_Init_FS+0x20>)
 800904a:	f7fe fc39 	bl	80078c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800904e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009050:	4618      	mov	r0, r3
 8009052:	bd80      	pop	{r7, pc}
 8009054:	200013c4 	.word	0x200013c4
 8009058:	200008e8 	.word	0x200008e8
 800905c:	20000bc4 	.word	0x20000bc4

08009060 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009064:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009066:	4618      	mov	r0, r3
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
 800907c:	4613      	mov	r3, r2
 800907e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009080:	79fb      	ldrb	r3, [r7, #7]
 8009082:	2b23      	cmp	r3, #35	; 0x23
 8009084:	d84a      	bhi.n	800911c <CDC_Control_FS+0xac>
 8009086:	a201      	add	r2, pc, #4	; (adr r2, 800908c <CDC_Control_FS+0x1c>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	0800911d 	.word	0x0800911d
 8009090:	0800911d 	.word	0x0800911d
 8009094:	0800911d 	.word	0x0800911d
 8009098:	0800911d 	.word	0x0800911d
 800909c:	0800911d 	.word	0x0800911d
 80090a0:	0800911d 	.word	0x0800911d
 80090a4:	0800911d 	.word	0x0800911d
 80090a8:	0800911d 	.word	0x0800911d
 80090ac:	0800911d 	.word	0x0800911d
 80090b0:	0800911d 	.word	0x0800911d
 80090b4:	0800911d 	.word	0x0800911d
 80090b8:	0800911d 	.word	0x0800911d
 80090bc:	0800911d 	.word	0x0800911d
 80090c0:	0800911d 	.word	0x0800911d
 80090c4:	0800911d 	.word	0x0800911d
 80090c8:	0800911d 	.word	0x0800911d
 80090cc:	0800911d 	.word	0x0800911d
 80090d0:	0800911d 	.word	0x0800911d
 80090d4:	0800911d 	.word	0x0800911d
 80090d8:	0800911d 	.word	0x0800911d
 80090dc:	0800911d 	.word	0x0800911d
 80090e0:	0800911d 	.word	0x0800911d
 80090e4:	0800911d 	.word	0x0800911d
 80090e8:	0800911d 	.word	0x0800911d
 80090ec:	0800911d 	.word	0x0800911d
 80090f0:	0800911d 	.word	0x0800911d
 80090f4:	0800911d 	.word	0x0800911d
 80090f8:	0800911d 	.word	0x0800911d
 80090fc:	0800911d 	.word	0x0800911d
 8009100:	0800911d 	.word	0x0800911d
 8009104:	0800911d 	.word	0x0800911d
 8009108:	0800911d 	.word	0x0800911d
 800910c:	0800911d 	.word	0x0800911d
 8009110:	0800911d 	.word	0x0800911d
 8009114:	0800911d 	.word	0x0800911d
 8009118:	0800911d 	.word	0x0800911d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800911c:	bf00      	nop
  }

  return (USBD_OK);
 800911e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	4809      	ldr	r0, [pc, #36]	; (8009160 <CDC_Receive_FS+0x34>)
 800913a:	f7fe fbc1 	bl	80078c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800913e:	4808      	ldr	r0, [pc, #32]	; (8009160 <CDC_Receive_FS+0x34>)
 8009140:	f7fe fc22 	bl	8007988 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer,Buf,len);
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	461a      	mov	r2, r3
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	4804      	ldr	r0, [pc, #16]	; (8009164 <CDC_Receive_FS+0x38>)
 8009152:	f000 fc8f 	bl	8009a74 <memcpy>
  return (USBD_OK);
 8009156:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	200008e8 	.word	0x200008e8
 8009164:	20000868 	.word	0x20000868

08009168 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009178:	4b0d      	ldr	r3, [pc, #52]	; (80091b0 <CDC_Transmit_FS+0x48>)
 800917a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800917e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800918a:	2301      	movs	r3, #1
 800918c:	e00b      	b.n	80091a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800918e:	887b      	ldrh	r3, [r7, #2]
 8009190:	461a      	mov	r2, r3
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	4806      	ldr	r0, [pc, #24]	; (80091b0 <CDC_Transmit_FS+0x48>)
 8009196:	f7fe fb71 	bl	800787c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800919a:	4805      	ldr	r0, [pc, #20]	; (80091b0 <CDC_Transmit_FS+0x48>)
 800919c:	f7fe fbae 	bl	80078fc <USBD_CDC_TransmitPacket>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	200008e8 	.word	0x200008e8

080091b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	371c      	adds	r7, #28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
	...

080091d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	6039      	str	r1, [r7, #0]
 80091e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2212      	movs	r2, #18
 80091e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091ea:	4b03      	ldr	r3, [pc, #12]	; (80091f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	200006c8 	.word	0x200006c8

080091fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	6039      	str	r1, [r7, #0]
 8009206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2204      	movs	r2, #4
 800920c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800920e:	4b03      	ldr	r3, [pc, #12]	; (800921c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	200006dc 	.word	0x200006dc

08009220 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	6039      	str	r1, [r7, #0]
 800922a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d105      	bne.n	800923e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4907      	ldr	r1, [pc, #28]	; (8009254 <USBD_FS_ProductStrDescriptor+0x34>)
 8009236:	4808      	ldr	r0, [pc, #32]	; (8009258 <USBD_FS_ProductStrDescriptor+0x38>)
 8009238:	f7ff fdee 	bl	8008e18 <USBD_GetString>
 800923c:	e004      	b.n	8009248 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	4904      	ldr	r1, [pc, #16]	; (8009254 <USBD_FS_ProductStrDescriptor+0x34>)
 8009242:	4805      	ldr	r0, [pc, #20]	; (8009258 <USBD_FS_ProductStrDescriptor+0x38>)
 8009244:	f7ff fde8 	bl	8008e18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009248:	4b02      	ldr	r3, [pc, #8]	; (8009254 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20001bc4 	.word	0x20001bc4
 8009258:	0800a418 	.word	0x0800a418

0800925c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	4603      	mov	r3, r0
 8009264:	6039      	str	r1, [r7, #0]
 8009266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	4904      	ldr	r1, [pc, #16]	; (800927c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800926c:	4804      	ldr	r0, [pc, #16]	; (8009280 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800926e:	f7ff fdd3 	bl	8008e18 <USBD_GetString>
  return USBD_StrDesc;
 8009272:	4b02      	ldr	r3, [pc, #8]	; (800927c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20001bc4 	.word	0x20001bc4
 8009280:	0800a430 	.word	0x0800a430

08009284 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	6039      	str	r1, [r7, #0]
 800928e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	221a      	movs	r2, #26
 8009294:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009296:	f000 f843 	bl	8009320 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800929a:	4b02      	ldr	r3, [pc, #8]	; (80092a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800929c:	4618      	mov	r0, r3
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	200006e0 	.word	0x200006e0

080092a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	6039      	str	r1, [r7, #0]
 80092b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092b4:	79fb      	ldrb	r3, [r7, #7]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d105      	bne.n	80092c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	4907      	ldr	r1, [pc, #28]	; (80092dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80092be:	4808      	ldr	r0, [pc, #32]	; (80092e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092c0:	f7ff fdaa 	bl	8008e18 <USBD_GetString>
 80092c4:	e004      	b.n	80092d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	4904      	ldr	r1, [pc, #16]	; (80092dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80092ca:	4805      	ldr	r0, [pc, #20]	; (80092e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092cc:	f7ff fda4 	bl	8008e18 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092d0:	4b02      	ldr	r3, [pc, #8]	; (80092dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	20001bc4 	.word	0x20001bc4
 80092e0:	0800a444 	.word	0x0800a444

080092e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	6039      	str	r1, [r7, #0]
 80092ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d105      	bne.n	8009302 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	4907      	ldr	r1, [pc, #28]	; (8009318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092fa:	4808      	ldr	r0, [pc, #32]	; (800931c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092fc:	f7ff fd8c 	bl	8008e18 <USBD_GetString>
 8009300:	e004      	b.n	800930c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	4904      	ldr	r1, [pc, #16]	; (8009318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009306:	4805      	ldr	r0, [pc, #20]	; (800931c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009308:	f7ff fd86 	bl	8008e18 <USBD_GetString>
  }
  return USBD_StrDesc;
 800930c:	4b02      	ldr	r3, [pc, #8]	; (8009318 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20001bc4 	.word	0x20001bc4
 800931c:	0800a450 	.word	0x0800a450

08009320 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009326:	4b0f      	ldr	r3, [pc, #60]	; (8009364 <Get_SerialNum+0x44>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800932c:	4b0e      	ldr	r3, [pc, #56]	; (8009368 <Get_SerialNum+0x48>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009332:	4b0e      	ldr	r3, [pc, #56]	; (800936c <Get_SerialNum+0x4c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4413      	add	r3, r2
 800933e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d009      	beq.n	800935a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009346:	2208      	movs	r2, #8
 8009348:	4909      	ldr	r1, [pc, #36]	; (8009370 <Get_SerialNum+0x50>)
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 f814 	bl	8009378 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009350:	2204      	movs	r2, #4
 8009352:	4908      	ldr	r1, [pc, #32]	; (8009374 <Get_SerialNum+0x54>)
 8009354:	68b8      	ldr	r0, [r7, #8]
 8009356:	f000 f80f 	bl	8009378 <IntToUnicode>
  }
}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	1fff7a10 	.word	0x1fff7a10
 8009368:	1fff7a14 	.word	0x1fff7a14
 800936c:	1fff7a18 	.word	0x1fff7a18
 8009370:	200006e2 	.word	0x200006e2
 8009374:	200006f2 	.word	0x200006f2

08009378 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800938a:	2300      	movs	r3, #0
 800938c:	75fb      	strb	r3, [r7, #23]
 800938e:	e027      	b.n	80093e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	0f1b      	lsrs	r3, r3, #28
 8009394:	2b09      	cmp	r3, #9
 8009396:	d80b      	bhi.n	80093b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	0f1b      	lsrs	r3, r3, #28
 800939c:	b2da      	uxtb	r2, r3
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	4619      	mov	r1, r3
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	440b      	add	r3, r1
 80093a8:	3230      	adds	r2, #48	; 0x30
 80093aa:	b2d2      	uxtb	r2, r2
 80093ac:	701a      	strb	r2, [r3, #0]
 80093ae:	e00a      	b.n	80093c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	0f1b      	lsrs	r3, r3, #28
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	4619      	mov	r1, r3
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	440b      	add	r3, r1
 80093c0:	3237      	adds	r2, #55	; 0x37
 80093c2:	b2d2      	uxtb	r2, r2
 80093c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	011b      	lsls	r3, r3, #4
 80093ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	005b      	lsls	r3, r3, #1
 80093d0:	3301      	adds	r3, #1
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	4413      	add	r3, r2
 80093d6:	2200      	movs	r2, #0
 80093d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	3301      	adds	r3, #1
 80093de:	75fb      	strb	r3, [r7, #23]
 80093e0:	7dfa      	ldrb	r2, [r7, #23]
 80093e2:	79fb      	ldrb	r3, [r7, #7]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d3d3      	bcc.n	8009390 <IntToUnicode+0x18>
  }
}
 80093e8:	bf00      	nop
 80093ea:	bf00      	nop
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
	...

080093f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08a      	sub	sp, #40	; 0x28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009400:	f107 0314 	add.w	r3, r7, #20
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	605a      	str	r2, [r3, #4]
 800940a:	609a      	str	r2, [r3, #8]
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009418:	d13a      	bne.n	8009490 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800941a:	2300      	movs	r3, #0
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	4b1e      	ldr	r3, [pc, #120]	; (8009498 <HAL_PCD_MspInit+0xa0>)
 8009420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009422:	4a1d      	ldr	r2, [pc, #116]	; (8009498 <HAL_PCD_MspInit+0xa0>)
 8009424:	f043 0301 	orr.w	r3, r3, #1
 8009428:	6313      	str	r3, [r2, #48]	; 0x30
 800942a:	4b1b      	ldr	r3, [pc, #108]	; (8009498 <HAL_PCD_MspInit+0xa0>)
 800942c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	613b      	str	r3, [r7, #16]
 8009434:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009436:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800943a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800943c:	2302      	movs	r3, #2
 800943e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009440:	2300      	movs	r3, #0
 8009442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009444:	2303      	movs	r3, #3
 8009446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009448:	230a      	movs	r3, #10
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800944c:	f107 0314 	add.w	r3, r7, #20
 8009450:	4619      	mov	r1, r3
 8009452:	4812      	ldr	r0, [pc, #72]	; (800949c <HAL_PCD_MspInit+0xa4>)
 8009454:	f7f8 fef2 	bl	800223c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009458:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <HAL_PCD_MspInit+0xa0>)
 800945a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945c:	4a0e      	ldr	r2, [pc, #56]	; (8009498 <HAL_PCD_MspInit+0xa0>)
 800945e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009462:	6353      	str	r3, [r2, #52]	; 0x34
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <HAL_PCD_MspInit+0xa0>)
 800946a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946c:	4a0a      	ldr	r2, [pc, #40]	; (8009498 <HAL_PCD_MspInit+0xa0>)
 800946e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009472:	6453      	str	r3, [r2, #68]	; 0x44
 8009474:	4b08      	ldr	r3, [pc, #32]	; (8009498 <HAL_PCD_MspInit+0xa0>)
 8009476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009480:	2200      	movs	r2, #0
 8009482:	2100      	movs	r1, #0
 8009484:	2043      	movs	r0, #67	; 0x43
 8009486:	f7f8 fea2 	bl	80021ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800948a:	2043      	movs	r0, #67	; 0x43
 800948c:	f7f8 febb 	bl	8002206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009490:	bf00      	nop
 8009492:	3728      	adds	r7, #40	; 0x28
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	40023800 	.word	0x40023800
 800949c:	40020000 	.word	0x40020000

080094a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094b4:	4619      	mov	r1, r3
 80094b6:	4610      	mov	r0, r2
 80094b8:	f7fe fb4f 	bl	8007b5a <USBD_LL_SetupStage>
}
 80094bc:	bf00      	nop
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	4613      	mov	r3, r2
 80094dc:	00db      	lsls	r3, r3, #3
 80094de:	4413      	add	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	440b      	add	r3, r1
 80094e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	78fb      	ldrb	r3, [r7, #3]
 80094ec:	4619      	mov	r1, r3
 80094ee:	f7fe fb89 	bl	8007c04 <USBD_LL_DataOutStage>
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b082      	sub	sp, #8
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	4613      	mov	r3, r2
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	440b      	add	r3, r1
 800951a:	334c      	adds	r3, #76	; 0x4c
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	4619      	mov	r1, r3
 8009522:	f7fe fc22 	bl	8007d6a <USBD_LL_DataInStage>
}
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800953c:	4618      	mov	r0, r3
 800953e:	f7fe fd56 	bl	8007fee <USBD_LL_SOF>
}
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009552:	2301      	movs	r3, #1
 8009554:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
 8009562:	e008      	b.n	8009576 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	2b02      	cmp	r3, #2
 800956a:	d102      	bne.n	8009572 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800956c:	2301      	movs	r3, #1
 800956e:	73fb      	strb	r3, [r7, #15]
 8009570:	e001      	b.n	8009576 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009572:	f7f7 fee5 	bl	8001340 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800957c:	7bfa      	ldrb	r2, [r7, #15]
 800957e:	4611      	mov	r1, r2
 8009580:	4618      	mov	r0, r3
 8009582:	f7fe fcf6 	bl	8007f72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800958c:	4618      	mov	r0, r3
 800958e:	f7fe fc9e 	bl	8007ece <USBD_LL_Reset>
}
 8009592:	bf00      	nop
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fcf1 	bl	8007f92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095c2:	f043 0301 	orr.w	r3, r3, #1
 80095c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095d0:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <HAL_PCD_SuspendCallback+0x48>)
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	4a03      	ldr	r2, [pc, #12]	; (80095e4 <HAL_PCD_SuspendCallback+0x48>)
 80095d6:	f043 0306 	orr.w	r3, r3, #6
 80095da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	e000ed00 	.word	0xe000ed00

080095e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fce1 	bl	8007fbe <USBD_LL_Resume>
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	4611      	mov	r1, r2
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fd39 	bl	8008092 <USBD_LL_IsoOUTIncomplete>
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800963a:	78fa      	ldrb	r2, [r7, #3]
 800963c:	4611      	mov	r1, r2
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fcf5 	bl	800802e <USBD_LL_IsoINIncomplete>
}
 8009644:	bf00      	nop
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fd4b 	bl	80080f6 <USBD_LL_DevConnected>
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fd48 	bl	800810c <USBD_LL_DevDisconnected>
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d13c      	bne.n	800970e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009694:	4a20      	ldr	r2, [pc, #128]	; (8009718 <USBD_LL_Init+0x94>)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a1e      	ldr	r2, [pc, #120]	; (8009718 <USBD_LL_Init+0x94>)
 80096a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096a4:	4b1c      	ldr	r3, [pc, #112]	; (8009718 <USBD_LL_Init+0x94>)
 80096a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80096ac:	4b1a      	ldr	r3, [pc, #104]	; (8009718 <USBD_LL_Init+0x94>)
 80096ae:	2204      	movs	r2, #4
 80096b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80096b2:	4b19      	ldr	r3, [pc, #100]	; (8009718 <USBD_LL_Init+0x94>)
 80096b4:	2202      	movs	r2, #2
 80096b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096b8:	4b17      	ldr	r3, [pc, #92]	; (8009718 <USBD_LL_Init+0x94>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096be:	4b16      	ldr	r3, [pc, #88]	; (8009718 <USBD_LL_Init+0x94>)
 80096c0:	2202      	movs	r2, #2
 80096c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096c4:	4b14      	ldr	r3, [pc, #80]	; (8009718 <USBD_LL_Init+0x94>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80096ca:	4b13      	ldr	r3, [pc, #76]	; (8009718 <USBD_LL_Init+0x94>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80096d0:	4b11      	ldr	r3, [pc, #68]	; (8009718 <USBD_LL_Init+0x94>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80096d6:	4b10      	ldr	r3, [pc, #64]	; (8009718 <USBD_LL_Init+0x94>)
 80096d8:	2200      	movs	r2, #0
 80096da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80096dc:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <USBD_LL_Init+0x94>)
 80096de:	2200      	movs	r2, #0
 80096e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80096e2:	480d      	ldr	r0, [pc, #52]	; (8009718 <USBD_LL_Init+0x94>)
 80096e4:	f7f8 ff79 	bl	80025da <HAL_PCD_Init>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80096ee:	f7f7 fe27 	bl	8001340 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80096f2:	2180      	movs	r1, #128	; 0x80
 80096f4:	4808      	ldr	r0, [pc, #32]	; (8009718 <USBD_LL_Init+0x94>)
 80096f6:	f7fa f9d0 	bl	8003a9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80096fa:	2240      	movs	r2, #64	; 0x40
 80096fc:	2100      	movs	r1, #0
 80096fe:	4806      	ldr	r0, [pc, #24]	; (8009718 <USBD_LL_Init+0x94>)
 8009700:	f7fa f984 	bl	8003a0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009704:	2280      	movs	r2, #128	; 0x80
 8009706:	2101      	movs	r1, #1
 8009708:	4803      	ldr	r0, [pc, #12]	; (8009718 <USBD_LL_Init+0x94>)
 800970a:	f7fa f97f 	bl	8003a0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}
 8009718:	20001dc4 	.word	0x20001dc4

0800971c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009732:	4618      	mov	r0, r3
 8009734:	f7f9 f86e 	bl	8002814 <HAL_PCD_Start>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f942 	bl	80099c8 <USBD_Get_USB_Status>
 8009744:	4603      	mov	r3, r0
 8009746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009748:	7bbb      	ldrb	r3, [r7, #14]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	461a      	mov	r2, r3
 8009760:	4603      	mov	r3, r0
 8009762:	70fb      	strb	r3, [r7, #3]
 8009764:	460b      	mov	r3, r1
 8009766:	70bb      	strb	r3, [r7, #2]
 8009768:	4613      	mov	r3, r2
 800976a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009770:	2300      	movs	r3, #0
 8009772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800977a:	78bb      	ldrb	r3, [r7, #2]
 800977c:	883a      	ldrh	r2, [r7, #0]
 800977e:	78f9      	ldrb	r1, [r7, #3]
 8009780:	f7f9 fd3f 	bl	8003202 <HAL_PCD_EP_Open>
 8009784:	4603      	mov	r3, r0
 8009786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	4618      	mov	r0, r3
 800978c:	f000 f91c 	bl	80099c8 <USBD_Get_USB_Status>
 8009790:	4603      	mov	r3, r0
 8009792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009794:	7bbb      	ldrb	r3, [r7, #14]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	4611      	mov	r1, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f9 fd88 	bl	80032d2 <HAL_PCD_EP_Close>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 f8fd 	bl	80099c8 <USBD_Get_USB_Status>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097f6:	78fa      	ldrb	r2, [r7, #3]
 80097f8:	4611      	mov	r1, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7f9 fe60 	bl	80034c0 <HAL_PCD_EP_SetStall>
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	4618      	mov	r0, r3
 8009808:	f000 f8de 	bl	80099c8 <USBD_Get_USB_Status>
 800980c:	4603      	mov	r3, r0
 800980e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009810:	7bbb      	ldrb	r3, [r7, #14]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	460b      	mov	r3, r1
 8009824:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009834:	78fa      	ldrb	r2, [r7, #3]
 8009836:	4611      	mov	r1, r2
 8009838:	4618      	mov	r0, r3
 800983a:	f7f9 fea5 	bl	8003588 <HAL_PCD_EP_ClrStall>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 f8bf 	bl	80099c8 <USBD_Get_USB_Status>
 800984a:	4603      	mov	r3, r0
 800984c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800986a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800986c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009870:	2b00      	cmp	r3, #0
 8009872:	da0b      	bge.n	800988c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800987a:	68f9      	ldr	r1, [r7, #12]
 800987c:	4613      	mov	r3, r2
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	440b      	add	r3, r1
 8009886:	333e      	adds	r3, #62	; 0x3e
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	e00b      	b.n	80098a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009892:	68f9      	ldr	r1, [r7, #12]
 8009894:	4613      	mov	r3, r2
 8009896:	00db      	lsls	r3, r3, #3
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80098a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	4611      	mov	r1, r2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7f9 fc72 	bl	80031b8 <HAL_PCD_SetAddress>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f874 	bl	80099c8 <USBD_Get_USB_Status>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b086      	sub	sp, #24
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
 80098fa:	460b      	mov	r3, r1
 80098fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800990c:	7af9      	ldrb	r1, [r7, #11]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	f7f9 fd8b 	bl	800342c <HAL_PCD_EP_Transmit>
 8009916:	4603      	mov	r3, r0
 8009918:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	4618      	mov	r0, r3
 800991e:	f000 f853 	bl	80099c8 <USBD_Get_USB_Status>
 8009922:	4603      	mov	r3, r0
 8009924:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009926:	7dbb      	ldrb	r3, [r7, #22]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	607a      	str	r2, [r7, #4]
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	460b      	mov	r3, r1
 800993e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800994e:	7af9      	ldrb	r1, [r7, #11]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	f7f9 fd07 	bl	8003366 <HAL_PCD_EP_Receive>
 8009958:	4603      	mov	r3, r0
 800995a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f832 	bl	80099c8 <USBD_Get_USB_Status>
 8009964:	4603      	mov	r3, r0
 8009966:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009968:	7dbb      	ldrb	r3, [r7, #22]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b082      	sub	sp, #8
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009984:	78fa      	ldrb	r2, [r7, #3]
 8009986:	4611      	mov	r1, r2
 8009988:	4618      	mov	r0, r3
 800998a:	f7f9 fd37 	bl	80033fc <HAL_PCD_EP_GetRxCount>
 800998e:	4603      	mov	r3, r0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099a0:	4b03      	ldr	r3, [pc, #12]	; (80099b0 <USBD_static_malloc+0x18>)
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	200022d0 	.word	0x200022d0

080099b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]

}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	2b03      	cmp	r3, #3
 80099da:	d817      	bhi.n	8009a0c <USBD_Get_USB_Status+0x44>
 80099dc:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <USBD_Get_USB_Status+0x1c>)
 80099de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e2:	bf00      	nop
 80099e4:	080099f5 	.word	0x080099f5
 80099e8:	080099fb 	.word	0x080099fb
 80099ec:	08009a01 	.word	0x08009a01
 80099f0:	08009a07 	.word	0x08009a07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73fb      	strb	r3, [r7, #15]
    break;
 80099f8:	e00b      	b.n	8009a12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099fa:	2303      	movs	r3, #3
 80099fc:	73fb      	strb	r3, [r7, #15]
    break;
 80099fe:	e008      	b.n	8009a12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a00:	2301      	movs	r3, #1
 8009a02:	73fb      	strb	r3, [r7, #15]
    break;
 8009a04:	e005      	b.n	8009a12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a06:	2303      	movs	r3, #3
 8009a08:	73fb      	strb	r3, [r7, #15]
    break;
 8009a0a:	e002      	b.n	8009a12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a10:	bf00      	nop
  }
  return usb_status;
 8009a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <__errno>:
 8009a20:	4b01      	ldr	r3, [pc, #4]	; (8009a28 <__errno+0x8>)
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	200006fc 	.word	0x200006fc

08009a2c <__libc_init_array>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	4d0d      	ldr	r5, [pc, #52]	; (8009a64 <__libc_init_array+0x38>)
 8009a30:	4c0d      	ldr	r4, [pc, #52]	; (8009a68 <__libc_init_array+0x3c>)
 8009a32:	1b64      	subs	r4, r4, r5
 8009a34:	10a4      	asrs	r4, r4, #2
 8009a36:	2600      	movs	r6, #0
 8009a38:	42a6      	cmp	r6, r4
 8009a3a:	d109      	bne.n	8009a50 <__libc_init_array+0x24>
 8009a3c:	4d0b      	ldr	r5, [pc, #44]	; (8009a6c <__libc_init_array+0x40>)
 8009a3e:	4c0c      	ldr	r4, [pc, #48]	; (8009a70 <__libc_init_array+0x44>)
 8009a40:	f000 fc8e 	bl	800a360 <_init>
 8009a44:	1b64      	subs	r4, r4, r5
 8009a46:	10a4      	asrs	r4, r4, #2
 8009a48:	2600      	movs	r6, #0
 8009a4a:	42a6      	cmp	r6, r4
 8009a4c:	d105      	bne.n	8009a5a <__libc_init_array+0x2e>
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a54:	4798      	blx	r3
 8009a56:	3601      	adds	r6, #1
 8009a58:	e7ee      	b.n	8009a38 <__libc_init_array+0xc>
 8009a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a5e:	4798      	blx	r3
 8009a60:	3601      	adds	r6, #1
 8009a62:	e7f2      	b.n	8009a4a <__libc_init_array+0x1e>
 8009a64:	0800a4ac 	.word	0x0800a4ac
 8009a68:	0800a4ac 	.word	0x0800a4ac
 8009a6c:	0800a4ac 	.word	0x0800a4ac
 8009a70:	0800a4b0 	.word	0x0800a4b0

08009a74 <memcpy>:
 8009a74:	440a      	add	r2, r1
 8009a76:	4291      	cmp	r1, r2
 8009a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a7c:	d100      	bne.n	8009a80 <memcpy+0xc>
 8009a7e:	4770      	bx	lr
 8009a80:	b510      	push	{r4, lr}
 8009a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a8a:	4291      	cmp	r1, r2
 8009a8c:	d1f9      	bne.n	8009a82 <memcpy+0xe>
 8009a8e:	bd10      	pop	{r4, pc}

08009a90 <memset>:
 8009a90:	4402      	add	r2, r0
 8009a92:	4603      	mov	r3, r0
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d100      	bne.n	8009a9a <memset+0xa>
 8009a98:	4770      	bx	lr
 8009a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a9e:	e7f9      	b.n	8009a94 <memset+0x4>

08009aa0 <siprintf>:
 8009aa0:	b40e      	push	{r1, r2, r3}
 8009aa2:	b500      	push	{lr}
 8009aa4:	b09c      	sub	sp, #112	; 0x70
 8009aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8009aa8:	9002      	str	r0, [sp, #8]
 8009aaa:	9006      	str	r0, [sp, #24]
 8009aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ab0:	4809      	ldr	r0, [pc, #36]	; (8009ad8 <siprintf+0x38>)
 8009ab2:	9107      	str	r1, [sp, #28]
 8009ab4:	9104      	str	r1, [sp, #16]
 8009ab6:	4909      	ldr	r1, [pc, #36]	; (8009adc <siprintf+0x3c>)
 8009ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009abc:	9105      	str	r1, [sp, #20]
 8009abe:	6800      	ldr	r0, [r0, #0]
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	a902      	add	r1, sp, #8
 8009ac4:	f000 f868 	bl	8009b98 <_svfiprintf_r>
 8009ac8:	9b02      	ldr	r3, [sp, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	b01c      	add	sp, #112	; 0x70
 8009ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad4:	b003      	add	sp, #12
 8009ad6:	4770      	bx	lr
 8009ad8:	200006fc 	.word	0x200006fc
 8009adc:	ffff0208 	.word	0xffff0208

08009ae0 <__ssputs_r>:
 8009ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	688e      	ldr	r6, [r1, #8]
 8009ae6:	429e      	cmp	r6, r3
 8009ae8:	4682      	mov	sl, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	4690      	mov	r8, r2
 8009aee:	461f      	mov	r7, r3
 8009af0:	d838      	bhi.n	8009b64 <__ssputs_r+0x84>
 8009af2:	898a      	ldrh	r2, [r1, #12]
 8009af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009af8:	d032      	beq.n	8009b60 <__ssputs_r+0x80>
 8009afa:	6825      	ldr	r5, [r4, #0]
 8009afc:	6909      	ldr	r1, [r1, #16]
 8009afe:	eba5 0901 	sub.w	r9, r5, r1
 8009b02:	6965      	ldr	r5, [r4, #20]
 8009b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	444b      	add	r3, r9
 8009b10:	106d      	asrs	r5, r5, #1
 8009b12:	429d      	cmp	r5, r3
 8009b14:	bf38      	it	cc
 8009b16:	461d      	movcc	r5, r3
 8009b18:	0553      	lsls	r3, r2, #21
 8009b1a:	d531      	bpl.n	8009b80 <__ssputs_r+0xa0>
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f000 fb55 	bl	800a1cc <_malloc_r>
 8009b22:	4606      	mov	r6, r0
 8009b24:	b950      	cbnz	r0, 8009b3c <__ssputs_r+0x5c>
 8009b26:	230c      	movs	r3, #12
 8009b28:	f8ca 3000 	str.w	r3, [sl]
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3c:	6921      	ldr	r1, [r4, #16]
 8009b3e:	464a      	mov	r2, r9
 8009b40:	f7ff ff98 	bl	8009a74 <memcpy>
 8009b44:	89a3      	ldrh	r3, [r4, #12]
 8009b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4e:	81a3      	strh	r3, [r4, #12]
 8009b50:	6126      	str	r6, [r4, #16]
 8009b52:	6165      	str	r5, [r4, #20]
 8009b54:	444e      	add	r6, r9
 8009b56:	eba5 0509 	sub.w	r5, r5, r9
 8009b5a:	6026      	str	r6, [r4, #0]
 8009b5c:	60a5      	str	r5, [r4, #8]
 8009b5e:	463e      	mov	r6, r7
 8009b60:	42be      	cmp	r6, r7
 8009b62:	d900      	bls.n	8009b66 <__ssputs_r+0x86>
 8009b64:	463e      	mov	r6, r7
 8009b66:	6820      	ldr	r0, [r4, #0]
 8009b68:	4632      	mov	r2, r6
 8009b6a:	4641      	mov	r1, r8
 8009b6c:	f000 faa8 	bl	800a0c0 <memmove>
 8009b70:	68a3      	ldr	r3, [r4, #8]
 8009b72:	1b9b      	subs	r3, r3, r6
 8009b74:	60a3      	str	r3, [r4, #8]
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	4433      	add	r3, r6
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	e7db      	b.n	8009b38 <__ssputs_r+0x58>
 8009b80:	462a      	mov	r2, r5
 8009b82:	f000 fb97 	bl	800a2b4 <_realloc_r>
 8009b86:	4606      	mov	r6, r0
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d1e1      	bne.n	8009b50 <__ssputs_r+0x70>
 8009b8c:	6921      	ldr	r1, [r4, #16]
 8009b8e:	4650      	mov	r0, sl
 8009b90:	f000 fab0 	bl	800a0f4 <_free_r>
 8009b94:	e7c7      	b.n	8009b26 <__ssputs_r+0x46>
	...

08009b98 <_svfiprintf_r>:
 8009b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9c:	4698      	mov	r8, r3
 8009b9e:	898b      	ldrh	r3, [r1, #12]
 8009ba0:	061b      	lsls	r3, r3, #24
 8009ba2:	b09d      	sub	sp, #116	; 0x74
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	460d      	mov	r5, r1
 8009ba8:	4614      	mov	r4, r2
 8009baa:	d50e      	bpl.n	8009bca <_svfiprintf_r+0x32>
 8009bac:	690b      	ldr	r3, [r1, #16]
 8009bae:	b963      	cbnz	r3, 8009bca <_svfiprintf_r+0x32>
 8009bb0:	2140      	movs	r1, #64	; 0x40
 8009bb2:	f000 fb0b 	bl	800a1cc <_malloc_r>
 8009bb6:	6028      	str	r0, [r5, #0]
 8009bb8:	6128      	str	r0, [r5, #16]
 8009bba:	b920      	cbnz	r0, 8009bc6 <_svfiprintf_r+0x2e>
 8009bbc:	230c      	movs	r3, #12
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	e0d1      	b.n	8009d6a <_svfiprintf_r+0x1d2>
 8009bc6:	2340      	movs	r3, #64	; 0x40
 8009bc8:	616b      	str	r3, [r5, #20]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bce:	2320      	movs	r3, #32
 8009bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bd8:	2330      	movs	r3, #48	; 0x30
 8009bda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d84 <_svfiprintf_r+0x1ec>
 8009bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009be2:	f04f 0901 	mov.w	r9, #1
 8009be6:	4623      	mov	r3, r4
 8009be8:	469a      	mov	sl, r3
 8009bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bee:	b10a      	cbz	r2, 8009bf4 <_svfiprintf_r+0x5c>
 8009bf0:	2a25      	cmp	r2, #37	; 0x25
 8009bf2:	d1f9      	bne.n	8009be8 <_svfiprintf_r+0x50>
 8009bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8009bf8:	d00b      	beq.n	8009c12 <_svfiprintf_r+0x7a>
 8009bfa:	465b      	mov	r3, fp
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4638      	mov	r0, r7
 8009c02:	f7ff ff6d 	bl	8009ae0 <__ssputs_r>
 8009c06:	3001      	adds	r0, #1
 8009c08:	f000 80aa 	beq.w	8009d60 <_svfiprintf_r+0x1c8>
 8009c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c0e:	445a      	add	r2, fp
 8009c10:	9209      	str	r2, [sp, #36]	; 0x24
 8009c12:	f89a 3000 	ldrb.w	r3, [sl]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 80a2 	beq.w	8009d60 <_svfiprintf_r+0x1c8>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c26:	f10a 0a01 	add.w	sl, sl, #1
 8009c2a:	9304      	str	r3, [sp, #16]
 8009c2c:	9307      	str	r3, [sp, #28]
 8009c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c32:	931a      	str	r3, [sp, #104]	; 0x68
 8009c34:	4654      	mov	r4, sl
 8009c36:	2205      	movs	r2, #5
 8009c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3c:	4851      	ldr	r0, [pc, #324]	; (8009d84 <_svfiprintf_r+0x1ec>)
 8009c3e:	f7f6 facf 	bl	80001e0 <memchr>
 8009c42:	9a04      	ldr	r2, [sp, #16]
 8009c44:	b9d8      	cbnz	r0, 8009c7e <_svfiprintf_r+0xe6>
 8009c46:	06d0      	lsls	r0, r2, #27
 8009c48:	bf44      	itt	mi
 8009c4a:	2320      	movmi	r3, #32
 8009c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c50:	0711      	lsls	r1, r2, #28
 8009c52:	bf44      	itt	mi
 8009c54:	232b      	movmi	r3, #43	; 0x2b
 8009c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c60:	d015      	beq.n	8009c8e <_svfiprintf_r+0xf6>
 8009c62:	9a07      	ldr	r2, [sp, #28]
 8009c64:	4654      	mov	r4, sl
 8009c66:	2000      	movs	r0, #0
 8009c68:	f04f 0c0a 	mov.w	ip, #10
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c72:	3b30      	subs	r3, #48	; 0x30
 8009c74:	2b09      	cmp	r3, #9
 8009c76:	d94e      	bls.n	8009d16 <_svfiprintf_r+0x17e>
 8009c78:	b1b0      	cbz	r0, 8009ca8 <_svfiprintf_r+0x110>
 8009c7a:	9207      	str	r2, [sp, #28]
 8009c7c:	e014      	b.n	8009ca8 <_svfiprintf_r+0x110>
 8009c7e:	eba0 0308 	sub.w	r3, r0, r8
 8009c82:	fa09 f303 	lsl.w	r3, r9, r3
 8009c86:	4313      	orrs	r3, r2
 8009c88:	9304      	str	r3, [sp, #16]
 8009c8a:	46a2      	mov	sl, r4
 8009c8c:	e7d2      	b.n	8009c34 <_svfiprintf_r+0x9c>
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	1d19      	adds	r1, r3, #4
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	9103      	str	r1, [sp, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	bfbb      	ittet	lt
 8009c9a:	425b      	neglt	r3, r3
 8009c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009ca0:	9307      	strge	r3, [sp, #28]
 8009ca2:	9307      	strlt	r3, [sp, #28]
 8009ca4:	bfb8      	it	lt
 8009ca6:	9204      	strlt	r2, [sp, #16]
 8009ca8:	7823      	ldrb	r3, [r4, #0]
 8009caa:	2b2e      	cmp	r3, #46	; 0x2e
 8009cac:	d10c      	bne.n	8009cc8 <_svfiprintf_r+0x130>
 8009cae:	7863      	ldrb	r3, [r4, #1]
 8009cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb2:	d135      	bne.n	8009d20 <_svfiprintf_r+0x188>
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	1d1a      	adds	r2, r3, #4
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	9203      	str	r2, [sp, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfb8      	it	lt
 8009cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cc4:	3402      	adds	r4, #2
 8009cc6:	9305      	str	r3, [sp, #20]
 8009cc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d94 <_svfiprintf_r+0x1fc>
 8009ccc:	7821      	ldrb	r1, [r4, #0]
 8009cce:	2203      	movs	r2, #3
 8009cd0:	4650      	mov	r0, sl
 8009cd2:	f7f6 fa85 	bl	80001e0 <memchr>
 8009cd6:	b140      	cbz	r0, 8009cea <_svfiprintf_r+0x152>
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	eba0 000a 	sub.w	r0, r0, sl
 8009cde:	fa03 f000 	lsl.w	r0, r3, r0
 8009ce2:	9b04      	ldr	r3, [sp, #16]
 8009ce4:	4303      	orrs	r3, r0
 8009ce6:	3401      	adds	r4, #1
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cee:	4826      	ldr	r0, [pc, #152]	; (8009d88 <_svfiprintf_r+0x1f0>)
 8009cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cf4:	2206      	movs	r2, #6
 8009cf6:	f7f6 fa73 	bl	80001e0 <memchr>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d038      	beq.n	8009d70 <_svfiprintf_r+0x1d8>
 8009cfe:	4b23      	ldr	r3, [pc, #140]	; (8009d8c <_svfiprintf_r+0x1f4>)
 8009d00:	bb1b      	cbnz	r3, 8009d4a <_svfiprintf_r+0x1b2>
 8009d02:	9b03      	ldr	r3, [sp, #12]
 8009d04:	3307      	adds	r3, #7
 8009d06:	f023 0307 	bic.w	r3, r3, #7
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	9303      	str	r3, [sp, #12]
 8009d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d10:	4433      	add	r3, r6
 8009d12:	9309      	str	r3, [sp, #36]	; 0x24
 8009d14:	e767      	b.n	8009be6 <_svfiprintf_r+0x4e>
 8009d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	2001      	movs	r0, #1
 8009d1e:	e7a5      	b.n	8009c6c <_svfiprintf_r+0xd4>
 8009d20:	2300      	movs	r3, #0
 8009d22:	3401      	adds	r4, #1
 8009d24:	9305      	str	r3, [sp, #20]
 8009d26:	4619      	mov	r1, r3
 8009d28:	f04f 0c0a 	mov.w	ip, #10
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d32:	3a30      	subs	r2, #48	; 0x30
 8009d34:	2a09      	cmp	r2, #9
 8009d36:	d903      	bls.n	8009d40 <_svfiprintf_r+0x1a8>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0c5      	beq.n	8009cc8 <_svfiprintf_r+0x130>
 8009d3c:	9105      	str	r1, [sp, #20]
 8009d3e:	e7c3      	b.n	8009cc8 <_svfiprintf_r+0x130>
 8009d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d44:	4604      	mov	r4, r0
 8009d46:	2301      	movs	r3, #1
 8009d48:	e7f0      	b.n	8009d2c <_svfiprintf_r+0x194>
 8009d4a:	ab03      	add	r3, sp, #12
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	462a      	mov	r2, r5
 8009d50:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <_svfiprintf_r+0x1f8>)
 8009d52:	a904      	add	r1, sp, #16
 8009d54:	4638      	mov	r0, r7
 8009d56:	f3af 8000 	nop.w
 8009d5a:	1c42      	adds	r2, r0, #1
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	d1d6      	bne.n	8009d0e <_svfiprintf_r+0x176>
 8009d60:	89ab      	ldrh	r3, [r5, #12]
 8009d62:	065b      	lsls	r3, r3, #25
 8009d64:	f53f af2c 	bmi.w	8009bc0 <_svfiprintf_r+0x28>
 8009d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d6a:	b01d      	add	sp, #116	; 0x74
 8009d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d70:	ab03      	add	r3, sp, #12
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	462a      	mov	r2, r5
 8009d76:	4b06      	ldr	r3, [pc, #24]	; (8009d90 <_svfiprintf_r+0x1f8>)
 8009d78:	a904      	add	r1, sp, #16
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	f000 f87a 	bl	8009e74 <_printf_i>
 8009d80:	e7eb      	b.n	8009d5a <_svfiprintf_r+0x1c2>
 8009d82:	bf00      	nop
 8009d84:	0800a470 	.word	0x0800a470
 8009d88:	0800a47a 	.word	0x0800a47a
 8009d8c:	00000000 	.word	0x00000000
 8009d90:	08009ae1 	.word	0x08009ae1
 8009d94:	0800a476 	.word	0x0800a476

08009d98 <_printf_common>:
 8009d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9c:	4616      	mov	r6, r2
 8009d9e:	4699      	mov	r9, r3
 8009da0:	688a      	ldr	r2, [r1, #8]
 8009da2:	690b      	ldr	r3, [r1, #16]
 8009da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009da8:	4293      	cmp	r3, r2
 8009daa:	bfb8      	it	lt
 8009dac:	4613      	movlt	r3, r2
 8009dae:	6033      	str	r3, [r6, #0]
 8009db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009db4:	4607      	mov	r7, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	b10a      	cbz	r2, 8009dbe <_printf_common+0x26>
 8009dba:	3301      	adds	r3, #1
 8009dbc:	6033      	str	r3, [r6, #0]
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	0699      	lsls	r1, r3, #26
 8009dc2:	bf42      	ittt	mi
 8009dc4:	6833      	ldrmi	r3, [r6, #0]
 8009dc6:	3302      	addmi	r3, #2
 8009dc8:	6033      	strmi	r3, [r6, #0]
 8009dca:	6825      	ldr	r5, [r4, #0]
 8009dcc:	f015 0506 	ands.w	r5, r5, #6
 8009dd0:	d106      	bne.n	8009de0 <_printf_common+0x48>
 8009dd2:	f104 0a19 	add.w	sl, r4, #25
 8009dd6:	68e3      	ldr	r3, [r4, #12]
 8009dd8:	6832      	ldr	r2, [r6, #0]
 8009dda:	1a9b      	subs	r3, r3, r2
 8009ddc:	42ab      	cmp	r3, r5
 8009dde:	dc26      	bgt.n	8009e2e <_printf_common+0x96>
 8009de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009de4:	1e13      	subs	r3, r2, #0
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	bf18      	it	ne
 8009dea:	2301      	movne	r3, #1
 8009dec:	0692      	lsls	r2, r2, #26
 8009dee:	d42b      	bmi.n	8009e48 <_printf_common+0xb0>
 8009df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009df4:	4649      	mov	r1, r9
 8009df6:	4638      	mov	r0, r7
 8009df8:	47c0      	blx	r8
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d01e      	beq.n	8009e3c <_printf_common+0xa4>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	68e5      	ldr	r5, [r4, #12]
 8009e02:	6832      	ldr	r2, [r6, #0]
 8009e04:	f003 0306 	and.w	r3, r3, #6
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	bf08      	it	eq
 8009e0c:	1aad      	subeq	r5, r5, r2
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	6922      	ldr	r2, [r4, #16]
 8009e12:	bf0c      	ite	eq
 8009e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e18:	2500      	movne	r5, #0
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	bfc4      	itt	gt
 8009e1e:	1a9b      	subgt	r3, r3, r2
 8009e20:	18ed      	addgt	r5, r5, r3
 8009e22:	2600      	movs	r6, #0
 8009e24:	341a      	adds	r4, #26
 8009e26:	42b5      	cmp	r5, r6
 8009e28:	d11a      	bne.n	8009e60 <_printf_common+0xc8>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e008      	b.n	8009e40 <_printf_common+0xa8>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4652      	mov	r2, sl
 8009e32:	4649      	mov	r1, r9
 8009e34:	4638      	mov	r0, r7
 8009e36:	47c0      	blx	r8
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d103      	bne.n	8009e44 <_printf_common+0xac>
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e44:	3501      	adds	r5, #1
 8009e46:	e7c6      	b.n	8009dd6 <_printf_common+0x3e>
 8009e48:	18e1      	adds	r1, r4, r3
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	2030      	movs	r0, #48	; 0x30
 8009e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e52:	4422      	add	r2, r4
 8009e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	e7c7      	b.n	8009df0 <_printf_common+0x58>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4622      	mov	r2, r4
 8009e64:	4649      	mov	r1, r9
 8009e66:	4638      	mov	r0, r7
 8009e68:	47c0      	blx	r8
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d0e6      	beq.n	8009e3c <_printf_common+0xa4>
 8009e6e:	3601      	adds	r6, #1
 8009e70:	e7d9      	b.n	8009e26 <_printf_common+0x8e>
	...

08009e74 <_printf_i>:
 8009e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	7e0f      	ldrb	r7, [r1, #24]
 8009e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e7c:	2f78      	cmp	r7, #120	; 0x78
 8009e7e:	4691      	mov	r9, r2
 8009e80:	4680      	mov	r8, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	469a      	mov	sl, r3
 8009e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e8a:	d807      	bhi.n	8009e9c <_printf_i+0x28>
 8009e8c:	2f62      	cmp	r7, #98	; 0x62
 8009e8e:	d80a      	bhi.n	8009ea6 <_printf_i+0x32>
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	f000 80d8 	beq.w	800a046 <_printf_i+0x1d2>
 8009e96:	2f58      	cmp	r7, #88	; 0x58
 8009e98:	f000 80a3 	beq.w	8009fe2 <_printf_i+0x16e>
 8009e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ea4:	e03a      	b.n	8009f1c <_printf_i+0xa8>
 8009ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eaa:	2b15      	cmp	r3, #21
 8009eac:	d8f6      	bhi.n	8009e9c <_printf_i+0x28>
 8009eae:	a101      	add	r1, pc, #4	; (adr r1, 8009eb4 <_printf_i+0x40>)
 8009eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eb4:	08009f0d 	.word	0x08009f0d
 8009eb8:	08009f21 	.word	0x08009f21
 8009ebc:	08009e9d 	.word	0x08009e9d
 8009ec0:	08009e9d 	.word	0x08009e9d
 8009ec4:	08009e9d 	.word	0x08009e9d
 8009ec8:	08009e9d 	.word	0x08009e9d
 8009ecc:	08009f21 	.word	0x08009f21
 8009ed0:	08009e9d 	.word	0x08009e9d
 8009ed4:	08009e9d 	.word	0x08009e9d
 8009ed8:	08009e9d 	.word	0x08009e9d
 8009edc:	08009e9d 	.word	0x08009e9d
 8009ee0:	0800a02d 	.word	0x0800a02d
 8009ee4:	08009f51 	.word	0x08009f51
 8009ee8:	0800a00f 	.word	0x0800a00f
 8009eec:	08009e9d 	.word	0x08009e9d
 8009ef0:	08009e9d 	.word	0x08009e9d
 8009ef4:	0800a04f 	.word	0x0800a04f
 8009ef8:	08009e9d 	.word	0x08009e9d
 8009efc:	08009f51 	.word	0x08009f51
 8009f00:	08009e9d 	.word	0x08009e9d
 8009f04:	08009e9d 	.word	0x08009e9d
 8009f08:	0800a017 	.word	0x0800a017
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	1d1a      	adds	r2, r3, #4
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	602a      	str	r2, [r5, #0]
 8009f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e0a3      	b.n	800a068 <_printf_i+0x1f4>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	6829      	ldr	r1, [r5, #0]
 8009f24:	0606      	lsls	r6, r0, #24
 8009f26:	f101 0304 	add.w	r3, r1, #4
 8009f2a:	d50a      	bpl.n	8009f42 <_printf_i+0xce>
 8009f2c:	680e      	ldr	r6, [r1, #0]
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	2e00      	cmp	r6, #0
 8009f32:	da03      	bge.n	8009f3c <_printf_i+0xc8>
 8009f34:	232d      	movs	r3, #45	; 0x2d
 8009f36:	4276      	negs	r6, r6
 8009f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f3c:	485e      	ldr	r0, [pc, #376]	; (800a0b8 <_printf_i+0x244>)
 8009f3e:	230a      	movs	r3, #10
 8009f40:	e019      	b.n	8009f76 <_printf_i+0x102>
 8009f42:	680e      	ldr	r6, [r1, #0]
 8009f44:	602b      	str	r3, [r5, #0]
 8009f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f4a:	bf18      	it	ne
 8009f4c:	b236      	sxthne	r6, r6
 8009f4e:	e7ef      	b.n	8009f30 <_printf_i+0xbc>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	6820      	ldr	r0, [r4, #0]
 8009f54:	1d19      	adds	r1, r3, #4
 8009f56:	6029      	str	r1, [r5, #0]
 8009f58:	0601      	lsls	r1, r0, #24
 8009f5a:	d501      	bpl.n	8009f60 <_printf_i+0xec>
 8009f5c:	681e      	ldr	r6, [r3, #0]
 8009f5e:	e002      	b.n	8009f66 <_printf_i+0xf2>
 8009f60:	0646      	lsls	r6, r0, #25
 8009f62:	d5fb      	bpl.n	8009f5c <_printf_i+0xe8>
 8009f64:	881e      	ldrh	r6, [r3, #0]
 8009f66:	4854      	ldr	r0, [pc, #336]	; (800a0b8 <_printf_i+0x244>)
 8009f68:	2f6f      	cmp	r7, #111	; 0x6f
 8009f6a:	bf0c      	ite	eq
 8009f6c:	2308      	moveq	r3, #8
 8009f6e:	230a      	movne	r3, #10
 8009f70:	2100      	movs	r1, #0
 8009f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f76:	6865      	ldr	r5, [r4, #4]
 8009f78:	60a5      	str	r5, [r4, #8]
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	bfa2      	ittt	ge
 8009f7e:	6821      	ldrge	r1, [r4, #0]
 8009f80:	f021 0104 	bicge.w	r1, r1, #4
 8009f84:	6021      	strge	r1, [r4, #0]
 8009f86:	b90e      	cbnz	r6, 8009f8c <_printf_i+0x118>
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	d04d      	beq.n	800a028 <_printf_i+0x1b4>
 8009f8c:	4615      	mov	r5, r2
 8009f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f92:	fb03 6711 	mls	r7, r3, r1, r6
 8009f96:	5dc7      	ldrb	r7, [r0, r7]
 8009f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f9c:	4637      	mov	r7, r6
 8009f9e:	42bb      	cmp	r3, r7
 8009fa0:	460e      	mov	r6, r1
 8009fa2:	d9f4      	bls.n	8009f8e <_printf_i+0x11a>
 8009fa4:	2b08      	cmp	r3, #8
 8009fa6:	d10b      	bne.n	8009fc0 <_printf_i+0x14c>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	07de      	lsls	r6, r3, #31
 8009fac:	d508      	bpl.n	8009fc0 <_printf_i+0x14c>
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	6861      	ldr	r1, [r4, #4]
 8009fb2:	4299      	cmp	r1, r3
 8009fb4:	bfde      	ittt	le
 8009fb6:	2330      	movle	r3, #48	; 0x30
 8009fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fc0:	1b52      	subs	r2, r2, r5
 8009fc2:	6122      	str	r2, [r4, #16]
 8009fc4:	f8cd a000 	str.w	sl, [sp]
 8009fc8:	464b      	mov	r3, r9
 8009fca:	aa03      	add	r2, sp, #12
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f7ff fee2 	bl	8009d98 <_printf_common>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d14c      	bne.n	800a072 <_printf_i+0x1fe>
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	b004      	add	sp, #16
 8009fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe2:	4835      	ldr	r0, [pc, #212]	; (800a0b8 <_printf_i+0x244>)
 8009fe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fe8:	6829      	ldr	r1, [r5, #0]
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ff0:	6029      	str	r1, [r5, #0]
 8009ff2:	061d      	lsls	r5, r3, #24
 8009ff4:	d514      	bpl.n	800a020 <_printf_i+0x1ac>
 8009ff6:	07df      	lsls	r7, r3, #31
 8009ff8:	bf44      	itt	mi
 8009ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8009ffe:	6023      	strmi	r3, [r4, #0]
 800a000:	b91e      	cbnz	r6, 800a00a <_printf_i+0x196>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	f023 0320 	bic.w	r3, r3, #32
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	2310      	movs	r3, #16
 800a00c:	e7b0      	b.n	8009f70 <_printf_i+0xfc>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	f043 0320 	orr.w	r3, r3, #32
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	2378      	movs	r3, #120	; 0x78
 800a018:	4828      	ldr	r0, [pc, #160]	; (800a0bc <_printf_i+0x248>)
 800a01a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a01e:	e7e3      	b.n	8009fe8 <_printf_i+0x174>
 800a020:	0659      	lsls	r1, r3, #25
 800a022:	bf48      	it	mi
 800a024:	b2b6      	uxthmi	r6, r6
 800a026:	e7e6      	b.n	8009ff6 <_printf_i+0x182>
 800a028:	4615      	mov	r5, r2
 800a02a:	e7bb      	b.n	8009fa4 <_printf_i+0x130>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	6826      	ldr	r6, [r4, #0]
 800a030:	6961      	ldr	r1, [r4, #20]
 800a032:	1d18      	adds	r0, r3, #4
 800a034:	6028      	str	r0, [r5, #0]
 800a036:	0635      	lsls	r5, r6, #24
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	d501      	bpl.n	800a040 <_printf_i+0x1cc>
 800a03c:	6019      	str	r1, [r3, #0]
 800a03e:	e002      	b.n	800a046 <_printf_i+0x1d2>
 800a040:	0670      	lsls	r0, r6, #25
 800a042:	d5fb      	bpl.n	800a03c <_printf_i+0x1c8>
 800a044:	8019      	strh	r1, [r3, #0]
 800a046:	2300      	movs	r3, #0
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	4615      	mov	r5, r2
 800a04c:	e7ba      	b.n	8009fc4 <_printf_i+0x150>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	1d1a      	adds	r2, r3, #4
 800a052:	602a      	str	r2, [r5, #0]
 800a054:	681d      	ldr	r5, [r3, #0]
 800a056:	6862      	ldr	r2, [r4, #4]
 800a058:	2100      	movs	r1, #0
 800a05a:	4628      	mov	r0, r5
 800a05c:	f7f6 f8c0 	bl	80001e0 <memchr>
 800a060:	b108      	cbz	r0, 800a066 <_printf_i+0x1f2>
 800a062:	1b40      	subs	r0, r0, r5
 800a064:	6060      	str	r0, [r4, #4]
 800a066:	6863      	ldr	r3, [r4, #4]
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	2300      	movs	r3, #0
 800a06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a070:	e7a8      	b.n	8009fc4 <_printf_i+0x150>
 800a072:	6923      	ldr	r3, [r4, #16]
 800a074:	462a      	mov	r2, r5
 800a076:	4649      	mov	r1, r9
 800a078:	4640      	mov	r0, r8
 800a07a:	47d0      	blx	sl
 800a07c:	3001      	adds	r0, #1
 800a07e:	d0ab      	beq.n	8009fd8 <_printf_i+0x164>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	079b      	lsls	r3, r3, #30
 800a084:	d413      	bmi.n	800a0ae <_printf_i+0x23a>
 800a086:	68e0      	ldr	r0, [r4, #12]
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	4298      	cmp	r0, r3
 800a08c:	bfb8      	it	lt
 800a08e:	4618      	movlt	r0, r3
 800a090:	e7a4      	b.n	8009fdc <_printf_i+0x168>
 800a092:	2301      	movs	r3, #1
 800a094:	4632      	mov	r2, r6
 800a096:	4649      	mov	r1, r9
 800a098:	4640      	mov	r0, r8
 800a09a:	47d0      	blx	sl
 800a09c:	3001      	adds	r0, #1
 800a09e:	d09b      	beq.n	8009fd8 <_printf_i+0x164>
 800a0a0:	3501      	adds	r5, #1
 800a0a2:	68e3      	ldr	r3, [r4, #12]
 800a0a4:	9903      	ldr	r1, [sp, #12]
 800a0a6:	1a5b      	subs	r3, r3, r1
 800a0a8:	42ab      	cmp	r3, r5
 800a0aa:	dcf2      	bgt.n	800a092 <_printf_i+0x21e>
 800a0ac:	e7eb      	b.n	800a086 <_printf_i+0x212>
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	f104 0619 	add.w	r6, r4, #25
 800a0b4:	e7f5      	b.n	800a0a2 <_printf_i+0x22e>
 800a0b6:	bf00      	nop
 800a0b8:	0800a481 	.word	0x0800a481
 800a0bc:	0800a492 	.word	0x0800a492

0800a0c0 <memmove>:
 800a0c0:	4288      	cmp	r0, r1
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	eb01 0402 	add.w	r4, r1, r2
 800a0c8:	d902      	bls.n	800a0d0 <memmove+0x10>
 800a0ca:	4284      	cmp	r4, r0
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	d807      	bhi.n	800a0e0 <memmove+0x20>
 800a0d0:	1e43      	subs	r3, r0, #1
 800a0d2:	42a1      	cmp	r1, r4
 800a0d4:	d008      	beq.n	800a0e8 <memmove+0x28>
 800a0d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0de:	e7f8      	b.n	800a0d2 <memmove+0x12>
 800a0e0:	4402      	add	r2, r0
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	428a      	cmp	r2, r1
 800a0e6:	d100      	bne.n	800a0ea <memmove+0x2a>
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0f2:	e7f7      	b.n	800a0e4 <memmove+0x24>

0800a0f4 <_free_r>:
 800a0f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f6:	2900      	cmp	r1, #0
 800a0f8:	d044      	beq.n	800a184 <_free_r+0x90>
 800a0fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fe:	9001      	str	r0, [sp, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f1a1 0404 	sub.w	r4, r1, #4
 800a106:	bfb8      	it	lt
 800a108:	18e4      	addlt	r4, r4, r3
 800a10a:	f000 f913 	bl	800a334 <__malloc_lock>
 800a10e:	4a1e      	ldr	r2, [pc, #120]	; (800a188 <_free_r+0x94>)
 800a110:	9801      	ldr	r0, [sp, #4]
 800a112:	6813      	ldr	r3, [r2, #0]
 800a114:	b933      	cbnz	r3, 800a124 <_free_r+0x30>
 800a116:	6063      	str	r3, [r4, #4]
 800a118:	6014      	str	r4, [r2, #0]
 800a11a:	b003      	add	sp, #12
 800a11c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a120:	f000 b90e 	b.w	800a340 <__malloc_unlock>
 800a124:	42a3      	cmp	r3, r4
 800a126:	d908      	bls.n	800a13a <_free_r+0x46>
 800a128:	6825      	ldr	r5, [r4, #0]
 800a12a:	1961      	adds	r1, r4, r5
 800a12c:	428b      	cmp	r3, r1
 800a12e:	bf01      	itttt	eq
 800a130:	6819      	ldreq	r1, [r3, #0]
 800a132:	685b      	ldreq	r3, [r3, #4]
 800a134:	1949      	addeq	r1, r1, r5
 800a136:	6021      	streq	r1, [r4, #0]
 800a138:	e7ed      	b.n	800a116 <_free_r+0x22>
 800a13a:	461a      	mov	r2, r3
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b10b      	cbz	r3, 800a144 <_free_r+0x50>
 800a140:	42a3      	cmp	r3, r4
 800a142:	d9fa      	bls.n	800a13a <_free_r+0x46>
 800a144:	6811      	ldr	r1, [r2, #0]
 800a146:	1855      	adds	r5, r2, r1
 800a148:	42a5      	cmp	r5, r4
 800a14a:	d10b      	bne.n	800a164 <_free_r+0x70>
 800a14c:	6824      	ldr	r4, [r4, #0]
 800a14e:	4421      	add	r1, r4
 800a150:	1854      	adds	r4, r2, r1
 800a152:	42a3      	cmp	r3, r4
 800a154:	6011      	str	r1, [r2, #0]
 800a156:	d1e0      	bne.n	800a11a <_free_r+0x26>
 800a158:	681c      	ldr	r4, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	6053      	str	r3, [r2, #4]
 800a15e:	4421      	add	r1, r4
 800a160:	6011      	str	r1, [r2, #0]
 800a162:	e7da      	b.n	800a11a <_free_r+0x26>
 800a164:	d902      	bls.n	800a16c <_free_r+0x78>
 800a166:	230c      	movs	r3, #12
 800a168:	6003      	str	r3, [r0, #0]
 800a16a:	e7d6      	b.n	800a11a <_free_r+0x26>
 800a16c:	6825      	ldr	r5, [r4, #0]
 800a16e:	1961      	adds	r1, r4, r5
 800a170:	428b      	cmp	r3, r1
 800a172:	bf04      	itt	eq
 800a174:	6819      	ldreq	r1, [r3, #0]
 800a176:	685b      	ldreq	r3, [r3, #4]
 800a178:	6063      	str	r3, [r4, #4]
 800a17a:	bf04      	itt	eq
 800a17c:	1949      	addeq	r1, r1, r5
 800a17e:	6021      	streq	r1, [r4, #0]
 800a180:	6054      	str	r4, [r2, #4]
 800a182:	e7ca      	b.n	800a11a <_free_r+0x26>
 800a184:	b003      	add	sp, #12
 800a186:	bd30      	pop	{r4, r5, pc}
 800a188:	200024f0 	.word	0x200024f0

0800a18c <sbrk_aligned>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	4e0e      	ldr	r6, [pc, #56]	; (800a1c8 <sbrk_aligned+0x3c>)
 800a190:	460c      	mov	r4, r1
 800a192:	6831      	ldr	r1, [r6, #0]
 800a194:	4605      	mov	r5, r0
 800a196:	b911      	cbnz	r1, 800a19e <sbrk_aligned+0x12>
 800a198:	f000 f8bc 	bl	800a314 <_sbrk_r>
 800a19c:	6030      	str	r0, [r6, #0]
 800a19e:	4621      	mov	r1, r4
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f000 f8b7 	bl	800a314 <_sbrk_r>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	d00a      	beq.n	800a1c0 <sbrk_aligned+0x34>
 800a1aa:	1cc4      	adds	r4, r0, #3
 800a1ac:	f024 0403 	bic.w	r4, r4, #3
 800a1b0:	42a0      	cmp	r0, r4
 800a1b2:	d007      	beq.n	800a1c4 <sbrk_aligned+0x38>
 800a1b4:	1a21      	subs	r1, r4, r0
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f000 f8ac 	bl	800a314 <_sbrk_r>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d101      	bne.n	800a1c4 <sbrk_aligned+0x38>
 800a1c0:	f04f 34ff 	mov.w	r4, #4294967295
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	200024f4 	.word	0x200024f4

0800a1cc <_malloc_r>:
 800a1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d0:	1ccd      	adds	r5, r1, #3
 800a1d2:	f025 0503 	bic.w	r5, r5, #3
 800a1d6:	3508      	adds	r5, #8
 800a1d8:	2d0c      	cmp	r5, #12
 800a1da:	bf38      	it	cc
 800a1dc:	250c      	movcc	r5, #12
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	db01      	blt.n	800a1e8 <_malloc_r+0x1c>
 800a1e4:	42a9      	cmp	r1, r5
 800a1e6:	d905      	bls.n	800a1f4 <_malloc_r+0x28>
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	2600      	movs	r6, #0
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f4:	4e2e      	ldr	r6, [pc, #184]	; (800a2b0 <_malloc_r+0xe4>)
 800a1f6:	f000 f89d 	bl	800a334 <__malloc_lock>
 800a1fa:	6833      	ldr	r3, [r6, #0]
 800a1fc:	461c      	mov	r4, r3
 800a1fe:	bb34      	cbnz	r4, 800a24e <_malloc_r+0x82>
 800a200:	4629      	mov	r1, r5
 800a202:	4638      	mov	r0, r7
 800a204:	f7ff ffc2 	bl	800a18c <sbrk_aligned>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	4604      	mov	r4, r0
 800a20c:	d14d      	bne.n	800a2aa <_malloc_r+0xde>
 800a20e:	6834      	ldr	r4, [r6, #0]
 800a210:	4626      	mov	r6, r4
 800a212:	2e00      	cmp	r6, #0
 800a214:	d140      	bne.n	800a298 <_malloc_r+0xcc>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	4631      	mov	r1, r6
 800a21a:	4638      	mov	r0, r7
 800a21c:	eb04 0803 	add.w	r8, r4, r3
 800a220:	f000 f878 	bl	800a314 <_sbrk_r>
 800a224:	4580      	cmp	r8, r0
 800a226:	d13a      	bne.n	800a29e <_malloc_r+0xd2>
 800a228:	6821      	ldr	r1, [r4, #0]
 800a22a:	3503      	adds	r5, #3
 800a22c:	1a6d      	subs	r5, r5, r1
 800a22e:	f025 0503 	bic.w	r5, r5, #3
 800a232:	3508      	adds	r5, #8
 800a234:	2d0c      	cmp	r5, #12
 800a236:	bf38      	it	cc
 800a238:	250c      	movcc	r5, #12
 800a23a:	4629      	mov	r1, r5
 800a23c:	4638      	mov	r0, r7
 800a23e:	f7ff ffa5 	bl	800a18c <sbrk_aligned>
 800a242:	3001      	adds	r0, #1
 800a244:	d02b      	beq.n	800a29e <_malloc_r+0xd2>
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	442b      	add	r3, r5
 800a24a:	6023      	str	r3, [r4, #0]
 800a24c:	e00e      	b.n	800a26c <_malloc_r+0xa0>
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	1b52      	subs	r2, r2, r5
 800a252:	d41e      	bmi.n	800a292 <_malloc_r+0xc6>
 800a254:	2a0b      	cmp	r2, #11
 800a256:	d916      	bls.n	800a286 <_malloc_r+0xba>
 800a258:	1961      	adds	r1, r4, r5
 800a25a:	42a3      	cmp	r3, r4
 800a25c:	6025      	str	r5, [r4, #0]
 800a25e:	bf18      	it	ne
 800a260:	6059      	strne	r1, [r3, #4]
 800a262:	6863      	ldr	r3, [r4, #4]
 800a264:	bf08      	it	eq
 800a266:	6031      	streq	r1, [r6, #0]
 800a268:	5162      	str	r2, [r4, r5]
 800a26a:	604b      	str	r3, [r1, #4]
 800a26c:	4638      	mov	r0, r7
 800a26e:	f104 060b 	add.w	r6, r4, #11
 800a272:	f000 f865 	bl	800a340 <__malloc_unlock>
 800a276:	f026 0607 	bic.w	r6, r6, #7
 800a27a:	1d23      	adds	r3, r4, #4
 800a27c:	1af2      	subs	r2, r6, r3
 800a27e:	d0b6      	beq.n	800a1ee <_malloc_r+0x22>
 800a280:	1b9b      	subs	r3, r3, r6
 800a282:	50a3      	str	r3, [r4, r2]
 800a284:	e7b3      	b.n	800a1ee <_malloc_r+0x22>
 800a286:	6862      	ldr	r2, [r4, #4]
 800a288:	42a3      	cmp	r3, r4
 800a28a:	bf0c      	ite	eq
 800a28c:	6032      	streq	r2, [r6, #0]
 800a28e:	605a      	strne	r2, [r3, #4]
 800a290:	e7ec      	b.n	800a26c <_malloc_r+0xa0>
 800a292:	4623      	mov	r3, r4
 800a294:	6864      	ldr	r4, [r4, #4]
 800a296:	e7b2      	b.n	800a1fe <_malloc_r+0x32>
 800a298:	4634      	mov	r4, r6
 800a29a:	6876      	ldr	r6, [r6, #4]
 800a29c:	e7b9      	b.n	800a212 <_malloc_r+0x46>
 800a29e:	230c      	movs	r3, #12
 800a2a0:	603b      	str	r3, [r7, #0]
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f000 f84c 	bl	800a340 <__malloc_unlock>
 800a2a8:	e7a1      	b.n	800a1ee <_malloc_r+0x22>
 800a2aa:	6025      	str	r5, [r4, #0]
 800a2ac:	e7de      	b.n	800a26c <_malloc_r+0xa0>
 800a2ae:	bf00      	nop
 800a2b0:	200024f0 	.word	0x200024f0

0800a2b4 <_realloc_r>:
 800a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	4614      	mov	r4, r2
 800a2bc:	460e      	mov	r6, r1
 800a2be:	b921      	cbnz	r1, 800a2ca <_realloc_r+0x16>
 800a2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	f7ff bf81 	b.w	800a1cc <_malloc_r>
 800a2ca:	b92a      	cbnz	r2, 800a2d8 <_realloc_r+0x24>
 800a2cc:	f7ff ff12 	bl	800a0f4 <_free_r>
 800a2d0:	4625      	mov	r5, r4
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d8:	f000 f838 	bl	800a34c <_malloc_usable_size_r>
 800a2dc:	4284      	cmp	r4, r0
 800a2de:	4607      	mov	r7, r0
 800a2e0:	d802      	bhi.n	800a2e8 <_realloc_r+0x34>
 800a2e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2e6:	d812      	bhi.n	800a30e <_realloc_r+0x5a>
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	f7ff ff6e 	bl	800a1cc <_malloc_r>
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d0ed      	beq.n	800a2d2 <_realloc_r+0x1e>
 800a2f6:	42bc      	cmp	r4, r7
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	bf28      	it	cs
 800a2fe:	463a      	movcs	r2, r7
 800a300:	f7ff fbb8 	bl	8009a74 <memcpy>
 800a304:	4631      	mov	r1, r6
 800a306:	4640      	mov	r0, r8
 800a308:	f7ff fef4 	bl	800a0f4 <_free_r>
 800a30c:	e7e1      	b.n	800a2d2 <_realloc_r+0x1e>
 800a30e:	4635      	mov	r5, r6
 800a310:	e7df      	b.n	800a2d2 <_realloc_r+0x1e>
	...

0800a314 <_sbrk_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d06      	ldr	r5, [pc, #24]	; (800a330 <_sbrk_r+0x1c>)
 800a318:	2300      	movs	r3, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	f7f7 f972 	bl	8001608 <_sbrk>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_sbrk_r+0x1a>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_sbrk_r+0x1a>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	200024f8 	.word	0x200024f8

0800a334 <__malloc_lock>:
 800a334:	4801      	ldr	r0, [pc, #4]	; (800a33c <__malloc_lock+0x8>)
 800a336:	f000 b811 	b.w	800a35c <__retarget_lock_acquire_recursive>
 800a33a:	bf00      	nop
 800a33c:	200024fc 	.word	0x200024fc

0800a340 <__malloc_unlock>:
 800a340:	4801      	ldr	r0, [pc, #4]	; (800a348 <__malloc_unlock+0x8>)
 800a342:	f000 b80c 	b.w	800a35e <__retarget_lock_release_recursive>
 800a346:	bf00      	nop
 800a348:	200024fc 	.word	0x200024fc

0800a34c <_malloc_usable_size_r>:
 800a34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a350:	1f18      	subs	r0, r3, #4
 800a352:	2b00      	cmp	r3, #0
 800a354:	bfbc      	itt	lt
 800a356:	580b      	ldrlt	r3, [r1, r0]
 800a358:	18c0      	addlt	r0, r0, r3
 800a35a:	4770      	bx	lr

0800a35c <__retarget_lock_acquire_recursive>:
 800a35c:	4770      	bx	lr

0800a35e <__retarget_lock_release_recursive>:
 800a35e:	4770      	bx	lr

0800a360 <_init>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	bf00      	nop
 800a364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a366:	bc08      	pop	{r3}
 800a368:	469e      	mov	lr, r3
 800a36a:	4770      	bx	lr

0800a36c <_fini>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	bf00      	nop
 800a370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a372:	bc08      	pop	{r3}
 800a374:	469e      	mov	lr, r3
 800a376:	4770      	bx	lr
