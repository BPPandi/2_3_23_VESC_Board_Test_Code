
2_3_23_VESC_Board_Test_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009308  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009504  08009504  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009504  08009504  00019504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800950c  0800950c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009510  08009510  00019510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d68  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e64  20001e64  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015031  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031af  00000000  00000000  0003515d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  00038310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d0  00000000  00000000  00039548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235f9  00000000  00000000  0003a618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001605a  00000000  00000000  0005dc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce751  00000000  00000000  00073c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001423bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bec  00000000  00000000  0014240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009478 	.word	0x08009478

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08009478 	.word	0x08009478

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ledBlink>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledBlink()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	for (int ledCount=0;ledCount<6;ledCount++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e00a      	b.n	80004fe <ledBlink+0x22>
	{
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin);
 80004e8:	2103      	movs	r1, #3
 80004ea:	480b      	ldr	r0, [pc, #44]	; (8000518 <ledBlink+0x3c>)
 80004ec:	f001 fe1b 	bl	8002126 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80004f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004f4:	f000 ff2c 	bl	8001350 <HAL_Delay>
	for (int ledCount=0;ledCount<6;ledCount++)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3301      	adds	r3, #1
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b05      	cmp	r3, #5
 8000502:	ddf1      	ble.n	80004e8 <ledBlink+0xc>
	}
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2103      	movs	r1, #3
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <ledBlink+0x3c>)
 800050a:	f001 fdf3 	bl	80020f4 <HAL_GPIO_WritePin>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40020400 	.word	0x40020400

0800051c <USBTest>:

void USBTest()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	char *data = "Hello ST MicroController\n";
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <USBTest+0x2c>)
 8000524:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS((uint8_t *)data, strlen(data));
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff fe4e 	bl	80001c8 <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	b29b      	uxth	r3, r3
 8000530:	4619      	mov	r1, r3
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f008 fb0a 	bl	8008b4c <CDC_Transmit_FS>
	HAL_Delay(1000);
 8000538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053c:	f000 ff08 	bl	8001350 <HAL_Delay>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	08009490 	.word	0x08009490

0800054c <DRV8301_Enable>:
void DRV8301_Enable()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2120      	movs	r1, #32
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <DRV8301_Enable+0x14>)
 8000556:	f001 fdcd 	bl	80020f4 <HAL_GPIO_WritePin>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40020400 	.word	0x40020400

08000564 <DRV8301_Disable>:
void DRV8301_Disable()
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <DRV8301_Disable+0x14>)
 800056e:	f001 fdc1 	bl	80020f4 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40020400 	.word	0x40020400

0800057c <DRV8301_NormalPWM>:
void DRV8301_NormalPWM()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 51;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <DRV8301_NormalPWM+0x5c>)
 8000582:	2233      	movs	r2, #51	; 0x33
 8000584:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000586:	2100      	movs	r1, #0
 8000588:	4814      	ldr	r0, [pc, #80]	; (80005dc <DRV8301_NormalPWM+0x60>)
 800058a:	f003 fda5 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800058e:	2100      	movs	r1, #0
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <DRV8301_NormalPWM+0x60>)
 8000592:	f004 fc3d 	bl	8004e10 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f000 feda 	bl	8001350 <HAL_Delay>
	TIM1->CCR2 = 51;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <DRV8301_NormalPWM+0x5c>)
 800059e:	2233      	movs	r2, #51	; 0x33
 80005a0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005a2:	2104      	movs	r1, #4
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <DRV8301_NormalPWM+0x60>)
 80005a6:	f003 fd97 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80005aa:	2104      	movs	r1, #4
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <DRV8301_NormalPWM+0x60>)
 80005ae:	f004 fc2f 	bl	8004e10 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 fecc 	bl	8001350 <HAL_Delay>
	TIM1->CCR3 = 51;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <DRV8301_NormalPWM+0x5c>)
 80005ba:	2233      	movs	r2, #51	; 0x33
 80005bc:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005be:	2108      	movs	r1, #8
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <DRV8301_NormalPWM+0x60>)
 80005c2:	f003 fd89 	bl	80040d8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80005c6:	2108      	movs	r1, #8
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <DRV8301_NormalPWM+0x60>)
 80005ca:	f004 fc21 	bl	8004e10 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 febe 	bl	8001350 <HAL_Delay>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40010000 	.word	0x40010000
 80005dc:	20000160 	.word	0x20000160

080005e0 <VSENS_1>:
		PhaseA=0;
		k=0;
	}
}
void VSENS_1()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_0;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <VSENS_1+0x2c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <VSENS_1+0x2c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <VSENS_1+0x2c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	4905      	ldr	r1, [pc, #20]	; (800060c <VSENS_1+0x2c>)
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <VSENS_1+0x30>)
 80005fa:	f001 f8af 	bl	800175c <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <VSENS_1+0x28>
	{
	Error_Handler();
 8000604:	f000 fc92 	bl	8000f2c <Error_Handler>
	}
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200001f0 	.word	0x200001f0
 8000610:	20000118 	.word	0x20000118

08000614 <VSENS_2>:

void VSENS_2()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_1;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <VSENS_2+0x28>)
 800061a:	2201      	movs	r2, #1
 800061c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 2;
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <VSENS_2+0x28>)
 8000620:	2202      	movs	r2, #2
 8000622:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000624:	4905      	ldr	r1, [pc, #20]	; (800063c <VSENS_2+0x28>)
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <VSENS_2+0x2c>)
 8000628:	f001 f898 	bl	800175c <HAL_ADC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <VSENS_2+0x22>
	{
	Error_Handler();
 8000632:	f000 fc7b 	bl	8000f2c <Error_Handler>
	}
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200001f0 	.word	0x200001f0
 8000640:	20000118 	.word	0x20000118

08000644 <VSENS_3>:
void VSENS_3()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_2;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <VSENS_3+0x28>)
 800064a:	2202      	movs	r2, #2
 800064c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 3;
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <VSENS_3+0x28>)
 8000650:	2203      	movs	r2, #3
 8000652:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	4905      	ldr	r1, [pc, #20]	; (800066c <VSENS_3+0x28>)
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <VSENS_3+0x2c>)
 8000658:	f001 f880 	bl	800175c <HAL_ADC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <VSENS_3+0x22>
	{
	Error_Handler();
 8000662:	f000 fc63 	bl	8000f2c <Error_Handler>
	}
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200001f0 	.word	0x200001f0
 8000670:	20000118 	.word	0x20000118

08000674 <TEMP_NTC>:
void TEMP_NTC()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <TEMP_NTC+0x28>)
 800067a:	2203      	movs	r2, #3
 800067c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 4;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <TEMP_NTC+0x28>)
 8000680:	2204      	movs	r2, #4
 8000682:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	4905      	ldr	r1, [pc, #20]	; (800069c <TEMP_NTC+0x28>)
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <TEMP_NTC+0x2c>)
 8000688:	f001 f868 	bl	800175c <HAL_ADC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <TEMP_NTC+0x22>
	{
	Error_Handler();
 8000692:	f000 fc4b 	bl	8000f2c <Error_Handler>
	}
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200001f0 	.word	0x200001f0
 80006a0:	20000118 	.word	0x20000118

080006a4 <ADC_EXT1>:
void ADC_EXT1()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_5;
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <ADC_EXT1+0x28>)
 80006aa:	2205      	movs	r2, #5
 80006ac:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 5;
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <ADC_EXT1+0x28>)
 80006b0:	2205      	movs	r2, #5
 80006b2:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	4905      	ldr	r1, [pc, #20]	; (80006cc <ADC_EXT1+0x28>)
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <ADC_EXT1+0x2c>)
 80006b8:	f001 f850 	bl	800175c <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <ADC_EXT1+0x22>
	{
	Error_Handler();
 80006c2:	f000 fc33 	bl	8000f2c <Error_Handler>
	}
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200001f0 	.word	0x200001f0
 80006d0:	20000118 	.word	0x20000118

080006d4 <ADC_EXT2>:
void ADC_EXT2()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_6;
 80006d8:	4b08      	ldr	r3, [pc, #32]	; (80006fc <ADC_EXT2+0x28>)
 80006da:	2206      	movs	r2, #6
 80006dc:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 6;
 80006de:	4b07      	ldr	r3, [pc, #28]	; (80006fc <ADC_EXT2+0x28>)
 80006e0:	2206      	movs	r2, #6
 80006e2:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	4905      	ldr	r1, [pc, #20]	; (80006fc <ADC_EXT2+0x28>)
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <ADC_EXT2+0x2c>)
 80006e8:	f001 f838 	bl	800175c <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <ADC_EXT2+0x22>
	{
	Error_Handler();
 80006f2:	f000 fc1b 	bl	8000f2c <Error_Handler>
	}
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200001f0 	.word	0x200001f0
 8000700:	20000118 	.word	0x20000118

08000704 <CURREN_1>:
void CURREN_1()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_10;
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <CURREN_1+0x28>)
 800070a:	220a      	movs	r2, #10
 800070c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 7;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <CURREN_1+0x28>)
 8000710:	2207      	movs	r2, #7
 8000712:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	4905      	ldr	r1, [pc, #20]	; (800072c <CURREN_1+0x28>)
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <CURREN_1+0x2c>)
 8000718:	f001 f820 	bl	800175c <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <CURREN_1+0x22>
	{
	Error_Handler();
 8000722:	f000 fc03 	bl	8000f2c <Error_Handler>
	}
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001f0 	.word	0x200001f0
 8000730:	20000118 	.word	0x20000118

08000734 <CURREN_2>:
void CURREN_2()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_11;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <CURREN_2+0x28>)
 800073a:	220b      	movs	r2, #11
 800073c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 8;
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <CURREN_2+0x28>)
 8000740:	2208      	movs	r2, #8
 8000742:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000744:	4905      	ldr	r1, [pc, #20]	; (800075c <CURREN_2+0x28>)
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <CURREN_2+0x2c>)
 8000748:	f001 f808 	bl	800175c <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <CURREN_2+0x22>
	{
	Error_Handler();
 8000752:	f000 fbeb 	bl	8000f2c <Error_Handler>
	}
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200001f0 	.word	0x200001f0
 8000760:	20000118 	.word	0x20000118

08000764 <CURREN_3>:
void CURREN_3()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_12;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <CURREN_3+0x28>)
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 9;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <CURREN_3+0x28>)
 8000770:	2209      	movs	r2, #9
 8000772:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000774:	4905      	ldr	r1, [pc, #20]	; (800078c <CURREN_3+0x28>)
 8000776:	4806      	ldr	r0, [pc, #24]	; (8000790 <CURREN_3+0x2c>)
 8000778:	f000 fff0 	bl	800175c <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <CURREN_3+0x22>
	{
	Error_Handler();
 8000782:	f000 fbd3 	bl	8000f2c <Error_Handler>
	}
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001f0 	.word	0x200001f0
 8000790:	20000118 	.word	0x20000118

08000794 <TEMP_MOTOR>:
void TEMP_MOTOR()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_14;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <TEMP_MOTOR+0x28>)
 800079a:	220e      	movs	r2, #14
 800079c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 10;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <TEMP_MOTOR+0x28>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	4905      	ldr	r1, [pc, #20]	; (80007bc <TEMP_MOTOR+0x28>)
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <TEMP_MOTOR+0x2c>)
 80007a8:	f000 ffd8 	bl	800175c <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <TEMP_MOTOR+0x22>
	{
	Error_Handler();
 80007b2:	f000 fbbb 	bl	8000f2c <Error_Handler>
	}
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200001f0 	.word	0x200001f0
 80007c0:	20000118 	.word	0x20000118

080007c4 <CAAF>:
void CAAF()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	VSENS_1();
 80007c8:	f7ff ff0a 	bl	80005e0 <VSENS_1>
	HAL_ADC_Start(&hadc1);
 80007cc:	485e      	ldr	r0, [pc, #376]	; (8000948 <CAAF+0x184>)
 80007ce:	f000 fe27 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 80007d2:	21c8      	movs	r1, #200	; 0xc8
 80007d4:	485c      	ldr	r0, [pc, #368]	; (8000948 <CAAF+0x184>)
 80007d6:	f000 ff28 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 80007da:	485b      	ldr	r0, [pc, #364]	; (8000948 <CAAF+0x184>)
 80007dc:	f000 ffb0 	bl	8001740 <HAL_ADC_GetValue>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b59      	ldr	r3, [pc, #356]	; (800094c <CAAF+0x188>)
 80007e6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80007e8:	4857      	ldr	r0, [pc, #348]	; (8000948 <CAAF+0x184>)
 80007ea:	f000 feeb 	bl	80015c4 <HAL_ADC_Stop>

	VSENS_2();
 80007ee:	f7ff ff11 	bl	8000614 <VSENS_2>
	HAL_ADC_Start(&hadc1);
 80007f2:	4855      	ldr	r0, [pc, #340]	; (8000948 <CAAF+0x184>)
 80007f4:	f000 fe14 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 80007f8:	21c8      	movs	r1, #200	; 0xc8
 80007fa:	4853      	ldr	r0, [pc, #332]	; (8000948 <CAAF+0x184>)
 80007fc:	f000 ff15 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 8000800:	4851      	ldr	r0, [pc, #324]	; (8000948 <CAAF+0x184>)
 8000802:	f000 ff9d 	bl	8001740 <HAL_ADC_GetValue>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b50      	ldr	r3, [pc, #320]	; (800094c <CAAF+0x188>)
 800080c:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 800080e:	484e      	ldr	r0, [pc, #312]	; (8000948 <CAAF+0x184>)
 8000810:	f000 fed8 	bl	80015c4 <HAL_ADC_Stop>

	VSENS_3();
 8000814:	f7ff ff16 	bl	8000644 <VSENS_3>
	HAL_ADC_Start(&hadc1);
 8000818:	484b      	ldr	r0, [pc, #300]	; (8000948 <CAAF+0x184>)
 800081a:	f000 fe01 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 800081e:	21c8      	movs	r1, #200	; 0xc8
 8000820:	4849      	ldr	r0, [pc, #292]	; (8000948 <CAAF+0x184>)
 8000822:	f000 ff02 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8000826:	4848      	ldr	r0, [pc, #288]	; (8000948 <CAAF+0x184>)
 8000828:	f000 ff8a 	bl	8001740 <HAL_ADC_GetValue>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	4b46      	ldr	r3, [pc, #280]	; (800094c <CAAF+0x188>)
 8000832:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 8000834:	4844      	ldr	r0, [pc, #272]	; (8000948 <CAAF+0x184>)
 8000836:	f000 fec5 	bl	80015c4 <HAL_ADC_Stop>

	TEMP_NTC();
 800083a:	f7ff ff1b 	bl	8000674 <TEMP_NTC>
	HAL_ADC_Start(&hadc1);
 800083e:	4842      	ldr	r0, [pc, #264]	; (8000948 <CAAF+0x184>)
 8000840:	f000 fdee 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000844:	21c8      	movs	r1, #200	; 0xc8
 8000846:	4840      	ldr	r0, [pc, #256]	; (8000948 <CAAF+0x184>)
 8000848:	f000 feef 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[3] = HAL_ADC_GetValue(&hadc1);
 800084c:	483e      	ldr	r0, [pc, #248]	; (8000948 <CAAF+0x184>)
 800084e:	f000 ff77 	bl	8001740 <HAL_ADC_GetValue>
 8000852:	4603      	mov	r3, r0
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b3d      	ldr	r3, [pc, #244]	; (800094c <CAAF+0x188>)
 8000858:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(&hadc1);
 800085a:	483b      	ldr	r0, [pc, #236]	; (8000948 <CAAF+0x184>)
 800085c:	f000 feb2 	bl	80015c4 <HAL_ADC_Stop>

	ADC_EXT1();
 8000860:	f7ff ff20 	bl	80006a4 <ADC_EXT1>
	HAL_ADC_Start(&hadc1);
 8000864:	4838      	ldr	r0, [pc, #224]	; (8000948 <CAAF+0x184>)
 8000866:	f000 fddb 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 800086a:	21c8      	movs	r1, #200	; 0xc8
 800086c:	4836      	ldr	r0, [pc, #216]	; (8000948 <CAAF+0x184>)
 800086e:	f000 fedc 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[4] = HAL_ADC_GetValue(&hadc1);
 8000872:	4835      	ldr	r0, [pc, #212]	; (8000948 <CAAF+0x184>)
 8000874:	f000 ff64 	bl	8001740 <HAL_ADC_GetValue>
 8000878:	4603      	mov	r3, r0
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b33      	ldr	r3, [pc, #204]	; (800094c <CAAF+0x188>)
 800087e:	811a      	strh	r2, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 8000880:	4831      	ldr	r0, [pc, #196]	; (8000948 <CAAF+0x184>)
 8000882:	f000 fe9f 	bl	80015c4 <HAL_ADC_Stop>

	ADC_EXT2();
 8000886:	f7ff ff25 	bl	80006d4 <ADC_EXT2>
	HAL_ADC_Start(&hadc1);
 800088a:	482f      	ldr	r0, [pc, #188]	; (8000948 <CAAF+0x184>)
 800088c:	f000 fdc8 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000890:	21c8      	movs	r1, #200	; 0xc8
 8000892:	482d      	ldr	r0, [pc, #180]	; (8000948 <CAAF+0x184>)
 8000894:	f000 fec9 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[5] = HAL_ADC_GetValue(&hadc1);
 8000898:	482b      	ldr	r0, [pc, #172]	; (8000948 <CAAF+0x184>)
 800089a:	f000 ff51 	bl	8001740 <HAL_ADC_GetValue>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <CAAF+0x188>)
 80008a4:	815a      	strh	r2, [r3, #10]
	HAL_ADC_Stop(&hadc1);
 80008a6:	4828      	ldr	r0, [pc, #160]	; (8000948 <CAAF+0x184>)
 80008a8:	f000 fe8c 	bl	80015c4 <HAL_ADC_Stop>

	CURREN_1();
 80008ac:	f7ff ff2a 	bl	8000704 <CURREN_1>
	HAL_ADC_Start(&hadc1);
 80008b0:	4825      	ldr	r0, [pc, #148]	; (8000948 <CAAF+0x184>)
 80008b2:	f000 fdb5 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 80008b6:	21c8      	movs	r1, #200	; 0xc8
 80008b8:	4823      	ldr	r0, [pc, #140]	; (8000948 <CAAF+0x184>)
 80008ba:	f000 feb6 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[6] = HAL_ADC_GetValue(&hadc1);
 80008be:	4822      	ldr	r0, [pc, #136]	; (8000948 <CAAF+0x184>)
 80008c0:	f000 ff3e 	bl	8001740 <HAL_ADC_GetValue>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <CAAF+0x188>)
 80008ca:	819a      	strh	r2, [r3, #12]
	HAL_ADC_Stop(&hadc1);
 80008cc:	481e      	ldr	r0, [pc, #120]	; (8000948 <CAAF+0x184>)
 80008ce:	f000 fe79 	bl	80015c4 <HAL_ADC_Stop>

	CURREN_2();
 80008d2:	f7ff ff2f 	bl	8000734 <CURREN_2>
	HAL_ADC_Start(&hadc1);
 80008d6:	481c      	ldr	r0, [pc, #112]	; (8000948 <CAAF+0x184>)
 80008d8:	f000 fda2 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 80008dc:	21c8      	movs	r1, #200	; 0xc8
 80008de:	481a      	ldr	r0, [pc, #104]	; (8000948 <CAAF+0x184>)
 80008e0:	f000 fea3 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[7] = HAL_ADC_GetValue(&hadc1);
 80008e4:	4818      	ldr	r0, [pc, #96]	; (8000948 <CAAF+0x184>)
 80008e6:	f000 ff2b 	bl	8001740 <HAL_ADC_GetValue>
 80008ea:	4603      	mov	r3, r0
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <CAAF+0x188>)
 80008f0:	81da      	strh	r2, [r3, #14]
	HAL_ADC_Stop(&hadc1);
 80008f2:	4815      	ldr	r0, [pc, #84]	; (8000948 <CAAF+0x184>)
 80008f4:	f000 fe66 	bl	80015c4 <HAL_ADC_Stop>

	CURREN_3();
 80008f8:	f7ff ff34 	bl	8000764 <CURREN_3>
	HAL_ADC_Start(&hadc1);
 80008fc:	4812      	ldr	r0, [pc, #72]	; (8000948 <CAAF+0x184>)
 80008fe:	f000 fd8f 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000902:	21c8      	movs	r1, #200	; 0xc8
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <CAAF+0x184>)
 8000906:	f000 fe90 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[8] = HAL_ADC_GetValue(&hadc1);
 800090a:	480f      	ldr	r0, [pc, #60]	; (8000948 <CAAF+0x184>)
 800090c:	f000 ff18 	bl	8001740 <HAL_ADC_GetValue>
 8000910:	4603      	mov	r3, r0
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <CAAF+0x188>)
 8000916:	821a      	strh	r2, [r3, #16]
	HAL_ADC_Stop(&hadc1);
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <CAAF+0x184>)
 800091a:	f000 fe53 	bl	80015c4 <HAL_ADC_Stop>

	TEMP_MOTOR();
 800091e:	f7ff ff39 	bl	8000794 <TEMP_MOTOR>
	HAL_ADC_Start(&hadc1);
 8000922:	4809      	ldr	r0, [pc, #36]	; (8000948 <CAAF+0x184>)
 8000924:	f000 fd7c 	bl	8001420 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000928:	21c8      	movs	r1, #200	; 0xc8
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <CAAF+0x184>)
 800092c:	f000 fe7d 	bl	800162a <HAL_ADC_PollForConversion>
	ADC_VAL[9] = HAL_ADC_GetValue(&hadc1);
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <CAAF+0x184>)
 8000932:	f000 ff05 	bl	8001740 <HAL_ADC_GetValue>
 8000936:	4603      	mov	r3, r0
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <CAAF+0x188>)
 800093c:	825a      	strh	r2, [r3, #18]
	HAL_ADC_Stop(&hadc1);
 800093e:	4802      	ldr	r0, [pc, #8]	; (8000948 <CAAF+0x184>)
 8000940:	f000 fe40 	bl	80015c4 <HAL_ADC_Stop>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000118 	.word	0x20000118
 800094c:	20000240 	.word	0x20000240

08000950 <IFunction>:
void IFunction()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	if (buffer[0] == 1)
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <IFunction+0x5c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <IFunction+0x10>
	{
		ledBlink();
 800095c:	f7ff fdbe 	bl	80004dc <ledBlink>
	}
	if (buffer[0] == 2)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <IFunction+0x5c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d101      	bne.n	800096c <IFunction+0x1c>
	{
		USBTest();
 8000968:	f7ff fdd8 	bl	800051c <USBTest>
	}
	if (buffer[0] == 3)
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <IFunction+0x5c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d101      	bne.n	8000978 <IFunction+0x28>
	{
		CAAF();
 8000974:	f7ff ff26 	bl	80007c4 <CAAF>
	}
	if (buffer[0] == 4)
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <IFunction+0x5c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b04      	cmp	r3, #4
 800097e:	d101      	bne.n	8000984 <IFunction+0x34>
	{
		DRV8301_Enable();
 8000980:	f7ff fde4 	bl	800054c <DRV8301_Enable>
	}
	if (buffer[0] == 5)
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <IFunction+0x5c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b05      	cmp	r3, #5
 800098a:	d101      	bne.n	8000990 <IFunction+0x40>
	{
		DRV8301_Disable();
 800098c:	f7ff fdea 	bl	8000564 <DRV8301_Disable>
	}
	if (buffer[0] == 6)
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <IFunction+0x5c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b06      	cmp	r3, #6
 8000996:	d101      	bne.n	800099c <IFunction+0x4c>
	{
		DRV8301_NormalPWM();
 8000998:	f7ff fdf0 	bl	800057c <DRV8301_NormalPWM>
	}
	if (buffer[0] == 7)
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <IFunction+0x5c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b07      	cmp	r3, #7
 80009a2:	d101      	bne.n	80009a8 <IFunction+0x58>
	{
		DRV8301_NormalPWM();
 80009a4:	f7ff fdea 	bl	800057c <DRV8301_NormalPWM>
	}
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000200 	.word	0x20000200

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f000 fc5a 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f812 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f000 fa4c 	bl	8000e58 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009c0:	f000 f876 	bl	8000ab0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80009c4:	f000 f944 	bl	8000c50 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009c8:	f000 f9fa 	bl	8000dc0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80009cc:	f007 fff6 	bl	80089bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <main+0x2c>)
 80009d2:	f003 fabf 	bl	8003f54 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  IFunction();
 80009d6:	f7ff ffbb 	bl	8000950 <IFunction>
 80009da:	e7fc      	b.n	80009d6 <main+0x26>
 80009dc:	200001a8 	.word	0x200001a8

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	; 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f008 fd3a 	bl	8009468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <SystemClock_Config+0xc8>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <SystemClock_Config+0xc8>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <SystemClock_Config+0xc8>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <SystemClock_Config+0xcc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a20      	ldr	r2, [pc, #128]	; (8000aac <SystemClock_Config+0xcc>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <SystemClock_Config+0xcc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a44:	2310      	movs	r3, #16
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a50:	2310      	movs	r3, #16
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a54:	23c0      	movs	r3, #192	; 0xc0
 8000a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 fdf5 	bl	8003654 <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a70:	f000 fa5c 	bl	8000f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a74:	230f      	movs	r3, #15
 8000a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 f858 	bl	8003b44 <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a9a:	f000 fa47 	bl	8000f2c <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3750      	adds	r7, #80	; 0x50
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ac2:	4b60      	ldr	r3, [pc, #384]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000ac4:	4a60      	ldr	r2, [pc, #384]	; (8000c48 <MX_ADC1_Init+0x198>)
 8000ac6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ac8:	4b5e      	ldr	r3, [pc, #376]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ace:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ad4:	4b5b      	ldr	r3, [pc, #364]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ada:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae0:	4b58      	ldr	r3, [pc, #352]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae8:	4b56      	ldr	r3, [pc, #344]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aee:	4b55      	ldr	r3, [pc, #340]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000af0:	4a56      	ldr	r2, [pc, #344]	; (8000c4c <MX_ADC1_Init+0x19c>)
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af4:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8000afa:	4b52      	ldr	r3, [pc, #328]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000afc:	220a      	movs	r2, #10
 8000afe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b00:	4b50      	ldr	r3, [pc, #320]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b08:	4b4e      	ldr	r3, [pc, #312]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0e:	484d      	ldr	r0, [pc, #308]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000b10:	f000 fc42 	bl	8001398 <HAL_ADC_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 fa07 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4845      	ldr	r0, [pc, #276]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000b30:	f000 fe14 	bl	800175c <HAL_ADC_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b3a:	f000 f9f7 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b46:	463b      	mov	r3, r7
 8000b48:	4619      	mov	r1, r3
 8000b4a:	483e      	ldr	r0, [pc, #248]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000b4c:	f000 fe06 	bl	800175c <HAL_ADC_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b56:	f000 f9e9 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4837      	ldr	r0, [pc, #220]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000b68:	f000 fdf8 	bl	800175c <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000b72:	f000 f9db 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b76:	2303      	movs	r3, #3
 8000b78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4619      	mov	r1, r3
 8000b82:	4830      	ldr	r0, [pc, #192]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000b84:	f000 fdea 	bl	800175c <HAL_ADC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000b8e:	f000 f9cd 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b92:	2305      	movs	r3, #5
 8000b94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000b96:	2305      	movs	r3, #5
 8000b98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4829      	ldr	r0, [pc, #164]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000ba0:	f000 fddc 	bl	800175c <HAL_ADC_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000baa:	f000 f9bf 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4822      	ldr	r0, [pc, #136]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000bbc:	f000 fdce 	bl	800175c <HAL_ADC_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000bc6:	f000 f9b1 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bca:	230a      	movs	r3, #10
 8000bcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481b      	ldr	r0, [pc, #108]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000bd8:	f000 fdc0 	bl	800175c <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000be2:	f000 f9a3 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000be6:	230b      	movs	r3, #11
 8000be8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000bea:	2308      	movs	r3, #8
 8000bec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4814      	ldr	r0, [pc, #80]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000bf4:	f000 fdb2 	bl	800175c <HAL_ADC_ConfigChannel>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000bfe:	f000 f995 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c02:	230c      	movs	r3, #12
 8000c04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000c06:	2309      	movs	r3, #9
 8000c08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000c10:	f000 fda4 	bl	800175c <HAL_ADC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000c1a:	f000 f987 	bl	8000f2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000c1e:	230e      	movs	r3, #14
 8000c20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000c22:	230a      	movs	r3, #10
 8000c24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_ADC1_Init+0x194>)
 8000c2c:	f000 fd96 	bl	800175c <HAL_ADC_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000c36:	f000 f979 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000118 	.word	0x20000118
 8000c48:	40012000 	.word	0x40012000
 8000c4c:	0f000001 	.word	0x0f000001

08000c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b096      	sub	sp, #88	; 0x58
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	615a      	str	r2, [r3, #20]
 8000c80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2220      	movs	r2, #32
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f008 fbed 	bl	8009468 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c8e:	4b4a      	ldr	r3, [pc, #296]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000c90:	4a4a      	ldr	r2, [pc, #296]	; (8000dbc <MX_TIM1_Init+0x16c>)
 8000c92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 8000c94:	4b48      	ldr	r3, [pc, #288]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000c96:	220d      	movs	r2, #13
 8000c98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b47      	ldr	r3, [pc, #284]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 102;
 8000ca0:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000ca2:	2266      	movs	r2, #102	; 0x66
 8000ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca6:	4b44      	ldr	r3, [pc, #272]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cac:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb2:	4b41      	ldr	r3, [pc, #260]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb8:	483f      	ldr	r0, [pc, #252]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000cba:	f003 f8fb 	bl	8003eb4 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000cc4:	f000 f932 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4838      	ldr	r0, [pc, #224]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000cd6:	f003 fc91 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ce0:	f000 f924 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ce4:	4834      	ldr	r0, [pc, #208]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000ce6:	f003 f99d 	bl	8004024 <HAL_TIM_PWM_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000cf0:	f000 f91c 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d00:	4619      	mov	r1, r3
 8000d02:	482d      	ldr	r0, [pc, #180]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000d04:	f004 f93e 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000d0e:	f000 f90d 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d12:	2360      	movs	r3, #96	; 0x60
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	481f      	ldr	r0, [pc, #124]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000d3a:	f003 fb9d 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d44:	f000 f8f2 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4819      	ldr	r0, [pc, #100]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000d52:	f003 fb91 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000d5c:	f000 f8e6 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	2208      	movs	r2, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000d6a:	f003 fb85 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000d74:	f000 f8da 	bl	8000f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8000d84:	2314      	movs	r3, #20
 8000d86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000d9c:	f004 f96e 	bl	800507c <HAL_TIMEx_ConfigBreakDeadTime>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000da6:	f000 f8c1 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000daa:	4803      	ldr	r0, [pc, #12]	; (8000db8 <MX_TIM1_Init+0x168>)
 8000dac:	f000 f988 	bl	80010c0 <HAL_TIM_MspPostInit>

}
 8000db0:	bf00      	nop
 8000db2:	3758      	adds	r7, #88	; 0x58
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000160 	.word	0x20000160
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_TIM2_Init+0x94>)
 8000dde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_TIM2_Init+0x94>)
 8000de6:	220e      	movs	r2, #14
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_TIM2_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_TIM2_Init+0x94>)
 8000df2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_TIM2_Init+0x94>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_TIM2_Init+0x94>)
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <MX_TIM2_Init+0x94>)
 8000e06:	f003 f855 	bl	8003eb4 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e10:	f000 f88c 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0308 	add.w	r3, r7, #8
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <MX_TIM2_Init+0x94>)
 8000e22:	f003 fbeb 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e2c:	f000 f87e 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_TIM2_Init+0x94>)
 8000e3e:	f004 f8a1 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e48:	f000 f870 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001a8 	.word	0x200001a8

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a2b      	ldr	r2, [pc, #172]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_GPIO_Init+0xcc>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2123      	movs	r1, #35	; 0x23
 8000ee2:	4811      	ldr	r0, [pc, #68]	; (8000f28 <MX_GPIO_Init+0xd0>)
 8000ee4:	f001 f906 	bl	80020f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin EN_GATE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin;
 8000ee8:	2323      	movs	r3, #35	; 0x23
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	480a      	ldr	r0, [pc, #40]	; (8000f28 <MX_GPIO_Init+0xd0>)
 8000f00:	f000 ff5c 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_GPIO_Init+0xd0>)
 8000f18:	f000 ff50 	bl	8001dbc <HAL_GPIO_Init>

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020400 	.word	0x40020400

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a24      	ldr	r2, [pc, #144]	; (8001038 <HAL_ADC_MspInit+0xb0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d141      	bne.n	800102e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a22      	ldr	r2, [pc, #136]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_ADC_MspInit+0xb4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = CURREN_1_Pin|CURREN_2_Pin|CURREN_3_Pin|TEMP_MOTOR_Pin;
 8000ffe:	2317      	movs	r3, #23
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <HAL_ADC_MspInit+0xb8>)
 8001012:	f000 fed3 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VSENS_1_Pin|VSENS_2_Pin|VSENS_3_Pin|TEMP_NTC_Pin
 8001016:	236f      	movs	r3, #111	; 0x6f
 8001018:	617b      	str	r3, [r7, #20]
                          |ADC_EXT1_Pin|ADC_EXT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101a:	2303      	movs	r3, #3
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <HAL_ADC_MspInit+0xbc>)
 800102a:	f000 fec7 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40012000 	.word	0x40012000
 800103c:	40023800 	.word	0x40023800
 8001040:	40020800 	.word	0x40020800
 8001044:	40020000 	.word	0x40020000

08001048 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <HAL_TIM_Base_MspInit+0x70>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d10e      	bne.n	8001078 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_TIM_Base_MspInit+0x74>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a16      	ldr	r2, [pc, #88]	; (80010bc <HAL_TIM_Base_MspInit+0x74>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_TIM_Base_MspInit+0x74>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001076:	e01a      	b.n	80010ae <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001080:	d115      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_TIM_Base_MspInit+0x74>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_TIM_Base_MspInit+0x74>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_TIM_Base_MspInit+0x74>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	201c      	movs	r0, #28
 80010a4:	f000 fe53 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a8:	201c      	movs	r0, #28
 80010aa:	f000 fe6c 	bl	8001d86 <HAL_NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40010000 	.word	0x40010000
 80010bc:	40023800 	.word	0x40023800

080010c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <HAL_TIM_MspPostInit+0xa8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d13d      	bne.n	800115e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <HAL_TIM_MspPostInit+0xac>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a20      	ldr	r2, [pc, #128]	; (800116c <HAL_TIM_MspPostInit+0xac>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_TIM_MspPostInit+0xac>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_TIM_MspPostInit+0xac>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_TIM_MspPostInit+0xac>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_TIM_MspPostInit+0xac>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 800111a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800112c:	2301      	movs	r3, #1
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	480e      	ldr	r0, [pc, #56]	; (8001170 <HAL_TIM_MspPostInit+0xb0>)
 8001138:	f000 fe40 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 800113c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800114e:	2301      	movs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <HAL_TIM_MspPostInit+0xb4>)
 800115a:	f000 fe2f 	bl	8001dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40010000 	.word	0x40010000
 800116c:	40023800 	.word	0x40023800
 8001170:	40020400 	.word	0x40020400
 8001174:	40020000 	.word	0x40020000

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c4:	f000 f8a4 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <TIM2_IRQHandler+0x10>)
 80011d2:	f003 f849 	bl	8004268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001a8 	.word	0x200001a8

080011e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <OTG_FS_IRQHandler+0x10>)
 80011e6:	f001 f908 	bl	80023fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20001738 	.word	0x20001738

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800121e:	490e      	ldr	r1, [pc, #56]	; (8001258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001234:	4c0b      	ldr	r4, [pc, #44]	; (8001264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001242:	f7ff ffd7 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f008 f8dd 	bl	8009404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff fbb1 	bl	80009b0 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800125c:	08009514 	.word	0x08009514
  ldr r2, =_sbss
 8001260:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001264:	20001e64 	.word	0x20001e64

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_Init+0x40>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_Init+0x40>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x40>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 fd4f 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	200f      	movs	r0, #15
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fe4a 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fd67 	bl	8001da2 <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 fd2f 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	20000008 	.word	0x20000008
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000008 	.word	0x20000008
 8001334:	20000254 	.word	0x20000254

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000254 	.word	0x20000254

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffde 	bl	8001338 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e033      	b.n	8001416 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fde6 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d118      	bne.n	8001408 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013de:	f023 0302 	bic.w	r3, r3, #2
 80013e2:	f043 0202 	orr.w	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 fad8 	bl	80019a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f023 0303 	bic.w	r3, r3, #3
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
 8001406:	e001      	b.n	800140c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_ADC_Start+0x1a>
 8001436:	2302      	movs	r3, #2
 8001438:	e0b2      	b.n	80015a0 <HAL_ADC_Start+0x180>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	d018      	beq.n	8001482 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001460:	4b52      	ldr	r3, [pc, #328]	; (80015ac <HAL_ADC_Start+0x18c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_ADC_Start+0x190>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9a      	lsrs	r2, r3, #18
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001474:	e002      	b.n	800147c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b01      	cmp	r3, #1
 800148e:	d17a      	bne.n	8001586 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ce:	d106      	bne.n	80014de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	f023 0206 	bic.w	r2, r3, #6
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	645a      	str	r2, [r3, #68]	; 0x44
 80014dc:	e002      	b.n	80014e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_ADC_Start+0x194>)
 80014ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2b00      	cmp	r3, #0
 8001504:	d12a      	bne.n	800155c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <HAL_ADC_Start+0x198>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d015      	beq.n	800153c <HAL_ADC_Start+0x11c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a29      	ldr	r2, [pc, #164]	; (80015bc <HAL_ADC_Start+0x19c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d105      	bne.n	8001526 <HAL_ADC_Start+0x106>
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_ADC_Start+0x194>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00a      	beq.n	800153c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <HAL_ADC_Start+0x1a0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d136      	bne.n	800159e <HAL_ADC_Start+0x17e>
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_ADC_Start+0x194>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d130      	bne.n	800159e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d129      	bne.n	800159e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	e020      	b.n	800159e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <HAL_ADC_Start+0x198>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d11b      	bne.n	800159e <HAL_ADC_Start+0x17e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d114      	bne.n	800159e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e00b      	b.n	800159e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f043 0210 	orr.w	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	20000000 	.word	0x20000000
 80015b0:	431bde83 	.word	0x431bde83
 80015b4:	40012300 	.word	0x40012300
 80015b8:	40012000 	.word	0x40012000
 80015bc:	40012100 	.word	0x40012100
 80015c0:	40012200 	.word	0x40012200

080015c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Stop+0x16>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e021      	b.n	800161e <HAL_ADC_Stop+0x5a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d109      	bne.n	8001614 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001646:	d113      	bne.n	8001670 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001656:	d10b      	bne.n	8001670 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f043 0220 	orr.w	r2, r3, #32
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e063      	b.n	8001738 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001670:	f7ff fe62 	bl	8001338 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001676:	e021      	b.n	80016bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167e:	d01d      	beq.n	80016bc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_ADC_PollForConversion+0x6c>
 8001686:	f7ff fe57 	bl	8001338 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d212      	bcs.n	80016bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d00b      	beq.n	80016bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f043 0204 	orr.w	r2, r3, #4
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e03d      	b.n	8001738 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d1d6      	bne.n	8001678 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f06f 0212 	mvn.w	r2, #18
 80016d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d123      	bne.n	8001736 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11f      	bne.n	8001736 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800170e:	2b00      	cmp	r3, #0
 8001710:	d111      	bne.n	8001736 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f043 0201 	orr.w	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1c>
 8001774:	2302      	movs	r3, #2
 8001776:	e105      	b.n	8001984 <HAL_ADC_ConfigChannel+0x228>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d925      	bls.n	80017d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68d9      	ldr	r1, [r3, #12]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	3b1e      	subs	r3, #30
 800179e:	2207      	movs	r2, #7
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43da      	mvns	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	400a      	ands	r2, r1
 80017ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68d9      	ldr	r1, [r3, #12]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	4603      	mov	r3, r0
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4403      	add	r3, r0
 80017c6:	3b1e      	subs	r3, #30
 80017c8:	409a      	lsls	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	e022      	b.n	800181a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6919      	ldr	r1, [r3, #16]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	2207      	movs	r2, #7
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	400a      	ands	r2, r1
 80017f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6919      	ldr	r1, [r3, #16]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	4603      	mov	r3, r0
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4403      	add	r3, r0
 8001810:	409a      	lsls	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b06      	cmp	r3, #6
 8001820:	d824      	bhi.n	800186c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3b05      	subs	r3, #5
 8001834:	221f      	movs	r2, #31
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	400a      	ands	r2, r1
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	3b05      	subs	r3, #5
 800185e:	fa00 f203 	lsl.w	r2, r0, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
 800186a:	e04c      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d824      	bhi.n	80018be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b23      	subs	r3, #35	; 0x23
 8001886:	221f      	movs	r2, #31
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43da      	mvns	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	400a      	ands	r2, r1
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3b23      	subs	r3, #35	; 0x23
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
 80018bc:	e023      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b41      	subs	r3, #65	; 0x41
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	400a      	ands	r2, r1
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b41      	subs	r3, #65	; 0x41
 80018fa:	fa00 f203 	lsl.w	r2, r0, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_ADC_ConfigChannel+0x234>)
 8001908:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a21      	ldr	r2, [pc, #132]	; (8001994 <HAL_ADC_ConfigChannel+0x238>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d109      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1cc>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b12      	cmp	r3, #18
 800191a:	d105      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	; (8001994 <HAL_ADC_ConfigChannel+0x238>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d123      	bne.n	800197a <HAL_ADC_ConfigChannel+0x21e>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d003      	beq.n	8001942 <HAL_ADC_ConfigChannel+0x1e6>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b11      	cmp	r3, #17
 8001940:	d11b      	bne.n	800197a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d111      	bne.n	800197a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_ADC_ConfigChannel+0x23c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_ADC_ConfigChannel+0x240>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	0c9a      	lsrs	r2, r3, #18
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800196c:	e002      	b.n	8001974 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3b01      	subs	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f9      	bne.n	800196e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	40012300 	.word	0x40012300
 8001994:	40012000 	.word	0x40012000
 8001998:	20000000 	.word	0x20000000
 800199c:	431bde83 	.word	0x431bde83

080019a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a8:	4b79      	ldr	r3, [pc, #484]	; (8001b90 <ADC_Init+0x1f0>)
 80019aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6859      	ldr	r1, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	021a      	lsls	r2, r3, #8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6899      	ldr	r1, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	4a58      	ldr	r2, [pc, #352]	; (8001b94 <ADC_Init+0x1f4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d022      	beq.n	8001a7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6899      	ldr	r1, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6899      	ldr	r1, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	e00f      	b.n	8001a9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0202 	bic.w	r2, r2, #2
 8001aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6899      	ldr	r1, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7e1b      	ldrb	r3, [r3, #24]
 8001ab8:	005a      	lsls	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d01b      	beq.n	8001b04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ada:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001aea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6859      	ldr	r1, [r3, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	3b01      	subs	r3, #1
 8001af8:	035a      	lsls	r2, r3, #13
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	e007      	b.n	8001b14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	051a      	lsls	r2, r3, #20
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6899      	ldr	r1, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b56:	025a      	lsls	r2, r3, #9
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6899      	ldr	r1, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	029a      	lsls	r2, r3, #10
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	609a      	str	r2, [r3, #8]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40012300 	.word	0x40012300
 8001b94:	0f000001 	.word	0x0f000001

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <__NVIC_EnableIRQ+0x38>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100

08001c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	6039      	str	r1, [r7, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db0a      	blt.n	8001c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	490c      	ldr	r1, [pc, #48]	; (8001c84 <__NVIC_SetPriority+0x4c>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	0112      	lsls	r2, r2, #4
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c60:	e00a      	b.n	8001c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4908      	ldr	r1, [pc, #32]	; (8001c88 <__NVIC_SetPriority+0x50>)
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	3b04      	subs	r3, #4
 8001c70:	0112      	lsls	r2, r2, #4
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	440b      	add	r3, r1
 8001c76:	761a      	strb	r2, [r3, #24]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000e100 	.word	0xe000e100
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f1c3 0307 	rsb	r3, r3, #7
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	bf28      	it	cs
 8001caa:	2304      	movcs	r3, #4
 8001cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d902      	bls.n	8001cbc <NVIC_EncodePriority+0x30>
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3b03      	subs	r3, #3
 8001cba:	e000      	b.n	8001cbe <NVIC_EncodePriority+0x32>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	401a      	ands	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43d9      	mvns	r1, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	4313      	orrs	r3, r2
         );
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3724      	adds	r7, #36	; 0x24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff8e 	bl	8001c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff29 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff3e 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff8e 	bl	8001c8c <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff5d 	bl	8001c38 <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff31 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffa2 	bl	8001cf4 <SysTick_Config>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	e16b      	b.n	80020b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd8:	2201      	movs	r2, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 815a 	bne.w	80020aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d005      	beq.n	8001e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d130      	bne.n	8001e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 0201 	and.w	r2, r3, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d017      	beq.n	8001eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d123      	bne.n	8001f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	08da      	lsrs	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3208      	adds	r2, #8
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80b4 	beq.w	80020aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <HAL_GPIO_Init+0x30c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a5f      	ldr	r2, [pc, #380]	; (80020c8 <HAL_GPIO_Init+0x30c>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b5d      	ldr	r3, [pc, #372]	; (80020c8 <HAL_GPIO_Init+0x30c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5e:	4a5b      	ldr	r2, [pc, #364]	; (80020cc <HAL_GPIO_Init+0x310>)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	3302      	adds	r3, #2
 8001f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	220f      	movs	r2, #15
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a52      	ldr	r2, [pc, #328]	; (80020d0 <HAL_GPIO_Init+0x314>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d02b      	beq.n	8001fe2 <HAL_GPIO_Init+0x226>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a51      	ldr	r2, [pc, #324]	; (80020d4 <HAL_GPIO_Init+0x318>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d025      	beq.n	8001fde <HAL_GPIO_Init+0x222>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a50      	ldr	r2, [pc, #320]	; (80020d8 <HAL_GPIO_Init+0x31c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01f      	beq.n	8001fda <HAL_GPIO_Init+0x21e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4f      	ldr	r2, [pc, #316]	; (80020dc <HAL_GPIO_Init+0x320>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d019      	beq.n	8001fd6 <HAL_GPIO_Init+0x21a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4e      	ldr	r2, [pc, #312]	; (80020e0 <HAL_GPIO_Init+0x324>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_GPIO_Init+0x216>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4d      	ldr	r2, [pc, #308]	; (80020e4 <HAL_GPIO_Init+0x328>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00d      	beq.n	8001fce <HAL_GPIO_Init+0x212>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4c      	ldr	r2, [pc, #304]	; (80020e8 <HAL_GPIO_Init+0x32c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d007      	beq.n	8001fca <HAL_GPIO_Init+0x20e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	; (80020ec <HAL_GPIO_Init+0x330>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_GPIO_Init+0x20a>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e00e      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	e00c      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fca:	2306      	movs	r3, #6
 8001fcc:	e00a      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fce:	2305      	movs	r3, #5
 8001fd0:	e008      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e004      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x228>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	f002 0203 	and.w	r2, r2, #3
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	4093      	lsls	r3, r2
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff4:	4935      	ldr	r1, [pc, #212]	; (80020cc <HAL_GPIO_Init+0x310>)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002026:	4a32      	ldr	r2, [pc, #200]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800202c:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_GPIO_Init+0x334>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002050:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800207a:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_GPIO_Init+0x334>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <HAL_GPIO_Init+0x334>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a4:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <HAL_GPIO_Init+0x334>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3301      	adds	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	f67f ae90 	bls.w	8001dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40013800 	.word	0x40013800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40021400 	.word	0x40021400
 80020e8:	40021800 	.word	0x40021800
 80020ec:	40021c00 	.word	0x40021c00
 80020f0:	40013c00 	.word	0x40013c00

080020f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
 8002100:	4613      	mov	r3, r2
 8002102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002104:	787b      	ldrb	r3, [r7, #1]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002110:	e003      	b.n	800211a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	041a      	lsls	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002138:	887a      	ldrh	r2, [r7, #2]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	041a      	lsls	r2, r3, #16
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43d9      	mvns	r1, r3
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	400b      	ands	r3, r1
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800215a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215c:	b08f      	sub	sp, #60	; 0x3c
 800215e:	af0a      	add	r7, sp, #40	; 0x28
 8002160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e10f      	b.n	800238c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f006 fe28 	bl	8008ddc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2203      	movs	r2, #3
 8002190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d102      	bne.n	80021a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 f905 	bl	80053ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	687e      	ldr	r6, [r7, #4]
 80021b8:	466d      	mov	r5, sp
 80021ba:	f106 0410 	add.w	r4, r6, #16
 80021be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ce:	1d33      	adds	r3, r6, #4
 80021d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	f002 ffdd 	bl	8005192 <USB_CoreInit>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0d0      	b.n	800238c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 f8f3 	bl	80053dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	e04a      	b.n	8002292 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	333d      	adds	r3, #61	; 0x3d
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	333c      	adds	r3, #60	; 0x3c
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	b298      	uxth	r0, r3
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3344      	adds	r3, #68	; 0x44
 8002238:	4602      	mov	r2, r0
 800223a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800223c:	7bfa      	ldrb	r2, [r7, #15]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3340      	adds	r3, #64	; 0x40
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3348      	adds	r3, #72	; 0x48
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	334c      	adds	r3, #76	; 0x4c
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	3354      	adds	r3, #84	; 0x54
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	3301      	adds	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	d3af      	bcc.n	80021fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e044      	b.n	800232c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022e4:	7bfa      	ldrb	r2, [r7, #15]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	3301      	adds	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d3b5      	bcc.n	80022a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	687e      	ldr	r6, [r7, #4]
 800233e:	466d      	mov	r5, sp
 8002340:	f106 0410 	add.w	r4, r6, #16
 8002344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800234a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002350:	e885 0003 	stmia.w	r5, {r0, r1}
 8002354:	1d33      	adds	r3, r6, #4
 8002356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002358:	6838      	ldr	r0, [r7, #0]
 800235a:	f003 f88b 	bl	8005474 <USB_DevInit>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e00d      	b.n	800238c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f004 f9da 	bl	800673e <USB_DevDisconnect>

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002394 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_PCD_Start+0x1c>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e020      	b.n	80023f2 <HAL_PCD_Start+0x5e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d109      	bne.n	80023d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d005      	beq.n	80023d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 ffdd 	bl	8005398 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 f98a 	bl	80066fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023fa:	b590      	push	{r4, r7, lr}
 80023fc:	b08d      	sub	sp, #52	; 0x34
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f004 fa48 	bl	80068a6 <USB_GetMode>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 848a 	bne.w	8002d32 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f004 f9ac 	bl	8006780 <USB_ReadInterrupts>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8480 	beq.w	8002d30 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f004 f999 	bl	8006780 <USB_ReadInterrupts>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d107      	bne.n	8002468 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f002 0202 	and.w	r2, r2, #2
 8002466:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f004 f987 	bl	8006780 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b10      	cmp	r3, #16
 800247a:	d161      	bne.n	8002540 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0210 	bic.w	r2, r2, #16
 800248a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f003 020f 	and.w	r2, r3, #15
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4413      	add	r3, r2
 80024a8:	3304      	adds	r3, #4
 80024aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	0c5b      	lsrs	r3, r3, #17
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d124      	bne.n	8002502 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d035      	beq.n	8002530 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	6a38      	ldr	r0, [r7, #32]
 80024d8:	f003 ffbe 	bl	8006458 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024e8:	441a      	add	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024fa:	441a      	add	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	621a      	str	r2, [r3, #32]
 8002500:	e016      	b.n	8002530 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	0c5b      	lsrs	r3, r3, #17
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	2b06      	cmp	r3, #6
 800250c:	d110      	bne.n	8002530 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002514:	2208      	movs	r2, #8
 8002516:	4619      	mov	r1, r3
 8002518:	6a38      	ldr	r0, [r7, #32]
 800251a:	f003 ff9d 	bl	8006458 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800252a:	441a      	add	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0210 	orr.w	r2, r2, #16
 800253e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f004 f91b 	bl	8006780 <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002550:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002554:	f040 80a7 	bne.w	80026a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f004 f920 	bl	80067a6 <USB_ReadDevAllOutEpInterrupt>
 8002566:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002568:	e099      	b.n	800269e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 808e 	beq.w	8002692 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f004 f944 	bl	800680e <USB_ReadDevOutEPInterrupt>
 8002586:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259e:	461a      	mov	r2, r3
 80025a0:	2301      	movs	r3, #1
 80025a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fec2 	bl	8003330 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00c      	beq.n	80025d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c2:	461a      	mov	r2, r3
 80025c4:	2308      	movs	r3, #8
 80025c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80025c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 ff98 	bl	8003500 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e6:	461a      	mov	r2, r3
 80025e8:	2310      	movs	r3, #16
 80025ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d030      	beq.n	8002658 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b80      	cmp	r3, #128	; 0x80
 8002600:	d109      	bne.n	8002616 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002610:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002614:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	4613      	mov	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	3304      	adds	r3, #4
 800262a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	78db      	ldrb	r3, [r3, #3]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d108      	bne.n	8002646 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2200      	movs	r2, #0
 8002638:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f006 fcd1 	bl	8008fe8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002652:	461a      	mov	r2, r3
 8002654:	2302      	movs	r3, #2
 8002656:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266e:	461a      	mov	r2, r3
 8002670:	2320      	movs	r3, #32
 8002672:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268a:	461a      	mov	r2, r3
 800268c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002690:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	3301      	adds	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f af62 	bne.w	800256a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 f868 	bl	8006780 <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026ba:	f040 80db 	bne.w	8002874 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 f889 	bl	80067da <USB_ReadDevAllInEpInterrupt>
 80026c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026ce:	e0cd      	b.n	800286c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80c2 	beq.w	8002860 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 f8af 	bl	800684a <USB_ReadDevInEPInterrupt>
 80026ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d057      	beq.n	80027a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	2201      	movs	r2, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	69f9      	ldr	r1, [r7, #28]
 8002714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002718:	4013      	ands	r3, r2
 800271a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002728:	461a      	mov	r2, r3
 800272a:	2301      	movs	r3, #1
 800272c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d132      	bne.n	800279c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	334c      	adds	r3, #76	; 0x4c
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4403      	add	r3, r0
 8002756:	3348      	adds	r3, #72	; 0x48
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4419      	add	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4403      	add	r3, r0
 800276a:	334c      	adds	r3, #76	; 0x4c
 800276c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d113      	bne.n	800279c <HAL_PCD_IRQHandler+0x3a2>
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3354      	adds	r3, #84	; 0x54
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d108      	bne.n	800279c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002794:	461a      	mov	r2, r3
 8002796:	2101      	movs	r1, #1
 8002798:	f004 f8b6 	bl	8006908 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4619      	mov	r1, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f006 fb9b 	bl	8008ede <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027be:	461a      	mov	r2, r3
 80027c0:	2308      	movs	r3, #8
 80027c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027da:	461a      	mov	r2, r3
 80027dc:	2310      	movs	r3, #16
 80027de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f6:	461a      	mov	r2, r3
 80027f8:	2340      	movs	r3, #64	; 0x40
 80027fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d023      	beq.n	800284e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002808:	6a38      	ldr	r0, [r7, #32]
 800280a:	f002 ff97 	bl	800573c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	3338      	adds	r3, #56	; 0x38
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	3304      	adds	r3, #4
 8002820:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	78db      	ldrb	r3, [r3, #3]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d108      	bne.n	800283c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2200      	movs	r2, #0
 800282e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	b2db      	uxtb	r3, r3
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f006 fbe8 	bl	800900c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002848:	461a      	mov	r2, r3
 800284a:	2302      	movs	r3, #2
 800284c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fcdb 	bl	8003216 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	3301      	adds	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	f47f af2e 	bne.w	80026d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 ff81 	bl	8006780 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002888:	d122      	bne.n	80028d0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d108      	bne.n	80028ba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028b0:	2100      	movs	r1, #0
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fec2 	bl	800363c <HAL_PCDEx_LPM_Callback>
 80028b8:	e002      	b.n	80028c0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f006 fb86 	bl	8008fcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 ff53 	bl	8006780 <USB_ReadInterrupts>
 80028da:	4603      	mov	r3, r0
 80028dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028e4:	d112      	bne.n	800290c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f006 fb42 	bl	8008f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800290a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f003 ff35 	bl	8006780 <USB_ReadInterrupts>
 8002916:	4603      	mov	r3, r0
 8002918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002920:	f040 80b7 	bne.w	8002a92 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2110      	movs	r1, #16
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fefc 	bl	800573c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002948:	e046      	b.n	80029d8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4413      	add	r3, r2
 8002952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002956:	461a      	mov	r2, r3
 8002958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800295c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296e:	0151      	lsls	r1, r2, #5
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	440a      	add	r2, r1
 8002974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800297c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298a:	461a      	mov	r2, r3
 800298c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002990:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a2:	0151      	lsls	r1, r2, #5
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	440a      	add	r2, r1
 80029a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c2:	0151      	lsls	r1, r2, #5
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	440a      	add	r2, r1
 80029c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	3301      	adds	r3, #1
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3b3      	bcc.n	800294a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a0e:	f043 030b 	orr.w	r3, r3, #11
 8002a12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a24:	f043 030b 	orr.w	r3, r3, #11
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	e015      	b.n	8002a58 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a52:	f043 030b 	orr.w	r3, r3, #11
 8002a56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69fa      	ldr	r2, [r7, #28]
 8002a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f003 ff43 	bl	8006908 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f003 fe72 	bl	8006780 <USB_ReadInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa6:	d124      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 ff08 	bl	80068c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 febd 	bl	8005836 <USB_GetDevSpeed>
 8002abc:	4603      	mov	r3, r0
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681c      	ldr	r4, [r3, #0]
 8002ac8:	f001 f9e8 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8002acc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f002 fbbc 	bl	8005254 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f006 fa26 	bl	8008f2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f003 fe42 	bl	8006780 <USB_ReadInterrupts>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d10a      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f006 fa03 	bl	8008f12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f002 0208 	and.w	r2, r2, #8
 8002b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fe2d 	bl	8006780 <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d122      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b40:	e014      	b.n	8002b6c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b46:	4613      	mov	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d105      	bne.n	8002b66 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fb27 	bl	80031b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d3e5      	bcc.n	8002b42 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 fe00 	bl	8006780 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b8a:	d13b      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	e02b      	b.n	8002bea <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3340      	adds	r3, #64	; 0x40
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d115      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002bb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	da12      	bge.n	8002be4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	333f      	adds	r3, #63	; 0x3f
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fae8 	bl	80031b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	3301      	adds	r3, #1
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d3ce      	bcc.n	8002b92 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 fdb9 	bl	8006780 <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c18:	d155      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1e:	e045      	b.n	8002cac <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d12e      	bne.n	8002ca6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	da2b      	bge.n	8002ca6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002c5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d121      	bne.n	8002ca6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca2:	6053      	str	r3, [r2, #4]
            break;
 8002ca4:	e007      	b.n	8002cb6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	3301      	adds	r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d3b4      	bcc.n	8002c20 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 fd58 	bl	8006780 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cda:	d10a      	bne.n	8002cf2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f006 f9a7 	bl	8009030 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 fd42 	bl	8006780 <USB_ReadInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d115      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f006 f997 	bl	800904c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	e000      	b.n	8002d32 <HAL_PCD_IRQHandler+0x938>
      return;
 8002d30:	bf00      	nop
    }
  }
}
 8002d32:	3734      	adds	r7, #52	; 0x34
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd90      	pop	{r4, r7, pc}

08002d38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_PCD_SetAddress+0x1a>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e013      	b.n	8002d7a <HAL_PCD_SetAddress+0x42>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 fca0 	bl	80066b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	4608      	mov	r0, r1
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4603      	mov	r3, r0
 8002d92:	70fb      	strb	r3, [r7, #3]
 8002d94:	460b      	mov	r3, r1
 8002d96:	803b      	strh	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	da0f      	bge.n	8002dc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 020f 	and.w	r2, r3, #15
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	3338      	adds	r3, #56	; 0x38
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	705a      	strb	r2, [r3, #1]
 8002dc6:	e00f      	b.n	8002de8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 020f 	and.w	r2, r3, #15
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002df4:	883a      	ldrh	r2, [r7, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	78ba      	ldrb	r2, [r7, #2]
 8002dfe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d004      	beq.n	8002e12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e12:	78bb      	ldrb	r3, [r7, #2]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d102      	bne.n	8002e1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_PCD_EP_Open+0xaa>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e00e      	b.n	8002e4a <HAL_PCD_EP_Open+0xc8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68f9      	ldr	r1, [r7, #12]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 fd20 	bl	8005880 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002e48:	7afb      	ldrb	r3, [r7, #11]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	da0f      	bge.n	8002e86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	3338      	adds	r3, #56	; 0x38
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	705a      	strb	r2, [r3, #1]
 8002e84:	e00f      	b.n	8002ea6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_PCD_EP_Close+0x6e>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e00e      	b.n	8002ede <HAL_PCD_EP_Close+0x8c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68f9      	ldr	r1, [r7, #12]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fd5e 	bl	8005990 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2200      	movs	r2, #0
 8002f26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f28:	7afb      	ldrb	r3, [r7, #11]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d102      	bne.n	8002f42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f42:	7afb      	ldrb	r3, [r7, #11]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	6979      	ldr	r1, [r7, #20]
 8002f5a:	f003 f83d 	bl	8005fd8 <USB_EP0StartXfer>
 8002f5e:	e008      	b.n	8002f72 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	6979      	ldr	r1, [r7, #20]
 8002f6e:	f002 fdeb 	bl	8005b48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 020f 	and.w	r2, r3, #15
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	7afb      	ldrb	r3, [r7, #11]
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3338      	adds	r3, #56	; 0x38
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d102      	bne.n	8003006 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003006:	7afb      	ldrb	r3, [r7, #11]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	6979      	ldr	r1, [r7, #20]
 800301e:	f002 ffdb 	bl	8005fd8 <USB_EP0StartXfer>
 8003022:	e008      	b.n	8003036 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	6979      	ldr	r1, [r7, #20]
 8003032:	f002 fd89 	bl	8005b48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 020f 	and.w	r2, r3, #15
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	d901      	bls.n	800305e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e050      	b.n	8003100 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800305e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003062:	2b00      	cmp	r3, #0
 8003064:	da0f      	bge.n	8003086 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3338      	adds	r3, #56	; 0x38
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	3304      	adds	r3, #4
 800307c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	705a      	strb	r2, [r3, #1]
 8003084:	e00d      	b.n	80030a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	3304      	adds	r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_PCD_EP_SetStall+0x82>
 80030be:	2302      	movs	r3, #2
 80030c0:	e01e      	b.n	8003100 <HAL_PCD_EP_SetStall+0xc0>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68f9      	ldr	r1, [r7, #12]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f003 fa19 	bl	8006508 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	b2d9      	uxtb	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030f0:	461a      	mov	r2, r3
 80030f2:	f003 fc09 	bl	8006908 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	429a      	cmp	r2, r3
 8003120:	d901      	bls.n	8003126 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e042      	b.n	80031ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800312a:	2b00      	cmp	r3, #0
 800312c:	da0f      	bge.n	800314e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 020f 	and.w	r2, r3, #15
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	3338      	adds	r3, #56	; 0x38
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	705a      	strb	r2, [r3, #1]
 800314c:	e00f      	b.n	800316e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 020f 	and.w	r2, r3, #15
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4413      	add	r3, r2
 8003164:	3304      	adds	r3, #4
 8003166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	b2da      	uxtb	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_PCD_EP_ClrStall+0x86>
 800318a:	2302      	movs	r3, #2
 800318c:	e00e      	b.n	80031ac <HAL_PCD_EP_ClrStall+0xa4>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	4618      	mov	r0, r3
 800319e:	f003 fa21 	bl	80065e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da0c      	bge.n	80031e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	f003 020f 	and.w	r2, r3, #15
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	3338      	adds	r3, #56	; 0x38
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	3304      	adds	r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e00c      	b.n	80031fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	f003 020f 	and.w	r2, r3, #15
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68f9      	ldr	r1, [r7, #12]
 8003202:	4618      	mov	r0, r3
 8003204:	f003 f840 	bl	8006288 <USB_EPStopXfer>
 8003208:	4603      	mov	r3, r0
 800320a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800320c:	7afb      	ldrb	r3, [r7, #11]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b08a      	sub	sp, #40	; 0x28
 800321a:	af02      	add	r7, sp, #8
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	3338      	adds	r3, #56	; 0x38
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	3304      	adds	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a1a      	ldr	r2, [r3, #32]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	429a      	cmp	r2, r3
 8003248:	d901      	bls.n	800324e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e06c      	b.n	8003328 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	429a      	cmp	r2, r3
 8003262:	d902      	bls.n	800326a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3303      	adds	r3, #3
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003272:	e02b      	b.n	80032cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	429a      	cmp	r2, r3
 8003288:	d902      	bls.n	8003290 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	3303      	adds	r3, #3
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6919      	ldr	r1, [r3, #16]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4603      	mov	r3, r0
 80032ae:	6978      	ldr	r0, [r7, #20]
 80032b0:	f003 f894 	bl	80063dc <USB_WritePacket>

    ep->xfer_buff  += len;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	441a      	add	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	441a      	add	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d809      	bhi.n	80032f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d203      	bcs.n	80032f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1be      	bne.n	8003274 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d811      	bhi.n	8003326 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	2201      	movs	r2, #1
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	43db      	mvns	r3, r3
 800331c:	6939      	ldr	r1, [r7, #16]
 800331e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003322:	4013      	ands	r3, r2
 8003324:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	333c      	adds	r3, #60	; 0x3c
 8003348:	3304      	adds	r3, #4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	4413      	add	r3, r2
 8003356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d17b      	bne.n	800345e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	4a61      	ldr	r2, [pc, #388]	; (80034f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	f240 80b9 	bls.w	80034ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80b3 	beq.w	80034ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	461a      	mov	r2, r3
 8003394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003398:	6093      	str	r3, [r2, #8]
 800339a:	e0a7      	b.n	80034ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b2:	461a      	mov	r2, r3
 80033b4:	2320      	movs	r3, #32
 80033b6:	6093      	str	r3, [r2, #8]
 80033b8:	e098      	b.n	80034ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f040 8093 	bne.w	80034ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4a4b      	ldr	r2, [pc, #300]	; (80034f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d90f      	bls.n	80033ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e4:	461a      	mov	r2, r3
 80033e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	e07e      	b.n	80034ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	0159      	lsls	r1, r3, #5
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	440b      	add	r3, r1
 8003410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341a:	1ad2      	subs	r2, r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d114      	bne.n	8003450 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003438:	461a      	mov	r2, r3
 800343a:	2101      	movs	r1, #1
 800343c:	f003 fa64 	bl	8006908 <USB_EP0_OutStart>
 8003440:	e006      	b.n	8003450 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f005 fd26 	bl	8008ea8 <HAL_PCD_DataOutStageCallback>
 800345c:	e046      	b.n	80034ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	4a26      	ldr	r2, [pc, #152]	; (80034fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d124      	bne.n	80034b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347c:	461a      	mov	r2, r3
 800347e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003482:	6093      	str	r3, [r2, #8]
 8003484:	e032      	b.n	80034ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349c:	461a      	mov	r2, r3
 800349e:	2320      	movs	r3, #32
 80034a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f005 fcfd 	bl	8008ea8 <HAL_PCD_DataOutStageCallback>
 80034ae:	e01d      	b.n	80034ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d114      	bne.n	80034e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d108      	bne.n	80034e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034d8:	461a      	mov	r2, r3
 80034da:	2100      	movs	r1, #0
 80034dc:	f003 fa14 	bl	8006908 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f005 fcde 	bl	8008ea8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	4f54300a 	.word	0x4f54300a
 80034fc:	4f54310a 	.word	0x4f54310a

08003500 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	333c      	adds	r3, #60	; 0x3c
 8003518:	3304      	adds	r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <PCD_EP_OutSetupPacket_int+0x88>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d90e      	bls.n	8003554 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	461a      	mov	r2, r3
 800354e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003552:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f005 fc95 	bl	8008e84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <PCD_EP_OutSetupPacket_int+0x88>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d90c      	bls.n	800357c <PCD_EP_OutSetupPacket_int+0x7c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d108      	bne.n	800357c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003574:	461a      	mov	r2, r3
 8003576:	2101      	movs	r1, #1
 8003578:	f003 f9c6 	bl	8006908 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	4f54300a 	.word	0x4f54300a

0800358c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	70fb      	strb	r3, [r7, #3]
 8003598:	4613      	mov	r3, r2
 800359a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035aa:	883b      	ldrh	r3, [r7, #0]
 80035ac:	0419      	lsls	r1, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
 80035b8:	e028      	b.n	800360c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4413      	add	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e00d      	b.n	80035ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	3340      	adds	r3, #64	; 0x40
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4413      	add	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	3301      	adds	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d3ec      	bcc.n	80035ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035f4:	883b      	ldrh	r3, [r7, #0]
 80035f6:	0418      	lsls	r0, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	3b01      	subs	r3, #1
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	4302      	orrs	r2, r0
 8003604:	3340      	adds	r3, #64	; 0x40
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e267      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d075      	beq.n	800375e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003672:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b04      	cmp	r3, #4
 800367c:	d00c      	beq.n	8003698 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367e:	4b85      	ldr	r3, [pc, #532]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d112      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368a:	4b82      	ldr	r3, [pc, #520]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003696:	d10b      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d05b      	beq.n	800375c <HAL_RCC_OscConfig+0x108>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d157      	bne.n	800375c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e242      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_OscConfig+0x74>
 80036ba:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a75      	ldr	r2, [pc, #468]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e01d      	b.n	8003704 <HAL_RCC_OscConfig+0xb0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x98>
 80036d2:	4b70      	ldr	r3, [pc, #448]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6f      	ldr	r2, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	4b6d      	ldr	r3, [pc, #436]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6c      	ldr	r2, [pc, #432]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0xb0>
 80036ec:	4b69      	ldr	r3, [pc, #420]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a68      	ldr	r2, [pc, #416]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b66      	ldr	r3, [pc, #408]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a65      	ldr	r2, [pc, #404]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80036fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d013      	beq.n	8003734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fd fe14 	bl	8001338 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003714:	f7fd fe10 	bl	8001338 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e207      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	4b5b      	ldr	r3, [pc, #364]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0xc0>
 8003732:	e014      	b.n	800375e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd fe00 	bl	8001338 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd fdfc 	bl	8001338 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1f3      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	4b51      	ldr	r3, [pc, #324]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0xe8>
 800375a:	e000      	b.n	800375e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d063      	beq.n	8003832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376a:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800377e:	2b08      	cmp	r3, #8
 8003780:	d11c      	bne.n	80037bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003782:	4b44      	ldr	r3, [pc, #272]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d116      	bne.n	80037bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378e:	4b41      	ldr	r3, [pc, #260]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_RCC_OscConfig+0x152>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e1c7      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	4937      	ldr	r1, [pc, #220]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	e03a      	b.n	8003832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037c4:	4b34      	ldr	r3, [pc, #208]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd fdb5 	bl	8001338 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fd fdb1 	bl	8001338 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1a8      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b28      	ldr	r3, [pc, #160]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4925      	ldr	r1, [pc, #148]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]
 8003804:	e015      	b.n	8003832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x244>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fd94 	bl	8001338 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003814:	f7fd fd90 	bl	8001338 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e187      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d036      	beq.n	80038ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_RCC_OscConfig+0x248>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fd fd74 	bl	8001338 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003854:	f7fd fd70 	bl	8001338 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e167      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_OscConfig+0x240>)
 8003868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0x200>
 8003872:	e01b      	b.n	80038ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_RCC_OscConfig+0x248>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387a:	f7fd fd5d 	bl	8001338 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003880:	e00e      	b.n	80038a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003882:	f7fd fd59 	bl	8001338 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d907      	bls.n	80038a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e150      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
 8003894:	40023800 	.word	0x40023800
 8003898:	42470000 	.word	0x42470000
 800389c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ea      	bne.n	8003882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8097 	beq.w	80039e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038be:	4b81      	ldr	r3, [pc, #516]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a7c      	ldr	r2, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b7a      	ldr	r3, [pc, #488]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4b77      	ldr	r3, [pc, #476]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f6:	4b74      	ldr	r3, [pc, #464]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a73      	ldr	r2, [pc, #460]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 80038fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003902:	f7fd fd19 	bl	8001338 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390a:	f7fd fd15 	bl	8001338 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e10c      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391c:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x474>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x2ea>
 8003930:	4b64      	ldr	r3, [pc, #400]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a63      	ldr	r2, [pc, #396]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
 800393c:	e01c      	b.n	8003978 <HAL_RCC_OscConfig+0x324>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b05      	cmp	r3, #5
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x30c>
 8003946:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4a5e      	ldr	r2, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	6713      	str	r3, [r2, #112]	; 0x70
 8003952:	4b5c      	ldr	r3, [pc, #368]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	4a5b      	ldr	r2, [pc, #364]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6713      	str	r3, [r2, #112]	; 0x70
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0x324>
 8003960:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a57      	ldr	r2, [pc, #348]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
 800396c:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a54      	ldr	r2, [pc, #336]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003972:	f023 0304 	bic.w	r3, r3, #4
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fcda 	bl	8001338 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fd fcd6 	bl	8001338 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0cb      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800399e:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0ee      	beq.n	8003988 <HAL_RCC_OscConfig+0x334>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ac:	f7fd fcc4 	bl	8001338 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b4:	f7fd fcc0 	bl	8001338 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0b5      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ee      	bne.n	80039b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039dc:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	4a38      	ldr	r2, [pc, #224]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a1 	beq.w	8003b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039f2:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d05c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d141      	bne.n	8003a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a06:	4b31      	ldr	r3, [pc, #196]	; (8003acc <HAL_RCC_OscConfig+0x478>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fc94 	bl	8001338 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fd fc90 	bl	8001338 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e087      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69da      	ldr	r2, [r3, #28]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x478>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd fc69 	bl	8001338 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fd fc65 	bl	8001338 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e05c      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x416>
 8003a88:	e054      	b.n	8003b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x478>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd fc52 	bl	8001338 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd fc4e 	bl	8001338 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e045      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_OscConfig+0x470>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x444>
 8003ab6:	e03d      	b.n	8003b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e038      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <HAL_RCC_OscConfig+0x4ec>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d028      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d121      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d11a      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d111      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800

08003b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0cc      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b58:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d90c      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b63      	ldr	r3, [pc, #396]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0b8      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b98:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a58      	ldr	r2, [pc, #352]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb0:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a52      	ldr	r2, [pc, #328]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b50      	ldr	r3, [pc, #320]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	494d      	ldr	r1, [pc, #308]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d044      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d119      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e07f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e06f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c12:	4b3b      	ldr	r3, [pc, #236]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e067      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c22:	4b37      	ldr	r3, [pc, #220]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 0203 	bic.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4934      	ldr	r1, [pc, #208]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c34:	f7fd fb80 	bl	8001338 <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3c:	f7fd fb7c 	bl	8001338 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e04f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 020c 	and.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1eb      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d20c      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e032      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4916      	ldr	r1, [pc, #88]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb6:	4b12      	ldr	r3, [pc, #72]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	490e      	ldr	r1, [pc, #56]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cca:	f000 f821 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	490a      	ldr	r1, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	5ccb      	ldrb	r3, [r1, r3]
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fae0 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00
 8003d00:	40023800 	.word	0x40023800
 8003d04:	080094f4 	.word	0x080094f4
 8003d08:	20000000 	.word	0x20000000
 8003d0c:	20000004 	.word	0x20000004

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b090      	sub	sp, #64	; 0x40
 8003d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	2300      	movs	r3, #0
 8003d22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d28:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d00d      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x40>
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	f200 80a1 	bhi.w	8003e7c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d42:	e09b      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d48:	e09b      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4a:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d4e:	e098      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d50:	4b4f      	ldr	r3, [pc, #316]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d5a:	4b4d      	ldr	r3, [pc, #308]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d028      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	623b      	str	r3, [r7, #32]
 8003d70:	627a      	str	r2, [r7, #36]	; 0x24
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d7c:	fb03 f201 	mul.w	r2, r3, r1
 8003d80:	2300      	movs	r3, #0
 8003d82:	fb00 f303 	mul.w	r3, r0, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	4a43      	ldr	r2, [pc, #268]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d8a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d90:	460a      	mov	r2, r1
 8003d92:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d96:	4413      	add	r3, r2
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	61fa      	str	r2, [r7, #28]
 8003da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003daa:	f7fc fa15 	bl	80001d8 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4613      	mov	r3, r2
 8003db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db6:	e053      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db8:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	617a      	str	r2, [r7, #20]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dca:	f04f 0b00 	mov.w	fp, #0
 8003dce:	4652      	mov	r2, sl
 8003dd0:	465b      	mov	r3, fp
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	0159      	lsls	r1, r3, #5
 8003ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de0:	0150      	lsls	r0, r2, #5
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	ebb2 080a 	subs.w	r8, r2, sl
 8003dea:	eb63 090b 	sbc.w	r9, r3, fp
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e02:	ebb2 0408 	subs.w	r4, r2, r8
 8003e06:	eb63 0509 	sbc.w	r5, r3, r9
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	00eb      	lsls	r3, r5, #3
 8003e14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e18:	00e2      	lsls	r2, r4, #3
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	eb14 030a 	adds.w	r3, r4, sl
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	eb45 030b 	adc.w	r3, r5, fp
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e36:	4629      	mov	r1, r5
 8003e38:	028b      	lsls	r3, r1, #10
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e40:	4621      	mov	r1, r4
 8003e42:	028a      	lsls	r2, r1, #10
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	60fa      	str	r2, [r7, #12]
 8003e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e54:	f7fc f9c0 	bl	80001d8 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e7a:	e002      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3740      	adds	r7, #64	; 0x40
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	017d7840 	.word	0x017d7840

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000000 	.word	0x20000000

08003eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e041      	b.n	8003f4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd f8b4 	bl	8001048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f000 fc7c 	bl	80047f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d001      	beq.n	8003f6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e046      	b.n	8003ffa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a23      	ldr	r2, [pc, #140]	; (8004008 <HAL_TIM_Base_Start+0xb4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d022      	beq.n	8003fc4 <HAL_TIM_Base_Start+0x70>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d01d      	beq.n	8003fc4 <HAL_TIM_Base_Start+0x70>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <HAL_TIM_Base_Start+0xb8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d018      	beq.n	8003fc4 <HAL_TIM_Base_Start+0x70>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <HAL_TIM_Base_Start+0xbc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <HAL_TIM_Base_Start+0x70>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <HAL_TIM_Base_Start+0xc0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_TIM_Base_Start+0x70>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_TIM_Base_Start+0xc4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_Base_Start+0x70>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_TIM_Base_Start+0xc8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIM_Base_Start+0x70>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_TIM_Base_Start+0xcc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d111      	bne.n	8003fe8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d010      	beq.n	8003ff8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe6:	e007      	b.n	8003ff8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40010000 	.word	0x40010000
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800
 8004014:	40000c00 	.word	0x40000c00
 8004018:	40010400 	.word	0x40010400
 800401c:	40014000 	.word	0x40014000
 8004020:	40001800 	.word	0x40001800

08004024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e041      	b.n	80040ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f839 	bl	80040c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	4619      	mov	r1, r3
 8004062:	4610      	mov	r0, r2
 8004064:	f000 fbc4 	bl	80047f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_TIM_PWM_Start+0x24>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	bf14      	ite	ne
 80040f4:	2301      	movne	r3, #1
 80040f6:	2300      	moveq	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e022      	b.n	8004142 <HAL_TIM_PWM_Start+0x6a>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d109      	bne.n	8004116 <HAL_TIM_PWM_Start+0x3e>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	e015      	b.n	8004142 <HAL_TIM_PWM_Start+0x6a>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d109      	bne.n	8004130 <HAL_TIM_PWM_Start+0x58>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e008      	b.n	8004142 <HAL_TIM_PWM_Start+0x6a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e07c      	b.n	8004244 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0x82>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004158:	e013      	b.n	8004182 <HAL_TIM_PWM_Start+0xaa>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Start+0x92>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004168:	e00b      	b.n	8004182 <HAL_TIM_PWM_Start+0xaa>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d104      	bne.n	800417a <HAL_TIM_PWM_Start+0xa2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004178:	e003      	b.n	8004182 <HAL_TIM_PWM_Start+0xaa>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2201      	movs	r2, #1
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fe1a 	bl	8004dc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2d      	ldr	r2, [pc, #180]	; (800424c <HAL_TIM_PWM_Start+0x174>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_TIM_PWM_Start+0xcc>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <HAL_TIM_PWM_Start+0x178>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_TIM_PWM_Start+0xd0>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_TIM_PWM_Start+0xd2>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a22      	ldr	r2, [pc, #136]	; (800424c <HAL_TIM_PWM_Start+0x174>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d022      	beq.n	800420e <HAL_TIM_PWM_Start+0x136>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d01d      	beq.n	800420e <HAL_TIM_PWM_Start+0x136>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <HAL_TIM_PWM_Start+0x17c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d018      	beq.n	800420e <HAL_TIM_PWM_Start+0x136>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <HAL_TIM_PWM_Start+0x180>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_TIM_PWM_Start+0x136>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1c      	ldr	r2, [pc, #112]	; (800425c <HAL_TIM_PWM_Start+0x184>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_TIM_PWM_Start+0x136>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a16      	ldr	r2, [pc, #88]	; (8004250 <HAL_TIM_PWM_Start+0x178>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_TIM_PWM_Start+0x136>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a18      	ldr	r2, [pc, #96]	; (8004260 <HAL_TIM_PWM_Start+0x188>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_TIM_PWM_Start+0x136>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a16      	ldr	r2, [pc, #88]	; (8004264 <HAL_TIM_PWM_Start+0x18c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d111      	bne.n	8004232 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b06      	cmp	r3, #6
 800421e:	d010      	beq.n	8004242 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004230:	e007      	b.n	8004242 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40010000 	.word	0x40010000
 8004250:	40010400 	.word	0x40010400
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40000c00 	.word	0x40000c00
 8004260:	40014000 	.word	0x40014000
 8004264:	40001800 	.word	0x40001800

08004268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d122      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b02      	cmp	r3, #2
 800428a:	d11b      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0202 	mvn.w	r2, #2
 8004294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fa81 	bl	80047b2 <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa73 	bl	800479e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fa84 	bl	80047c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d122      	bne.n	8004318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d11b      	bne.n	8004318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0204 	mvn.w	r2, #4
 80042e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa57 	bl	80047b2 <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa49 	bl	800479e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fa5a 	bl	80047c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b08      	cmp	r3, #8
 8004324:	d122      	bne.n	800436c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d11b      	bne.n	800436c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0208 	mvn.w	r2, #8
 800433c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2204      	movs	r2, #4
 8004342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa2d 	bl	80047b2 <HAL_TIM_IC_CaptureCallback>
 8004358:	e005      	b.n	8004366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa1f 	bl	800479e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fa30 	bl	80047c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b10      	cmp	r3, #16
 8004378:	d122      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b10      	cmp	r3, #16
 8004386:	d11b      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0210 	mvn.w	r2, #16
 8004390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2208      	movs	r2, #8
 8004396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fa03 	bl	80047b2 <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f9f5 	bl	800479e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa06 	bl	80047c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d10e      	bne.n	80043ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0201 	mvn.w	r2, #1
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f9cf 	bl	800478a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b80      	cmp	r3, #128	; 0x80
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b80      	cmp	r3, #128	; 0x80
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fe8e 	bl	8005134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b40      	cmp	r3, #64	; 0x40
 8004424:	d10e      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d107      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f9cb 	bl	80047da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b20      	cmp	r3, #32
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b20      	cmp	r3, #32
 800445e:	d107      	bne.n	8004470 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0220 	mvn.w	r2, #32
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fe58 	bl	8005120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004492:	2302      	movs	r3, #2
 8004494:	e0ae      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b0c      	cmp	r3, #12
 80044a2:	f200 809f 	bhi.w	80045e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044e1 	.word	0x080044e1
 80044b0:	080045e5 	.word	0x080045e5
 80044b4:	080045e5 	.word	0x080045e5
 80044b8:	080045e5 	.word	0x080045e5
 80044bc:	08004521 	.word	0x08004521
 80044c0:	080045e5 	.word	0x080045e5
 80044c4:	080045e5 	.word	0x080045e5
 80044c8:	080045e5 	.word	0x080045e5
 80044cc:	08004563 	.word	0x08004563
 80044d0:	080045e5 	.word	0x080045e5
 80044d4:	080045e5 	.word	0x080045e5
 80044d8:	080045e5 	.word	0x080045e5
 80044dc:	080045a3 	.word	0x080045a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa22 	bl	8004930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0208 	orr.w	r2, r2, #8
 80044fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0204 	bic.w	r2, r2, #4
 800450a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	619a      	str	r2, [r3, #24]
      break;
 800451e:	e064      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fa72 	bl	8004a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6999      	ldr	r1, [r3, #24]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	021a      	lsls	r2, r3, #8
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	619a      	str	r2, [r3, #24]
      break;
 8004560:	e043      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fac7 	bl	8004afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0208 	orr.w	r2, r2, #8
 800457c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0204 	bic.w	r2, r2, #4
 800458c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69d9      	ldr	r1, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	61da      	str	r2, [r3, #28]
      break;
 80045a0:	e023      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fb1b 	bl	8004be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69d9      	ldr	r1, [r3, #28]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	021a      	lsls	r2, r3, #8
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	61da      	str	r2, [r3, #28]
      break;
 80045e2:	e002      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	75fb      	strb	r3, [r7, #23]
      break;
 80045e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIM_ConfigClockSource+0x1c>
 8004614:	2302      	movs	r3, #2
 8004616:	e0b4      	b.n	8004782 <HAL_TIM_ConfigClockSource+0x186>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004650:	d03e      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	f200 8087 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465e:	f000 8086 	beq.w	800476e <HAL_TIM_ConfigClockSource+0x172>
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004666:	d87f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b70      	cmp	r3, #112	; 0x70
 800466a:	d01a      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0xa6>
 800466c:	2b70      	cmp	r3, #112	; 0x70
 800466e:	d87b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b60      	cmp	r3, #96	; 0x60
 8004672:	d050      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x11a>
 8004674:	2b60      	cmp	r3, #96	; 0x60
 8004676:	d877      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d03c      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0xfa>
 800467c:	2b50      	cmp	r3, #80	; 0x50
 800467e:	d873      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d058      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x13a>
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d86f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d064      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d86b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d060      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d867      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05c      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d05a      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	e062      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6899      	ldr	r1, [r3, #8]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f000 fb67 	bl	8004d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	609a      	str	r2, [r3, #8]
      break;
 80046ce:	e04f      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6899      	ldr	r1, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f000 fb50 	bl	8004d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f2:	609a      	str	r2, [r3, #8]
      break;
 80046f4:	e03c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 fac4 	bl	8004c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2150      	movs	r1, #80	; 0x50
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fb1d 	bl	8004d4e <TIM_ITRx_SetConfig>
      break;
 8004714:	e02c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 fae3 	bl	8004cee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2160      	movs	r1, #96	; 0x60
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fb0d 	bl	8004d4e <TIM_ITRx_SetConfig>
      break;
 8004734:	e01c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 faa4 	bl	8004c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fafd 	bl	8004d4e <TIM_ITRx_SetConfig>
      break;
 8004754:	e00c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f000 faf4 	bl	8004d4e <TIM_ITRx_SetConfig>
      break;
 8004766:	e003      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	e000      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800476e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a40      	ldr	r2, [pc, #256]	; (8004904 <TIM_Base_SetConfig+0x114>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d013      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480e:	d00f      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3d      	ldr	r2, [pc, #244]	; (8004908 <TIM_Base_SetConfig+0x118>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00b      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3c      	ldr	r2, [pc, #240]	; (800490c <TIM_Base_SetConfig+0x11c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d007      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3b      	ldr	r2, [pc, #236]	; (8004910 <TIM_Base_SetConfig+0x120>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3a      	ldr	r2, [pc, #232]	; (8004914 <TIM_Base_SetConfig+0x124>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d108      	bne.n	8004842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a2f      	ldr	r2, [pc, #188]	; (8004904 <TIM_Base_SetConfig+0x114>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d02b      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004850:	d027      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2c      	ldr	r2, [pc, #176]	; (8004908 <TIM_Base_SetConfig+0x118>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d023      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2b      	ldr	r2, [pc, #172]	; (800490c <TIM_Base_SetConfig+0x11c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01f      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2a      	ldr	r2, [pc, #168]	; (8004910 <TIM_Base_SetConfig+0x120>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01b      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a29      	ldr	r2, [pc, #164]	; (8004914 <TIM_Base_SetConfig+0x124>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d017      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a28      	ldr	r2, [pc, #160]	; (8004918 <TIM_Base_SetConfig+0x128>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a27      	ldr	r2, [pc, #156]	; (800491c <TIM_Base_SetConfig+0x12c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00f      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a26      	ldr	r2, [pc, #152]	; (8004920 <TIM_Base_SetConfig+0x130>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00b      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a25      	ldr	r2, [pc, #148]	; (8004924 <TIM_Base_SetConfig+0x134>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a24      	ldr	r2, [pc, #144]	; (8004928 <TIM_Base_SetConfig+0x138>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a23      	ldr	r2, [pc, #140]	; (800492c <TIM_Base_SetConfig+0x13c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0a      	ldr	r2, [pc, #40]	; (8004904 <TIM_Base_SetConfig+0x114>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_Base_SetConfig+0xf8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a0c      	ldr	r2, [pc, #48]	; (8004914 <TIM_Base_SetConfig+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d103      	bne.n	80048f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	615a      	str	r2, [r3, #20]
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40010000 	.word	0x40010000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40010400 	.word	0x40010400
 8004918:	40014000 	.word	0x40014000
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800
 8004924:	40001800 	.word	0x40001800
 8004928:	40001c00 	.word	0x40001c00
 800492c:	40002000 	.word	0x40002000

08004930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0303 	bic.w	r3, r3, #3
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 0302 	bic.w	r3, r3, #2
 8004978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <TIM_OC1_SetConfig+0xd8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_OC1_SetConfig+0x64>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a1f      	ldr	r2, [pc, #124]	; (8004a0c <TIM_OC1_SetConfig+0xdc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d10c      	bne.n	80049ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0308 	bic.w	r3, r3, #8
 800499a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <TIM_OC1_SetConfig+0xd8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC1_SetConfig+0x8e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <TIM_OC1_SetConfig+0xdc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d111      	bne.n	80049e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	621a      	str	r2, [r3, #32]
}
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40010400 	.word	0x40010400

08004a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0210 	bic.w	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0320 	bic.w	r3, r3, #32
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a22      	ldr	r2, [pc, #136]	; (8004af4 <TIM_OC2_SetConfig+0xe4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC2_SetConfig+0x68>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <TIM_OC2_SetConfig+0xe8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10d      	bne.n	8004a94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <TIM_OC2_SetConfig+0xe4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_OC2_SetConfig+0x94>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <TIM_OC2_SetConfig+0xe8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d113      	bne.n	8004acc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40010400 	.word	0x40010400

08004afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <TIM_OC3_SetConfig+0xe0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_OC3_SetConfig+0x66>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <TIM_OC3_SetConfig+0xe4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10d      	bne.n	8004b7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <TIM_OC3_SetConfig+0xe0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d003      	beq.n	8004b8e <TIM_OC3_SetConfig+0x92>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a15      	ldr	r2, [pc, #84]	; (8004be0 <TIM_OC3_SetConfig+0xe4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d113      	bne.n	8004bb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	621a      	str	r2, [r3, #32]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40010400 	.word	0x40010400

08004be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	031b      	lsls	r3, r3, #12
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <TIM_OC4_SetConfig+0xa4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_OC4_SetConfig+0x68>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <TIM_OC4_SetConfig+0xa8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d109      	bne.n	8004c60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	019b      	lsls	r3, r3, #6
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010400 	.word	0x40010400

08004c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 030a 	bic.w	r3, r3, #10
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b087      	sub	sp, #28
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f023 0210 	bic.w	r2, r3, #16
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	031b      	lsls	r3, r3, #12
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f043 0307 	orr.w	r3, r3, #7
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	609a      	str	r2, [r3, #8]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	021a      	lsls	r2, r3, #8
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	609a      	str	r2, [r3, #8]
}
 8004db8:	bf00      	nop
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	43db      	mvns	r3, r3
 8004de6:	401a      	ands	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d109      	bne.n	8004e34 <HAL_TIMEx_PWMN_Start+0x24>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	bf14      	ite	ne
 8004e2c:	2301      	movne	r3, #1
 8004e2e:	2300      	moveq	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e022      	b.n	8004e7a <HAL_TIMEx_PWMN_Start+0x6a>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d109      	bne.n	8004e4e <HAL_TIMEx_PWMN_Start+0x3e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	bf14      	ite	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	2300      	moveq	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	e015      	b.n	8004e7a <HAL_TIMEx_PWMN_Start+0x6a>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d109      	bne.n	8004e68 <HAL_TIMEx_PWMN_Start+0x58>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e008      	b.n	8004e7a <HAL_TIMEx_PWMN_Start+0x6a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e06d      	b.n	8004f5e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d104      	bne.n	8004e92 <HAL_TIMEx_PWMN_Start+0x82>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	e013      	b.n	8004eba <HAL_TIMEx_PWMN_Start+0xaa>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIMEx_PWMN_Start+0x92>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea0:	e00b      	b.n	8004eba <HAL_TIMEx_PWMN_Start+0xaa>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIMEx_PWMN_Start+0xa2>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb0:	e003      	b.n	8004eba <HAL_TIMEx_PWMN_Start+0xaa>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f940 	bl	8005148 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a22      	ldr	r2, [pc, #136]	; (8004f68 <HAL_TIMEx_PWMN_Start+0x158>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d022      	beq.n	8004f28 <HAL_TIMEx_PWMN_Start+0x118>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eea:	d01d      	beq.n	8004f28 <HAL_TIMEx_PWMN_Start+0x118>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1e      	ldr	r2, [pc, #120]	; (8004f6c <HAL_TIMEx_PWMN_Start+0x15c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d018      	beq.n	8004f28 <HAL_TIMEx_PWMN_Start+0x118>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1d      	ldr	r2, [pc, #116]	; (8004f70 <HAL_TIMEx_PWMN_Start+0x160>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <HAL_TIMEx_PWMN_Start+0x118>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <HAL_TIMEx_PWMN_Start+0x164>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00e      	beq.n	8004f28 <HAL_TIMEx_PWMN_Start+0x118>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_TIMEx_PWMN_Start+0x168>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d009      	beq.n	8004f28 <HAL_TIMEx_PWMN_Start+0x118>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <HAL_TIMEx_PWMN_Start+0x16c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <HAL_TIMEx_PWMN_Start+0x118>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a17      	ldr	r2, [pc, #92]	; (8004f80 <HAL_TIMEx_PWMN_Start+0x170>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d111      	bne.n	8004f4c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b06      	cmp	r3, #6
 8004f38:	d010      	beq.n	8004f5c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4a:	e007      	b.n	8004f5c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40010000 	.word	0x40010000
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40000c00 	.word	0x40000c00
 8004f78:	40010400 	.word	0x40010400
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40001800 	.word	0x40001800

08004f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e05a      	b.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a21      	ldr	r2, [pc, #132]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d022      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe8:	d01d      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d018      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1a      	ldr	r2, [pc, #104]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00e      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a18      	ldr	r2, [pc, #96]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d009      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a17      	ldr	r2, [pc, #92]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a15      	ldr	r2, [pc, #84]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10c      	bne.n	8005040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	4313      	orrs	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40010400 	.word	0x40010400
 8005074:	40014000 	.word	0x40014000
 8005078:	40001800 	.word	0x40001800

0800507c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005094:	2302      	movs	r3, #2
 8005096:	e03d      	b.n	8005114 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	2204      	movs	r2, #4
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a1a      	ldr	r2, [r3, #32]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	43db      	mvns	r3, r3
 800516a:	401a      	ands	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1a      	ldr	r2, [r3, #32]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	431a      	orrs	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005192:	b084      	sub	sp, #16
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	f107 001c 	add.w	r0, r7, #28
 80051a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d122      	bne.n	80051f0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d105      	bne.n	80051e4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f001 fbed 	bl	80069c4 <USB_CoreReset>
 80051ea:	4603      	mov	r3, r0
 80051ec:	73fb      	strb	r3, [r7, #15]
 80051ee:	e01a      	b.n	8005226 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f001 fbe1 	bl	80069c4 <USB_CoreReset>
 8005202:	4603      	mov	r3, r0
 8005204:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	639a      	str	r2, [r3, #56]	; 0x38
 8005218:	e005      	b.n	8005226 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	2b01      	cmp	r3, #1
 800522a:	d10b      	bne.n	8005244 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f043 0206 	orr.w	r2, r3, #6
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005250:	b004      	add	sp, #16
 8005252:	4770      	bx	lr

08005254 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d165      	bne.n	8005334 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4a41      	ldr	r2, [pc, #260]	; (8005370 <USB_SetTurnaroundTime+0x11c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d906      	bls.n	800527e <USB_SetTurnaroundTime+0x2a>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4a40      	ldr	r2, [pc, #256]	; (8005374 <USB_SetTurnaroundTime+0x120>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d202      	bcs.n	800527e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005278:	230f      	movs	r3, #15
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	e062      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4a3c      	ldr	r2, [pc, #240]	; (8005374 <USB_SetTurnaroundTime+0x120>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d306      	bcc.n	8005294 <USB_SetTurnaroundTime+0x40>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4a3b      	ldr	r2, [pc, #236]	; (8005378 <USB_SetTurnaroundTime+0x124>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d202      	bcs.n	8005294 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800528e:	230e      	movs	r3, #14
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e057      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4a38      	ldr	r2, [pc, #224]	; (8005378 <USB_SetTurnaroundTime+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d306      	bcc.n	80052aa <USB_SetTurnaroundTime+0x56>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4a37      	ldr	r2, [pc, #220]	; (800537c <USB_SetTurnaroundTime+0x128>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d202      	bcs.n	80052aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052a4:	230d      	movs	r3, #13
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e04c      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4a33      	ldr	r2, [pc, #204]	; (800537c <USB_SetTurnaroundTime+0x128>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d306      	bcc.n	80052c0 <USB_SetTurnaroundTime+0x6c>
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4a32      	ldr	r2, [pc, #200]	; (8005380 <USB_SetTurnaroundTime+0x12c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d802      	bhi.n	80052c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052ba:	230c      	movs	r3, #12
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e041      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4a2f      	ldr	r2, [pc, #188]	; (8005380 <USB_SetTurnaroundTime+0x12c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d906      	bls.n	80052d6 <USB_SetTurnaroundTime+0x82>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4a2e      	ldr	r2, [pc, #184]	; (8005384 <USB_SetTurnaroundTime+0x130>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d802      	bhi.n	80052d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052d0:	230b      	movs	r3, #11
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	e036      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4a2a      	ldr	r2, [pc, #168]	; (8005384 <USB_SetTurnaroundTime+0x130>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d906      	bls.n	80052ec <USB_SetTurnaroundTime+0x98>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4a29      	ldr	r2, [pc, #164]	; (8005388 <USB_SetTurnaroundTime+0x134>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d802      	bhi.n	80052ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052e6:	230a      	movs	r3, #10
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	e02b      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4a26      	ldr	r2, [pc, #152]	; (8005388 <USB_SetTurnaroundTime+0x134>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d906      	bls.n	8005302 <USB_SetTurnaroundTime+0xae>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4a25      	ldr	r2, [pc, #148]	; (800538c <USB_SetTurnaroundTime+0x138>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d202      	bcs.n	8005302 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052fc:	2309      	movs	r3, #9
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e020      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a21      	ldr	r2, [pc, #132]	; (800538c <USB_SetTurnaroundTime+0x138>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d306      	bcc.n	8005318 <USB_SetTurnaroundTime+0xc4>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a20      	ldr	r2, [pc, #128]	; (8005390 <USB_SetTurnaroundTime+0x13c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d802      	bhi.n	8005318 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005312:	2308      	movs	r3, #8
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e015      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a1d      	ldr	r2, [pc, #116]	; (8005390 <USB_SetTurnaroundTime+0x13c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d906      	bls.n	800532e <USB_SetTurnaroundTime+0xda>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a1c      	ldr	r2, [pc, #112]	; (8005394 <USB_SetTurnaroundTime+0x140>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d202      	bcs.n	800532e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005328:	2307      	movs	r3, #7
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e00a      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800532e:	2306      	movs	r3, #6
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e007      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800533a:	2309      	movs	r3, #9
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e001      	b.n	8005344 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005340:	2309      	movs	r3, #9
 8005342:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	029b      	lsls	r3, r3, #10
 8005358:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	00d8acbf 	.word	0x00d8acbf
 8005374:	00e4e1c0 	.word	0x00e4e1c0
 8005378:	00f42400 	.word	0x00f42400
 800537c:	01067380 	.word	0x01067380
 8005380:	011a499f 	.word	0x011a499f
 8005384:	01312cff 	.word	0x01312cff
 8005388:	014ca43f 	.word	0x014ca43f
 800538c:	016e3600 	.word	0x016e3600
 8005390:	01a6ab1f 	.word	0x01a6ab1f
 8005394:	01e84800 	.word	0x01e84800

08005398 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f043 0201 	orr.w	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f023 0201 	bic.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d115      	bne.n	800542a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800540a:	2001      	movs	r0, #1
 800540c:	f7fb ffa0 	bl	8001350 <HAL_Delay>
      ms++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 fa45 	bl	80068a6 <USB_GetMode>
 800541c:	4603      	mov	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d01e      	beq.n	8005460 <USB_SetCurrentMode+0x84>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b31      	cmp	r3, #49	; 0x31
 8005426:	d9f0      	bls.n	800540a <USB_SetCurrentMode+0x2e>
 8005428:	e01a      	b.n	8005460 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d115      	bne.n	800545c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800543c:	2001      	movs	r0, #1
 800543e:	f7fb ff87 	bl	8001350 <HAL_Delay>
      ms++;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3301      	adds	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f001 fa2c 	bl	80068a6 <USB_GetMode>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <USB_SetCurrentMode+0x84>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b31      	cmp	r3, #49	; 0x31
 8005458:	d9f0      	bls.n	800543c <USB_SetCurrentMode+0x60>
 800545a:	e001      	b.n	8005460 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e005      	b.n	800546c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b32      	cmp	r3, #50	; 0x32
 8005464:	d101      	bne.n	800546a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005474:	b084      	sub	sp, #16
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	e009      	b.n	80054a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3340      	adds	r3, #64	; 0x40
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	3301      	adds	r3, #1
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b0e      	cmp	r3, #14
 80054ac:	d9f2      	bls.n	8005494 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11c      	bne.n	80054ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
 80054ec:	e00b      	b.n	8005506 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800550c:	461a      	mov	r2, r3
 800550e:	2300      	movs	r3, #0
 8005510:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	4619      	mov	r1, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	461a      	mov	r2, r3
 8005522:	680b      	ldr	r3, [r1, #0]
 8005524:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	2b01      	cmp	r3, #1
 800552a:	d10c      	bne.n	8005546 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d104      	bne.n	800553c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005532:	2100      	movs	r1, #0
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f965 	bl	8005804 <USB_SetDevSpeed>
 800553a:	e008      	b.n	800554e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800553c:	2101      	movs	r1, #1
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f960 	bl	8005804 <USB_SetDevSpeed>
 8005544:	e003      	b.n	800554e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005546:	2103      	movs	r1, #3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f95b 	bl	8005804 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800554e:	2110      	movs	r1, #16
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f8f3 	bl	800573c <USB_FlushTxFifo>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f91f 	bl	80057a4 <USB_FlushRxFifo>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	461a      	mov	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	461a      	mov	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	e043      	b.n	8005622 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b0:	d118      	bne.n	80055e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	461a      	mov	r2, r3
 80055c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	e013      	b.n	80055f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055da:	461a      	mov	r2, r3
 80055dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	e008      	b.n	80055f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	461a      	mov	r2, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005602:	461a      	mov	r2, r3
 8005604:	2300      	movs	r3, #0
 8005606:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	461a      	mov	r2, r3
 8005616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800561a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	3301      	adds	r3, #1
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d3b7      	bcc.n	800559a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	e043      	b.n	80056b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005646:	d118      	bne.n	800567a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e013      	b.n	800568c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	e008      	b.n	800568c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	461a      	mov	r2, r3
 8005688:	2300      	movs	r3, #0
 800568a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	461a      	mov	r2, r3
 800569a:	2300      	movs	r3, #0
 800569c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	461a      	mov	r2, r3
 80056ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	3301      	adds	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d3b7      	bcc.n	8005630 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d105      	bne.n	80056f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f043 0210 	orr.w	r2, r3, #16
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699a      	ldr	r2, [r3, #24]
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <USB_DevInit+0x2c4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f043 0208 	orr.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005720:	f043 0304 	orr.w	r3, r3, #4
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005728:	7dfb      	ldrb	r3, [r7, #23]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005734:	b004      	add	sp, #16
 8005736:	4770      	bx	lr
 8005738:	803c3800 	.word	0x803c3800

0800573c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <USB_FlushTxFifo+0x64>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e01b      	b.n	8005794 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	daf2      	bge.n	800574a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	019b      	lsls	r3, r3, #6
 800576c:	f043 0220 	orr.w	r2, r3, #32
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a08      	ldr	r2, [pc, #32]	; (80057a0 <USB_FlushTxFifo+0x64>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e006      	b.n	8005794 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b20      	cmp	r3, #32
 8005790:	d0f0      	beq.n	8005774 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	00030d40 	.word	0x00030d40

080057a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3301      	adds	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4a11      	ldr	r2, [pc, #68]	; (8005800 <USB_FlushRxFifo+0x5c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d901      	bls.n	80057c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e018      	b.n	80057f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	daf2      	bge.n	80057b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2210      	movs	r2, #16
 80057d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a08      	ldr	r2, [pc, #32]	; (8005800 <USB_FlushRxFifo+0x5c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d901      	bls.n	80057e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e006      	b.n	80057f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b10      	cmp	r3, #16
 80057f0:	d0f0      	beq.n	80057d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	00030d40 	.word	0x00030d40

08005804 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	68f9      	ldr	r1, [r7, #12]
 8005820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005824:	4313      	orrs	r3, r2
 8005826:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005836:	b480      	push	{r7}
 8005838:	b087      	sub	sp, #28
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0306 	and.w	r3, r3, #6
 800584e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
 800585a:	e00a      	b.n	8005872 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d002      	beq.n	8005868 <USB_GetDevSpeed+0x32>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b06      	cmp	r3, #6
 8005866:	d102      	bne.n	800586e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005868:	2302      	movs	r3, #2
 800586a:	75fb      	strb	r3, [r7, #23]
 800586c:	e001      	b.n	8005872 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800586e:	230f      	movs	r3, #15
 8005870:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005872:	7dfb      	ldrb	r3, [r7, #23]
}
 8005874:	4618      	mov	r0, r3
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d13a      	bne.n	8005912 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	2101      	movs	r1, #1
 80058ae:	fa01 f303 	lsl.w	r3, r1, r3
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d155      	bne.n	8005980 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	791b      	ldrb	r3, [r3, #4]
 80058ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	059b      	lsls	r3, r3, #22
 80058f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058f8:	4313      	orrs	r3, r2
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	0151      	lsls	r1, r2, #5
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	440a      	add	r2, r1
 8005902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	e036      	b.n	8005980 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	69da      	ldr	r2, [r3, #28]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	2101      	movs	r1, #1
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005930:	4313      	orrs	r3, r2
 8005932:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11a      	bne.n	8005980 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	791b      	ldrb	r3, [r3, #4]
 8005964:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005966:	430b      	orrs	r3, r1
 8005968:	4313      	orrs	r3, r2
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d161      	bne.n	8005a70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c2:	d11f      	bne.n	8005a04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	2101      	movs	r1, #1
 8005a16:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a24:	4013      	ands	r3, r2
 8005a26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	2101      	movs	r1, #1
 8005a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	68f9      	ldr	r1, [r7, #12]
 8005a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a48:	4013      	ands	r3, r2
 8005a4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	0159      	lsls	r1, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	440b      	add	r3, r1
 8005a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a66:	4619      	mov	r1, r3
 8005a68:	4b35      	ldr	r3, [pc, #212]	; (8005b40 <USB_DeactivateEndpoint+0x1b0>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
 8005a6e:	e060      	b.n	8005b32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a86:	d11f      	bne.n	8005ac8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005aa6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	2101      	movs	r1, #1
 8005ada:	fa01 f303 	lsl.w	r3, r1, r3
 8005ade:	041b      	lsls	r3, r3, #16
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ae8:	4013      	ands	r3, r2
 8005aea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	2101      	movs	r1, #1
 8005afe:	fa01 f303 	lsl.w	r3, r1, r3
 8005b02:	041b      	lsls	r3, r3, #16
 8005b04:	43db      	mvns	r3, r3
 8005b06:	68f9      	ldr	r1, [r7, #12]
 8005b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	0159      	lsls	r1, r3, #5
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	440b      	add	r3, r1
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <USB_DeactivateEndpoint+0x1b4>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	ec337800 	.word	0xec337800
 8005b44:	eff37800 	.word	0xeff37800

08005b48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	f040 815c 	bne.w	8005e22 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d132      	bne.n	8005bd8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd0:	0cdb      	lsrs	r3, r3, #19
 8005bd2:	04db      	lsls	r3, r3, #19
 8005bd4:	6113      	str	r3, [r2, #16]
 8005bd6:	e074      	b.n	8005cc2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	0cdb      	lsrs	r3, r3, #19
 8005bf4:	04db      	lsls	r3, r3, #19
 8005bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6999      	ldr	r1, [r3, #24]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	440b      	add	r3, r1
 8005c34:	1e59      	subs	r1, r3, #1
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c3e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c40:	4b9d      	ldr	r3, [pc, #628]	; (8005eb8 <USB_EPStartXfer+0x370>)
 8005c42:	400b      	ands	r3, r1
 8005c44:	69b9      	ldr	r1, [r7, #24]
 8005c46:	0148      	lsls	r0, r1, #5
 8005c48:	69f9      	ldr	r1, [r7, #28]
 8005c4a:	4401      	add	r1, r0
 8005c4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c50:	4313      	orrs	r3, r2
 8005c52:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c6a:	69b9      	ldr	r1, [r7, #24]
 8005c6c:	0148      	lsls	r0, r1, #5
 8005c6e:	69f9      	ldr	r1, [r7, #28]
 8005c70:	4401      	add	r1, r0
 8005c72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c76:	4313      	orrs	r3, r2
 8005c78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	791b      	ldrb	r3, [r3, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d11f      	bne.n	8005cc2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ca0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cc0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d14b      	bne.n	8005d60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	791b      	ldrb	r3, [r3, #4]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d128      	bne.n	8005d3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d110      	bne.n	8005d1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	e00f      	b.n	8005d3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	69fa      	ldr	r2, [r7, #28]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	0151      	lsls	r1, r2, #5
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	440a      	add	r2, r1
 8005d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e133      	b.n	8005fc8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	791b      	ldrb	r3, [r3, #4]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d015      	beq.n	8005db4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 811b 	beq.w	8005fc8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	2101      	movs	r1, #1
 8005da4:	fa01 f303 	lsl.w	r3, r1, r3
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dae:	4313      	orrs	r3, r2
 8005db0:	634b      	str	r3, [r1, #52]	; 0x34
 8005db2:	e109      	b.n	8005fc8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d110      	bne.n	8005de6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	0151      	lsls	r1, r2, #5
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	440a      	add	r2, r1
 8005dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	e00f      	b.n	8005e06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6919      	ldr	r1, [r3, #16]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	781a      	ldrb	r2, [r3, #0]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	b298      	uxth	r0, r3
 8005e14:	79fb      	ldrb	r3, [r7, #7]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	4603      	mov	r3, r0
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fade 	bl	80063dc <USB_WritePacket>
 8005e20:	e0d2      	b.n	8005fc8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3c:	0cdb      	lsrs	r3, r3, #19
 8005e3e:	04db      	lsls	r3, r3, #19
 8005e40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d126      	bne.n	8005ebc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e84:	69b9      	ldr	r1, [r7, #24]
 8005e86:	0148      	lsls	r0, r1, #5
 8005e88:	69f9      	ldr	r1, [r7, #28]
 8005e8a:	4401      	add	r1, r0
 8005e8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e90:	4313      	orrs	r3, r2
 8005e92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eb2:	6113      	str	r3, [r2, #16]
 8005eb4:	e03a      	b.n	8005f2c <USB_EPStartXfer+0x3e4>
 8005eb6:	bf00      	nop
 8005eb8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	1e5a      	subs	r2, r3, #1
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	8afa      	ldrh	r2, [r7, #22]
 8005ed8:	fb03 f202 	mul.w	r2, r3, r2
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	8afb      	ldrh	r3, [r7, #22]
 8005ef0:	04d9      	lsls	r1, r3, #19
 8005ef2:	4b38      	ldr	r3, [pc, #224]	; (8005fd4 <USB_EPStartXfer+0x48c>)
 8005ef4:	400b      	ands	r3, r1
 8005ef6:	69b9      	ldr	r1, [r7, #24]
 8005ef8:	0148      	lsls	r0, r1, #5
 8005efa:	69f9      	ldr	r1, [r7, #28]
 8005efc:	4401      	add	r1, r0
 8005efe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f02:	4313      	orrs	r3, r2
 8005f04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f1c:	69b9      	ldr	r1, [r7, #24]
 8005f1e:	0148      	lsls	r0, r1, #5
 8005f20:	69f9      	ldr	r1, [r7, #28]
 8005f22:	4401      	add	r1, r0
 8005f24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d10d      	bne.n	8005f4e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d009      	beq.n	8005f4e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	6919      	ldr	r1, [r3, #16]
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	460a      	mov	r2, r1
 8005f4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	791b      	ldrb	r3, [r3, #4]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d128      	bne.n	8005fa8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d110      	bne.n	8005f88 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	e00f      	b.n	8005fa8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	1ff80000 	.word	0x1ff80000

08005fd8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	f040 80ce 	bne.w	8006196 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d132      	bne.n	8006068 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006020:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006024:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	440a      	add	r2, r1
 800603c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006040:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006044:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	440a      	add	r2, r1
 800605c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006060:	0cdb      	lsrs	r3, r3, #19
 8006062:	04db      	lsls	r3, r3, #19
 8006064:	6113      	str	r3, [r2, #16]
 8006066:	e04e      	b.n	8006106 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006082:	0cdb      	lsrs	r3, r3, #19
 8006084:	04db      	lsls	r3, r3, #19
 8006086:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	440a      	add	r2, r1
 800609e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d903      	bls.n	80060c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f6:	6939      	ldr	r1, [r7, #16]
 80060f8:	0148      	lsls	r0, r1, #5
 80060fa:	6979      	ldr	r1, [r7, #20]
 80060fc:	4401      	add	r1, r0
 80060fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006102:	4313      	orrs	r3, r2
 8006104:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d11e      	bne.n	800614a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d009      	beq.n	8006128 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	461a      	mov	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e097      	b.n	800627a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006168:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8083 	beq.w	800627a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	2101      	movs	r1, #1
 8006186:	fa01 f303 	lsl.w	r3, r1, r3
 800618a:	6979      	ldr	r1, [r7, #20]
 800618c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006190:	4313      	orrs	r3, r2
 8006192:	634b      	str	r3, [r1, #52]	; 0x34
 8006194:	e071      	b.n	800627a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b0:	0cdb      	lsrs	r3, r3, #19
 80061b2:	04db      	lsls	r3, r3, #19
 80061b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006228:	6939      	ldr	r1, [r7, #16]
 800622a:	0148      	lsls	r0, r1, #5
 800622c:	6979      	ldr	r1, [r7, #20]
 800622e:	4401      	add	r1, r0
 8006230:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006234:	4313      	orrs	r3, r2
 8006236:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d10d      	bne.n	800625a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6919      	ldr	r1, [r3, #16]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	460a      	mov	r2, r1
 8006258:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006274:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d14a      	bne.n	800633c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062be:	f040 8086 	bne.w	80063ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	7812      	ldrb	r2, [r2, #0]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006308:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f242 7210 	movw	r2, #10000	; 0x2710
 8006316:	4293      	cmp	r3, r2
 8006318:	d902      	bls.n	8006320 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]
          break;
 800631e:	e056      	b.n	80063ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006338:	d0e7      	beq.n	800630a <USB_EPStopXfer+0x82>
 800633a:	e048      	b.n	80063ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006354:	d13b      	bne.n	80063ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	7812      	ldrb	r2, [r2, #0]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006374:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006378:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	7812      	ldrb	r2, [r2, #0]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800639c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d902      	bls.n	80063b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75fb      	strb	r3, [r7, #23]
          break;
 80063b2:	e00c      	b.n	80063ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063cc:	d0e7      	beq.n	800639e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063dc:	b480      	push	{r7}
 80063de:	b089      	sub	sp, #36	; 0x24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4611      	mov	r1, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	460b      	mov	r3, r1
 80063ec:	71fb      	strb	r3, [r7, #7]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d123      	bne.n	800644a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006402:	88bb      	ldrh	r3, [r7, #4]
 8006404:	3303      	adds	r3, #3
 8006406:	089b      	lsrs	r3, r3, #2
 8006408:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800640a:	2300      	movs	r3, #0
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e018      	b.n	8006442 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	031a      	lsls	r2, r3, #12
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	4413      	add	r3, r2
 8006418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800641c:	461a      	mov	r2, r3
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	3301      	adds	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	3301      	adds	r3, #1
 800642e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	3301      	adds	r3, #1
 8006434:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	3301      	adds	r3, #1
 800643a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	3301      	adds	r3, #1
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	429a      	cmp	r2, r3
 8006448:	d3e2      	bcc.n	8006410 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3724      	adds	r7, #36	; 0x24
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006458:	b480      	push	{r7}
 800645a:	b08b      	sub	sp, #44	; 0x2c
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	089b      	lsrs	r3, r3, #2
 8006472:	b29b      	uxth	r3, r3
 8006474:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800647e:	2300      	movs	r3, #0
 8006480:	623b      	str	r3, [r7, #32]
 8006482:	e014      	b.n	80064ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	3301      	adds	r3, #1
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	3301      	adds	r3, #1
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	3301      	adds	r3, #1
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	3301      	adds	r3, #1
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	3301      	adds	r3, #1
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d3e6      	bcc.n	8006484 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064b6:	8bfb      	ldrh	r3, [r7, #30]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01e      	beq.n	80064fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064c6:	461a      	mov	r2, r3
 80064c8:	f107 0310 	add.w	r3, r7, #16
 80064cc:	6812      	ldr	r2, [r2, #0]
 80064ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	fa22 f303 	lsr.w	r3, r2, r3
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	701a      	strb	r2, [r3, #0]
      i++;
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	3301      	adds	r3, #1
 80064e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	3301      	adds	r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064ee:	8bfb      	ldrh	r3, [r7, #30]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064f4:	8bfb      	ldrh	r3, [r7, #30]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1ea      	bne.n	80064d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	372c      	adds	r7, #44	; 0x2c
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d12c      	bne.n	800657e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	db12      	blt.n	800655c <USB_EPSetStall+0x54>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00f      	beq.n	800655c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800655a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e02b      	b.n	80065d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	db12      	blt.n	80065b6 <USB_EPSetStall+0xae>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00f      	beq.n	80065b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	0151      	lsls	r1, r2, #5
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	440a      	add	r2, r1
 80065cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d128      	bne.n	8006652 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800661e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	791b      	ldrb	r3, [r3, #4]
 8006624:	2b03      	cmp	r3, #3
 8006626:	d003      	beq.n	8006630 <USB_EPClearStall+0x4c>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	791b      	ldrb	r3, [r3, #4]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d138      	bne.n	80066a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	e027      	b.n	80066a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	440a      	add	r2, r1
 8006668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800666c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006670:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	791b      	ldrb	r3, [r3, #4]
 8006676:	2b03      	cmp	r3, #3
 8006678:	d003      	beq.n	8006682 <USB_EPClearStall+0x9e>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	791b      	ldrb	r3, [r3, #4]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d10f      	bne.n	80066a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066e4:	68f9      	ldr	r1, [r7, #12]
 80066e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800672a:	f023 0302 	bic.w	r3, r3, #2
 800672e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006758:	f023 0303 	bic.w	r3, r3, #3
 800675c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4013      	ands	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	4013      	ands	r3, r2
 80067c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	0c1b      	lsrs	r3, r3, #16
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067da:	b480      	push	{r7}
 80067dc:	b085      	sub	sp, #20
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	4013      	ands	r3, r2
 80067fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	b29b      	uxth	r3, r3
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	4013      	ands	r3, r2
 800683a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800683c:	68bb      	ldr	r3, [r7, #8]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800684a:	b480      	push	{r7}
 800684c:	b087      	sub	sp, #28
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	01db      	lsls	r3, r3, #7
 800687c:	b2db      	uxtb	r3, r3
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4013      	ands	r3, r2
 8006896:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006898:	68bb      	ldr	r3, [r7, #8]
}
 800689a:	4618      	mov	r0, r3
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f003 0301 	and.w	r3, r3, #1
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068e0:	f023 0307 	bic.w	r3, r3, #7
 80068e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	460b      	mov	r3, r1
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	333c      	adds	r3, #60	; 0x3c
 800691e:	3304      	adds	r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <USB_EP0_OutStart+0xb8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d90a      	bls.n	8006942 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800693c:	d101      	bne.n	8006942 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e037      	b.n	80069b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006948:	461a      	mov	r2, r3
 800694a:	2300      	movs	r3, #0
 800694c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006960:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006970:	f043 0318 	orr.w	r3, r3, #24
 8006974:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006984:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006988:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10f      	bne.n	80069b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	371c      	adds	r7, #28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	4f54300a 	.word	0x4f54300a

080069c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3301      	adds	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <USB_CoreReset+0x64>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e01b      	b.n	8006a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	daf2      	bge.n	80069d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f043 0201 	orr.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4a09      	ldr	r2, [pc, #36]	; (8006a28 <USB_CoreReset+0x64>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d901      	bls.n	8006a0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e006      	b.n	8006a1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d0f0      	beq.n	80069fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	00030d40 	.word	0x00030d40

08006a2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a3c:	f002 fc9e 	bl	800937c <USBD_static_malloc>
 8006a40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	32b0      	adds	r2, #176	; 0xb0
 8006a52:	2100      	movs	r1, #0
 8006a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e0d4      	b.n	8006c06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a5c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a60:	2100      	movs	r1, #0
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f002 fd00 	bl	8009468 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	32b0      	adds	r2, #176	; 0xb0
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	32b0      	adds	r2, #176	; 0xb0
 8006a82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	7c1b      	ldrb	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d138      	bne.n	8006b06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a94:	4b5e      	ldr	r3, [pc, #376]	; (8006c10 <USBD_CDC_Init+0x1e4>)
 8006a96:	7819      	ldrb	r1, [r3, #0]
 8006a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f002 fb49 	bl	8009136 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006aa4:	4b5a      	ldr	r3, [pc, #360]	; (8006c10 <USBD_CDC_Init+0x1e4>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 020f 	and.w	r2, r3, #15
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	3324      	adds	r3, #36	; 0x24
 8006aba:	2201      	movs	r2, #1
 8006abc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006abe:	4b55      	ldr	r3, [pc, #340]	; (8006c14 <USBD_CDC_Init+0x1e8>)
 8006ac0:	7819      	ldrb	r1, [r3, #0]
 8006ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 fb34 	bl	8009136 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ace:	4b51      	ldr	r3, [pc, #324]	; (8006c14 <USBD_CDC_Init+0x1e8>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006aea:	4b4b      	ldr	r3, [pc, #300]	; (8006c18 <USBD_CDC_Init+0x1ec>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	f003 020f 	and.w	r2, r3, #15
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	3326      	adds	r3, #38	; 0x26
 8006b00:	2210      	movs	r2, #16
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	e035      	b.n	8006b72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b06:	4b42      	ldr	r3, [pc, #264]	; (8006c10 <USBD_CDC_Init+0x1e4>)
 8006b08:	7819      	ldrb	r1, [r3, #0]
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f002 fb11 	bl	8009136 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b14:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <USBD_CDC_Init+0x1e4>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	3324      	adds	r3, #36	; 0x24
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b2e:	4b39      	ldr	r3, [pc, #228]	; (8006c14 <USBD_CDC_Init+0x1e8>)
 8006b30:	7819      	ldrb	r1, [r3, #0]
 8006b32:	2340      	movs	r3, #64	; 0x40
 8006b34:	2202      	movs	r2, #2
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f002 fafd 	bl	8009136 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b3c:	4b35      	ldr	r3, [pc, #212]	; (8006c14 <USBD_CDC_Init+0x1e8>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 020f 	and.w	r2, r3, #15
 8006b44:	6879      	ldr	r1, [r7, #4]
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b54:	2201      	movs	r2, #1
 8006b56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b58:	4b2f      	ldr	r3, [pc, #188]	; (8006c18 <USBD_CDC_Init+0x1ec>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f003 020f 	and.w	r2, r3, #15
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	3326      	adds	r3, #38	; 0x26
 8006b6e:	2210      	movs	r2, #16
 8006b70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b72:	4b29      	ldr	r3, [pc, #164]	; (8006c18 <USBD_CDC_Init+0x1ec>)
 8006b74:	7819      	ldrb	r1, [r3, #0]
 8006b76:	2308      	movs	r3, #8
 8006b78:	2203      	movs	r2, #3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f002 fadb 	bl	8009136 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b80:	4b25      	ldr	r3, [pc, #148]	; (8006c18 <USBD_CDC_Init+0x1ec>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f003 020f 	and.w	r2, r3, #15
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	3324      	adds	r3, #36	; 0x24
 8006b96:	2201      	movs	r2, #1
 8006b98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	33b0      	adds	r3, #176	; 0xb0
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e018      	b.n	8006c06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	7c1b      	ldrb	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <USBD_CDC_Init+0x1e8>)
 8006bde:	7819      	ldrb	r1, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f002 fb92 	bl	8009314 <USBD_LL_PrepareReceive>
 8006bf0:	e008      	b.n	8006c04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bf2:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <USBD_CDC_Init+0x1e8>)
 8006bf4:	7819      	ldrb	r1, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bfc:	2340      	movs	r3, #64	; 0x40
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 fb88 	bl	8009314 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000093 	.word	0x20000093
 8006c14:	20000094 	.word	0x20000094
 8006c18:	20000095 	.word	0x20000095

08006c1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c28:	4b3a      	ldr	r3, [pc, #232]	; (8006d14 <USBD_CDC_DeInit+0xf8>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f002 faa7 	bl	8009182 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c34:	4b37      	ldr	r3, [pc, #220]	; (8006d14 <USBD_CDC_DeInit+0xf8>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	f003 020f 	and.w	r2, r3, #15
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	3324      	adds	r3, #36	; 0x24
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c4e:	4b32      	ldr	r3, [pc, #200]	; (8006d18 <USBD_CDC_DeInit+0xfc>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f002 fa94 	bl	8009182 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c5a:	4b2f      	ldr	r3, [pc, #188]	; (8006d18 <USBD_CDC_DeInit+0xfc>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	f003 020f 	and.w	r2, r3, #15
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c72:	2200      	movs	r2, #0
 8006c74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c76:	4b29      	ldr	r3, [pc, #164]	; (8006d1c <USBD_CDC_DeInit+0x100>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f002 fa80 	bl	8009182 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c82:	4b26      	ldr	r3, [pc, #152]	; (8006d1c <USBD_CDC_DeInit+0x100>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 020f 	and.w	r2, r3, #15
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	3324      	adds	r3, #36	; 0x24
 8006c98:	2200      	movs	r2, #0
 8006c9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c9c:	4b1f      	ldr	r3, [pc, #124]	; (8006d1c <USBD_CDC_DeInit+0x100>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f003 020f 	and.w	r2, r3, #15
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	3326      	adds	r3, #38	; 0x26
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	32b0      	adds	r2, #176	; 0xb0
 8006cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01f      	beq.n	8006d08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	33b0      	adds	r3, #176	; 0xb0
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	32b0      	adds	r2, #176	; 0xb0
 8006ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f002 fb54 	bl	8009398 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32b0      	adds	r2, #176	; 0xb0
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000093 	.word	0x20000093
 8006d18:	20000094 	.word	0x20000094
 8006d1c:	20000095 	.word	0x20000095

08006d20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	32b0      	adds	r2, #176	; 0xb0
 8006d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e0bf      	b.n	8006ed0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d050      	beq.n	8006dfe <USBD_CDC_Setup+0xde>
 8006d5c:	2b20      	cmp	r3, #32
 8006d5e:	f040 80af 	bne.w	8006ec0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	88db      	ldrh	r3, [r3, #6]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d03a      	beq.n	8006de0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	da1b      	bge.n	8006dac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	33b0      	adds	r3, #176	; 0xb0
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	88d2      	ldrh	r2, [r2, #6]
 8006d90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	88db      	ldrh	r3, [r3, #6]
 8006d96:	2b07      	cmp	r3, #7
 8006d98:	bf28      	it	cs
 8006d9a:	2307      	movcs	r3, #7
 8006d9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	89fa      	ldrh	r2, [r7, #14]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 fd89 	bl	80088bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006daa:	e090      	b.n	8006ece <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	785a      	ldrb	r2, [r3, #1]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88db      	ldrh	r3, [r3, #6]
 8006dba:	2b3f      	cmp	r3, #63	; 0x3f
 8006dbc:	d803      	bhi.n	8006dc6 <USBD_CDC_Setup+0xa6>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	88db      	ldrh	r3, [r3, #6]
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	e000      	b.n	8006dc8 <USBD_CDC_Setup+0xa8>
 8006dc6:	2240      	movs	r2, #64	; 0x40
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006dce:	6939      	ldr	r1, [r7, #16]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fd9b 	bl	8008914 <USBD_CtlPrepareRx>
      break;
 8006dde:	e076      	b.n	8006ece <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	33b0      	adds	r3, #176	; 0xb0
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	7850      	ldrb	r0, [r2, #1]
 8006df6:	2200      	movs	r2, #0
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	4798      	blx	r3
      break;
 8006dfc:	e067      	b.n	8006ece <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	785b      	ldrb	r3, [r3, #1]
 8006e02:	2b0b      	cmp	r3, #11
 8006e04:	d851      	bhi.n	8006eaa <USBD_CDC_Setup+0x18a>
 8006e06:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <USBD_CDC_Setup+0xec>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006e3d 	.word	0x08006e3d
 8006e10:	08006eb9 	.word	0x08006eb9
 8006e14:	08006eab 	.word	0x08006eab
 8006e18:	08006eab 	.word	0x08006eab
 8006e1c:	08006eab 	.word	0x08006eab
 8006e20:	08006eab 	.word	0x08006eab
 8006e24:	08006eab 	.word	0x08006eab
 8006e28:	08006eab 	.word	0x08006eab
 8006e2c:	08006eab 	.word	0x08006eab
 8006e30:	08006eab 	.word	0x08006eab
 8006e34:	08006e67 	.word	0x08006e67
 8006e38:	08006e91 	.word	0x08006e91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d107      	bne.n	8006e58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e48:	f107 030a 	add.w	r3, r7, #10
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fd33 	bl	80088bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e56:	e032      	b.n	8006ebe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fcbd 	bl	80087da <USBD_CtlError>
            ret = USBD_FAIL;
 8006e60:	2303      	movs	r3, #3
 8006e62:	75fb      	strb	r3, [r7, #23]
          break;
 8006e64:	e02b      	b.n	8006ebe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d107      	bne.n	8006e82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e72:	f107 030d 	add.w	r3, r7, #13
 8006e76:	2201      	movs	r2, #1
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 fd1e 	bl	80088bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e80:	e01d      	b.n	8006ebe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fca8 	bl	80087da <USBD_CtlError>
            ret = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8e:	e016      	b.n	8006ebe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d00f      	beq.n	8006ebc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fc9b 	bl	80087da <USBD_CtlError>
            ret = USBD_FAIL;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ea8:	e008      	b.n	8006ebc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 fc94 	bl	80087da <USBD_CtlError>
          ret = USBD_FAIL;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb6:	e002      	b.n	8006ebe <USBD_CDC_Setup+0x19e>
          break;
 8006eb8:	bf00      	nop
 8006eba:	e008      	b.n	8006ece <USBD_CDC_Setup+0x1ae>
          break;
 8006ebc:	bf00      	nop
      }
      break;
 8006ebe:	e006      	b.n	8006ece <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fc89 	bl	80087da <USBD_CtlError>
      ret = USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ecc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	32b0      	adds	r2, #176	; 0xb0
 8006ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e065      	b.n	8006fce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	32b0      	adds	r2, #176	; 0xb0
 8006f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f12:	78fb      	ldrb	r3, [r7, #3]
 8006f14:	f003 020f 	and.w	r2, r3, #15
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	440b      	add	r3, r1
 8006f24:	3318      	adds	r3, #24
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d02f      	beq.n	8006f8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	f003 020f 	and.w	r2, r3, #15
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	3318      	adds	r3, #24
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	f003 010f 	and.w	r1, r3, #15
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	440b      	add	r3, r1
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4403      	add	r3, r0
 8006f54:	3348      	adds	r3, #72	; 0x48
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f5c:	fb01 f303 	mul.w	r3, r1, r3
 8006f60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d112      	bne.n	8006f8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f66:	78fb      	ldrb	r3, [r7, #3]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3318      	adds	r3, #24
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f7e:	78f9      	ldrb	r1, [r7, #3]
 8006f80:	2300      	movs	r3, #0
 8006f82:	2200      	movs	r2, #0
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f002 f9a4 	bl	80092d2 <USBD_LL_Transmit>
 8006f8a:	e01f      	b.n	8006fcc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	33b0      	adds	r3, #176	; 0xb0
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d010      	beq.n	8006fcc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	33b0      	adds	r3, #176	; 0xb0
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fc8:	78fa      	ldrb	r2, [r7, #3]
 8006fca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	32b0      	adds	r2, #176	; 0xb0
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	32b0      	adds	r2, #176	; 0xb0
 8006ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	e01a      	b.n	800703e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f002 f9a2 	bl	8009356 <USBD_LL_GetRxDataSize>
 8007012:	4602      	mov	r2, r0
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	33b0      	adds	r3, #176	; 0xb0
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007038:	4611      	mov	r1, r2
 800703a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	32b0      	adds	r2, #176	; 0xb0
 8007058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007064:	2303      	movs	r3, #3
 8007066:	e025      	b.n	80070b4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	33b0      	adds	r3, #176	; 0xb0
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01a      	beq.n	80070b2 <USBD_CDC_EP0_RxReady+0x6c>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007082:	2bff      	cmp	r3, #255	; 0xff
 8007084:	d015      	beq.n	80070b2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	33b0      	adds	r3, #176	; 0xb0
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800709e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80070a6:	b292      	uxth	r2, r2
 80070a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	22ff      	movs	r2, #255	; 0xff
 80070ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070c4:	2182      	movs	r1, #130	; 0x82
 80070c6:	4818      	ldr	r0, [pc, #96]	; (8007128 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070c8:	f000 fd4f 	bl	8007b6a <USBD_GetEpDesc>
 80070cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070ce:	2101      	movs	r1, #1
 80070d0:	4815      	ldr	r0, [pc, #84]	; (8007128 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070d2:	f000 fd4a 	bl	8007b6a <USBD_GetEpDesc>
 80070d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070d8:	2181      	movs	r1, #129	; 0x81
 80070da:	4813      	ldr	r0, [pc, #76]	; (8007128 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070dc:	f000 fd45 	bl	8007b6a <USBD_GetEpDesc>
 80070e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2210      	movs	r2, #16
 80070ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d006      	beq.n	8007102 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070fc:	711a      	strb	r2, [r3, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007110:	711a      	strb	r2, [r3, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2243      	movs	r2, #67	; 0x43
 800711a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000050 	.word	0x20000050

0800712c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007134:	2182      	movs	r1, #130	; 0x82
 8007136:	4818      	ldr	r0, [pc, #96]	; (8007198 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007138:	f000 fd17 	bl	8007b6a <USBD_GetEpDesc>
 800713c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800713e:	2101      	movs	r1, #1
 8007140:	4815      	ldr	r0, [pc, #84]	; (8007198 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007142:	f000 fd12 	bl	8007b6a <USBD_GetEpDesc>
 8007146:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007148:	2181      	movs	r1, #129	; 0x81
 800714a:	4813      	ldr	r0, [pc, #76]	; (8007198 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800714c:	f000 fd0d 	bl	8007b6a <USBD_GetEpDesc>
 8007150:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2210      	movs	r2, #16
 800715c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d006      	beq.n	8007172 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2200      	movs	r2, #0
 8007168:	711a      	strb	r2, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f042 0202 	orr.w	r2, r2, #2
 8007170:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d006      	beq.n	8007186 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	711a      	strb	r2, [r3, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f042 0202 	orr.w	r2, r2, #2
 8007184:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2243      	movs	r2, #67	; 0x43
 800718a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800718c:	4b02      	ldr	r3, [pc, #8]	; (8007198 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800718e:	4618      	mov	r0, r3
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000050 	.word	0x20000050

0800719c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071a4:	2182      	movs	r1, #130	; 0x82
 80071a6:	4818      	ldr	r0, [pc, #96]	; (8007208 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071a8:	f000 fcdf 	bl	8007b6a <USBD_GetEpDesc>
 80071ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071ae:	2101      	movs	r1, #1
 80071b0:	4815      	ldr	r0, [pc, #84]	; (8007208 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071b2:	f000 fcda 	bl	8007b6a <USBD_GetEpDesc>
 80071b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071b8:	2181      	movs	r1, #129	; 0x81
 80071ba:	4813      	ldr	r0, [pc, #76]	; (8007208 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071bc:	f000 fcd5 	bl	8007b6a <USBD_GetEpDesc>
 80071c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2210      	movs	r2, #16
 80071cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071dc:	711a      	strb	r2, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f0:	711a      	strb	r2, [r3, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2243      	movs	r2, #67	; 0x43
 80071fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071fc:	4b02      	ldr	r3, [pc, #8]	; (8007208 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20000050 	.word	0x20000050

0800720c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	220a      	movs	r2, #10
 8007218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800721a:	4b03      	ldr	r3, [pc, #12]	; (8007228 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	2000000c 	.word	0x2000000c

0800722c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	e009      	b.n	8007254 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	33b0      	adds	r3, #176	; 0xb0
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	32b0      	adds	r2, #176	; 0xb0
 8007276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007282:	2303      	movs	r3, #3
 8007284:	e008      	b.n	8007298 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	32b0      	adds	r2, #176	; 0xb0
 80072b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e004      	b.n	80072d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
	...

080072e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32b0      	adds	r2, #176	; 0xb0
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32b0      	adds	r2, #176	; 0xb0
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800730e:	2303      	movs	r3, #3
 8007310:	e025      	b.n	800735e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11f      	bne.n	800735c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2201      	movs	r2, #1
 8007320:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007324:	4b10      	ldr	r3, [pc, #64]	; (8007368 <USBD_CDC_TransmitPacket+0x88>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	f003 020f 	and.w	r2, r3, #15
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4403      	add	r3, r0
 800733e:	3318      	adds	r3, #24
 8007340:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007342:	4b09      	ldr	r3, [pc, #36]	; (8007368 <USBD_CDC_TransmitPacket+0x88>)
 8007344:	7819      	ldrb	r1, [r3, #0]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 ffbd 	bl	80092d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000093 	.word	0x20000093

0800736c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	32b0      	adds	r2, #176	; 0xb0
 800737e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007382:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32b0      	adds	r2, #176	; 0xb0
 800738e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007396:	2303      	movs	r3, #3
 8007398:	e018      	b.n	80073cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	7c1b      	ldrb	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073a2:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <USBD_CDC_ReceivePacket+0x68>)
 80073a4:	7819      	ldrb	r1, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 ffaf 	bl	8009314 <USBD_LL_PrepareReceive>
 80073b6:	e008      	b.n	80073ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <USBD_CDC_ReceivePacket+0x68>)
 80073ba:	7819      	ldrb	r1, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073c2:	2340      	movs	r3, #64	; 0x40
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 ffa5 	bl	8009314 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000094 	.word	0x20000094

080073d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e01f      	b.n	8007430 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	79fa      	ldrb	r2, [r7, #7]
 8007422:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f001 fe1f 	bl	8009068 <USBD_LL_Init>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3718      	adds	r7, #24
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800744c:	2303      	movs	r3, #3
 800744e:	e025      	b.n	800749c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32ae      	adds	r2, #174	; 0xae
 8007462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00f      	beq.n	800748c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32ae      	adds	r2, #174	; 0xae
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	f107 020e 	add.w	r2, r7, #14
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
 8007484:	4602      	mov	r2, r0
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fe27 	bl	8009100 <USBD_LL_Start>
 80074b2:	4603      	mov	r3, r0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d009      	beq.n	8007500 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	78fa      	ldrb	r2, [r7, #3]
 80074f6:	4611      	mov	r1, r2
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007500:	7bfb      	ldrb	r3, [r7, #15]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	78fa      	ldrb	r2, [r7, #3]
 8007524:	4611      	mov	r1, r2
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f001 f908 	bl	8008766 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007564:	461a      	mov	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007572:	f003 031f 	and.w	r3, r3, #31
 8007576:	2b02      	cmp	r3, #2
 8007578:	d01a      	beq.n	80075b0 <USBD_LL_SetupStage+0x72>
 800757a:	2b02      	cmp	r3, #2
 800757c:	d822      	bhi.n	80075c4 <USBD_LL_SetupStage+0x86>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <USBD_LL_SetupStage+0x4a>
 8007582:	2b01      	cmp	r3, #1
 8007584:	d00a      	beq.n	800759c <USBD_LL_SetupStage+0x5e>
 8007586:	e01d      	b.n	80075c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb5f 	bl	8007c54 <USBD_StdDevReq>
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
      break;
 800759a:	e020      	b.n	80075de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fbc7 	bl	8007d38 <USBD_StdItfReq>
 80075aa:	4603      	mov	r3, r0
 80075ac:	73fb      	strb	r3, [r7, #15]
      break;
 80075ae:	e016      	b.n	80075de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc29 	bl	8007e10 <USBD_StdEPReq>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
      break;
 80075c2:	e00c      	b.n	80075de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 fdf4 	bl	80091c0 <USBD_LL_StallEP>
 80075d8:	4603      	mov	r3, r0
 80075da:	73fb      	strb	r3, [r7, #15]
      break;
 80075dc:	bf00      	nop
  }

  return ret;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	460b      	mov	r3, r1
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d16e      	bne.n	80076de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007606:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800760e:	2b03      	cmp	r3, #3
 8007610:	f040 8098 	bne.w	8007744 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	429a      	cmp	r2, r3
 800761e:	d913      	bls.n	8007648 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	4293      	cmp	r3, r2
 8007638:	bf28      	it	cs
 800763a:	4613      	movcs	r3, r2
 800763c:	461a      	mov	r2, r3
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f001 f984 	bl	800894e <USBD_CtlContinueRx>
 8007646:	e07d      	b.n	8007744 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800764e:	f003 031f 	and.w	r3, r3, #31
 8007652:	2b02      	cmp	r3, #2
 8007654:	d014      	beq.n	8007680 <USBD_LL_DataOutStage+0x98>
 8007656:	2b02      	cmp	r3, #2
 8007658:	d81d      	bhi.n	8007696 <USBD_LL_DataOutStage+0xae>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <USBD_LL_DataOutStage+0x7c>
 800765e:	2b01      	cmp	r3, #1
 8007660:	d003      	beq.n	800766a <USBD_LL_DataOutStage+0x82>
 8007662:	e018      	b.n	8007696 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	75bb      	strb	r3, [r7, #22]
            break;
 8007668:	e018      	b.n	800769c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007670:	b2db      	uxtb	r3, r3
 8007672:	4619      	mov	r1, r3
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 fa5e 	bl	8007b36 <USBD_CoreFindIF>
 800767a:	4603      	mov	r3, r0
 800767c:	75bb      	strb	r3, [r7, #22]
            break;
 800767e:	e00d      	b.n	800769c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007686:	b2db      	uxtb	r3, r3
 8007688:	4619      	mov	r1, r3
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fa60 	bl	8007b50 <USBD_CoreFindEP>
 8007690:	4603      	mov	r3, r0
 8007692:	75bb      	strb	r3, [r7, #22]
            break;
 8007694:	e002      	b.n	800769c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	75bb      	strb	r3, [r7, #22]
            break;
 800769a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800769c:	7dbb      	ldrb	r3, [r7, #22]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d119      	bne.n	80076d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d113      	bne.n	80076d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076ae:	7dba      	ldrb	r2, [r7, #22]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	32ae      	adds	r2, #174	; 0xae
 80076b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00b      	beq.n	80076d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076be:	7dba      	ldrb	r2, [r7, #22]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076c6:	7dba      	ldrb	r2, [r7, #22]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	32ae      	adds	r2, #174	; 0xae
 80076cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f001 f94a 	bl	8008970 <USBD_CtlSendStatus>
 80076dc:	e032      	b.n	8007744 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	4619      	mov	r1, r3
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 fa31 	bl	8007b50 <USBD_CoreFindEP>
 80076ee:	4603      	mov	r3, r0
 80076f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076f2:	7dbb      	ldrb	r3, [r7, #22]
 80076f4:	2bff      	cmp	r3, #255	; 0xff
 80076f6:	d025      	beq.n	8007744 <USBD_LL_DataOutStage+0x15c>
 80076f8:	7dbb      	ldrb	r3, [r7, #22]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d122      	bne.n	8007744 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b03      	cmp	r3, #3
 8007708:	d117      	bne.n	800773a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800770a:	7dba      	ldrb	r2, [r7, #22]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	32ae      	adds	r2, #174	; 0xae
 8007710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00f      	beq.n	800773a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800771a:	7dba      	ldrb	r2, [r7, #22]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007722:	7dba      	ldrb	r2, [r7, #22]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	32ae      	adds	r2, #174	; 0xae
 8007728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	7afa      	ldrb	r2, [r7, #11]
 8007730:	4611      	mov	r1, r2
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	4798      	blx	r3
 8007736:	4603      	mov	r3, r0
 8007738:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	e000      	b.n	8007746 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b086      	sub	sp, #24
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	460b      	mov	r3, r1
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d16f      	bne.n	8007842 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3314      	adds	r3, #20
 8007766:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800776e:	2b02      	cmp	r3, #2
 8007770:	d15a      	bne.n	8007828 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	429a      	cmp	r2, r3
 800777c:	d914      	bls.n	80077a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	461a      	mov	r2, r3
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f001 f8ac 	bl	80088f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800779a:	2300      	movs	r3, #0
 800779c:	2200      	movs	r2, #0
 800779e:	2100      	movs	r1, #0
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f001 fdb7 	bl	8009314 <USBD_LL_PrepareReceive>
 80077a6:	e03f      	b.n	8007828 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d11c      	bne.n	80077ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077bc:	429a      	cmp	r2, r3
 80077be:	d316      	bcc.n	80077ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d20f      	bcs.n	80077ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077ce:	2200      	movs	r2, #0
 80077d0:	2100      	movs	r1, #0
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f001 f88d 	bl	80088f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077e0:	2300      	movs	r3, #0
 80077e2:	2200      	movs	r2, #0
 80077e4:	2100      	movs	r1, #0
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f001 fd94 	bl	8009314 <USBD_LL_PrepareReceive>
 80077ec:	e01c      	b.n	8007828 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d10f      	bne.n	800781a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d009      	beq.n	800781a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800781a:	2180      	movs	r1, #128	; 0x80
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f001 fccf 	bl	80091c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f001 f8b7 	bl	8008996 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d03a      	beq.n	80078a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f7ff fe42 	bl	80074bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007840:	e032      	b.n	80078a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007842:	7afb      	ldrb	r3, [r7, #11]
 8007844:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007848:	b2db      	uxtb	r3, r3
 800784a:	4619      	mov	r1, r3
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 f97f 	bl	8007b50 <USBD_CoreFindEP>
 8007852:	4603      	mov	r3, r0
 8007854:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	2bff      	cmp	r3, #255	; 0xff
 800785a:	d025      	beq.n	80078a8 <USBD_LL_DataInStage+0x15a>
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d122      	bne.n	80078a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b03      	cmp	r3, #3
 800786c:	d11c      	bne.n	80078a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800786e:	7dfa      	ldrb	r2, [r7, #23]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	32ae      	adds	r2, #174	; 0xae
 8007874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d014      	beq.n	80078a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800787e:	7dfa      	ldrb	r2, [r7, #23]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007886:	7dfa      	ldrb	r2, [r7, #23]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	32ae      	adds	r2, #174	; 0xae
 800788c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	7afa      	ldrb	r2, [r7, #11]
 8007894:	4611      	mov	r1, r2
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	4798      	blx	r3
 800789a:	4603      	mov	r3, r0
 800789c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800789e:	7dbb      	ldrb	r3, [r7, #22]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078a4:	7dbb      	ldrb	r3, [r7, #22]
 80078a6:	e000      	b.n	80078aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d014      	beq.n	8007918 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00e      	beq.n	8007918 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6852      	ldr	r2, [r2, #4]
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	4611      	mov	r1, r2
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	2200      	movs	r2, #0
 800791c:	2100      	movs	r1, #0
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fc09 	bl	8009136 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2240      	movs	r2, #64	; 0x40
 8007930:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007934:	2340      	movs	r3, #64	; 0x40
 8007936:	2200      	movs	r2, #0
 8007938:	2180      	movs	r1, #128	; 0x80
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f001 fbfb 	bl	8009136 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2240      	movs	r2, #64	; 0x40
 800794a:	621a      	str	r2, [r3, #32]

  return ret;
 800794c:	7bfb      	ldrb	r3, [r7, #15]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	460b      	mov	r3, r1
 8007960:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	78fa      	ldrb	r2, [r7, #3]
 8007966:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007976:	b480      	push	{r7}
 8007978:	b083      	sub	sp, #12
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007984:	b2da      	uxtb	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2204      	movs	r2, #4
 8007990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d106      	bne.n	80079c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d110      	bne.n	8007a08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d005      	beq.n	8007a08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	32ae      	adds	r2, #174	; 0xae
 8007a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e01c      	b.n	8007a6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d115      	bne.n	8007a6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	32ae      	adds	r2, #174	; 0xae
 8007a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	32ae      	adds	r2, #174	; 0xae
 8007a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	78fa      	ldrb	r2, [r7, #3]
 8007a66:	4611      	mov	r1, r2
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	32ae      	adds	r2, #174	; 0xae
 8007a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e01c      	b.n	8007ad2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d115      	bne.n	8007ad0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	32ae      	adds	r2, #174	; 0xae
 8007aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	32ae      	adds	r2, #174	; 0xae
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	4611      	mov	r1, r2
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00e      	beq.n	8007b2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6852      	ldr	r2, [r2, #4]
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	4798      	blx	r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	885b      	ldrh	r3, [r3, #2]
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d920      	bls.n	8007bd4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b9a:	e013      	b.n	8007bc4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b9c:	f107 030a 	add.w	r3, r7, #10
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6978      	ldr	r0, [r7, #20]
 8007ba4:	f000 f81b 	bl	8007bde <USBD_GetNextDesc>
 8007ba8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	785b      	ldrb	r3, [r3, #1]
 8007bae:	2b05      	cmp	r3, #5
 8007bb0:	d108      	bne.n	8007bc4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	789b      	ldrb	r3, [r3, #2]
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d008      	beq.n	8007bd2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	885b      	ldrh	r3, [r3, #2]
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	897b      	ldrh	r3, [r7, #10]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d8e5      	bhi.n	8007b9c <USBD_GetEpDesc+0x32>
 8007bd0:	e000      	b.n	8007bd4 <USBD_GetEpDesc+0x6a>
          break;
 8007bd2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007bd4:	693b      	ldr	r3, [r7, #16]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b085      	sub	sp, #20
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	881a      	ldrh	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	4413      	add	r3, r2
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4413      	add	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c36:	8a3b      	ldrh	r3, [r7, #16]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	b21a      	sxth	r2, r3
 8007c3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	b21b      	sxth	r3, r3
 8007c44:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c46:	89fb      	ldrh	r3, [r7, #14]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c6a:	2b40      	cmp	r3, #64	; 0x40
 8007c6c:	d005      	beq.n	8007c7a <USBD_StdDevReq+0x26>
 8007c6e:	2b40      	cmp	r3, #64	; 0x40
 8007c70:	d857      	bhi.n	8007d22 <USBD_StdDevReq+0xce>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00f      	beq.n	8007c96 <USBD_StdDevReq+0x42>
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d153      	bne.n	8007d22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	32ae      	adds	r2, #174	; 0xae
 8007c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
      break;
 8007c94:	e04a      	b.n	8007d2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	785b      	ldrb	r3, [r3, #1]
 8007c9a:	2b09      	cmp	r3, #9
 8007c9c:	d83b      	bhi.n	8007d16 <USBD_StdDevReq+0xc2>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <USBD_StdDevReq+0x50>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cf9 	.word	0x08007cf9
 8007ca8:	08007d0d 	.word	0x08007d0d
 8007cac:	08007d17 	.word	0x08007d17
 8007cb0:	08007d03 	.word	0x08007d03
 8007cb4:	08007d17 	.word	0x08007d17
 8007cb8:	08007cd7 	.word	0x08007cd7
 8007cbc:	08007ccd 	.word	0x08007ccd
 8007cc0:	08007d17 	.word	0x08007d17
 8007cc4:	08007cef 	.word	0x08007cef
 8007cc8:	08007ce1 	.word	0x08007ce1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa3c 	bl	800814c <USBD_GetDescriptor>
          break;
 8007cd4:	e024      	b.n	8007d20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fba1 	bl	8008420 <USBD_SetAddress>
          break;
 8007cde:	e01f      	b.n	8007d20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fbe0 	bl	80084a8 <USBD_SetConfig>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]
          break;
 8007cec:	e018      	b.n	8007d20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fc83 	bl	80085fc <USBD_GetConfig>
          break;
 8007cf6:	e013      	b.n	8007d20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fcb4 	bl	8008668 <USBD_GetStatus>
          break;
 8007d00:	e00e      	b.n	8007d20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fce3 	bl	80086d0 <USBD_SetFeature>
          break;
 8007d0a:	e009      	b.n	8007d20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fd07 	bl	8008722 <USBD_ClrFeature>
          break;
 8007d14:	e004      	b.n	8007d20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fd5e 	bl	80087da <USBD_CtlError>
          break;
 8007d1e:	bf00      	nop
      }
      break;
 8007d20:	e004      	b.n	8007d2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fd58 	bl	80087da <USBD_CtlError>
      break;
 8007d2a:	bf00      	nop
  }

  return ret;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop

08007d38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d4e:	2b40      	cmp	r3, #64	; 0x40
 8007d50:	d005      	beq.n	8007d5e <USBD_StdItfReq+0x26>
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d852      	bhi.n	8007dfc <USBD_StdItfReq+0xc4>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <USBD_StdItfReq+0x26>
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d14e      	bne.n	8007dfc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d840      	bhi.n	8007dee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	889b      	ldrh	r3, [r3, #4]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d836      	bhi.n	8007de4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	889b      	ldrh	r3, [r3, #4]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff fed9 	bl	8007b36 <USBD_CoreFindIF>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	2bff      	cmp	r3, #255	; 0xff
 8007d8c:	d01d      	beq.n	8007dca <USBD_StdItfReq+0x92>
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d11a      	bne.n	8007dca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d94:	7bba      	ldrb	r2, [r7, #14]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	32ae      	adds	r2, #174	; 0xae
 8007d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00f      	beq.n	8007dc4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007da4:	7bba      	ldrb	r2, [r7, #14]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007dac:	7bba      	ldrb	r2, [r7, #14]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	32ae      	adds	r2, #174	; 0xae
 8007db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dc2:	e004      	b.n	8007dce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dc8:	e001      	b.n	8007dce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	88db      	ldrh	r3, [r3, #6]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d110      	bne.n	8007df8 <USBD_StdItfReq+0xc0>
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10d      	bne.n	8007df8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fdc7 	bl	8008970 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007de2:	e009      	b.n	8007df8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fcf7 	bl	80087da <USBD_CtlError>
          break;
 8007dec:	e004      	b.n	8007df8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fcf2 	bl	80087da <USBD_CtlError>
          break;
 8007df6:	e000      	b.n	8007dfa <USBD_StdItfReq+0xc2>
          break;
 8007df8:	bf00      	nop
      }
      break;
 8007dfa:	e004      	b.n	8007e06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fceb 	bl	80087da <USBD_CtlError>
      break;
 8007e04:	bf00      	nop
  }

  return ret;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	889b      	ldrh	r3, [r3, #4]
 8007e22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e2c:	2b40      	cmp	r3, #64	; 0x40
 8007e2e:	d007      	beq.n	8007e40 <USBD_StdEPReq+0x30>
 8007e30:	2b40      	cmp	r3, #64	; 0x40
 8007e32:	f200 817f 	bhi.w	8008134 <USBD_StdEPReq+0x324>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d02a      	beq.n	8007e90 <USBD_StdEPReq+0x80>
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	f040 817a 	bne.w	8008134 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff fe83 	bl	8007b50 <USBD_CoreFindEP>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e4e:	7b7b      	ldrb	r3, [r7, #13]
 8007e50:	2bff      	cmp	r3, #255	; 0xff
 8007e52:	f000 8174 	beq.w	800813e <USBD_StdEPReq+0x32e>
 8007e56:	7b7b      	ldrb	r3, [r7, #13]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f040 8170 	bne.w	800813e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e5e:	7b7a      	ldrb	r2, [r7, #13]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e66:	7b7a      	ldrb	r2, [r7, #13]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	32ae      	adds	r2, #174	; 0xae
 8007e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 8163 	beq.w	800813e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e78:	7b7a      	ldrb	r2, [r7, #13]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	32ae      	adds	r2, #174	; 0xae
 8007e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4798      	blx	r3
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e8e:	e156      	b.n	800813e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	785b      	ldrb	r3, [r3, #1]
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d008      	beq.n	8007eaa <USBD_StdEPReq+0x9a>
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	f300 8145 	bgt.w	8008128 <USBD_StdEPReq+0x318>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 809b 	beq.w	8007fda <USBD_StdEPReq+0x1ca>
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d03c      	beq.n	8007f22 <USBD_StdEPReq+0x112>
 8007ea8:	e13e      	b.n	8008128 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d002      	beq.n	8007ebc <USBD_StdEPReq+0xac>
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d016      	beq.n	8007ee8 <USBD_StdEPReq+0xd8>
 8007eba:	e02c      	b.n	8007f16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00d      	beq.n	8007ede <USBD_StdEPReq+0xce>
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b80      	cmp	r3, #128	; 0x80
 8007ec6:	d00a      	beq.n	8007ede <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f001 f977 	bl	80091c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ed2:	2180      	movs	r1, #128	; 0x80
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f973 	bl	80091c0 <USBD_LL_StallEP>
 8007eda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007edc:	e020      	b.n	8007f20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fc7a 	bl	80087da <USBD_CtlError>
              break;
 8007ee6:	e01b      	b.n	8007f20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	885b      	ldrh	r3, [r3, #2]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10e      	bne.n	8007f0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00b      	beq.n	8007f0e <USBD_StdEPReq+0xfe>
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	2b80      	cmp	r3, #128	; 0x80
 8007efa:	d008      	beq.n	8007f0e <USBD_StdEPReq+0xfe>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	88db      	ldrh	r3, [r3, #6]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 f959 	bl	80091c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fd2e 	bl	8008970 <USBD_CtlSendStatus>

              break;
 8007f14:	e004      	b.n	8007f20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fc5e 	bl	80087da <USBD_CtlError>
              break;
 8007f1e:	bf00      	nop
          }
          break;
 8007f20:	e107      	b.n	8008132 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d002      	beq.n	8007f34 <USBD_StdEPReq+0x124>
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d016      	beq.n	8007f60 <USBD_StdEPReq+0x150>
 8007f32:	e04b      	b.n	8007fcc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00d      	beq.n	8007f56 <USBD_StdEPReq+0x146>
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	2b80      	cmp	r3, #128	; 0x80
 8007f3e:	d00a      	beq.n	8007f56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 f93b 	bl	80091c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f4a:	2180      	movs	r1, #128	; 0x80
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 f937 	bl	80091c0 <USBD_LL_StallEP>
 8007f52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f54:	e040      	b.n	8007fd8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fc3e 	bl	80087da <USBD_CtlError>
              break;
 8007f5e:	e03b      	b.n	8007fd8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	885b      	ldrh	r3, [r3, #2]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d136      	bne.n	8007fd6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d004      	beq.n	8007f7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 f941 	bl	80091fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fcf7 	bl	8008970 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fde2 	bl	8007b50 <USBD_CoreFindEP>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f90:	7b7b      	ldrb	r3, [r7, #13]
 8007f92:	2bff      	cmp	r3, #255	; 0xff
 8007f94:	d01f      	beq.n	8007fd6 <USBD_StdEPReq+0x1c6>
 8007f96:	7b7b      	ldrb	r3, [r7, #13]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11c      	bne.n	8007fd6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f9c:	7b7a      	ldrb	r2, [r7, #13]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007fa4:	7b7a      	ldrb	r2, [r7, #13]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	32ae      	adds	r2, #174	; 0xae
 8007faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d010      	beq.n	8007fd6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fb4:	7b7a      	ldrb	r2, [r7, #13]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	32ae      	adds	r2, #174	; 0xae
 8007fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007fca:	e004      	b.n	8007fd6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fc03 	bl	80087da <USBD_CtlError>
              break;
 8007fd4:	e000      	b.n	8007fd8 <USBD_StdEPReq+0x1c8>
              break;
 8007fd6:	bf00      	nop
          }
          break;
 8007fd8:	e0ab      	b.n	8008132 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d002      	beq.n	8007fec <USBD_StdEPReq+0x1dc>
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d032      	beq.n	8008050 <USBD_StdEPReq+0x240>
 8007fea:	e097      	b.n	800811c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <USBD_StdEPReq+0x1f2>
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	2b80      	cmp	r3, #128	; 0x80
 8007ff6:	d004      	beq.n	8008002 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fbed 	bl	80087da <USBD_CtlError>
                break;
 8008000:	e091      	b.n	8008126 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008006:	2b00      	cmp	r3, #0
 8008008:	da0b      	bge.n	8008022 <USBD_StdEPReq+0x212>
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	3310      	adds	r3, #16
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	3304      	adds	r3, #4
 8008020:	e00b      	b.n	800803a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	4413      	add	r3, r2
 8008038:	3304      	adds	r3, #4
 800803a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2202      	movs	r2, #2
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fc37 	bl	80088bc <USBD_CtlSendData>
              break;
 800804e:	e06a      	b.n	8008126 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008054:	2b00      	cmp	r3, #0
 8008056:	da11      	bge.n	800807c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	f003 020f 	and.w	r2, r3, #15
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	3324      	adds	r3, #36	; 0x24
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d117      	bne.n	80080a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fbb0 	bl	80087da <USBD_CtlError>
                  break;
 800807a:	e054      	b.n	8008126 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	f003 020f 	and.w	r2, r3, #15
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fb9d 	bl	80087da <USBD_CtlError>
                  break;
 80080a0:	e041      	b.n	8008126 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da0b      	bge.n	80080c2 <USBD_StdEPReq+0x2b2>
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	3310      	adds	r3, #16
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	3304      	adds	r3, #4
 80080c0:	e00b      	b.n	80080da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	4413      	add	r3, r2
 80080d8:	3304      	adds	r3, #4
 80080da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <USBD_StdEPReq+0x2d8>
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b80      	cmp	r3, #128	; 0x80
 80080e6:	d103      	bne.n	80080f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	e00e      	b.n	800810e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 f8a1 	bl	800923c <USBD_LL_IsStallEP>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2201      	movs	r2, #1
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	e002      	b.n	800810e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2202      	movs	r2, #2
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fbd1 	bl	80088bc <USBD_CtlSendData>
              break;
 800811a:	e004      	b.n	8008126 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fb5b 	bl	80087da <USBD_CtlError>
              break;
 8008124:	bf00      	nop
          }
          break;
 8008126:	e004      	b.n	8008132 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fb55 	bl	80087da <USBD_CtlError>
          break;
 8008130:	bf00      	nop
      }
      break;
 8008132:	e005      	b.n	8008140 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fb4f 	bl	80087da <USBD_CtlError>
      break;
 800813c:	e000      	b.n	8008140 <USBD_StdEPReq+0x330>
      break;
 800813e:	bf00      	nop
  }

  return ret;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	885b      	ldrh	r3, [r3, #2]
 8008166:	0a1b      	lsrs	r3, r3, #8
 8008168:	b29b      	uxth	r3, r3
 800816a:	3b01      	subs	r3, #1
 800816c:	2b06      	cmp	r3, #6
 800816e:	f200 8128 	bhi.w	80083c2 <USBD_GetDescriptor+0x276>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <USBD_GetDescriptor+0x2c>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	08008195 	.word	0x08008195
 800817c:	080081ad 	.word	0x080081ad
 8008180:	080081ed 	.word	0x080081ed
 8008184:	080083c3 	.word	0x080083c3
 8008188:	080083c3 	.word	0x080083c3
 800818c:	08008363 	.word	0x08008363
 8008190:	0800838f 	.word	0x0800838f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7c12      	ldrb	r2, [r2, #16]
 80081a0:	f107 0108 	add.w	r1, r7, #8
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	60f8      	str	r0, [r7, #12]
      break;
 80081aa:	e112      	b.n	80083d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	7c1b      	ldrb	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10d      	bne.n	80081d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	f107 0208 	add.w	r2, r7, #8
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
 80081c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3301      	adds	r3, #1
 80081ca:	2202      	movs	r2, #2
 80081cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081ce:	e100      	b.n	80083d2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	f107 0208 	add.w	r2, r7, #8
 80081dc:	4610      	mov	r0, r2
 80081de:	4798      	blx	r3
 80081e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3301      	adds	r3, #1
 80081e6:	2202      	movs	r2, #2
 80081e8:	701a      	strb	r2, [r3, #0]
      break;
 80081ea:	e0f2      	b.n	80083d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	885b      	ldrh	r3, [r3, #2]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b05      	cmp	r3, #5
 80081f4:	f200 80ac 	bhi.w	8008350 <USBD_GetDescriptor+0x204>
 80081f8:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <USBD_GetDescriptor+0xb4>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	08008219 	.word	0x08008219
 8008204:	0800824d 	.word	0x0800824d
 8008208:	08008281 	.word	0x08008281
 800820c:	080082b5 	.word	0x080082b5
 8008210:	080082e9 	.word	0x080082e9
 8008214:	0800831d 	.word	0x0800831d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7c12      	ldrb	r2, [r2, #16]
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800823a:	e091      	b.n	8008360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 facb 	bl	80087da <USBD_CtlError>
            err++;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	3301      	adds	r3, #1
 8008248:	72fb      	strb	r3, [r7, #11]
          break;
 800824a:	e089      	b.n	8008360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	7c12      	ldrb	r2, [r2, #16]
 8008264:	f107 0108 	add.w	r1, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826e:	e077      	b.n	8008360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fab1 	bl	80087da <USBD_CtlError>
            err++;
 8008278:	7afb      	ldrb	r3, [r7, #11]
 800827a:	3301      	adds	r3, #1
 800827c:	72fb      	strb	r3, [r7, #11]
          break;
 800827e:	e06f      	b.n	8008360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	7c12      	ldrb	r2, [r2, #16]
 8008298:	f107 0108 	add.w	r1, r7, #8
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082a2:	e05d      	b.n	8008360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa97 	bl	80087da <USBD_CtlError>
            err++;
 80082ac:	7afb      	ldrb	r3, [r7, #11]
 80082ae:	3301      	adds	r3, #1
 80082b0:	72fb      	strb	r3, [r7, #11]
          break;
 80082b2:	e055      	b.n	8008360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	7c12      	ldrb	r2, [r2, #16]
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d6:	e043      	b.n	8008360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa7d 	bl	80087da <USBD_CtlError>
            err++;
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	3301      	adds	r3, #1
 80082e4:	72fb      	strb	r3, [r7, #11]
          break;
 80082e6:	e03b      	b.n	8008360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	7c12      	ldrb	r2, [r2, #16]
 8008300:	f107 0108 	add.w	r1, r7, #8
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800830a:	e029      	b.n	8008360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa63 	bl	80087da <USBD_CtlError>
            err++;
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	3301      	adds	r3, #1
 8008318:	72fb      	strb	r3, [r7, #11]
          break;
 800831a:	e021      	b.n	8008360 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	7c12      	ldrb	r2, [r2, #16]
 8008334:	f107 0108 	add.w	r1, r7, #8
 8008338:	4610      	mov	r0, r2
 800833a:	4798      	blx	r3
 800833c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800833e:	e00f      	b.n	8008360 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa49 	bl	80087da <USBD_CtlError>
            err++;
 8008348:	7afb      	ldrb	r3, [r7, #11]
 800834a:	3301      	adds	r3, #1
 800834c:	72fb      	strb	r3, [r7, #11]
          break;
 800834e:	e007      	b.n	8008360 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa41 	bl	80087da <USBD_CtlError>
          err++;
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	3301      	adds	r3, #1
 800835c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800835e:	bf00      	nop
      }
      break;
 8008360:	e037      	b.n	80083d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	7c1b      	ldrb	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d109      	bne.n	800837e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008372:	f107 0208 	add.w	r2, r7, #8
 8008376:	4610      	mov	r0, r2
 8008378:	4798      	blx	r3
 800837a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800837c:	e029      	b.n	80083d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fa2a 	bl	80087da <USBD_CtlError>
        err++;
 8008386:	7afb      	ldrb	r3, [r7, #11]
 8008388:	3301      	adds	r3, #1
 800838a:	72fb      	strb	r3, [r7, #11]
      break;
 800838c:	e021      	b.n	80083d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	7c1b      	ldrb	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10d      	bne.n	80083b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800839c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839e:	f107 0208 	add.w	r2, r7, #8
 80083a2:	4610      	mov	r0, r2
 80083a4:	4798      	blx	r3
 80083a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3301      	adds	r3, #1
 80083ac:	2207      	movs	r2, #7
 80083ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083b0:	e00f      	b.n	80083d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fa10 	bl	80087da <USBD_CtlError>
        err++;
 80083ba:	7afb      	ldrb	r3, [r7, #11]
 80083bc:	3301      	adds	r3, #1
 80083be:	72fb      	strb	r3, [r7, #11]
      break;
 80083c0:	e007      	b.n	80083d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fa08 	bl	80087da <USBD_CtlError>
      err++;
 80083ca:	7afb      	ldrb	r3, [r7, #11]
 80083cc:	3301      	adds	r3, #1
 80083ce:	72fb      	strb	r3, [r7, #11]
      break;
 80083d0:	bf00      	nop
  }

  if (err != 0U)
 80083d2:	7afb      	ldrb	r3, [r7, #11]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d11e      	bne.n	8008416 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	88db      	ldrh	r3, [r3, #6]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d016      	beq.n	800840e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80083e0:	893b      	ldrh	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00e      	beq.n	8008404 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	88da      	ldrh	r2, [r3, #6]
 80083ea:	893b      	ldrh	r3, [r7, #8]
 80083ec:	4293      	cmp	r3, r2
 80083ee:	bf28      	it	cs
 80083f0:	4613      	movcs	r3, r2
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083f6:	893b      	ldrh	r3, [r7, #8]
 80083f8:	461a      	mov	r2, r3
 80083fa:	68f9      	ldr	r1, [r7, #12]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fa5d 	bl	80088bc <USBD_CtlSendData>
 8008402:	e009      	b.n	8008418 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f9e7 	bl	80087da <USBD_CtlError>
 800840c:	e004      	b.n	8008418 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 faae 	bl	8008970 <USBD_CtlSendStatus>
 8008414:	e000      	b.n	8008418 <USBD_GetDescriptor+0x2cc>
    return;
 8008416:	bf00      	nop
  }
}
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop

08008420 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	889b      	ldrh	r3, [r3, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d131      	bne.n	8008496 <USBD_SetAddress+0x76>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	88db      	ldrh	r3, [r3, #6]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d12d      	bne.n	8008496 <USBD_SetAddress+0x76>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	885b      	ldrh	r3, [r3, #2]
 800843e:	2b7f      	cmp	r3, #127	; 0x7f
 8008440:	d829      	bhi.n	8008496 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	885b      	ldrh	r3, [r3, #2]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800844c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b03      	cmp	r3, #3
 8008458:	d104      	bne.n	8008464 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f9bc 	bl	80087da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008462:	e01d      	b.n	80084a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7bfa      	ldrb	r2, [r7, #15]
 8008468:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 ff0f 	bl	8009294 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fa7a 	bl	8008970 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d004      	beq.n	800848c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2202      	movs	r2, #2
 8008486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848a:	e009      	b.n	80084a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008494:	e004      	b.n	80084a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f99e 	bl	80087da <USBD_CtlError>
  }
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	885b      	ldrh	r3, [r3, #2]
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	4b4e      	ldr	r3, [pc, #312]	; (80085f8 <USBD_SetConfig+0x150>)
 80084be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084c0:	4b4d      	ldr	r3, [pc, #308]	; (80085f8 <USBD_SetConfig+0x150>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d905      	bls.n	80084d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f985 	bl	80087da <USBD_CtlError>
    return USBD_FAIL;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e08c      	b.n	80085ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d002      	beq.n	80084e6 <USBD_SetConfig+0x3e>
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d029      	beq.n	8008538 <USBD_SetConfig+0x90>
 80084e4:	e075      	b.n	80085d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084e6:	4b44      	ldr	r3, [pc, #272]	; (80085f8 <USBD_SetConfig+0x150>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d020      	beq.n	8008530 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80084ee:	4b42      	ldr	r3, [pc, #264]	; (80085f8 <USBD_SetConfig+0x150>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084f8:	4b3f      	ldr	r3, [pc, #252]	; (80085f8 <USBD_SetConfig+0x150>)
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7fe ffe7 	bl	80074d2 <USBD_SetClassConfig>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d008      	beq.n	8008520 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f962 	bl	80087da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800851e:	e065      	b.n	80085ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fa25 	bl	8008970 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2203      	movs	r2, #3
 800852a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800852e:	e05d      	b.n	80085ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fa1d 	bl	8008970 <USBD_CtlSendStatus>
      break;
 8008536:	e059      	b.n	80085ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008538:	4b2f      	ldr	r3, [pc, #188]	; (80085f8 <USBD_SetConfig+0x150>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d112      	bne.n	8008566 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008548:	4b2b      	ldr	r3, [pc, #172]	; (80085f8 <USBD_SetConfig+0x150>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	461a      	mov	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008552:	4b29      	ldr	r3, [pc, #164]	; (80085f8 <USBD_SetConfig+0x150>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7fe ffd6 	bl	800750a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fa06 	bl	8008970 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008564:	e042      	b.n	80085ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008566:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <USBD_SetConfig+0x150>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d02a      	beq.n	80085ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	b2db      	uxtb	r3, r3
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fe ffc4 	bl	800750a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008582:	4b1d      	ldr	r3, [pc, #116]	; (80085f8 <USBD_SetConfig+0x150>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800858c:	4b1a      	ldr	r3, [pc, #104]	; (80085f8 <USBD_SetConfig+0x150>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fe ff9d 	bl	80074d2 <USBD_SetClassConfig>
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00f      	beq.n	80085c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f918 	bl	80087da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fe ffa9 	bl	800750a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085c0:	e014      	b.n	80085ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f9d4 	bl	8008970 <USBD_CtlSendStatus>
      break;
 80085c8:	e010      	b.n	80085ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f9d0 	bl	8008970 <USBD_CtlSendStatus>
      break;
 80085d0:	e00c      	b.n	80085ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f900 	bl	80087da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <USBD_SetConfig+0x150>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7fe ff92 	bl	800750a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085e6:	2303      	movs	r3, #3
 80085e8:	73fb      	strb	r3, [r7, #15]
      break;
 80085ea:	bf00      	nop
  }

  return ret;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000258 	.word	0x20000258

080085fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	88db      	ldrh	r3, [r3, #6]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d004      	beq.n	8008618 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f8e2 	bl	80087da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008616:	e023      	b.n	8008660 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	dc02      	bgt.n	800862a <USBD_GetConfig+0x2e>
 8008624:	2b00      	cmp	r3, #0
 8008626:	dc03      	bgt.n	8008630 <USBD_GetConfig+0x34>
 8008628:	e015      	b.n	8008656 <USBD_GetConfig+0x5a>
 800862a:	2b03      	cmp	r3, #3
 800862c:	d00b      	beq.n	8008646 <USBD_GetConfig+0x4a>
 800862e:	e012      	b.n	8008656 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3308      	adds	r3, #8
 800863a:	2201      	movs	r2, #1
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f93c 	bl	80088bc <USBD_CtlSendData>
        break;
 8008644:	e00c      	b.n	8008660 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3304      	adds	r3, #4
 800864a:	2201      	movs	r2, #1
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f934 	bl	80088bc <USBD_CtlSendData>
        break;
 8008654:	e004      	b.n	8008660 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f8be 	bl	80087da <USBD_CtlError>
        break;
 800865e:	bf00      	nop
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008678:	b2db      	uxtb	r3, r3
 800867a:	3b01      	subs	r3, #1
 800867c:	2b02      	cmp	r3, #2
 800867e:	d81e      	bhi.n	80086be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	88db      	ldrh	r3, [r3, #6]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d004      	beq.n	8008692 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f8a5 	bl	80087da <USBD_CtlError>
        break;
 8008690:	e01a      	b.n	80086c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f043 0202 	orr.w	r2, r3, #2
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	330c      	adds	r3, #12
 80086b2:	2202      	movs	r2, #2
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f900 	bl	80088bc <USBD_CtlSendData>
      break;
 80086bc:	e004      	b.n	80086c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f88a 	bl	80087da <USBD_CtlError>
      break;
 80086c6:	bf00      	nop
  }
}
 80086c8:	bf00      	nop
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	885b      	ldrh	r3, [r3, #2]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d107      	bne.n	80086f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f940 	bl	8008970 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80086f0:	e013      	b.n	800871a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d10b      	bne.n	8008712 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	889b      	ldrh	r3, [r3, #4]
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	b29b      	uxth	r3, r3
 8008702:	b2da      	uxtb	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f930 	bl	8008970 <USBD_CtlSendStatus>
}
 8008710:	e003      	b.n	800871a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f860 	bl	80087da <USBD_CtlError>
}
 800871a:	bf00      	nop
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008732:	b2db      	uxtb	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	2b02      	cmp	r3, #2
 8008738:	d80b      	bhi.n	8008752 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	885b      	ldrh	r3, [r3, #2]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10c      	bne.n	800875c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f910 	bl	8008970 <USBD_CtlSendStatus>
      }
      break;
 8008750:	e004      	b.n	800875c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f840 	bl	80087da <USBD_CtlError>
      break;
 800875a:	e000      	b.n	800875e <USBD_ClrFeature+0x3c>
      break;
 800875c:	bf00      	nop
  }
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	781a      	ldrb	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f7ff fa41 	bl	8007c18 <SWAPBYTE>
 8008796:	4603      	mov	r3, r0
 8008798:	461a      	mov	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f7ff fa34 	bl	8007c18 <SWAPBYTE>
 80087b0:	4603      	mov	r3, r0
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3301      	adds	r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3301      	adds	r3, #1
 80087c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff fa27 	bl	8007c18 <SWAPBYTE>
 80087ca:	4603      	mov	r3, r0
 80087cc:	461a      	mov	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	80da      	strh	r2, [r3, #6]
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087e4:	2180      	movs	r1, #128	; 0x80
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fcea 	bl	80091c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087ec:	2100      	movs	r1, #0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fce6 	bl	80091c0 <USBD_LL_StallEP>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d036      	beq.n	8008880 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008816:	6938      	ldr	r0, [r7, #16]
 8008818:	f000 f836 	bl	8008888 <USBD_GetLen>
 800881c:	4603      	mov	r3, r0
 800881e:	3301      	adds	r3, #1
 8008820:	b29b      	uxth	r3, r3
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	4413      	add	r3, r2
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	7812      	ldrb	r2, [r2, #0]
 8008834:	701a      	strb	r2, [r3, #0]
  idx++;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	3301      	adds	r3, #1
 800883a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	2203      	movs	r2, #3
 8008844:	701a      	strb	r2, [r3, #0]
  idx++;
 8008846:	7dfb      	ldrb	r3, [r7, #23]
 8008848:	3301      	adds	r3, #1
 800884a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800884c:	e013      	b.n	8008876 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	4413      	add	r3, r2
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	7812      	ldrb	r2, [r2, #0]
 8008858:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	3301      	adds	r3, #1
 800885e:	613b      	str	r3, [r7, #16]
    idx++;
 8008860:	7dfb      	ldrb	r3, [r7, #23]
 8008862:	3301      	adds	r3, #1
 8008864:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	4413      	add	r3, r2
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	3301      	adds	r3, #1
 8008874:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e7      	bne.n	800884e <USBD_GetString+0x52>
 800887e:	e000      	b.n	8008882 <USBD_GetString+0x86>
    return;
 8008880:	bf00      	nop
  }
}
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008898:	e005      	b.n	80088a6 <USBD_GetLen+0x1e>
  {
    len++;
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	3301      	adds	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	3301      	adds	r3, #1
 80088a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f5      	bne.n	800889a <USBD_GetLen+0x12>
  }

  return len;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	2100      	movs	r1, #0
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fcf5 	bl	80092d2 <USBD_LL_Transmit>

  return USBD_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	2100      	movs	r1, #0
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 fce4 	bl	80092d2 <USBD_LL_Transmit>

  return USBD_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2203      	movs	r2, #3
 8008924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	2100      	movs	r1, #0
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 fce8 	bl	8009314 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	2100      	movs	r1, #0
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 fcd7 	bl	8009314 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2204      	movs	r2, #4
 800897c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008980:	2300      	movs	r3, #0
 8008982:	2200      	movs	r2, #0
 8008984:	2100      	movs	r1, #0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fca3 	bl	80092d2 <USBD_LL_Transmit>

  return USBD_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2205      	movs	r2, #5
 80089a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089a6:	2300      	movs	r3, #0
 80089a8:	2200      	movs	r2, #0
 80089aa:	2100      	movs	r1, #0
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fcb1 	bl	8009314 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089c0:	2200      	movs	r2, #0
 80089c2:	4912      	ldr	r1, [pc, #72]	; (8008a0c <MX_USB_DEVICE_Init+0x50>)
 80089c4:	4812      	ldr	r0, [pc, #72]	; (8008a10 <MX_USB_DEVICE_Init+0x54>)
 80089c6:	f7fe fd07 	bl	80073d8 <USBD_Init>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089d0:	f7f8 faac 	bl	8000f2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089d4:	490f      	ldr	r1, [pc, #60]	; (8008a14 <MX_USB_DEVICE_Init+0x58>)
 80089d6:	480e      	ldr	r0, [pc, #56]	; (8008a10 <MX_USB_DEVICE_Init+0x54>)
 80089d8:	f7fe fd2e 	bl	8007438 <USBD_RegisterClass>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089e2:	f7f8 faa3 	bl	8000f2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089e6:	490c      	ldr	r1, [pc, #48]	; (8008a18 <MX_USB_DEVICE_Init+0x5c>)
 80089e8:	4809      	ldr	r0, [pc, #36]	; (8008a10 <MX_USB_DEVICE_Init+0x54>)
 80089ea:	f7fe fc1f 	bl	800722c <USBD_CDC_RegisterInterface>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089f4:	f7f8 fa9a 	bl	8000f2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089f8:	4805      	ldr	r0, [pc, #20]	; (8008a10 <MX_USB_DEVICE_Init+0x54>)
 80089fa:	f7fe fd53 	bl	80074a4 <USBD_Start>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a04:	f7f8 fa92 	bl	8000f2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a08:	bf00      	nop
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	200000ac 	.word	0x200000ac
 8008a10:	2000025c 	.word	0x2000025c
 8008a14:	20000018 	.word	0x20000018
 8008a18:	20000098 	.word	0x20000098

08008a1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a20:	2200      	movs	r2, #0
 8008a22:	4905      	ldr	r1, [pc, #20]	; (8008a38 <CDC_Init_FS+0x1c>)
 8008a24:	4805      	ldr	r0, [pc, #20]	; (8008a3c <CDC_Init_FS+0x20>)
 8008a26:	f7fe fc1b 	bl	8007260 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a2a:	4905      	ldr	r1, [pc, #20]	; (8008a40 <CDC_Init_FS+0x24>)
 8008a2c:	4803      	ldr	r0, [pc, #12]	; (8008a3c <CDC_Init_FS+0x20>)
 8008a2e:	f7fe fc39 	bl	80072a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	20000d38 	.word	0x20000d38
 8008a3c:	2000025c 	.word	0x2000025c
 8008a40:	20000538 	.word	0x20000538

08008a44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a44:	b480      	push	{r7}
 8008a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6039      	str	r1, [r7, #0]
 8008a5e:	71fb      	strb	r3, [r7, #7]
 8008a60:	4613      	mov	r3, r2
 8008a62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	2b23      	cmp	r3, #35	; 0x23
 8008a68:	d84a      	bhi.n	8008b00 <CDC_Control_FS+0xac>
 8008a6a:	a201      	add	r2, pc, #4	; (adr r2, 8008a70 <CDC_Control_FS+0x1c>)
 8008a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a70:	08008b01 	.word	0x08008b01
 8008a74:	08008b01 	.word	0x08008b01
 8008a78:	08008b01 	.word	0x08008b01
 8008a7c:	08008b01 	.word	0x08008b01
 8008a80:	08008b01 	.word	0x08008b01
 8008a84:	08008b01 	.word	0x08008b01
 8008a88:	08008b01 	.word	0x08008b01
 8008a8c:	08008b01 	.word	0x08008b01
 8008a90:	08008b01 	.word	0x08008b01
 8008a94:	08008b01 	.word	0x08008b01
 8008a98:	08008b01 	.word	0x08008b01
 8008a9c:	08008b01 	.word	0x08008b01
 8008aa0:	08008b01 	.word	0x08008b01
 8008aa4:	08008b01 	.word	0x08008b01
 8008aa8:	08008b01 	.word	0x08008b01
 8008aac:	08008b01 	.word	0x08008b01
 8008ab0:	08008b01 	.word	0x08008b01
 8008ab4:	08008b01 	.word	0x08008b01
 8008ab8:	08008b01 	.word	0x08008b01
 8008abc:	08008b01 	.word	0x08008b01
 8008ac0:	08008b01 	.word	0x08008b01
 8008ac4:	08008b01 	.word	0x08008b01
 8008ac8:	08008b01 	.word	0x08008b01
 8008acc:	08008b01 	.word	0x08008b01
 8008ad0:	08008b01 	.word	0x08008b01
 8008ad4:	08008b01 	.word	0x08008b01
 8008ad8:	08008b01 	.word	0x08008b01
 8008adc:	08008b01 	.word	0x08008b01
 8008ae0:	08008b01 	.word	0x08008b01
 8008ae4:	08008b01 	.word	0x08008b01
 8008ae8:	08008b01 	.word	0x08008b01
 8008aec:	08008b01 	.word	0x08008b01
 8008af0:	08008b01 	.word	0x08008b01
 8008af4:	08008b01 	.word	0x08008b01
 8008af8:	08008b01 	.word	0x08008b01
 8008afc:	08008b01 	.word	0x08008b01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b00:	bf00      	nop
  }

  return (USBD_OK);
 8008b02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	4809      	ldr	r0, [pc, #36]	; (8008b44 <CDC_Receive_FS+0x34>)
 8008b1e:	f7fe fbc1 	bl	80072a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b22:	4808      	ldr	r0, [pc, #32]	; (8008b44 <CDC_Receive_FS+0x34>)
 8008b24:	f7fe fc22 	bl	800736c <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer,Buf,len);
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	461a      	mov	r2, r3
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	4804      	ldr	r0, [pc, #16]	; (8008b48 <CDC_Receive_FS+0x38>)
 8008b36:	f000 fc89 	bl	800944c <memcpy>
  return (USBD_OK);
 8008b3a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	2000025c 	.word	0x2000025c
 8008b48:	20000200 	.word	0x20000200

08008b4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b5c:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <CDC_Transmit_FS+0x48>)
 8008b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e00b      	b.n	8008b8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b72:	887b      	ldrh	r3, [r7, #2]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4806      	ldr	r0, [pc, #24]	; (8008b94 <CDC_Transmit_FS+0x48>)
 8008b7a:	f7fe fb71 	bl	8007260 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b7e:	4805      	ldr	r0, [pc, #20]	; (8008b94 <CDC_Transmit_FS+0x48>)
 8008b80:	f7fe fbae 	bl	80072e0 <USBD_CDC_TransmitPacket>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	2000025c 	.word	0x2000025c

08008b98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
	...

08008bbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2212      	movs	r2, #18
 8008bcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008bce:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	200000c8 	.word	0x200000c8

08008be0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2204      	movs	r2, #4
 8008bf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bf2:	4b03      	ldr	r3, [pc, #12]	; (8008c00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	200000dc 	.word	0x200000dc

08008c04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	6039      	str	r1, [r7, #0]
 8008c0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d105      	bne.n	8008c22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	4907      	ldr	r1, [pc, #28]	; (8008c38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c1a:	4808      	ldr	r0, [pc, #32]	; (8008c3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008c1c:	f7ff fdee 	bl	80087fc <USBD_GetString>
 8008c20:	e004      	b.n	8008c2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	4904      	ldr	r1, [pc, #16]	; (8008c38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c26:	4805      	ldr	r0, [pc, #20]	; (8008c3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008c28:	f7ff fde8 	bl	80087fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c2c:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20001538 	.word	0x20001538
 8008c3c:	080094ac 	.word	0x080094ac

08008c40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	4603      	mov	r3, r0
 8008c48:	6039      	str	r1, [r7, #0]
 8008c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	4904      	ldr	r1, [pc, #16]	; (8008c60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c50:	4804      	ldr	r0, [pc, #16]	; (8008c64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c52:	f7ff fdd3 	bl	80087fc <USBD_GetString>
  return USBD_StrDesc;
 8008c56:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20001538 	.word	0x20001538
 8008c64:	080094c4 	.word	0x080094c4

08008c68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	221a      	movs	r2, #26
 8008c78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c7a:	f000 f843 	bl	8008d04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c7e:	4b02      	ldr	r3, [pc, #8]	; (8008c88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	200000e0 	.word	0x200000e0

08008c8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d105      	bne.n	8008caa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	4907      	ldr	r1, [pc, #28]	; (8008cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ca2:	4808      	ldr	r0, [pc, #32]	; (8008cc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ca4:	f7ff fdaa 	bl	80087fc <USBD_GetString>
 8008ca8:	e004      	b.n	8008cb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4904      	ldr	r1, [pc, #16]	; (8008cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cae:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cb0:	f7ff fda4 	bl	80087fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20001538 	.word	0x20001538
 8008cc4:	080094d8 	.word	0x080094d8

08008cc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	6039      	str	r1, [r7, #0]
 8008cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	4907      	ldr	r1, [pc, #28]	; (8008cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cde:	4808      	ldr	r0, [pc, #32]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ce0:	f7ff fd8c 	bl	80087fc <USBD_GetString>
 8008ce4:	e004      	b.n	8008cf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ce6:	683a      	ldr	r2, [r7, #0]
 8008ce8:	4904      	ldr	r1, [pc, #16]	; (8008cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cea:	4805      	ldr	r0, [pc, #20]	; (8008d00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cec:	f7ff fd86 	bl	80087fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cf0:	4b02      	ldr	r3, [pc, #8]	; (8008cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20001538 	.word	0x20001538
 8008d00:	080094e4 	.word	0x080094e4

08008d04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d0a:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <Get_SerialNum+0x44>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d10:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <Get_SerialNum+0x48>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d16:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <Get_SerialNum+0x4c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4413      	add	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d009      	beq.n	8008d3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	4909      	ldr	r1, [pc, #36]	; (8008d54 <Get_SerialNum+0x50>)
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 f814 	bl	8008d5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d34:	2204      	movs	r2, #4
 8008d36:	4908      	ldr	r1, [pc, #32]	; (8008d58 <Get_SerialNum+0x54>)
 8008d38:	68b8      	ldr	r0, [r7, #8]
 8008d3a:	f000 f80f 	bl	8008d5c <IntToUnicode>
  }
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	1fff7a10 	.word	0x1fff7a10
 8008d4c:	1fff7a14 	.word	0x1fff7a14
 8008d50:	1fff7a18 	.word	0x1fff7a18
 8008d54:	200000e2 	.word	0x200000e2
 8008d58:	200000f2 	.word	0x200000f2

08008d5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]
 8008d72:	e027      	b.n	8008dc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	0f1b      	lsrs	r3, r3, #28
 8008d78:	2b09      	cmp	r3, #9
 8008d7a:	d80b      	bhi.n	8008d94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	0f1b      	lsrs	r3, r3, #28
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	4619      	mov	r1, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	440b      	add	r3, r1
 8008d8c:	3230      	adds	r2, #48	; 0x30
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]
 8008d92:	e00a      	b.n	8008daa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	0f1b      	lsrs	r3, r3, #28
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	4619      	mov	r1, r3
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	440b      	add	r3, r1
 8008da4:	3237      	adds	r2, #55	; 0x37
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	011b      	lsls	r3, r3, #4
 8008dae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	3301      	adds	r3, #1
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	4413      	add	r3, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
 8008dc4:	7dfa      	ldrb	r2, [r7, #23]
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d3d3      	bcc.n	8008d74 <IntToUnicode+0x18>
  }
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
	...

08008ddc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	; 0x28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008de4:	f107 0314 	add.w	r3, r7, #20
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	605a      	str	r2, [r3, #4]
 8008dee:	609a      	str	r2, [r3, #8]
 8008df0:	60da      	str	r2, [r3, #12]
 8008df2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dfc:	d13a      	bne.n	8008e74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dfe:	2300      	movs	r3, #0
 8008e00:	613b      	str	r3, [r7, #16]
 8008e02:	4b1e      	ldr	r3, [pc, #120]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e06:	4a1d      	ldr	r2, [pc, #116]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e08:	f043 0301 	orr.w	r3, r3, #1
 8008e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e0e:	4b1b      	ldr	r3, [pc, #108]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e20:	2302      	movs	r3, #2
 8008e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e2c:	230a      	movs	r3, #10
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e30:	f107 0314 	add.w	r3, r7, #20
 8008e34:	4619      	mov	r1, r3
 8008e36:	4812      	ldr	r0, [pc, #72]	; (8008e80 <HAL_PCD_MspInit+0xa4>)
 8008e38:	f7f8 ffc0 	bl	8001dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e3c:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e40:	4a0e      	ldr	r2, [pc, #56]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e46:	6353      	str	r3, [r2, #52]	; 0x34
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e50:	4a0a      	ldr	r2, [pc, #40]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e56:	6453      	str	r3, [r2, #68]	; 0x44
 8008e58:	4b08      	ldr	r3, [pc, #32]	; (8008e7c <HAL_PCD_MspInit+0xa0>)
 8008e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e64:	2200      	movs	r2, #0
 8008e66:	2100      	movs	r1, #0
 8008e68:	2043      	movs	r0, #67	; 0x43
 8008e6a:	f7f8 ff70 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e6e:	2043      	movs	r0, #67	; 0x43
 8008e70:	f7f8 ff89 	bl	8001d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e74:	bf00      	nop
 8008e76:	3728      	adds	r7, #40	; 0x28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	40023800 	.word	0x40023800
 8008e80:	40020000 	.word	0x40020000

08008e84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f7fe fb4f 	bl	800753e <USBD_LL_SetupStage>
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008eba:	78fa      	ldrb	r2, [r7, #3]
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	440b      	add	r3, r1
 8008ec8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	78fb      	ldrb	r3, [r7, #3]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	f7fe fb89 	bl	80075e8 <USBD_LL_DataOutStage>
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	334c      	adds	r3, #76	; 0x4c
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	4619      	mov	r1, r3
 8008f06:	f7fe fc22 	bl	800774e <USBD_LL_DataInStage>
}
 8008f0a:	bf00      	nop
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fe fd56 	bl	80079d2 <USBD_LL_SOF>
}
 8008f26:	bf00      	nop
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f36:	2301      	movs	r3, #1
 8008f38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f42:	2300      	movs	r3, #0
 8008f44:	73fb      	strb	r3, [r7, #15]
 8008f46:	e008      	b.n	8008f5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d102      	bne.n	8008f56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
 8008f54:	e001      	b.n	8008f5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f56:	f7f7 ffe9 	bl	8000f2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f60:	7bfa      	ldrb	r2, [r7, #15]
 8008f62:	4611      	mov	r1, r2
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe fcf6 	bl	8007956 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fc9e 	bl	80078b2 <USBD_LL_Reset>
}
 8008f76:	bf00      	nop
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fcf1 	bl	8007976 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	6812      	ldr	r2, [r2, #0]
 8008fa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fa6:	f043 0301 	orr.w	r3, r3, #1
 8008faa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fb4:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <HAL_PCD_SuspendCallback+0x48>)
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	4a03      	ldr	r2, [pc, #12]	; (8008fc8 <HAL_PCD_SuspendCallback+0x48>)
 8008fba:	f043 0306 	orr.w	r3, r3, #6
 8008fbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	e000ed00 	.word	0xe000ed00

08008fcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fe fce1 	bl	80079a2 <USBD_LL_Resume>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ffa:	78fa      	ldrb	r2, [r7, #3]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fd39 	bl	8007a76 <USBD_LL_IsoOUTIncomplete>
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	4611      	mov	r1, r2
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fcf5 	bl	8007a12 <USBD_LL_IsoINIncomplete>
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe fd4b 	bl	8007ada <USBD_LL_DevConnected>
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fd48 	bl	8007af0 <USBD_LL_DevDisconnected>
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d13c      	bne.n	80090f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009078:	4a20      	ldr	r2, [pc, #128]	; (80090fc <USBD_LL_Init+0x94>)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a1e      	ldr	r2, [pc, #120]	; (80090fc <USBD_LL_Init+0x94>)
 8009084:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009088:	4b1c      	ldr	r3, [pc, #112]	; (80090fc <USBD_LL_Init+0x94>)
 800908a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800908e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009090:	4b1a      	ldr	r3, [pc, #104]	; (80090fc <USBD_LL_Init+0x94>)
 8009092:	2204      	movs	r2, #4
 8009094:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009096:	4b19      	ldr	r3, [pc, #100]	; (80090fc <USBD_LL_Init+0x94>)
 8009098:	2202      	movs	r2, #2
 800909a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800909c:	4b17      	ldr	r3, [pc, #92]	; (80090fc <USBD_LL_Init+0x94>)
 800909e:	2200      	movs	r2, #0
 80090a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80090a2:	4b16      	ldr	r3, [pc, #88]	; (80090fc <USBD_LL_Init+0x94>)
 80090a4:	2202      	movs	r2, #2
 80090a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090a8:	4b14      	ldr	r3, [pc, #80]	; (80090fc <USBD_LL_Init+0x94>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090ae:	4b13      	ldr	r3, [pc, #76]	; (80090fc <USBD_LL_Init+0x94>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090b4:	4b11      	ldr	r3, [pc, #68]	; (80090fc <USBD_LL_Init+0x94>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80090ba:	4b10      	ldr	r3, [pc, #64]	; (80090fc <USBD_LL_Init+0x94>)
 80090bc:	2200      	movs	r2, #0
 80090be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090c0:	4b0e      	ldr	r3, [pc, #56]	; (80090fc <USBD_LL_Init+0x94>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090c6:	480d      	ldr	r0, [pc, #52]	; (80090fc <USBD_LL_Init+0x94>)
 80090c8:	f7f9 f847 	bl	800215a <HAL_PCD_Init>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090d2:	f7f7 ff2b 	bl	8000f2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090d6:	2180      	movs	r1, #128	; 0x80
 80090d8:	4808      	ldr	r0, [pc, #32]	; (80090fc <USBD_LL_Init+0x94>)
 80090da:	f7fa fa9e 	bl	800361a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80090de:	2240      	movs	r2, #64	; 0x40
 80090e0:	2100      	movs	r1, #0
 80090e2:	4806      	ldr	r0, [pc, #24]	; (80090fc <USBD_LL_Init+0x94>)
 80090e4:	f7fa fa52 	bl	800358c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80090e8:	2280      	movs	r2, #128	; 0x80
 80090ea:	2101      	movs	r1, #1
 80090ec:	4803      	ldr	r0, [pc, #12]	; (80090fc <USBD_LL_Init+0x94>)
 80090ee:	f7fa fa4d 	bl	800358c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20001738 	.word	0x20001738

08009100 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009116:	4618      	mov	r0, r3
 8009118:	f7f9 f93c 	bl	8002394 <HAL_PCD_Start>
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f942 	bl	80093ac <USBD_Get_USB_Status>
 8009128:	4603      	mov	r3, r0
 800912a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800912c:	7bbb      	ldrb	r3, [r7, #14]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	4608      	mov	r0, r1
 8009140:	4611      	mov	r1, r2
 8009142:	461a      	mov	r2, r3
 8009144:	4603      	mov	r3, r0
 8009146:	70fb      	strb	r3, [r7, #3]
 8009148:	460b      	mov	r3, r1
 800914a:	70bb      	strb	r3, [r7, #2]
 800914c:	4613      	mov	r3, r2
 800914e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009150:	2300      	movs	r3, #0
 8009152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800915e:	78bb      	ldrb	r3, [r7, #2]
 8009160:	883a      	ldrh	r2, [r7, #0]
 8009162:	78f9      	ldrb	r1, [r7, #3]
 8009164:	f7f9 fe0d 	bl	8002d82 <HAL_PCD_EP_Open>
 8009168:	4603      	mov	r3, r0
 800916a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	4618      	mov	r0, r3
 8009170:	f000 f91c 	bl	80093ac <USBD_Get_USB_Status>
 8009174:	4603      	mov	r3, r0
 8009176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009178:	7bbb      	ldrb	r3, [r7, #14]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800919c:	78fa      	ldrb	r2, [r7, #3]
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7f9 fe56 	bl	8002e52 <HAL_PCD_EP_Close>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 f8fd 	bl	80093ac <USBD_Get_USB_Status>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	4611      	mov	r1, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f7f9 ff2e 	bl	8003040 <HAL_PCD_EP_SetStall>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 f8de 	bl	80093ac <USBD_Get_USB_Status>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	460b      	mov	r3, r1
 8009208:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	4611      	mov	r1, r2
 800921c:	4618      	mov	r0, r3
 800921e:	f7f9 ff73 	bl	8003108 <HAL_PCD_EP_ClrStall>
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f8bf 	bl	80093ac <USBD_Get_USB_Status>
 800922e:	4603      	mov	r3, r0
 8009230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009232:	7bbb      	ldrb	r3, [r7, #14]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800924e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009254:	2b00      	cmp	r3, #0
 8009256:	da0b      	bge.n	8009270 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	4613      	mov	r3, r2
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	4413      	add	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	440b      	add	r3, r1
 800926a:	333e      	adds	r3, #62	; 0x3e
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	e00b      	b.n	8009288 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	4613      	mov	r3, r2
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	440b      	add	r3, r1
 8009282:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009286:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009288:	4618      	mov	r0, r3
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	4611      	mov	r1, r2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f9 fd40 	bl	8002d38 <HAL_PCD_SetAddress>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 f874 	bl	80093ac <USBD_Get_USB_Status>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b086      	sub	sp, #24
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	603b      	str	r3, [r7, #0]
 80092de:	460b      	mov	r3, r1
 80092e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092f0:	7af9      	ldrb	r1, [r7, #11]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	f7f9 fe59 	bl	8002fac <HAL_PCD_EP_Transmit>
 80092fa:	4603      	mov	r3, r0
 80092fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092fe:	7dfb      	ldrb	r3, [r7, #23]
 8009300:	4618      	mov	r0, r3
 8009302:	f000 f853 	bl	80093ac <USBD_Get_USB_Status>
 8009306:	4603      	mov	r3, r0
 8009308:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800930a:	7dbb      	ldrb	r3, [r7, #22]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	607a      	str	r2, [r7, #4]
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	460b      	mov	r3, r1
 8009322:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009332:	7af9      	ldrb	r1, [r7, #11]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	f7f9 fdd5 	bl	8002ee6 <HAL_PCD_EP_Receive>
 800933c:	4603      	mov	r3, r0
 800933e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 f832 	bl	80093ac <USBD_Get_USB_Status>
 8009348:	4603      	mov	r3, r0
 800934a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800934c:	7dbb      	ldrb	r3, [r7, #22]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	460b      	mov	r3, r1
 8009360:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009368:	78fa      	ldrb	r2, [r7, #3]
 800936a:	4611      	mov	r1, r2
 800936c:	4618      	mov	r0, r3
 800936e:	f7f9 fe05 	bl	8002f7c <HAL_PCD_EP_GetRxCount>
 8009372:	4603      	mov	r3, r0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009384:	4b03      	ldr	r3, [pc, #12]	; (8009394 <USBD_static_malloc+0x18>)
}
 8009386:	4618      	mov	r0, r3
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	20001c44 	.word	0x20001c44

08009398 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]

}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093ba:	79fb      	ldrb	r3, [r7, #7]
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d817      	bhi.n	80093f0 <USBD_Get_USB_Status+0x44>
 80093c0:	a201      	add	r2, pc, #4	; (adr r2, 80093c8 <USBD_Get_USB_Status+0x1c>)
 80093c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c6:	bf00      	nop
 80093c8:	080093d9 	.word	0x080093d9
 80093cc:	080093df 	.word	0x080093df
 80093d0:	080093e5 	.word	0x080093e5
 80093d4:	080093eb 	.word	0x080093eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
    break;
 80093dc:	e00b      	b.n	80093f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093de:	2303      	movs	r3, #3
 80093e0:	73fb      	strb	r3, [r7, #15]
    break;
 80093e2:	e008      	b.n	80093f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]
    break;
 80093e8:	e005      	b.n	80093f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093ea:	2303      	movs	r3, #3
 80093ec:	73fb      	strb	r3, [r7, #15]
    break;
 80093ee:	e002      	b.n	80093f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093f0:	2303      	movs	r3, #3
 80093f2:	73fb      	strb	r3, [r7, #15]
    break;
 80093f4:	bf00      	nop
  }
  return usb_status;
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <__libc_init_array>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	4d0d      	ldr	r5, [pc, #52]	; (800943c <__libc_init_array+0x38>)
 8009408:	4c0d      	ldr	r4, [pc, #52]	; (8009440 <__libc_init_array+0x3c>)
 800940a:	1b64      	subs	r4, r4, r5
 800940c:	10a4      	asrs	r4, r4, #2
 800940e:	2600      	movs	r6, #0
 8009410:	42a6      	cmp	r6, r4
 8009412:	d109      	bne.n	8009428 <__libc_init_array+0x24>
 8009414:	4d0b      	ldr	r5, [pc, #44]	; (8009444 <__libc_init_array+0x40>)
 8009416:	4c0c      	ldr	r4, [pc, #48]	; (8009448 <__libc_init_array+0x44>)
 8009418:	f000 f82e 	bl	8009478 <_init>
 800941c:	1b64      	subs	r4, r4, r5
 800941e:	10a4      	asrs	r4, r4, #2
 8009420:	2600      	movs	r6, #0
 8009422:	42a6      	cmp	r6, r4
 8009424:	d105      	bne.n	8009432 <__libc_init_array+0x2e>
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	f855 3b04 	ldr.w	r3, [r5], #4
 800942c:	4798      	blx	r3
 800942e:	3601      	adds	r6, #1
 8009430:	e7ee      	b.n	8009410 <__libc_init_array+0xc>
 8009432:	f855 3b04 	ldr.w	r3, [r5], #4
 8009436:	4798      	blx	r3
 8009438:	3601      	adds	r6, #1
 800943a:	e7f2      	b.n	8009422 <__libc_init_array+0x1e>
 800943c:	0800950c 	.word	0x0800950c
 8009440:	0800950c 	.word	0x0800950c
 8009444:	0800950c 	.word	0x0800950c
 8009448:	08009510 	.word	0x08009510

0800944c <memcpy>:
 800944c:	440a      	add	r2, r1
 800944e:	4291      	cmp	r1, r2
 8009450:	f100 33ff 	add.w	r3, r0, #4294967295
 8009454:	d100      	bne.n	8009458 <memcpy+0xc>
 8009456:	4770      	bx	lr
 8009458:	b510      	push	{r4, lr}
 800945a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800945e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009462:	4291      	cmp	r1, r2
 8009464:	d1f9      	bne.n	800945a <memcpy+0xe>
 8009466:	bd10      	pop	{r4, pc}

08009468 <memset>:
 8009468:	4402      	add	r2, r0
 800946a:	4603      	mov	r3, r0
 800946c:	4293      	cmp	r3, r2
 800946e:	d100      	bne.n	8009472 <memset+0xa>
 8009470:	4770      	bx	lr
 8009472:	f803 1b01 	strb.w	r1, [r3], #1
 8009476:	e7f9      	b.n	800946c <memset+0x4>

08009478 <_init>:
 8009478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947a:	bf00      	nop
 800947c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947e:	bc08      	pop	{r3}
 8009480:	469e      	mov	lr, r3
 8009482:	4770      	bx	lr

08009484 <_fini>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	bf00      	nop
 8009488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948a:	bc08      	pop	{r3}
 800948c:	469e      	mov	lr, r3
 800948e:	4770      	bx	lr
