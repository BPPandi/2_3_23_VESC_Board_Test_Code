
2_3_23_VESC_Board_Test_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a14c  0800a14c  0001a14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a278  0800a278  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  0800a278  0800a278  0001a278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a280  0800a280  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a280  0800a280  0001a280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a284  0800a284  0001a284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  0800a288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020760  2**0
                  CONTENTS
 10 .bss          00001da0  20000760  20000760  00020760  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002500  20002500  00020760  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151e0  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326f  00000000  00000000  00035970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00038be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e0  00000000  00000000  00039e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023933  00000000  00000000  0003af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165b3  00000000  00000000  0005e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec3a  00000000  00000000  00074dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143a38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000500c  00000000  00000000  00143a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000760 	.word	0x20000760
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a134 	.word	0x0800a134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000764 	.word	0x20000764
 80001cc:	0800a134 	.word	0x0800a134

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ledBlink>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledBlink()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	for (int ledCount=0;ledCount<6;ledCount++)
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e00a      	b.n	80005a6 <ledBlink+0x22>
	{
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin);
 8000590:	2103      	movs	r1, #3
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <ledBlink+0x3c>)
 8000594:	f001 ffbf 	bl	8002516 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f001 f8d0 	bl	8001740 <HAL_Delay>
	for (int ledCount=0;ledCount<6;ledCount++)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	ddf1      	ble.n	8000590 <ledBlink+0xc>
	}
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2103      	movs	r1, #3
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <ledBlink+0x3c>)
 80005b2:	f001 ff97 	bl	80024e4 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020400 	.word	0x40020400

080005c4 <USBTest>:

void USBTest()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	char *data = "Hello ST MicroController\r\n";
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <USBTest+0x2c>)
 80005cc:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS((uint8_t *)data, strlen(data));
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff fdfe 	bl	80001d0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f008 fcae 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f001 f8ac 	bl	8001740 <HAL_Delay>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	0800a14c 	.word	0x0800a14c

080005f4 <DRV8301_Enable>:
void DRV8301_Enable()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2120      	movs	r1, #32
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <DRV8301_Enable+0x14>)
 80005fe:	f001 ff71 	bl	80024e4 <HAL_GPIO_WritePin>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020400 	.word	0x40020400

0800060c <DRV8301_Disable>:
void DRV8301_Disable()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <DRV8301_Disable+0x14>)
 8000616:	f001 ff65 	bl	80024e4 <HAL_GPIO_WritePin>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020400 	.word	0x40020400

08000624 <DRV8301_NormalPWM>:
void DRV8301_NormalPWM()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 51;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 800062a:	2233      	movs	r2, #51	; 0x33
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4814      	ldr	r0, [pc, #80]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000632:	f003 ff49 	bl	80044c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000636:	2100      	movs	r1, #0
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800063a:	f004 fde1 	bl	8005200 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f001 f87e 	bl	8001740 <HAL_Delay>
	TIM1->CCR2 = 51;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 8000646:	2233      	movs	r2, #51	; 0x33
 8000648:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800064a:	2104      	movs	r1, #4
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800064e:	f003 ff3b 	bl	80044c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000652:	2104      	movs	r1, #4
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000656:	f004 fdd3 	bl	8005200 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f001 f870 	bl	8001740 <HAL_Delay>
	TIM1->CCR3 = 51;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 8000662:	2233      	movs	r2, #51	; 0x33
 8000664:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000666:	2108      	movs	r1, #8
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800066a:	f003 ff2d 	bl	80044c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800066e:	2108      	movs	r1, #8
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000672:	f004 fdc5 	bl	8005200 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f001 f862 	bl	8001740 <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010000 	.word	0x40010000
 8000684:	200007c8 	.word	0x200007c8

08000688 <delay_us>:
void delay_us (uint16_t us)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <delay_us+0x30>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 800069a:	bf00      	nop
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <delay_us+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3f9      	bcc.n	800069c <delay_us+0x14>
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000810 	.word	0x20000810

080006bc <DRV8301_CommutationPWM>:
void DRV8301_CommutationPWM()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	for(k=0;k<73;k++)
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
 80006c6:	e03f      	b.n	8000748 <DRV8301_CommutationPWM+0x8c>
	{
		PhaseA = PhaseA +1;
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006d2:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = PhaseA_wave[PhaseA];
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <DRV8301_CommutationPWM+0xb4>)
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <DRV8301_CommutationPWM+0xb8>)
 80006de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006e2:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006e4:	2100      	movs	r1, #0
 80006e6:	4824      	ldr	r0, [pc, #144]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 80006e8:	f003 feee 	bl	80044c8 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006ec:	2100      	movs	r1, #0
 80006ee:	4822      	ldr	r0, [pc, #136]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 80006f0:	f004 fd86 	bl	8005200 <HAL_TIMEx_PWMN_Start>
		TIM1->CCR2 = PhaseB_wave[PhaseA];
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <DRV8301_CommutationPWM+0xb4>)
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <DRV8301_CommutationPWM+0xc0>)
 80006fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000702:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000704:	2104      	movs	r1, #4
 8000706:	481c      	ldr	r0, [pc, #112]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000708:	f003 fede 	bl	80044c8 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000710:	f004 fd76 	bl	8005200 <HAL_TIMEx_PWMN_Start>
		TIM1->CCR3 = PhaseC_wave[PhaseA];
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	4a15      	ldr	r2, [pc, #84]	; (8000770 <DRV8301_CommutationPWM+0xb4>)
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <DRV8301_CommutationPWM+0xc4>)
 800071e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000722:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000724:	2108      	movs	r1, #8
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000728:	f003 fece 	bl	80044c8 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800072c:	2108      	movs	r1, #8
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000730:	f004 fd66 	bl	8005200 <HAL_TIMEx_PWMN_Start>
		delay_us(330);
 8000734:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8000738:	f7ff ffa6 	bl	8000688 <delay_us>
	for(k=0;k<73;k++)
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 8000746:	801a      	strh	r2, [r3, #0]
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b48      	cmp	r3, #72	; 0x48
 800074e:	d9bb      	bls.n	80006c8 <DRV8301_CommutationPWM+0xc>
	}
	if(k>=73)
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	2b48      	cmp	r3, #72	; 0x48
 8000756:	d905      	bls.n	8000764 <DRV8301_CommutationPWM+0xa8>
	{
		PhaseA=0;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 800075a:	2200      	movs	r2, #0
 800075c:	801a      	strh	r2, [r3, #0]
		k=0;
 800075e:	4b02      	ldr	r3, [pc, #8]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
	}
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000077e 	.word	0x2000077e
 800076c:	2000077c 	.word	0x2000077c
 8000770:	40010000 	.word	0x40010000
 8000774:	20000000 	.word	0x20000000
 8000778:	200007c8 	.word	0x200007c8
 800077c:	20000200 	.word	0x20000200
 8000780:	20000400 	.word	0x20000400

08000784 <VSENS_1>:
void VSENS_1()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_0;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <VSENS_1+0x2c>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <VSENS_1+0x2c>)
 8000790:	2201      	movs	r2, #1
 8000792:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <VSENS_1+0x2c>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	4905      	ldr	r1, [pc, #20]	; (80007b0 <VSENS_1+0x2c>)
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <VSENS_1+0x30>)
 800079e:	f001 f9d5 	bl	8001b4c <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <VSENS_1+0x28>
	{
	Error_Handler();
 80007a8:	f000 fd82 	bl	80012b0 <Error_Handler>
	}
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000858 	.word	0x20000858
 80007b4:	20000780 	.word	0x20000780

080007b8 <VSENS_2>:

void VSENS_2()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_1;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <VSENS_2+0x28>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 2;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <VSENS_2+0x28>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	4905      	ldr	r1, [pc, #20]	; (80007e0 <VSENS_2+0x28>)
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <VSENS_2+0x2c>)
 80007cc:	f001 f9be 	bl	8001b4c <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <VSENS_2+0x22>
	{
	Error_Handler();
 80007d6:	f000 fd6b 	bl	80012b0 <Error_Handler>
	}
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000858 	.word	0x20000858
 80007e4:	20000780 	.word	0x20000780

080007e8 <VSENS_3>:
void VSENS_3()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_2;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <VSENS_3+0x28>)
 80007ee:	2202      	movs	r2, #2
 80007f0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 3;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <VSENS_3+0x28>)
 80007f4:	2203      	movs	r2, #3
 80007f6:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f8:	4905      	ldr	r1, [pc, #20]	; (8000810 <VSENS_3+0x28>)
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <VSENS_3+0x2c>)
 80007fc:	f001 f9a6 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <VSENS_3+0x22>
	{
	Error_Handler();
 8000806:	f000 fd53 	bl	80012b0 <Error_Handler>
	}
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000858 	.word	0x20000858
 8000814:	20000780 	.word	0x20000780

08000818 <TEMP_NTC>:
void TEMP_NTC()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <TEMP_NTC+0x28>)
 800081e:	2203      	movs	r2, #3
 8000820:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 4;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <TEMP_NTC+0x28>)
 8000824:	2204      	movs	r2, #4
 8000826:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000828:	4905      	ldr	r1, [pc, #20]	; (8000840 <TEMP_NTC+0x28>)
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <TEMP_NTC+0x2c>)
 800082c:	f001 f98e 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <TEMP_NTC+0x22>
	{
	Error_Handler();
 8000836:	f000 fd3b 	bl	80012b0 <Error_Handler>
	}
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000858 	.word	0x20000858
 8000844:	20000780 	.word	0x20000780

08000848 <ADC_EXT1>:
void ADC_EXT1()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_5;
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <ADC_EXT1+0x28>)
 800084e:	2205      	movs	r2, #5
 8000850:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 5;
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <ADC_EXT1+0x28>)
 8000854:	2205      	movs	r2, #5
 8000856:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000858:	4905      	ldr	r1, [pc, #20]	; (8000870 <ADC_EXT1+0x28>)
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <ADC_EXT1+0x2c>)
 800085c:	f001 f976 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <ADC_EXT1+0x22>
	{
	Error_Handler();
 8000866:	f000 fd23 	bl	80012b0 <Error_Handler>
	}
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000858 	.word	0x20000858
 8000874:	20000780 	.word	0x20000780

08000878 <ADC_EXT2>:
void ADC_EXT2()
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_6;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <ADC_EXT2+0x28>)
 800087e:	2206      	movs	r2, #6
 8000880:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 6;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ADC_EXT2+0x28>)
 8000884:	2206      	movs	r2, #6
 8000886:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000888:	4905      	ldr	r1, [pc, #20]	; (80008a0 <ADC_EXT2+0x28>)
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <ADC_EXT2+0x2c>)
 800088c:	f001 f95e 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <ADC_EXT2+0x22>
	{
	Error_Handler();
 8000896:	f000 fd0b 	bl	80012b0 <Error_Handler>
	}
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000858 	.word	0x20000858
 80008a4:	20000780 	.word	0x20000780

080008a8 <CURREN_1>:
void CURREN_1()
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_10;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <CURREN_1+0x28>)
 80008ae:	220a      	movs	r2, #10
 80008b0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 7;
 80008b2:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <CURREN_1+0x28>)
 80008b4:	2207      	movs	r2, #7
 80008b6:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	4905      	ldr	r1, [pc, #20]	; (80008d0 <CURREN_1+0x28>)
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <CURREN_1+0x2c>)
 80008bc:	f001 f946 	bl	8001b4c <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <CURREN_1+0x22>
	{
	Error_Handler();
 80008c6:	f000 fcf3 	bl	80012b0 <Error_Handler>
	}
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000858 	.word	0x20000858
 80008d4:	20000780 	.word	0x20000780

080008d8 <CURREN_2>:
void CURREN_2()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_11;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <CURREN_2+0x28>)
 80008de:	220b      	movs	r2, #11
 80008e0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 8;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <CURREN_2+0x28>)
 80008e4:	2208      	movs	r2, #8
 80008e6:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	4905      	ldr	r1, [pc, #20]	; (8000900 <CURREN_2+0x28>)
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <CURREN_2+0x2c>)
 80008ec:	f001 f92e 	bl	8001b4c <HAL_ADC_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <CURREN_2+0x22>
	{
	Error_Handler();
 80008f6:	f000 fcdb 	bl	80012b0 <Error_Handler>
	}
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000858 	.word	0x20000858
 8000904:	20000780 	.word	0x20000780

08000908 <CURREN_3>:
void CURREN_3()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_12;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <CURREN_3+0x28>)
 800090e:	220c      	movs	r2, #12
 8000910:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 9;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <CURREN_3+0x28>)
 8000914:	2209      	movs	r2, #9
 8000916:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000918:	4905      	ldr	r1, [pc, #20]	; (8000930 <CURREN_3+0x28>)
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <CURREN_3+0x2c>)
 800091c:	f001 f916 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <CURREN_3+0x22>
	{
	Error_Handler();
 8000926:	f000 fcc3 	bl	80012b0 <Error_Handler>
	}
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000858 	.word	0x20000858
 8000934:	20000780 	.word	0x20000780

08000938 <TEMP_MOTOR>:
void TEMP_MOTOR()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_14;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <TEMP_MOTOR+0x28>)
 800093e:	220e      	movs	r2, #14
 8000940:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 10;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <TEMP_MOTOR+0x28>)
 8000944:	220a      	movs	r2, #10
 8000946:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	4905      	ldr	r1, [pc, #20]	; (8000960 <TEMP_MOTOR+0x28>)
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <TEMP_MOTOR+0x2c>)
 800094c:	f001 f8fe 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <TEMP_MOTOR+0x22>
	{
	Error_Handler();
 8000956:	f000 fcab 	bl	80012b0 <Error_Handler>
	}
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000858 	.word	0x20000858
 8000964:	20000780 	.word	0x20000780

08000968 <CAAF>:
void CAAF()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	VSENS_1();
 800096c:	f7ff ff0a 	bl	8000784 <VSENS_1>
	HAL_ADC_Start(&hadc1);
 8000970:	48be      	ldr	r0, [pc, #760]	; (8000c6c <CAAF+0x304>)
 8000972:	f000 ff4d 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000976:	21c8      	movs	r1, #200	; 0xc8
 8000978:	48bc      	ldr	r0, [pc, #752]	; (8000c6c <CAAF+0x304>)
 800097a:	f001 f84e 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 800097e:	48bb      	ldr	r0, [pc, #748]	; (8000c6c <CAAF+0x304>)
 8000980:	f001 f8d6 	bl	8001b30 <HAL_ADC_GetValue>
 8000984:	4603      	mov	r3, r0
 8000986:	b29a      	uxth	r2, r3
 8000988:	4bb9      	ldr	r3, [pc, #740]	; (8000c70 <CAAF+0x308>)
 800098a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800098c:	48b7      	ldr	r0, [pc, #732]	; (8000c6c <CAAF+0x304>)
 800098e:	f001 f811 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[0]);
 8000992:	4bb7      	ldr	r3, [pc, #732]	; (8000c70 <CAAF+0x308>)
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	49b6      	ldr	r1, [pc, #728]	; (8000c74 <CAAF+0x30c>)
 800099a:	48b7      	ldr	r0, [pc, #732]	; (8000c78 <CAAF+0x310>)
 800099c:	f008 ff6a 	bl	8009874 <siprintf>
	CDC_Transmit_FS("VSENS_1 = ", 10);
 80009a0:	210a      	movs	r1, #10
 80009a2:	48b6      	ldr	r0, [pc, #728]	; (8000c7c <CAAF+0x314>)
 80009a4:	f008 faca 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 80009a8:	2064      	movs	r0, #100	; 0x64
 80009aa:	f000 fec9 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 80009ae:	2108      	movs	r1, #8
 80009b0:	48b1      	ldr	r0, [pc, #708]	; (8000c78 <CAAF+0x310>)
 80009b2:	f008 fac3 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 80009b6:	2064      	movs	r0, #100	; 0x64
 80009b8:	f000 fec2 	bl	8001740 <HAL_Delay>


	VSENS_2();
 80009bc:	f7ff fefc 	bl	80007b8 <VSENS_2>
	HAL_ADC_Start(&hadc1);
 80009c0:	48aa      	ldr	r0, [pc, #680]	; (8000c6c <CAAF+0x304>)
 80009c2:	f000 ff25 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 80009c6:	21c8      	movs	r1, #200	; 0xc8
 80009c8:	48a8      	ldr	r0, [pc, #672]	; (8000c6c <CAAF+0x304>)
 80009ca:	f001 f826 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 80009ce:	48a7      	ldr	r0, [pc, #668]	; (8000c6c <CAAF+0x304>)
 80009d0:	f001 f8ae 	bl	8001b30 <HAL_ADC_GetValue>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4ba5      	ldr	r3, [pc, #660]	; (8000c70 <CAAF+0x308>)
 80009da:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 80009dc:	48a3      	ldr	r0, [pc, #652]	; (8000c6c <CAAF+0x304>)
 80009de:	f000 ffe9 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[1]);
 80009e2:	4ba3      	ldr	r3, [pc, #652]	; (8000c70 <CAAF+0x308>)
 80009e4:	885b      	ldrh	r3, [r3, #2]
 80009e6:	461a      	mov	r2, r3
 80009e8:	49a2      	ldr	r1, [pc, #648]	; (8000c74 <CAAF+0x30c>)
 80009ea:	48a3      	ldr	r0, [pc, #652]	; (8000c78 <CAAF+0x310>)
 80009ec:	f008 ff42 	bl	8009874 <siprintf>
	CDC_Transmit_FS("VSENS_2 = ", 10);
 80009f0:	210a      	movs	r1, #10
 80009f2:	48a3      	ldr	r0, [pc, #652]	; (8000c80 <CAAF+0x318>)
 80009f4:	f008 faa2 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f000 fea1 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 80009fe:	2108      	movs	r1, #8
 8000a00:	489d      	ldr	r0, [pc, #628]	; (8000c78 <CAAF+0x310>)
 8000a02:	f008 fa9b 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a06:	2064      	movs	r0, #100	; 0x64
 8000a08:	f000 fe9a 	bl	8001740 <HAL_Delay>

	VSENS_3();
 8000a0c:	f7ff feec 	bl	80007e8 <VSENS_3>
	HAL_ADC_Start(&hadc1);
 8000a10:	4896      	ldr	r0, [pc, #600]	; (8000c6c <CAAF+0x304>)
 8000a12:	f000 fefd 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000a16:	21c8      	movs	r1, #200	; 0xc8
 8000a18:	4894      	ldr	r0, [pc, #592]	; (8000c6c <CAAF+0x304>)
 8000a1a:	f000 fffe 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8000a1e:	4893      	ldr	r0, [pc, #588]	; (8000c6c <CAAF+0x304>)
 8000a20:	f001 f886 	bl	8001b30 <HAL_ADC_GetValue>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b91      	ldr	r3, [pc, #580]	; (8000c70 <CAAF+0x308>)
 8000a2a:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 8000a2c:	488f      	ldr	r0, [pc, #572]	; (8000c6c <CAAF+0x304>)
 8000a2e:	f000 ffc1 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[2]);
 8000a32:	4b8f      	ldr	r3, [pc, #572]	; (8000c70 <CAAF+0x308>)
 8000a34:	889b      	ldrh	r3, [r3, #4]
 8000a36:	461a      	mov	r2, r3
 8000a38:	498e      	ldr	r1, [pc, #568]	; (8000c74 <CAAF+0x30c>)
 8000a3a:	488f      	ldr	r0, [pc, #572]	; (8000c78 <CAAF+0x310>)
 8000a3c:	f008 ff1a 	bl	8009874 <siprintf>
	CDC_Transmit_FS("VSENS_3 = ", 10);
 8000a40:	210a      	movs	r1, #10
 8000a42:	4890      	ldr	r0, [pc, #576]	; (8000c84 <CAAF+0x31c>)
 8000a44:	f008 fa7a 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a48:	2064      	movs	r0, #100	; 0x64
 8000a4a:	f000 fe79 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000a4e:	2108      	movs	r1, #8
 8000a50:	4889      	ldr	r0, [pc, #548]	; (8000c78 <CAAF+0x310>)
 8000a52:	f008 fa73 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a56:	2064      	movs	r0, #100	; 0x64
 8000a58:	f000 fe72 	bl	8001740 <HAL_Delay>

	TEMP_NTC();
 8000a5c:	f7ff fedc 	bl	8000818 <TEMP_NTC>
	HAL_ADC_Start(&hadc1);
 8000a60:	4882      	ldr	r0, [pc, #520]	; (8000c6c <CAAF+0x304>)
 8000a62:	f000 fed5 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000a66:	21c8      	movs	r1, #200	; 0xc8
 8000a68:	4880      	ldr	r0, [pc, #512]	; (8000c6c <CAAF+0x304>)
 8000a6a:	f000 ffd6 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[3] = HAL_ADC_GetValue(&hadc1);
 8000a6e:	487f      	ldr	r0, [pc, #508]	; (8000c6c <CAAF+0x304>)
 8000a70:	f001 f85e 	bl	8001b30 <HAL_ADC_GetValue>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b7d      	ldr	r3, [pc, #500]	; (8000c70 <CAAF+0x308>)
 8000a7a:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(&hadc1);
 8000a7c:	487b      	ldr	r0, [pc, #492]	; (8000c6c <CAAF+0x304>)
 8000a7e:	f000 ff99 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[3]);
 8000a82:	4b7b      	ldr	r3, [pc, #492]	; (8000c70 <CAAF+0x308>)
 8000a84:	88db      	ldrh	r3, [r3, #6]
 8000a86:	461a      	mov	r2, r3
 8000a88:	497a      	ldr	r1, [pc, #488]	; (8000c74 <CAAF+0x30c>)
 8000a8a:	487b      	ldr	r0, [pc, #492]	; (8000c78 <CAAF+0x310>)
 8000a8c:	f008 fef2 	bl	8009874 <siprintf>
	CDC_Transmit_FS("TEMP_NTC = ",11);
 8000a90:	210b      	movs	r1, #11
 8000a92:	487d      	ldr	r0, [pc, #500]	; (8000c88 <CAAF+0x320>)
 8000a94:	f008 fa52 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a98:	2064      	movs	r0, #100	; 0x64
 8000a9a:	f000 fe51 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	4875      	ldr	r0, [pc, #468]	; (8000c78 <CAAF+0x310>)
 8000aa2:	f008 fa4b 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000aa6:	2064      	movs	r0, #100	; 0x64
 8000aa8:	f000 fe4a 	bl	8001740 <HAL_Delay>

	ADC_EXT1();
 8000aac:	f7ff fecc 	bl	8000848 <ADC_EXT1>
	HAL_ADC_Start(&hadc1);
 8000ab0:	486e      	ldr	r0, [pc, #440]	; (8000c6c <CAAF+0x304>)
 8000ab2:	f000 fead 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000ab6:	21c8      	movs	r1, #200	; 0xc8
 8000ab8:	486c      	ldr	r0, [pc, #432]	; (8000c6c <CAAF+0x304>)
 8000aba:	f000 ffae 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[4] = HAL_ADC_GetValue(&hadc1);
 8000abe:	486b      	ldr	r0, [pc, #428]	; (8000c6c <CAAF+0x304>)
 8000ac0:	f001 f836 	bl	8001b30 <HAL_ADC_GetValue>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <CAAF+0x308>)
 8000aca:	811a      	strh	r2, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 8000acc:	4867      	ldr	r0, [pc, #412]	; (8000c6c <CAAF+0x304>)
 8000ace:	f000 ff71 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[4]);
 8000ad2:	4b67      	ldr	r3, [pc, #412]	; (8000c70 <CAAF+0x308>)
 8000ad4:	891b      	ldrh	r3, [r3, #8]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4966      	ldr	r1, [pc, #408]	; (8000c74 <CAAF+0x30c>)
 8000ada:	4867      	ldr	r0, [pc, #412]	; (8000c78 <CAAF+0x310>)
 8000adc:	f008 feca 	bl	8009874 <siprintf>
	CDC_Transmit_FS("ADC_EXT1 = ", 11);
 8000ae0:	210b      	movs	r1, #11
 8000ae2:	486a      	ldr	r0, [pc, #424]	; (8000c8c <CAAF+0x324>)
 8000ae4:	f008 fa2a 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000ae8:	2064      	movs	r0, #100	; 0x64
 8000aea:	f000 fe29 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000aee:	2108      	movs	r1, #8
 8000af0:	4861      	ldr	r0, [pc, #388]	; (8000c78 <CAAF+0x310>)
 8000af2:	f008 fa23 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000af6:	2064      	movs	r0, #100	; 0x64
 8000af8:	f000 fe22 	bl	8001740 <HAL_Delay>

	ADC_EXT2();
 8000afc:	f7ff febc 	bl	8000878 <ADC_EXT2>
	HAL_ADC_Start(&hadc1);
 8000b00:	485a      	ldr	r0, [pc, #360]	; (8000c6c <CAAF+0x304>)
 8000b02:	f000 fe85 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000b06:	21c8      	movs	r1, #200	; 0xc8
 8000b08:	4858      	ldr	r0, [pc, #352]	; (8000c6c <CAAF+0x304>)
 8000b0a:	f000 ff86 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[5] = HAL_ADC_GetValue(&hadc1);
 8000b0e:	4857      	ldr	r0, [pc, #348]	; (8000c6c <CAAF+0x304>)
 8000b10:	f001 f80e 	bl	8001b30 <HAL_ADC_GetValue>
 8000b14:	4603      	mov	r3, r0
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b55      	ldr	r3, [pc, #340]	; (8000c70 <CAAF+0x308>)
 8000b1a:	815a      	strh	r2, [r3, #10]
	HAL_ADC_Stop(&hadc1);
 8000b1c:	4853      	ldr	r0, [pc, #332]	; (8000c6c <CAAF+0x304>)
 8000b1e:	f000 ff49 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[5]);
 8000b22:	4b53      	ldr	r3, [pc, #332]	; (8000c70 <CAAF+0x308>)
 8000b24:	895b      	ldrh	r3, [r3, #10]
 8000b26:	461a      	mov	r2, r3
 8000b28:	4952      	ldr	r1, [pc, #328]	; (8000c74 <CAAF+0x30c>)
 8000b2a:	4853      	ldr	r0, [pc, #332]	; (8000c78 <CAAF+0x310>)
 8000b2c:	f008 fea2 	bl	8009874 <siprintf>
	CDC_Transmit_FS("ADC_EXT2 = ", 11);
 8000b30:	210b      	movs	r1, #11
 8000b32:	4857      	ldr	r0, [pc, #348]	; (8000c90 <CAAF+0x328>)
 8000b34:	f008 fa02 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b38:	2064      	movs	r0, #100	; 0x64
 8000b3a:	f000 fe01 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000b3e:	2108      	movs	r1, #8
 8000b40:	484d      	ldr	r0, [pc, #308]	; (8000c78 <CAAF+0x310>)
 8000b42:	f008 f9fb 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b46:	2064      	movs	r0, #100	; 0x64
 8000b48:	f000 fdfa 	bl	8001740 <HAL_Delay>

	CURREN_1();
 8000b4c:	f7ff feac 	bl	80008a8 <CURREN_1>
	HAL_ADC_Start(&hadc1);
 8000b50:	4846      	ldr	r0, [pc, #280]	; (8000c6c <CAAF+0x304>)
 8000b52:	f000 fe5d 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000b56:	21c8      	movs	r1, #200	; 0xc8
 8000b58:	4844      	ldr	r0, [pc, #272]	; (8000c6c <CAAF+0x304>)
 8000b5a:	f000 ff5e 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[6] = HAL_ADC_GetValue(&hadc1);
 8000b5e:	4843      	ldr	r0, [pc, #268]	; (8000c6c <CAAF+0x304>)
 8000b60:	f000 ffe6 	bl	8001b30 <HAL_ADC_GetValue>
 8000b64:	4603      	mov	r3, r0
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <CAAF+0x308>)
 8000b6a:	819a      	strh	r2, [r3, #12]
	HAL_ADC_Stop(&hadc1);
 8000b6c:	483f      	ldr	r0, [pc, #252]	; (8000c6c <CAAF+0x304>)
 8000b6e:	f000 ff21 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[6]);
 8000b72:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <CAAF+0x308>)
 8000b74:	899b      	ldrh	r3, [r3, #12]
 8000b76:	461a      	mov	r2, r3
 8000b78:	493e      	ldr	r1, [pc, #248]	; (8000c74 <CAAF+0x30c>)
 8000b7a:	483f      	ldr	r0, [pc, #252]	; (8000c78 <CAAF+0x310>)
 8000b7c:	f008 fe7a 	bl	8009874 <siprintf>
	CDC_Transmit_FS("CURREN_1 = ", 11);
 8000b80:	210b      	movs	r1, #11
 8000b82:	4844      	ldr	r0, [pc, #272]	; (8000c94 <CAAF+0x32c>)
 8000b84:	f008 f9da 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b88:	2064      	movs	r0, #100	; 0x64
 8000b8a:	f000 fdd9 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000b8e:	2108      	movs	r1, #8
 8000b90:	4839      	ldr	r0, [pc, #228]	; (8000c78 <CAAF+0x310>)
 8000b92:	f008 f9d3 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b96:	2064      	movs	r0, #100	; 0x64
 8000b98:	f000 fdd2 	bl	8001740 <HAL_Delay>

	CURREN_2();
 8000b9c:	f7ff fe9c 	bl	80008d8 <CURREN_2>
	HAL_ADC_Start(&hadc1);
 8000ba0:	4832      	ldr	r0, [pc, #200]	; (8000c6c <CAAF+0x304>)
 8000ba2:	f000 fe35 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000ba6:	21c8      	movs	r1, #200	; 0xc8
 8000ba8:	4830      	ldr	r0, [pc, #192]	; (8000c6c <CAAF+0x304>)
 8000baa:	f000 ff36 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[7] = HAL_ADC_GetValue(&hadc1);
 8000bae:	482f      	ldr	r0, [pc, #188]	; (8000c6c <CAAF+0x304>)
 8000bb0:	f000 ffbe 	bl	8001b30 <HAL_ADC_GetValue>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	; (8000c70 <CAAF+0x308>)
 8000bba:	81da      	strh	r2, [r3, #14]
	HAL_ADC_Stop(&hadc1);
 8000bbc:	482b      	ldr	r0, [pc, #172]	; (8000c6c <CAAF+0x304>)
 8000bbe:	f000 fef9 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[7]);
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <CAAF+0x308>)
 8000bc4:	89db      	ldrh	r3, [r3, #14]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	492a      	ldr	r1, [pc, #168]	; (8000c74 <CAAF+0x30c>)
 8000bca:	482b      	ldr	r0, [pc, #172]	; (8000c78 <CAAF+0x310>)
 8000bcc:	f008 fe52 	bl	8009874 <siprintf>
	CDC_Transmit_FS("CURREN_2 = ", 11);
 8000bd0:	210b      	movs	r1, #11
 8000bd2:	4831      	ldr	r0, [pc, #196]	; (8000c98 <CAAF+0x330>)
 8000bd4:	f008 f9b2 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f000 fdb1 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000bde:	2108      	movs	r1, #8
 8000be0:	4825      	ldr	r0, [pc, #148]	; (8000c78 <CAAF+0x310>)
 8000be2:	f008 f9ab 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000be6:	2064      	movs	r0, #100	; 0x64
 8000be8:	f000 fdaa 	bl	8001740 <HAL_Delay>

	CURREN_3();
 8000bec:	f7ff fe8c 	bl	8000908 <CURREN_3>
	HAL_ADC_Start(&hadc1);
 8000bf0:	481e      	ldr	r0, [pc, #120]	; (8000c6c <CAAF+0x304>)
 8000bf2:	f000 fe0d 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000bf6:	21c8      	movs	r1, #200	; 0xc8
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <CAAF+0x304>)
 8000bfa:	f000 ff0e 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[8] = HAL_ADC_GetValue(&hadc1);
 8000bfe:	481b      	ldr	r0, [pc, #108]	; (8000c6c <CAAF+0x304>)
 8000c00:	f000 ff96 	bl	8001b30 <HAL_ADC_GetValue>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <CAAF+0x308>)
 8000c0a:	821a      	strh	r2, [r3, #16]
	HAL_ADC_Stop(&hadc1);
 8000c0c:	4817      	ldr	r0, [pc, #92]	; (8000c6c <CAAF+0x304>)
 8000c0e:	f000 fed1 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[8]);
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <CAAF+0x308>)
 8000c14:	8a1b      	ldrh	r3, [r3, #16]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4916      	ldr	r1, [pc, #88]	; (8000c74 <CAAF+0x30c>)
 8000c1a:	4817      	ldr	r0, [pc, #92]	; (8000c78 <CAAF+0x310>)
 8000c1c:	f008 fe2a 	bl	8009874 <siprintf>
	CDC_Transmit_FS("CURREN_3 = ", 11);
 8000c20:	210b      	movs	r1, #11
 8000c22:	481e      	ldr	r0, [pc, #120]	; (8000c9c <CAAF+0x334>)
 8000c24:	f008 f98a 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c28:	2064      	movs	r0, #100	; 0x64
 8000c2a:	f000 fd89 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000c2e:	2108      	movs	r1, #8
 8000c30:	4811      	ldr	r0, [pc, #68]	; (8000c78 <CAAF+0x310>)
 8000c32:	f008 f983 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c36:	2064      	movs	r0, #100	; 0x64
 8000c38:	f000 fd82 	bl	8001740 <HAL_Delay>

	TEMP_MOTOR();
 8000c3c:	f7ff fe7c 	bl	8000938 <TEMP_MOTOR>
	HAL_ADC_Start(&hadc1);
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <CAAF+0x304>)
 8000c42:	f000 fde5 	bl	8001810 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000c46:	21c8      	movs	r1, #200	; 0xc8
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <CAAF+0x304>)
 8000c4a:	f000 fee6 	bl	8001a1a <HAL_ADC_PollForConversion>
	ADC_VAL[9] = HAL_ADC_GetValue(&hadc1);
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <CAAF+0x304>)
 8000c50:	f000 ff6e 	bl	8001b30 <HAL_ADC_GetValue>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <CAAF+0x308>)
 8000c5a:	825a      	strh	r2, [r3, #18]
	HAL_ADC_Stop(&hadc1);
 8000c5c:	4803      	ldr	r0, [pc, #12]	; (8000c6c <CAAF+0x304>)
 8000c5e:	f000 fea9 	bl	80019b4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[9]);
 8000c62:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <CAAF+0x308>)
 8000c64:	8a5b      	ldrh	r3, [r3, #18]
 8000c66:	461a      	mov	r2, r3
 8000c68:	e01a      	b.n	8000ca0 <CAAF+0x338>
 8000c6a:	bf00      	nop
 8000c6c:	20000780 	.word	0x20000780
 8000c70:	200008a8 	.word	0x200008a8
 8000c74:	0800a168 	.word	0x0800a168
 8000c78:	200008bc 	.word	0x200008bc
 8000c7c:	0800a170 	.word	0x0800a170
 8000c80:	0800a17c 	.word	0x0800a17c
 8000c84:	0800a188 	.word	0x0800a188
 8000c88:	0800a194 	.word	0x0800a194
 8000c8c:	0800a1a0 	.word	0x0800a1a0
 8000c90:	0800a1ac 	.word	0x0800a1ac
 8000c94:	0800a1b8 	.word	0x0800a1b8
 8000c98:	0800a1c4 	.word	0x0800a1c4
 8000c9c:	0800a1d0 	.word	0x0800a1d0
 8000ca0:	4909      	ldr	r1, [pc, #36]	; (8000cc8 <CAAF+0x360>)
 8000ca2:	480a      	ldr	r0, [pc, #40]	; (8000ccc <CAAF+0x364>)
 8000ca4:	f008 fde6 	bl	8009874 <siprintf>
	CDC_Transmit_FS("TEMP_MOTOR = ", 13);
 8000ca8:	210d      	movs	r1, #13
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <CAAF+0x368>)
 8000cac:	f008 f946 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000cb0:	2064      	movs	r0, #100	; 0x64
 8000cb2:	f000 fd45 	bl	8001740 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <CAAF+0x364>)
 8000cba:	f008 f93f 	bl	8008f3c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000cbe:	2064      	movs	r0, #100	; 0x64
 8000cc0:	f000 fd3e 	bl	8001740 <HAL_Delay>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	0800a168 	.word	0x0800a168
 8000ccc:	200008bc 	.word	0x200008bc
 8000cd0:	0800a1dc 	.word	0x0800a1dc

08000cd4 <IFunction>:
void IFunction()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	if (buffer[0] == '1')
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <IFunction+0x5c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b31      	cmp	r3, #49	; 0x31
 8000cde:	d101      	bne.n	8000ce4 <IFunction+0x10>
	{
		ledBlink();
 8000ce0:	f7ff fc50 	bl	8000584 <ledBlink>
	}
	if (buffer[0] == '2')
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <IFunction+0x5c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b32      	cmp	r3, #50	; 0x32
 8000cea:	d101      	bne.n	8000cf0 <IFunction+0x1c>
	{
		USBTest();
 8000cec:	f7ff fc6a 	bl	80005c4 <USBTest>
	}
	if (buffer[0] == '3')
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <IFunction+0x5c>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b33      	cmp	r3, #51	; 0x33
 8000cf6:	d101      	bne.n	8000cfc <IFunction+0x28>
	{
		CAAF();
 8000cf8:	f7ff fe36 	bl	8000968 <CAAF>
	}
	if (buffer[0] == '4')
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <IFunction+0x5c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b34      	cmp	r3, #52	; 0x34
 8000d02:	d101      	bne.n	8000d08 <IFunction+0x34>
	{
		DRV8301_Enable();
 8000d04:	f7ff fc76 	bl	80005f4 <DRV8301_Enable>
	}
	if (buffer[0] == '5')
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <IFunction+0x5c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b35      	cmp	r3, #53	; 0x35
 8000d0e:	d101      	bne.n	8000d14 <IFunction+0x40>
	{
		DRV8301_Disable();
 8000d10:	f7ff fc7c 	bl	800060c <DRV8301_Disable>
	}
	if (buffer[0] == '6')
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <IFunction+0x5c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b36      	cmp	r3, #54	; 0x36
 8000d1a:	d101      	bne.n	8000d20 <IFunction+0x4c>
	{
		DRV8301_NormalPWM();
 8000d1c:	f7ff fc82 	bl	8000624 <DRV8301_NormalPWM>
	}
	if (buffer[0] == '7')
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <IFunction+0x5c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b37      	cmp	r3, #55	; 0x37
 8000d26:	d101      	bne.n	8000d2c <IFunction+0x58>
	{
		DRV8301_CommutationPWM();
 8000d28:	f7ff fcc8 	bl	80006bc <DRV8301_CommutationPWM>
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000868 	.word	0x20000868

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d38:	f000 fc90 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3c:	f000 f812 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d40:	f000 fa4c 	bl	80011dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d44:	f000 f876 	bl	8000e34 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d48:	f000 f944 	bl	8000fd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d4c:	f000 f9fa 	bl	8001144 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d50:	f008 f82c 	bl	8008dac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <main+0x2c>)
 8000d56:	f003 faf5 	bl	8004344 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  IFunction();
 8000d5a:	f7ff ffbb 	bl	8000cd4 <IFunction>
 8000d5e:	e7fc      	b.n	8000d5a <main+0x26>
 8000d60:	20000810 	.word	0x20000810

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	; 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	2230      	movs	r2, #48	; 0x30
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f008 fd76 	bl	8009864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <SystemClock_Config+0xc8>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <SystemClock_Config+0xc8>)
 8000d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <SystemClock_Config+0xc8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	2300      	movs	r3, #0
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <SystemClock_Config+0xcc>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <SystemClock_Config+0xcc>)
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <SystemClock_Config+0xcc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000dd8:	23c0      	movs	r3, #192	; 0xc0
 8000dda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fe2b 	bl	8003a44 <HAL_RCC_OscConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000df4:	f000 fa5c 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df8:	230f      	movs	r3, #15
 8000dfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f003 f88e 	bl	8003f34 <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e1e:	f000 fa47 	bl	80012b0 <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3750      	adds	r7, #80	; 0x50
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e46:	4b60      	ldr	r3, [pc, #384]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e48:	4a60      	ldr	r2, [pc, #384]	; (8000fcc <MX_ADC1_Init+0x198>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e4c:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e52:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e58:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e5e:	4b5a      	ldr	r3, [pc, #360]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e64:	4b58      	ldr	r3, [pc, #352]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6c:	4b56      	ldr	r3, [pc, #344]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e72:	4b55      	ldr	r3, [pc, #340]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e74:	4a56      	ldr	r2, [pc, #344]	; (8000fd0 <MX_ADC1_Init+0x19c>)
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e78:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e7e:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e84:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8c:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e92:	484d      	ldr	r0, [pc, #308]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000e94:	f000 fc78 	bl	8001788 <HAL_ADC_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f000 fa07 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4845      	ldr	r0, [pc, #276]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000eb4:	f000 fe4a 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ebe:	f000 f9f7 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4619      	mov	r1, r3
 8000ece:	483e      	ldr	r0, [pc, #248]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000ed0:	f000 fe3c 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000eda:	f000 f9e9 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4837      	ldr	r0, [pc, #220]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000eec:	f000 fe2e 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000ef6:	f000 f9db 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000efa:	2303      	movs	r3, #3
 8000efc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000efe:	2304      	movs	r3, #4
 8000f00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4830      	ldr	r0, [pc, #192]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000f08:	f000 fe20 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f12:	f000 f9cd 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f16:	2305      	movs	r3, #5
 8000f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4829      	ldr	r0, [pc, #164]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000f24:	f000 fe12 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f2e:	f000 f9bf 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f32:	2306      	movs	r3, #6
 8000f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000f36:	2306      	movs	r3, #6
 8000f38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4822      	ldr	r0, [pc, #136]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000f40:	f000 fe04 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000f4a:	f000 f9b1 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000f52:	2307      	movs	r3, #7
 8000f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000f5c:	f000 fdf6 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000f66:	f000 f9a3 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f72:	463b      	mov	r3, r7
 8000f74:	4619      	mov	r1, r3
 8000f76:	4814      	ldr	r0, [pc, #80]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000f78:	f000 fde8 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f82:	f000 f995 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f86:	230c      	movs	r3, #12
 8000f88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000f94:	f000 fdda 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000f9e:	f000 f987 	bl	80012b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fa2:	230e      	movs	r3, #14
 8000fa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <MX_ADC1_Init+0x194>)
 8000fb0:	f000 fdcc 	bl	8001b4c <HAL_ADC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000fba:	f000 f979 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000780 	.word	0x20000780
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	0f000001 	.word	0x0f000001

08000fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b096      	sub	sp, #88	; 0x58
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
 8001002:	615a      	str	r2, [r3, #20]
 8001004:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2220      	movs	r2, #32
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f008 fc29 	bl	8009864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001012:	4b4a      	ldr	r3, [pc, #296]	; (800113c <MX_TIM1_Init+0x168>)
 8001014:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <MX_TIM1_Init+0x16c>)
 8001016:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 8001018:	4b48      	ldr	r3, [pc, #288]	; (800113c <MX_TIM1_Init+0x168>)
 800101a:	220d      	movs	r2, #13
 800101c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b47      	ldr	r3, [pc, #284]	; (800113c <MX_TIM1_Init+0x168>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 102;
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <MX_TIM1_Init+0x168>)
 8001026:	2266      	movs	r2, #102	; 0x66
 8001028:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102a:	4b44      	ldr	r3, [pc, #272]	; (800113c <MX_TIM1_Init+0x168>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001030:	4b42      	ldr	r3, [pc, #264]	; (800113c <MX_TIM1_Init+0x168>)
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001036:	4b41      	ldr	r3, [pc, #260]	; (800113c <MX_TIM1_Init+0x168>)
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800103c:	483f      	ldr	r0, [pc, #252]	; (800113c <MX_TIM1_Init+0x168>)
 800103e:	f003 f931 	bl	80042a4 <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001048:	f000 f932 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001050:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001052:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001056:	4619      	mov	r1, r3
 8001058:	4838      	ldr	r0, [pc, #224]	; (800113c <MX_TIM1_Init+0x168>)
 800105a:	f003 fcc7 	bl	80049ec <HAL_TIM_ConfigClockSource>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001064:	f000 f924 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001068:	4834      	ldr	r0, [pc, #208]	; (800113c <MX_TIM1_Init+0x168>)
 800106a:	f003 f9d3 	bl	8004414 <HAL_TIM_PWM_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001074:	f000 f91c 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001080:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001084:	4619      	mov	r1, r3
 8001086:	482d      	ldr	r0, [pc, #180]	; (800113c <MX_TIM1_Init+0x168>)
 8001088:	f004 f974 	bl	8005374 <HAL_TIMEx_MasterConfigSynchronization>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001092:	f000 f90d 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001096:	2360      	movs	r3, #96	; 0x60
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a2:	2300      	movs	r3, #0
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80010ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	481f      	ldr	r0, [pc, #124]	; (800113c <MX_TIM1_Init+0x168>)
 80010be:	f003 fbd3 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010c8:	f000 f8f2 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	2204      	movs	r2, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <MX_TIM1_Init+0x168>)
 80010d6:	f003 fbc7 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010e0:	f000 f8e6 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	2208      	movs	r2, #8
 80010ea:	4619      	mov	r1, r3
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <MX_TIM1_Init+0x168>)
 80010ee:	f003 fbbb 	bl	8004868 <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80010f8:	f000 f8da 	bl	80012b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8001108:	2314      	movs	r3, #20
 800110a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001114:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <MX_TIM1_Init+0x168>)
 8001120:	f004 f9a4 	bl	800546c <HAL_TIMEx_ConfigBreakDeadTime>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800112a:	f000 f8c1 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM1_Init+0x168>)
 8001130:	f000 f988 	bl	8001444 <HAL_TIM_MspPostInit>

}
 8001134:	bf00      	nop
 8001136:	3758      	adds	r7, #88	; 0x58
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200007c8 	.word	0x200007c8
 8001140:	40010000 	.word	0x40010000

08001144 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_TIM2_Init+0x94>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <MX_TIM2_Init+0x94>)
 800116a:	220e      	movs	r2, #14
 800116c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_TIM2_Init+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_TIM2_Init+0x94>)
 8001176:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800117a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_TIM2_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_TIM2_Init+0x94>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <MX_TIM2_Init+0x94>)
 800118a:	f003 f88b 	bl	80042a4 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001194:	f000 f88c 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_TIM2_Init+0x94>)
 80011a6:	f003 fc21 	bl	80049ec <HAL_TIM_ConfigClockSource>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 f87e 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_TIM2_Init+0x94>)
 80011c2:	f004 f8d7 	bl	8005374 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011cc:	f000 f870 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000810 	.word	0x20000810

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <MX_GPIO_Init+0xcc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <MX_GPIO_Init+0xcc>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a24      	ldr	r2, [pc, #144]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_GPIO_Init+0xcc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_GPIO_Init+0xcc>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_GPIO_Init+0xcc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2123      	movs	r1, #35	; 0x23
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <MX_GPIO_Init+0xd0>)
 8001268:	f001 f93c 	bl	80024e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin EN_GATE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin;
 800126c:	2323      	movs	r3, #35	; 0x23
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	480a      	ldr	r0, [pc, #40]	; (80012ac <MX_GPIO_Init+0xd0>)
 8001284:	f000 ff92 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_GPIO_Init+0xd0>)
 800129c:	f000 ff86 	bl	80021ac <HAL_GPIO_Init>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_MspInit+0x4c>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_MspInit+0x4c>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_MspInit+0x4c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800

0800130c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a24      	ldr	r2, [pc, #144]	; (80013bc <HAL_ADC_MspInit+0xb0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d141      	bne.n	80013b2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <HAL_ADC_MspInit+0xb4>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <HAL_ADC_MspInit+0xb4>)
 8001338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <HAL_ADC_MspInit+0xb4>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_ADC_MspInit+0xb4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <HAL_ADC_MspInit+0xb4>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_ADC_MspInit+0xb4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_ADC_MspInit+0xb4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <HAL_ADC_MspInit+0xb4>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_ADC_MspInit+0xb4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = CURREN_1_Pin|CURREN_2_Pin|CURREN_3_Pin|TEMP_MOTOR_Pin;
 8001382:	2317      	movs	r3, #23
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <HAL_ADC_MspInit+0xb8>)
 8001396:	f000 ff09 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VSENS_1_Pin|VSENS_2_Pin|VSENS_3_Pin|TEMP_NTC_Pin
 800139a:	236f      	movs	r3, #111	; 0x6f
 800139c:	617b      	str	r3, [r7, #20]
                          |ADC_EXT1_Pin|ADC_EXT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4806      	ldr	r0, [pc, #24]	; (80013c8 <HAL_ADC_MspInit+0xbc>)
 80013ae:	f000 fefd 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40012000 	.word	0x40012000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a18      	ldr	r2, [pc, #96]	; (800143c <HAL_TIM_Base_MspInit+0x70>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d10e      	bne.n	80013fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_TIM_Base_MspInit+0x74>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a16      	ldr	r2, [pc, #88]	; (8001440 <HAL_TIM_Base_MspInit+0x74>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <HAL_TIM_Base_MspInit+0x74>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013fa:	e01a      	b.n	8001432 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001404:	d115      	bne.n	8001432 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <HAL_TIM_Base_MspInit+0x74>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_TIM_Base_MspInit+0x74>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_TIM_Base_MspInit+0x74>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	201c      	movs	r0, #28
 8001428:	f000 fe89 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800142c:	201c      	movs	r0, #28
 800142e:	f000 fea2 	bl	8002176 <HAL_NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40010000 	.word	0x40010000
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_TIM_MspPostInit+0xa8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d13d      	bne.n	80014e2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <HAL_TIM_MspPostInit+0xac>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <HAL_TIM_MspPostInit+0xac>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_TIM_MspPostInit+0xac>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_TIM_MspPostInit+0xac>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_TIM_MspPostInit+0xac>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_TIM_MspPostInit+0xac>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 800149e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <HAL_TIM_MspPostInit+0xb0>)
 80014bc:	f000 fe76 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 80014c0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4806      	ldr	r0, [pc, #24]	; (80014f8 <HAL_TIM_MspPostInit+0xb4>)
 80014de:	f000 fe65 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020000 	.word	0x40020000

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001548:	f000 f8da 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM2_IRQHandler+0x10>)
 8001556:	f003 f87f 	bl	8004658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000810 	.word	0x20000810

08001564 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <OTG_FS_IRQHandler+0x10>)
 800156a:	f001 f93e 	bl	80027ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20001dc4 	.word	0x20001dc4

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f008 f924 	bl	80097f4 <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20020000 	.word	0x20020000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	200008dc 	.word	0x200008dc
 80015e0:	20002500 	.word	0x20002500

080015e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800160e:	490e      	ldr	r1, [pc, #56]	; (8001648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001610:	4a0e      	ldr	r2, [pc, #56]	; (800164c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001624:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001632:	f7ff ffd7 	bl	80015e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f008 f8e3 	bl	8009800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff fb7b 	bl	8000d34 <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 800164c:	0800a288 	.word	0x0800a288
  ldr r2, =_sbss
 8001650:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 8001654:	20002500 	.word	0x20002500

08001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_Init+0x40>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_Init+0x40>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_Init+0x40>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 fd4f 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	200f      	movs	r0, #15
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fe14 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 fd67 	bl	8002192 <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 fd2f 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000600 	.word	0x20000600
 80016f8:	20000608 	.word	0x20000608
 80016fc:	20000604 	.word	0x20000604

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000608 	.word	0x20000608
 8001724:	200008e0 	.word	0x200008e0

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	200008e0 	.word	0x200008e0

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000608 	.word	0x20000608

08001788 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e033      	b.n	8001806 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fdb0 	bl	800130c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017ce:	f023 0302 	bic.w	r3, r3, #2
 80017d2:	f043 0202 	orr.w	r2, r3, #2
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fad8 	bl	8001d90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f023 0303 	bic.w	r3, r3, #3
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
 80017f6:	e001      	b.n	80017fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_Start+0x1a>
 8001826:	2302      	movs	r3, #2
 8001828:	e0b2      	b.n	8001990 <HAL_ADC_Start+0x180>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d018      	beq.n	8001872 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001850:	4b52      	ldr	r3, [pc, #328]	; (800199c <HAL_ADC_Start+0x18c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_ADC_Start+0x190>)
 8001856:	fba2 2303 	umull	r2, r3, r2, r3
 800185a:	0c9a      	lsrs	r2, r3, #18
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001864:	e002      	b.n	800186c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	3b01      	subs	r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f9      	bne.n	8001866 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d17a      	bne.n	8001976 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018be:	d106      	bne.n	80018ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f023 0206 	bic.w	r2, r3, #6
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
 80018cc:	e002      	b.n	80018d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018dc:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_ADC_Start+0x194>)
 80018de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d12a      	bne.n	800194c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2b      	ldr	r2, [pc, #172]	; (80019a8 <HAL_ADC_Start+0x198>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d015      	beq.n	800192c <HAL_ADC_Start+0x11c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a29      	ldr	r2, [pc, #164]	; (80019ac <HAL_ADC_Start+0x19c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d105      	bne.n	8001916 <HAL_ADC_Start+0x106>
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_ADC_Start+0x194>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00a      	beq.n	800192c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_ADC_Start+0x1a0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d136      	bne.n	800198e <HAL_ADC_Start+0x17e>
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_ADC_Start+0x194>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	d130      	bne.n	800198e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d129      	bne.n	800198e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	e020      	b.n	800198e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_ADC_Start+0x198>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d11b      	bne.n	800198e <HAL_ADC_Start+0x17e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d114      	bne.n	800198e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	e00b      	b.n	800198e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f043 0210 	orr.w	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f043 0201 	orr.w	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	20000600 	.word	0x20000600
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	40012300 	.word	0x40012300
 80019a8:	40012000 	.word	0x40012000
 80019ac:	40012100 	.word	0x40012100
 80019b0:	40012200 	.word	0x40012200

080019b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Stop+0x16>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e021      	b.n	8001a0e <HAL_ADC_Stop+0x5a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a36:	d113      	bne.n	8001a60 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a46:	d10b      	bne.n	8001a60 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f043 0220 	orr.w	r2, r3, #32
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e063      	b.n	8001b28 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a60:	f7ff fe62 	bl	8001728 <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a66:	e021      	b.n	8001aac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6e:	d01d      	beq.n	8001aac <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_ADC_PollForConversion+0x6c>
 8001a76:	f7ff fe57 	bl	8001728 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d212      	bcs.n	8001aac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d00b      	beq.n	8001aac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f043 0204 	orr.w	r2, r3, #4
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e03d      	b.n	8001b28 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d1d6      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f06f 0212 	mvn.w	r2, #18
 8001ac2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d123      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d11f      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d111      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d105      	bne.n	8001b26 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1c>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e105      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x228>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b09      	cmp	r3, #9
 8001b76:	d925      	bls.n	8001bc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68d9      	ldr	r1, [r3, #12]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b1e      	subs	r3, #30
 8001b8e:	2207      	movs	r2, #7
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43da      	mvns	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68d9      	ldr	r1, [r3, #12]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4403      	add	r3, r0
 8001bb6:	3b1e      	subs	r3, #30
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	e022      	b.n	8001c0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	2207      	movs	r2, #7
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	400a      	ands	r2, r1
 8001be6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6919      	ldr	r1, [r3, #16]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4403      	add	r3, r0
 8001c00:	409a      	lsls	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d824      	bhi.n	8001c5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3b05      	subs	r3, #5
 8001c24:	221f      	movs	r2, #31
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	400a      	ands	r2, r1
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4618      	mov	r0, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b05      	subs	r3, #5
 8001c4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
 8001c5a:	e04c      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d824      	bhi.n	8001cae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	3b23      	subs	r3, #35	; 0x23
 8001c76:	221f      	movs	r2, #31
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	400a      	ands	r2, r1
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b23      	subs	r3, #35	; 0x23
 8001ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
 8001cac:	e023      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3b41      	subs	r3, #65	; 0x41
 8001cc0:	221f      	movs	r2, #31
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	400a      	ands	r2, r1
 8001cce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b41      	subs	r3, #65	; 0x41
 8001cea:	fa00 f203 	lsl.w	r2, r0, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf6:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <HAL_ADC_ConfigChannel+0x234>)
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_ADC_ConfigChannel+0x238>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d109      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1cc>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b12      	cmp	r3, #18
 8001d0a:	d105      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_ADC_ConfigChannel+0x238>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d123      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d003      	beq.n	8001d32 <HAL_ADC_ConfigChannel+0x1e6>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b11      	cmp	r3, #17
 8001d30:	d11b      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d111      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_ADC_ConfigChannel+0x23c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a10      	ldr	r2, [pc, #64]	; (8001d8c <HAL_ADC_ConfigChannel+0x240>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	0c9a      	lsrs	r2, r3, #18
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40012300 	.word	0x40012300
 8001d84:	40012000 	.word	0x40012000
 8001d88:	20000600 	.word	0x20000600
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d98:	4b79      	ldr	r3, [pc, #484]	; (8001f80 <ADC_Init+0x1f0>)
 8001d9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	021a      	lsls	r2, r3, #8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6899      	ldr	r1, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <ADC_Init+0x1f4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d022      	beq.n	8001e6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6899      	ldr	r1, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e00f      	b.n	8001e8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0202 	bic.w	r2, r2, #2
 8001e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6899      	ldr	r1, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7e1b      	ldrb	r3, [r3, #24]
 8001ea8:	005a      	lsls	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	035a      	lsls	r2, r3, #13
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	e007      	b.n	8001f04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	051a      	lsls	r2, r3, #20
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6899      	ldr	r1, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f46:	025a      	lsls	r2, r3, #9
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	029a      	lsls	r2, r3, #10
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40012300 	.word	0x40012300
 8001f84:	0f000001 	.word	0x0f000001

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff3e 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff8e 	bl	800207c <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff31 	bl	8001fec <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e16b      	b.n	80024a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 815a 	bne.w	800249a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d005      	beq.n	80021fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d130      	bne.n	8002260 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 0201 	and.w	r2, r3, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b03      	cmp	r3, #3
 800226a:	d017      	beq.n	800229c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d123      	bne.n	80022f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0203 	and.w	r2, r3, #3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80b4 	beq.w	800249a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b60      	ldr	r3, [pc, #384]	; (80024b8 <HAL_GPIO_Init+0x30c>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a5f      	ldr	r2, [pc, #380]	; (80024b8 <HAL_GPIO_Init+0x30c>)
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_GPIO_Init+0x30c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234e:	4a5b      	ldr	r2, [pc, #364]	; (80024bc <HAL_GPIO_Init+0x310>)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_GPIO_Init+0x314>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d02b      	beq.n	80023d2 <HAL_GPIO_Init+0x226>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a51      	ldr	r2, [pc, #324]	; (80024c4 <HAL_GPIO_Init+0x318>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d025      	beq.n	80023ce <HAL_GPIO_Init+0x222>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a50      	ldr	r2, [pc, #320]	; (80024c8 <HAL_GPIO_Init+0x31c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01f      	beq.n	80023ca <HAL_GPIO_Init+0x21e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4f      	ldr	r2, [pc, #316]	; (80024cc <HAL_GPIO_Init+0x320>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d019      	beq.n	80023c6 <HAL_GPIO_Init+0x21a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4e      	ldr	r2, [pc, #312]	; (80024d0 <HAL_GPIO_Init+0x324>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0x216>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4d      	ldr	r2, [pc, #308]	; (80024d4 <HAL_GPIO_Init+0x328>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_GPIO_Init+0x212>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4c      	ldr	r2, [pc, #304]	; (80024d8 <HAL_GPIO_Init+0x32c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x20e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4b      	ldr	r2, [pc, #300]	; (80024dc <HAL_GPIO_Init+0x330>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_GPIO_Init+0x20a>
 80023b2:	2307      	movs	r3, #7
 80023b4:	e00e      	b.n	80023d4 <HAL_GPIO_Init+0x228>
 80023b6:	2308      	movs	r3, #8
 80023b8:	e00c      	b.n	80023d4 <HAL_GPIO_Init+0x228>
 80023ba:	2306      	movs	r3, #6
 80023bc:	e00a      	b.n	80023d4 <HAL_GPIO_Init+0x228>
 80023be:	2305      	movs	r3, #5
 80023c0:	e008      	b.n	80023d4 <HAL_GPIO_Init+0x228>
 80023c2:	2304      	movs	r3, #4
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x228>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e004      	b.n	80023d4 <HAL_GPIO_Init+0x228>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_Init+0x228>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_GPIO_Init+0x228>
 80023d2:	2300      	movs	r3, #0
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f002 0203 	and.w	r2, r2, #3
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	4093      	lsls	r3, r2
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e4:	4935      	ldr	r1, [pc, #212]	; (80024bc <HAL_GPIO_Init+0x310>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f2:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <HAL_GPIO_Init+0x334>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002416:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <HAL_GPIO_Init+0x334>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800241c:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_GPIO_Init+0x334>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002440:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_GPIO_Init+0x334>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002446:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_GPIO_Init+0x334>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246a:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <HAL_GPIO_Init+0x334>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_GPIO_Init+0x334>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002494:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <HAL_GPIO_Init+0x334>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3301      	adds	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	f67f ae90 	bls.w	80021c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40021400 	.word	0x40021400
 80024d8:	40021800 	.word	0x40021800
 80024dc:	40021c00 	.word	0x40021c00
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002500:	e003      	b.n	800250a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	041a      	lsls	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	619a      	str	r2, [r3, #24]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002528:	887a      	ldrh	r2, [r7, #2]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4013      	ands	r3, r2
 800252e:	041a      	lsls	r2, r3, #16
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43d9      	mvns	r1, r3
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	400b      	ands	r3, r1
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800254a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254c:	b08f      	sub	sp, #60	; 0x3c
 800254e:	af0a      	add	r7, sp, #40	; 0x28
 8002550:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e10f      	b.n	800277c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f006 fe28 	bl	80091cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2203      	movs	r2, #3
 8002580:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f003 f905 	bl	80057aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	687e      	ldr	r6, [r7, #4]
 80025a8:	466d      	mov	r5, sp
 80025aa:	f106 0410 	add.w	r4, r6, #16
 80025ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80025be:	1d33      	adds	r3, r6, #4
 80025c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c2:	6838      	ldr	r0, [r7, #0]
 80025c4:	f002 ffdd 	bl	8005582 <USB_CoreInit>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0d0      	b.n	800277c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 f8f3 	bl	80057cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	e04a      	b.n	8002682 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	333d      	adds	r3, #61	; 0x3d
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	333c      	adds	r3, #60	; 0x3c
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	b298      	uxth	r0, r3
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	3344      	adds	r3, #68	; 0x44
 8002628:	4602      	mov	r2, r0
 800262a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3340      	adds	r3, #64	; 0x40
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3348      	adds	r3, #72	; 0x48
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	334c      	adds	r3, #76	; 0x4c
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3354      	adds	r3, #84	; 0x54
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	3301      	adds	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	d3af      	bcc.n	80025ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e044      	b.n	800271c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3301      	adds	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	d3b5      	bcc.n	8002692 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	687e      	ldr	r6, [r7, #4]
 800272e:	466d      	mov	r5, sp
 8002730:	f106 0410 	add.w	r4, r6, #16
 8002734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002740:	e885 0003 	stmia.w	r5, {r0, r1}
 8002744:	1d33      	adds	r3, r6, #4
 8002746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f003 f88b 	bl	8005864 <USB_DevInit>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e00d      	b.n	800277c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f004 f9da 	bl	8006b2e <USB_DevDisconnect>

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002784 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_PCD_Start+0x1c>
 800279c:	2302      	movs	r3, #2
 800279e:	e020      	b.n	80027e2 <HAL_PCD_Start+0x5e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d109      	bne.n	80027c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d005      	beq.n	80027c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 ffdd 	bl	8005788 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 f98a 	bl	8006aec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027ea:	b590      	push	{r4, r7, lr}
 80027ec:	b08d      	sub	sp, #52	; 0x34
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f004 fa48 	bl	8006c96 <USB_GetMode>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 848a 	bne.w	8003122 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f004 f9ac 	bl	8006b70 <USB_ReadInterrupts>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8480 	beq.w	8003120 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f004 f999 	bl	8006b70 <USB_ReadInterrupts>
 800283e:	4603      	mov	r3, r0
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d107      	bne.n	8002858 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f002 0202 	and.w	r2, r2, #2
 8002856:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f004 f987 	bl	8006b70 <USB_ReadInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b10      	cmp	r3, #16
 800286a:	d161      	bne.n	8002930 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0210 	bic.w	r2, r2, #16
 800287a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f003 020f 	and.w	r2, r3, #15
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	3304      	adds	r3, #4
 800289a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	0c5b      	lsrs	r3, r3, #17
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d124      	bne.n	80028f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d035      	beq.n	8002920 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	6a38      	ldr	r0, [r7, #32]
 80028c8:	f003 ffbe 	bl	8006848 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d8:	441a      	add	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	6a1a      	ldr	r2, [r3, #32]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ea:	441a      	add	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	621a      	str	r2, [r3, #32]
 80028f0:	e016      	b.n	8002920 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	0c5b      	lsrs	r3, r3, #17
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d110      	bne.n	8002920 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002904:	2208      	movs	r2, #8
 8002906:	4619      	mov	r1, r3
 8002908:	6a38      	ldr	r0, [r7, #32]
 800290a:	f003 ff9d 	bl	8006848 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800291a:	441a      	add	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0210 	orr.w	r2, r2, #16
 800292e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 f91b 	bl	8006b70 <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002940:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002944:	f040 80a7 	bne.w	8002a96 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f004 f920 	bl	8006b96 <USB_ReadDevAllOutEpInterrupt>
 8002956:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002958:	e099      	b.n	8002a8e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 808e 	beq.w	8002a82 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f004 f944 	bl	8006bfe <USB_ReadDevOutEPInterrupt>
 8002976:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298e:	461a      	mov	r2, r3
 8002990:	2301      	movs	r3, #1
 8002992:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fec2 	bl	8003720 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b2:	461a      	mov	r2, r3
 80029b4:	2308      	movs	r3, #8
 80029b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 ff98 	bl	80038f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d008      	beq.n	80029dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	461a      	mov	r2, r3
 80029d8:	2310      	movs	r3, #16
 80029da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d030      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	2b80      	cmp	r3, #128	; 0x80
 80029f0:	d109      	bne.n	8002a06 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a04:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4413      	add	r3, r2
 8002a18:	3304      	adds	r3, #4
 8002a1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	78db      	ldrb	r3, [r3, #3]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d108      	bne.n	8002a36 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2200      	movs	r2, #0
 8002a28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f006 fcd1 	bl	80093d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a42:	461a      	mov	r2, r3
 8002a44:	2302      	movs	r3, #2
 8002a46:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2320      	movs	r3, #32
 8002a62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a80:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	3301      	adds	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f af62 	bne.w	800295a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f004 f868 	bl	8006b70 <USB_ReadInterrupts>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aaa:	f040 80db 	bne.w	8002c64 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 f889 	bl	8006bca <USB_ReadDevAllInEpInterrupt>
 8002ab8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002abe:	e0cd      	b.n	8002c5c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80c2 	beq.w	8002c50 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 f8af 	bl	8006c3a <USB_ReadDevInEPInterrupt>
 8002adc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d057      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	2201      	movs	r2, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69f9      	ldr	r1, [r7, #28]
 8002b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b08:	4013      	ands	r3, r2
 8002b0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d132      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	334c      	adds	r3, #76	; 0x4c
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4403      	add	r3, r0
 8002b46:	3348      	adds	r3, #72	; 0x48
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4419      	add	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4403      	add	r3, r0
 8002b5a:	334c      	adds	r3, #76	; 0x4c
 8002b5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d113      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x3a2>
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3354      	adds	r3, #84	; 0x54
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d108      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b84:	461a      	mov	r2, r3
 8002b86:	2101      	movs	r1, #1
 8002b88:	f004 f8b6 	bl	8006cf8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f006 fb9b 	bl	80092ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2310      	movs	r3, #16
 8002bce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be6:	461a      	mov	r2, r3
 8002be8:	2340      	movs	r3, #64	; 0x40
 8002bea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d023      	beq.n	8002c3e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bf8:	6a38      	ldr	r0, [r7, #32]
 8002bfa:	f002 ff97 	bl	8005b2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	3338      	adds	r3, #56	; 0x38
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3304      	adds	r3, #4
 8002c10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	78db      	ldrb	r3, [r3, #3]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f006 fbe8 	bl	80093fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fcdb 	bl	8003606 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	3301      	adds	r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f47f af2e 	bne.w	8002ac0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 ff81 	bl	8006b70 <USB_ReadInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c78:	d122      	bne.n	8002cc0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d108      	bne.n	8002caa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fec2 	bl	8003a2c <HAL_PCDEx_LPM_Callback>
 8002ca8:	e002      	b.n	8002cb0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f006 fb86 	bl	80093bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f003 ff53 	bl	8006b70 <USB_ReadInterrupts>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd4:	d112      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d102      	bne.n	8002cec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f006 fb42 	bl	8009370 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002cfa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 ff35 	bl	8006b70 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	f040 80b7 	bne.w	8002e82 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2110      	movs	r1, #16
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fefc 	bl	8005b2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d38:	e046      	b.n	8002dc8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d46:	461a      	mov	r2, r3
 8002d48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d4c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5e:	0151      	lsls	r1, r2, #5
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	440a      	add	r2, r1
 8002d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d80:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d92:	0151      	lsls	r1, r2, #5
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	440a      	add	r2, r1
 8002d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002da0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db2:	0151      	lsls	r1, r2, #5
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	440a      	add	r2, r1
 8002db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002dc0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d3b3      	bcc.n	8002d3a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002de4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfe:	f043 030b 	orr.w	r3, r3, #11
 8002e02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e14:	f043 030b 	orr.w	r3, r3, #11
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	e015      	b.n	8002e48 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e2e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e32:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e42:	f043 030b 	orr.w	r3, r3, #11
 8002e46:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e5a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f003 ff43 	bl	8006cf8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f003 fe72 	bl	8006b70 <USB_ReadInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e96:	d124      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 ff08 	bl	8006cb2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 febd 	bl	8005c26 <USB_GetDevSpeed>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681c      	ldr	r4, [r3, #0]
 8002eb8:	f001 f9e8 	bl	800428c <HAL_RCC_GetHCLKFreq>
 8002ebc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f002 fbbc 	bl	8005644 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f006 fa26 	bl	800931e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 fe42 	bl	8006b70 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d10a      	bne.n	8002f0c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f006 fa03 	bl	8009302 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f002 0208 	and.w	r2, r2, #8
 8002f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 fe2d 	bl	8006b70 <USB_ReadInterrupts>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	2b80      	cmp	r3, #128	; 0x80
 8002f1e:	d122      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	e014      	b.n	8002f5c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d105      	bne.n	8002f56 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fb27 	bl	80035a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	3301      	adds	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d3e5      	bcc.n	8002f32 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 fe00 	bl	8006b70 <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f7a:	d13b      	bne.n	8002ff4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f80:	e02b      	b.n	8002fda <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3340      	adds	r3, #64	; 0x40
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d115      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fa8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da12      	bge.n	8002fd4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	333f      	adds	r3, #63	; 0x3f
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fae8 	bl	80035a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d3ce      	bcc.n	8002f82 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ff2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 fdb9 	bl	8006b70 <USB_ReadInterrupts>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003008:	d155      	bne.n	80030b6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800300a:	2301      	movs	r3, #1
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	e045      	b.n	800309c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d12e      	bne.n	8003096 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003038:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800303a:	2b00      	cmp	r3, #0
 800303c:	da2b      	bge.n	8003096 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800304a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800304e:	429a      	cmp	r2, r3
 8003050:	d121      	bne.n	8003096 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003092:	6053      	str	r3, [r2, #4]
            break;
 8003094:	e007      	b.n	80030a6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	3301      	adds	r3, #1
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d3b4      	bcc.n	8003010 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695a      	ldr	r2, [r3, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 fd58 	bl	8006b70 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ca:	d10a      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f006 f9a7 	bl	8009420 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fd42 	bl	8006b70 <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d115      	bne.n	8003122 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f006 f997 	bl	800943c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	e000      	b.n	8003122 <HAL_PCD_IRQHandler+0x938>
      return;
 8003120:	bf00      	nop
    }
  }
}
 8003122:	3734      	adds	r7, #52	; 0x34
 8003124:	46bd      	mov	sp, r7
 8003126:	bd90      	pop	{r4, r7, pc}

08003128 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_PCD_SetAddress+0x1a>
 800313e:	2302      	movs	r3, #2
 8003140:	e013      	b.n	800316a <HAL_PCD_SetAddress+0x42>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f003 fca0 	bl	8006aa0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	4608      	mov	r0, r1
 800317c:	4611      	mov	r1, r2
 800317e:	461a      	mov	r2, r3
 8003180:	4603      	mov	r3, r0
 8003182:	70fb      	strb	r3, [r7, #3]
 8003184:	460b      	mov	r3, r1
 8003186:	803b      	strh	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003194:	2b00      	cmp	r3, #0
 8003196:	da0f      	bge.n	80031b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	3338      	adds	r3, #56	; 0x38
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	705a      	strb	r2, [r3, #1]
 80031b6:	e00f      	b.n	80031d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 020f 	and.w	r2, r3, #15
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	3304      	adds	r3, #4
 80031d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031e4:	883a      	ldrh	r2, [r7, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	78ba      	ldrb	r2, [r7, #2]
 80031ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	785b      	ldrb	r3, [r3, #1]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003202:	78bb      	ldrb	r3, [r7, #2]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d102      	bne.n	800320e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_PCD_EP_Open+0xaa>
 8003218:	2302      	movs	r3, #2
 800321a:	e00e      	b.n	800323a <HAL_PCD_EP_Open+0xc8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	4618      	mov	r0, r3
 800322c:	f002 fd20 	bl	8005c70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003238:	7afb      	ldrb	r3, [r7, #11]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800324e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da0f      	bge.n	8003276 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	3338      	adds	r3, #56	; 0x38
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	3304      	adds	r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	705a      	strb	r2, [r3, #1]
 8003274:	e00f      	b.n	8003296 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	f003 020f 	and.w	r2, r3, #15
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_PCD_EP_Close+0x6e>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e00e      	b.n	80032ce <HAL_PCD_EP_Close+0x8c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	4618      	mov	r0, r3
 80032c0:	f002 fd5e 	bl	8005d80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	460b      	mov	r3, r1
 80032e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	7afb      	ldrb	r3, [r7, #11]
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2200      	movs	r2, #0
 8003310:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2200      	movs	r2, #0
 8003316:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	b2da      	uxtb	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d102      	bne.n	8003332 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	6979      	ldr	r1, [r7, #20]
 800334a:	f003 f83d 	bl	80063c8 <USB_EP0StartXfer>
 800334e:	e008      	b.n	8003362 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	6979      	ldr	r1, [r7, #20]
 800335e:	f002 fdeb 	bl	8005f38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	460b      	mov	r3, r1
 80033aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ac:	7afb      	ldrb	r3, [r7, #11]
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	3338      	adds	r3, #56	; 0x38
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	3304      	adds	r3, #4
 80033c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2200      	movs	r2, #0
 80033d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2201      	movs	r2, #1
 80033da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033dc:	7afb      	ldrb	r3, [r7, #11]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d102      	bne.n	80033f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033f6:	7afb      	ldrb	r3, [r7, #11]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	f002 ffdb 	bl	80063c8 <USB_EP0StartXfer>
 8003412:	e008      	b.n	8003426 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	6979      	ldr	r1, [r7, #20]
 8003422:	f002 fd89 	bl	8005f38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	f003 020f 	and.w	r2, r3, #15
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	d901      	bls.n	800344e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e050      	b.n	80034f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800344e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003452:	2b00      	cmp	r3, #0
 8003454:	da0f      	bge.n	8003476 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	3338      	adds	r3, #56	; 0x38
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	705a      	strb	r2, [r3, #1]
 8003474:	e00d      	b.n	8003492 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	3304      	adds	r3, #4
 800348a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_PCD_EP_SetStall+0x82>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e01e      	b.n	80034f0 <HAL_PCD_EP_SetStall+0xc0>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68f9      	ldr	r1, [r7, #12]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f003 fa19 	bl	80068f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	b2d9      	uxtb	r1, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e0:	461a      	mov	r2, r3
 80034e2:	f003 fc09 	bl	8006cf8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d901      	bls.n	8003516 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e042      	b.n	800359c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800351a:	2b00      	cmp	r3, #0
 800351c:	da0f      	bge.n	800353e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	f003 020f 	and.w	r2, r3, #15
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	3338      	adds	r3, #56	; 0x38
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	705a      	strb	r2, [r3, #1]
 800353c:	e00f      	b.n	800355e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	f003 020f 	and.w	r2, r3, #15
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	3304      	adds	r3, #4
 8003556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_PCD_EP_ClrStall+0x86>
 800357a:	2302      	movs	r3, #2
 800357c:	e00e      	b.n	800359c <HAL_PCD_EP_ClrStall+0xa4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	4618      	mov	r0, r3
 800358e:	f003 fa21 	bl	80069d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da0c      	bge.n	80035d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 020f 	and.w	r2, r3, #15
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	3338      	adds	r3, #56	; 0x38
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	3304      	adds	r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e00c      	b.n	80035ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 020f 	and.w	r2, r3, #15
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4413      	add	r3, r2
 80035e8:	3304      	adds	r3, #4
 80035ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68f9      	ldr	r1, [r7, #12]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 f840 	bl	8006678 <USB_EPStopXfer>
 80035f8:	4603      	mov	r3, r0
 80035fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035fc:	7afb      	ldrb	r3, [r7, #11]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b08a      	sub	sp, #40	; 0x28
 800360a:	af02      	add	r7, sp, #8
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	3338      	adds	r3, #56	; 0x38
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	3304      	adds	r3, #4
 800362c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	429a      	cmp	r2, r3
 8003638:	d901      	bls.n	800363e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e06c      	b.n	8003718 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	429a      	cmp	r2, r3
 8003652:	d902      	bls.n	800365a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3303      	adds	r3, #3
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003662:	e02b      	b.n	80036bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	699a      	ldr	r2, [r3, #24]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	429a      	cmp	r2, r3
 8003678:	d902      	bls.n	8003680 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	3303      	adds	r3, #3
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6919      	ldr	r1, [r3, #16]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003698:	b2db      	uxtb	r3, r3
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4603      	mov	r3, r0
 800369e:	6978      	ldr	r0, [r7, #20]
 80036a0:	f003 f894 	bl	80067cc <USB_WritePacket>

    ep->xfer_buff  += len;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	441a      	add	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1a      	ldr	r2, [r3, #32]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	441a      	add	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d809      	bhi.n	80036e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036da:	429a      	cmp	r2, r3
 80036dc:	d203      	bcs.n	80036e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1be      	bne.n	8003664 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d811      	bhi.n	8003716 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	2201      	movs	r2, #1
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	43db      	mvns	r3, r3
 800370c:	6939      	ldr	r1, [r7, #16]
 800370e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003712:	4013      	ands	r3, r2
 8003714:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	333c      	adds	r3, #60	; 0x3c
 8003738:	3304      	adds	r3, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d17b      	bne.n	800384e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d015      	beq.n	800378c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	4a61      	ldr	r2, [pc, #388]	; (80038e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	f240 80b9 	bls.w	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80b3 	beq.w	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003782:	461a      	mov	r2, r3
 8003784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003788:	6093      	str	r3, [r2, #8]
 800378a:	e0a7      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	2320      	movs	r3, #32
 80037a6:	6093      	str	r3, [r2, #8]
 80037a8:	e098      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f040 8093 	bne.w	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4a4b      	ldr	r2, [pc, #300]	; (80038e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d90f      	bls.n	80037de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	461a      	mov	r2, r3
 80037d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037da:	6093      	str	r3, [r2, #8]
 80037dc:	e07e      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	3304      	adds	r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	0159      	lsls	r1, r3, #5
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	440b      	add	r3, r1
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800380a:	1ad2      	subs	r2, r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d114      	bne.n	8003840 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003828:	461a      	mov	r2, r3
 800382a:	2101      	movs	r1, #1
 800382c:	f003 fa64 	bl	8006cf8 <USB_EP0_OutStart>
 8003830:	e006      	b.n	8003840 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	441a      	add	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f005 fd26 	bl	8009298 <HAL_PCD_DataOutStageCallback>
 800384c:	e046      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4a26      	ldr	r2, [pc, #152]	; (80038ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d124      	bne.n	80038a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386c:	461a      	mov	r2, r3
 800386e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003872:	6093      	str	r3, [r2, #8]
 8003874:	e032      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388c:	461a      	mov	r2, r3
 800388e:	2320      	movs	r3, #32
 8003890:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f005 fcfd 	bl	8009298 <HAL_PCD_DataOutStageCallback>
 800389e:	e01d      	b.n	80038dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d114      	bne.n	80038d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d108      	bne.n	80038d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038c8:	461a      	mov	r2, r3
 80038ca:	2100      	movs	r1, #0
 80038cc:	f003 fa14 	bl	8006cf8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f005 fcde 	bl	8009298 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	4f54300a 	.word	0x4f54300a
 80038ec:	4f54310a 	.word	0x4f54310a

080038f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	333c      	adds	r3, #60	; 0x3c
 8003908:	3304      	adds	r3, #4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a15      	ldr	r2, [pc, #84]	; (8003978 <PCD_EP_OutSetupPacket_int+0x88>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d90e      	bls.n	8003944 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	461a      	mov	r2, r3
 800393e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003942:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f005 fc95 	bl	8009274 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <PCD_EP_OutSetupPacket_int+0x88>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d90c      	bls.n	800396c <PCD_EP_OutSetupPacket_int+0x7c>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d108      	bne.n	800396c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003964:	461a      	mov	r2, r3
 8003966:	2101      	movs	r1, #1
 8003968:	f003 f9c6 	bl	8006cf8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	4f54300a 	.word	0x4f54300a

0800397c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
 8003988:	4613      	mov	r3, r2
 800398a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800399a:	883b      	ldrh	r3, [r7, #0]
 800399c:	0419      	lsls	r1, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
 80039a8:	e028      	b.n	80039fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4413      	add	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e00d      	b.n	80039da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	3340      	adds	r3, #64	; 0x40
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	4413      	add	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	3301      	adds	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	3b01      	subs	r3, #1
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d3ec      	bcc.n	80039be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039e4:	883b      	ldrh	r3, [r7, #0]
 80039e6:	0418      	lsls	r0, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	4302      	orrs	r2, r0
 80039f4:	3340      	adds	r3, #64	; 0x40
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e267      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d075      	beq.n	8003b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a62:	4b88      	ldr	r3, [pc, #544]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d00c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6e:	4b85      	ldr	r3, [pc, #532]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d112      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7a:	4b82      	ldr	r3, [pc, #520]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	4b7e      	ldr	r3, [pc, #504]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d05b      	beq.n	8003b4c <HAL_RCC_OscConfig+0x108>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d157      	bne.n	8003b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e242      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d106      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x74>
 8003aaa:	4b76      	ldr	r3, [pc, #472]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a75      	ldr	r2, [pc, #468]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e01d      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac0:	d10c      	bne.n	8003adc <HAL_RCC_OscConfig+0x98>
 8003ac2:	4b70      	ldr	r3, [pc, #448]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6f      	ldr	r2, [pc, #444]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b6d      	ldr	r3, [pc, #436]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6c      	ldr	r2, [pc, #432]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e00b      	b.n	8003af4 <HAL_RCC_OscConfig+0xb0>
 8003adc:	4b69      	ldr	r3, [pc, #420]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a68      	ldr	r2, [pc, #416]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a65      	ldr	r2, [pc, #404]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afc:	f7fd fe14 	bl	8001728 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b04:	f7fd fe10 	bl	8001728 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	; 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e207      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0xc0>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd fe00 	bl	8001728 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fd fdfc 	bl	8001728 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	; 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1f3      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3e:	4b51      	ldr	r3, [pc, #324]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0xe8>
 8003b4a:	e000      	b.n	8003b4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d063      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11c      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b72:	4b44      	ldr	r3, [pc, #272]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1c7      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b96:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4937      	ldr	r1, [pc, #220]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	e03a      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb4:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <HAL_RCC_OscConfig+0x244>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bba:	f7fd fdb5 	bl	8001728 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc2:	f7fd fdb1 	bl	8001728 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e1a8      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4925      	ldr	r1, [pc, #148]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
 8003bf4:	e015      	b.n	8003c22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCC_OscConfig+0x244>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fd94 	bl	8001728 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c04:	f7fd fd90 	bl	8001728 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e187      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d036      	beq.n	8003c9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d016      	beq.n	8003c64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <HAL_RCC_OscConfig+0x248>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fd fd74 	bl	8001728 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fd fd70 	bl	8001728 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e167      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_OscConfig+0x240>)
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x200>
 8003c62:	e01b      	b.n	8003c9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_OscConfig+0x248>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fd5d 	bl	8001728 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c70:	e00e      	b.n	8003c90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c72:	f7fd fd59 	bl	8001728 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d907      	bls.n	8003c90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e150      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	42470000 	.word	0x42470000
 8003c8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ea      	bne.n	8003c72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8097 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cae:	4b81      	ldr	r3, [pc, #516]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10f      	bne.n	8003cda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	4b7d      	ldr	r3, [pc, #500]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	4a7c      	ldr	r2, [pc, #496]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	4b7a      	ldr	r3, [pc, #488]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b77      	ldr	r3, [pc, #476]	; (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d118      	bne.n	8003d18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce6:	4b74      	ldr	r3, [pc, #464]	; (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a73      	ldr	r2, [pc, #460]	; (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd fd19 	bl	8001728 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fd fd15 	bl	8001728 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e10c      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	4b6a      	ldr	r3, [pc, #424]	; (8003eb8 <HAL_RCC_OscConfig+0x474>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x2ea>
 8003d20:	4b64      	ldr	r3, [pc, #400]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	4a63      	ldr	r2, [pc, #396]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2c:	e01c      	b.n	8003d68 <HAL_RCC_OscConfig+0x324>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b05      	cmp	r3, #5
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x30c>
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3a:	4a5e      	ldr	r2, [pc, #376]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	f043 0304 	orr.w	r3, r3, #4
 8003d40:	6713      	str	r3, [r2, #112]	; 0x70
 8003d42:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a5b      	ldr	r2, [pc, #364]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0x324>
 8003d50:	4b58      	ldr	r3, [pc, #352]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a57      	ldr	r2, [pc, #348]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5c:	4b55      	ldr	r3, [pc, #340]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a54      	ldr	r2, [pc, #336]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 0304 	bic.w	r3, r3, #4
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d015      	beq.n	8003d9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd fcda 	bl	8001728 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fcd6 	bl	8001728 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0cb      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8e:	4b49      	ldr	r3, [pc, #292]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0ee      	beq.n	8003d78 <HAL_RCC_OscConfig+0x334>
 8003d9a:	e014      	b.n	8003dc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9c:	f7fd fcc4 	bl	8001728 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da4:	f7fd fcc0 	bl	8001728 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0b5      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dba:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1ee      	bne.n	8003da4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dcc:	4b39      	ldr	r3, [pc, #228]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	4a38      	ldr	r2, [pc, #224]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a1 	beq.w	8003f24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de2:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d05c      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d141      	bne.n	8003e7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fc94 	bl	8001728 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fd fc90 	bl	8001728 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e087      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	085b      	lsrs	r3, r3, #1
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	491b      	ldr	r1, [pc, #108]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fd fc69 	bl	8001728 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5a:	f7fd fc65 	bl	8001728 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e05c      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x416>
 8003e78:	e054      	b.n	8003f24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_RCC_OscConfig+0x478>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fd fc52 	bl	8001728 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd fc4e 	bl	8001728 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e045      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x444>
 8003ea6:	e03d      	b.n	8003f24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e038      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <HAL_RCC_OscConfig+0x4ec>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d028      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d121      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d11a      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d111      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800

08003f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0cc      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b68      	ldr	r3, [pc, #416]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d90c      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b65      	ldr	r3, [pc, #404]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b63      	ldr	r3, [pc, #396]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0b8      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f88:	4b59      	ldr	r3, [pc, #356]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa0:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a52      	ldr	r2, [pc, #328]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fac:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	494d      	ldr	r1, [pc, #308]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d044      	beq.n	8004054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d119      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e07f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e06f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b3b      	ldr	r3, [pc, #236]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e067      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004012:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4934      	ldr	r1, [pc, #208]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004024:	f7fd fb80 	bl	8001728 <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fd fb7c 	bl	8001728 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e04f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b2b      	ldr	r3, [pc, #172]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 020c 	and.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1eb      	bne.n	800402c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d20c      	bcs.n	800407c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e032      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004088:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4916      	ldr	r1, [pc, #88]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	490e      	ldr	r1, [pc, #56]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ba:	f000 f821 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	490a      	ldr	r1, [pc, #40]	; (80040f4 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	5ccb      	ldrb	r3, [r1, r3]
 80040ce:	fa22 f303 	lsr.w	r3, r2, r3
 80040d2:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd fae0 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023c00 	.word	0x40023c00
 80040f0:	40023800 	.word	0x40023800
 80040f4:	0800a234 	.word	0x0800a234
 80040f8:	20000600 	.word	0x20000600
 80040fc:	20000604 	.word	0x20000604

08004100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004104:	b090      	sub	sp, #64	; 0x40
 8004106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
 800410c:	2300      	movs	r3, #0
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004110:	2300      	movs	r3, #0
 8004112:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004118:	4b59      	ldr	r3, [pc, #356]	; (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d00d      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x40>
 8004124:	2b08      	cmp	r3, #8
 8004126:	f200 80a1 	bhi.w	800426c <HAL_RCC_GetSysClockFreq+0x16c>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x34>
 800412e:	2b04      	cmp	r3, #4
 8004130:	d003      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x3a>
 8004132:	e09b      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_GetSysClockFreq+0x184>)
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004138:	e09b      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800413a:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_GetSysClockFreq+0x188>)
 800413c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800413e:	e098      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004140:	4b4f      	ldr	r3, [pc, #316]	; (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414a:	4b4d      	ldr	r3, [pc, #308]	; (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d028      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004156:	4b4a      	ldr	r3, [pc, #296]	; (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	2200      	movs	r2, #0
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	627a      	str	r2, [r7, #36]	; 0x24
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004168:	2100      	movs	r1, #0
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_GetSysClockFreq+0x188>)
 800416c:	fb03 f201 	mul.w	r2, r3, r1
 8004170:	2300      	movs	r3, #0
 8004172:	fb00 f303 	mul.w	r3, r0, r3
 8004176:	4413      	add	r3, r2
 8004178:	4a43      	ldr	r2, [pc, #268]	; (8004288 <HAL_RCC_GetSysClockFreq+0x188>)
 800417a:	fba0 1202 	umull	r1, r2, r0, r2
 800417e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004180:	460a      	mov	r2, r1
 8004182:	62ba      	str	r2, [r7, #40]	; 0x28
 8004184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004186:	4413      	add	r3, r2
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800418a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418c:	2200      	movs	r2, #0
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	61fa      	str	r2, [r7, #28]
 8004192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004196:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800419a:	f7fc f871 	bl	8000280 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4613      	mov	r3, r2
 80041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a6:	e053      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a8:	4b35      	ldr	r3, [pc, #212]	; (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	099b      	lsrs	r3, r3, #6
 80041ae:	2200      	movs	r2, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	617a      	str	r2, [r7, #20]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041ba:	f04f 0b00 	mov.w	fp, #0
 80041be:	4652      	mov	r2, sl
 80041c0:	465b      	mov	r3, fp
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f04f 0100 	mov.w	r1, #0
 80041ca:	0159      	lsls	r1, r3, #5
 80041cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d0:	0150      	lsls	r0, r2, #5
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	ebb2 080a 	subs.w	r8, r2, sl
 80041da:	eb63 090b 	sbc.w	r9, r3, fp
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041f2:	ebb2 0408 	subs.w	r4, r2, r8
 80041f6:	eb63 0509 	sbc.w	r5, r3, r9
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	00eb      	lsls	r3, r5, #3
 8004204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004208:	00e2      	lsls	r2, r4, #3
 800420a:	4614      	mov	r4, r2
 800420c:	461d      	mov	r5, r3
 800420e:	eb14 030a 	adds.w	r3, r4, sl
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	eb45 030b 	adc.w	r3, r5, fp
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004226:	4629      	mov	r1, r5
 8004228:	028b      	lsls	r3, r1, #10
 800422a:	4621      	mov	r1, r4
 800422c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004230:	4621      	mov	r1, r4
 8004232:	028a      	lsls	r2, r1, #10
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423a:	2200      	movs	r2, #0
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	60fa      	str	r2, [r7, #12]
 8004240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004244:	f7fc f81c 	bl	8000280 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4613      	mov	r3, r2
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_GetSysClockFreq+0x180>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800426a:	e002      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCC_GetSysClockFreq+0x184>)
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004274:	4618      	mov	r0, r3
 8004276:	3740      	adds	r7, #64	; 0x40
 8004278:	46bd      	mov	sp, r7
 800427a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	00f42400 	.word	0x00f42400
 8004288:	017d7840 	.word	0x017d7840

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20000600 	.word	0x20000600

080042a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e041      	b.n	800433a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd f87e 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fc7c 	bl	8004be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d001      	beq.n	800435c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e046      	b.n	80043ea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a23      	ldr	r2, [pc, #140]	; (80043f8 <HAL_TIM_Base_Start+0xb4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d022      	beq.n	80043b4 <HAL_TIM_Base_Start+0x70>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d01d      	beq.n	80043b4 <HAL_TIM_Base_Start+0x70>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1f      	ldr	r2, [pc, #124]	; (80043fc <HAL_TIM_Base_Start+0xb8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d018      	beq.n	80043b4 <HAL_TIM_Base_Start+0x70>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1e      	ldr	r2, [pc, #120]	; (8004400 <HAL_TIM_Base_Start+0xbc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <HAL_TIM_Base_Start+0x70>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <HAL_TIM_Base_Start+0xc0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00e      	beq.n	80043b4 <HAL_TIM_Base_Start+0x70>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1b      	ldr	r2, [pc, #108]	; (8004408 <HAL_TIM_Base_Start+0xc4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d009      	beq.n	80043b4 <HAL_TIM_Base_Start+0x70>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a19      	ldr	r2, [pc, #100]	; (800440c <HAL_TIM_Base_Start+0xc8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_TIM_Base_Start+0x70>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_TIM_Base_Start+0xcc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d111      	bne.n	80043d8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d010      	beq.n	80043e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0201 	orr.w	r2, r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d6:	e007      	b.n	80043e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40010400 	.word	0x40010400
 800440c:	40014000 	.word	0x40014000
 8004410:	40001800 	.word	0x40001800

08004414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e041      	b.n	80044aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f839 	bl	80044b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f000 fbc4 	bl	8004be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_TIM_PWM_Start+0x24>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e022      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d109      	bne.n	8004506 <HAL_TIM_PWM_Start+0x3e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e015      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d109      	bne.n	8004520 <HAL_TIM_PWM_Start+0x58>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e008      	b.n	8004532 <HAL_TIM_PWM_Start+0x6a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e07c      	b.n	8004634 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_TIM_PWM_Start+0x82>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004548:	e013      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d104      	bne.n	800455a <HAL_TIM_PWM_Start+0x92>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004558:	e00b      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Start+0xa2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004568:	e003      	b.n	8004572 <HAL_TIM_PWM_Start+0xaa>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	6839      	ldr	r1, [r7, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fe1a 	bl	80051b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2d      	ldr	r2, [pc, #180]	; (800463c <HAL_TIM_PWM_Start+0x174>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_TIM_PWM_Start+0xcc>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <HAL_TIM_PWM_Start+0x178>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_TIM_PWM_Start+0xd0>
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <HAL_TIM_PWM_Start+0xd2>
 8004598:	2300      	movs	r3, #0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a22      	ldr	r2, [pc, #136]	; (800463c <HAL_TIM_PWM_Start+0x174>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d022      	beq.n	80045fe <HAL_TIM_PWM_Start+0x136>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d01d      	beq.n	80045fe <HAL_TIM_PWM_Start+0x136>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <HAL_TIM_PWM_Start+0x17c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d018      	beq.n	80045fe <HAL_TIM_PWM_Start+0x136>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <HAL_TIM_PWM_Start+0x180>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_TIM_PWM_Start+0x136>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <HAL_TIM_PWM_Start+0x184>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_TIM_PWM_Start+0x136>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a16      	ldr	r2, [pc, #88]	; (8004640 <HAL_TIM_PWM_Start+0x178>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_TIM_PWM_Start+0x136>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a18      	ldr	r2, [pc, #96]	; (8004650 <HAL_TIM_PWM_Start+0x188>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_TIM_PWM_Start+0x136>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a16      	ldr	r2, [pc, #88]	; (8004654 <HAL_TIM_PWM_Start+0x18c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d111      	bne.n	8004622 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b06      	cmp	r3, #6
 800460e:	d010      	beq.n	8004632 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004620:	e007      	b.n	8004632 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40010000 	.word	0x40010000
 8004640:	40010400 	.word	0x40010400
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40000c00 	.word	0x40000c00
 8004650:	40014000 	.word	0x40014000
 8004654:	40001800 	.word	0x40001800

08004658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d122      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0202 	mvn.w	r2, #2
 8004684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa81 	bl	8004ba2 <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa73 	bl	8004b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fa84 	bl	8004bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d122      	bne.n	8004708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d11b      	bne.n	8004708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0204 	mvn.w	r2, #4
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fa57 	bl	8004ba2 <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa49 	bl	8004b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fa5a 	bl	8004bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b08      	cmp	r3, #8
 8004714:	d122      	bne.n	800475c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b08      	cmp	r3, #8
 8004722:	d11b      	bne.n	800475c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0208 	mvn.w	r2, #8
 800472c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2204      	movs	r2, #4
 8004732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa2d 	bl	8004ba2 <HAL_TIM_IC_CaptureCallback>
 8004748:	e005      	b.n	8004756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fa1f 	bl	8004b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fa30 	bl	8004bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b10      	cmp	r3, #16
 8004768:	d122      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	d11b      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0210 	mvn.w	r2, #16
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2208      	movs	r2, #8
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fa03 	bl	8004ba2 <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9f5 	bl	8004b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fa06 	bl	8004bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10e      	bne.n	80047dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0201 	mvn.w	r2, #1
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f9cf 	bl	8004b7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	2b80      	cmp	r3, #128	; 0x80
 80047f6:	d107      	bne.n	8004808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fe8e 	bl	8005524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b40      	cmp	r3, #64	; 0x40
 8004814:	d10e      	bne.n	8004834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d107      	bne.n	8004834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9cb 	bl	8004bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b20      	cmp	r3, #32
 8004840:	d10e      	bne.n	8004860 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b20      	cmp	r3, #32
 800484e:	d107      	bne.n	8004860 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0220 	mvn.w	r2, #32
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fe58 	bl	8005510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004882:	2302      	movs	r3, #2
 8004884:	e0ae      	b.n	80049e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	f200 809f 	bhi.w	80049d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004896:	a201      	add	r2, pc, #4	; (adr r2, 800489c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489c:	080048d1 	.word	0x080048d1
 80048a0:	080049d5 	.word	0x080049d5
 80048a4:	080049d5 	.word	0x080049d5
 80048a8:	080049d5 	.word	0x080049d5
 80048ac:	08004911 	.word	0x08004911
 80048b0:	080049d5 	.word	0x080049d5
 80048b4:	080049d5 	.word	0x080049d5
 80048b8:	080049d5 	.word	0x080049d5
 80048bc:	08004953 	.word	0x08004953
 80048c0:	080049d5 	.word	0x080049d5
 80048c4:	080049d5 	.word	0x080049d5
 80048c8:	080049d5 	.word	0x080049d5
 80048cc:	08004993 	.word	0x08004993
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fa22 	bl	8004d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0208 	orr.w	r2, r2, #8
 80048ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0204 	bic.w	r2, r2, #4
 80048fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6999      	ldr	r1, [r3, #24]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	619a      	str	r2, [r3, #24]
      break;
 800490e:	e064      	b.n	80049da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fa72 	bl	8004e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800492a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6999      	ldr	r1, [r3, #24]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	021a      	lsls	r2, r3, #8
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	619a      	str	r2, [r3, #24]
      break;
 8004950:	e043      	b.n	80049da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fac7 	bl	8004eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0208 	orr.w	r2, r2, #8
 800496c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0204 	bic.w	r2, r2, #4
 800497c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69d9      	ldr	r1, [r3, #28]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	61da      	str	r2, [r3, #28]
      break;
 8004990:	e023      	b.n	80049da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fb1b 	bl	8004fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69d9      	ldr	r1, [r3, #28]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	021a      	lsls	r2, r3, #8
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	61da      	str	r2, [r3, #28]
      break;
 80049d2:	e002      	b.n	80049da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75fb      	strb	r3, [r7, #23]
      break;
 80049d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_TIM_ConfigClockSource+0x1c>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e0b4      	b.n	8004b72 <HAL_TIM_ConfigClockSource+0x186>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a40:	d03e      	beq.n	8004ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a46:	f200 8087 	bhi.w	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	f000 8086 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x172>
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d87f      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b70      	cmp	r3, #112	; 0x70
 8004a5a:	d01a      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0xa6>
 8004a5c:	2b70      	cmp	r3, #112	; 0x70
 8004a5e:	d87b      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b60      	cmp	r3, #96	; 0x60
 8004a62:	d050      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x11a>
 8004a64:	2b60      	cmp	r3, #96	; 0x60
 8004a66:	d877      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b50      	cmp	r3, #80	; 0x50
 8004a6a:	d03c      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a6c:	2b50      	cmp	r3, #80	; 0x50
 8004a6e:	d873      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	d058      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x13a>
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d86f      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b30      	cmp	r3, #48	; 0x30
 8004a7a:	d064      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a7c:	2b30      	cmp	r3, #48	; 0x30
 8004a7e:	d86b      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d060      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d867      	bhi.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05c      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d05a      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x15a>
 8004a90:	e062      	b.n	8004b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f000 fb67 	bl	8005174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	609a      	str	r2, [r3, #8]
      break;
 8004abe:	e04f      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	6899      	ldr	r1, [r3, #8]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f000 fb50 	bl	8005174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae2:	609a      	str	r2, [r3, #8]
      break;
 8004ae4:	e03c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	461a      	mov	r2, r3
 8004af4:	f000 fac4 	bl	8005080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2150      	movs	r1, #80	; 0x50
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fb1d 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004b04:	e02c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 fae3 	bl	80050de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2160      	movs	r1, #96	; 0x60
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fb0d 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004b24:	e01c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 faa4 	bl	8005080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2140      	movs	r1, #64	; 0x40
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fafd 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004b44:	e00c      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f000 faf4 	bl	800513e <TIM_ITRx_SetConfig>
      break;
 8004b56:	e003      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5c:	e000      	b.n	8004b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a40      	ldr	r2, [pc, #256]	; (8004cf4 <TIM_Base_SetConfig+0x114>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <TIM_Base_SetConfig+0x40>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfe:	d00f      	beq.n	8004c20 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a3d      	ldr	r2, [pc, #244]	; (8004cf8 <TIM_Base_SetConfig+0x118>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a3c      	ldr	r2, [pc, #240]	; (8004cfc <TIM_Base_SetConfig+0x11c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <TIM_Base_SetConfig+0x40>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a3b      	ldr	r2, [pc, #236]	; (8004d00 <TIM_Base_SetConfig+0x120>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a3a      	ldr	r2, [pc, #232]	; (8004d04 <TIM_Base_SetConfig+0x124>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d108      	bne.n	8004c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2f      	ldr	r2, [pc, #188]	; (8004cf4 <TIM_Base_SetConfig+0x114>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d02b      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c40:	d027      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <TIM_Base_SetConfig+0x118>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d023      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a2b      	ldr	r2, [pc, #172]	; (8004cfc <TIM_Base_SetConfig+0x11c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01f      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2a      	ldr	r2, [pc, #168]	; (8004d00 <TIM_Base_SetConfig+0x120>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01b      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a29      	ldr	r2, [pc, #164]	; (8004d04 <TIM_Base_SetConfig+0x124>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d017      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a28      	ldr	r2, [pc, #160]	; (8004d08 <TIM_Base_SetConfig+0x128>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <TIM_Base_SetConfig+0x12c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00f      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <TIM_Base_SetConfig+0x130>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00b      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a25      	ldr	r2, [pc, #148]	; (8004d14 <TIM_Base_SetConfig+0x134>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d007      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a24      	ldr	r2, [pc, #144]	; (8004d18 <TIM_Base_SetConfig+0x138>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d003      	beq.n	8004c92 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a23      	ldr	r2, [pc, #140]	; (8004d1c <TIM_Base_SetConfig+0x13c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d108      	bne.n	8004ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <TIM_Base_SetConfig+0x114>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_Base_SetConfig+0xf8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <TIM_Base_SetConfig+0x124>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d103      	bne.n	8004ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	615a      	str	r2, [r3, #20]
}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40010400 	.word	0x40010400
 8004d08:	40014000 	.word	0x40014000
 8004d0c:	40014400 	.word	0x40014400
 8004d10:	40014800 	.word	0x40014800
 8004d14:	40001800 	.word	0x40001800
 8004d18:	40001c00 	.word	0x40001c00
 8004d1c:	40002000 	.word	0x40002000

08004d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f023 0201 	bic.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0303 	bic.w	r3, r3, #3
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 0302 	bic.w	r3, r3, #2
 8004d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a20      	ldr	r2, [pc, #128]	; (8004df8 <TIM_OC1_SetConfig+0xd8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <TIM_OC1_SetConfig+0x64>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <TIM_OC1_SetConfig+0xdc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d10c      	bne.n	8004d9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0308 	bic.w	r3, r3, #8
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f023 0304 	bic.w	r3, r3, #4
 8004d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <TIM_OC1_SetConfig+0xd8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d003      	beq.n	8004dae <TIM_OC1_SetConfig+0x8e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a14      	ldr	r2, [pc, #80]	; (8004dfc <TIM_OC1_SetConfig+0xdc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d111      	bne.n	8004dd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	621a      	str	r2, [r3, #32]
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40010400 	.word	0x40010400

08004e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f023 0210 	bic.w	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0320 	bic.w	r3, r3, #32
 8004e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a22      	ldr	r2, [pc, #136]	; (8004ee4 <TIM_OC2_SetConfig+0xe4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC2_SetConfig+0x68>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <TIM_OC2_SetConfig+0xe8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d10d      	bne.n	8004e84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <TIM_OC2_SetConfig+0xe4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_OC2_SetConfig+0x94>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <TIM_OC2_SetConfig+0xe8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d113      	bne.n	8004ebc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40010400 	.word	0x40010400

08004eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a21      	ldr	r2, [pc, #132]	; (8004fcc <TIM_OC3_SetConfig+0xe0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_OC3_SetConfig+0x66>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a20      	ldr	r2, [pc, #128]	; (8004fd0 <TIM_OC3_SetConfig+0xe4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10d      	bne.n	8004f6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a16      	ldr	r2, [pc, #88]	; (8004fcc <TIM_OC3_SetConfig+0xe0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_OC3_SetConfig+0x92>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <TIM_OC3_SetConfig+0xe4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d113      	bne.n	8004fa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	621a      	str	r2, [r3, #32]
}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	021b      	lsls	r3, r3, #8
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800501e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	031b      	lsls	r3, r3, #12
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a12      	ldr	r2, [pc, #72]	; (8005078 <TIM_OC4_SetConfig+0xa4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_OC4_SetConfig+0x68>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <TIM_OC4_SetConfig+0xa8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d109      	bne.n	8005050 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	4313      	orrs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000
 800507c:	40010400 	.word	0x40010400

08005080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f023 030a 	bic.w	r3, r3, #10
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0210 	bic.w	r2, r3, #16
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	031b      	lsls	r3, r3, #12
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800511a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	621a      	str	r2, [r3, #32]
}
 8005132:	bf00      	nop
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	f043 0307 	orr.w	r3, r3, #7
 8005160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	609a      	str	r2, [r3, #8]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	021a      	lsls	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	431a      	orrs	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	2201      	movs	r2, #1
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	43db      	mvns	r3, r3
 80051d6:	401a      	ands	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_TIMEx_PWMN_Start+0x24>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e022      	b.n	800526a <HAL_TIMEx_PWMN_Start+0x6a>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b04      	cmp	r3, #4
 8005228:	d109      	bne.n	800523e <HAL_TIMEx_PWMN_Start+0x3e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	e015      	b.n	800526a <HAL_TIMEx_PWMN_Start+0x6a>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b08      	cmp	r3, #8
 8005242:	d109      	bne.n	8005258 <HAL_TIMEx_PWMN_Start+0x58>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e008      	b.n	800526a <HAL_TIMEx_PWMN_Start+0x6a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	bf14      	ite	ne
 8005264:	2301      	movne	r3, #1
 8005266:	2300      	moveq	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e06d      	b.n	800534e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIMEx_PWMN_Start+0x82>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005280:	e013      	b.n	80052aa <HAL_TIMEx_PWMN_Start+0xaa>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIMEx_PWMN_Start+0x92>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005290:	e00b      	b.n	80052aa <HAL_TIMEx_PWMN_Start+0xaa>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIMEx_PWMN_Start+0xa2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a0:	e003      	b.n	80052aa <HAL_TIMEx_PWMN_Start+0xaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2204      	movs	r2, #4
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 f940 	bl	8005538 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a22      	ldr	r2, [pc, #136]	; (8005358 <HAL_TIMEx_PWMN_Start+0x158>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d022      	beq.n	8005318 <HAL_TIMEx_PWMN_Start+0x118>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d01d      	beq.n	8005318 <HAL_TIMEx_PWMN_Start+0x118>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a1e      	ldr	r2, [pc, #120]	; (800535c <HAL_TIMEx_PWMN_Start+0x15c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d018      	beq.n	8005318 <HAL_TIMEx_PWMN_Start+0x118>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_TIMEx_PWMN_Start+0x160>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d013      	beq.n	8005318 <HAL_TIMEx_PWMN_Start+0x118>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1b      	ldr	r2, [pc, #108]	; (8005364 <HAL_TIMEx_PWMN_Start+0x164>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00e      	beq.n	8005318 <HAL_TIMEx_PWMN_Start+0x118>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <HAL_TIMEx_PWMN_Start+0x168>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d009      	beq.n	8005318 <HAL_TIMEx_PWMN_Start+0x118>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a18      	ldr	r2, [pc, #96]	; (800536c <HAL_TIMEx_PWMN_Start+0x16c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d004      	beq.n	8005318 <HAL_TIMEx_PWMN_Start+0x118>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a17      	ldr	r2, [pc, #92]	; (8005370 <HAL_TIMEx_PWMN_Start+0x170>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d111      	bne.n	800533c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b06      	cmp	r3, #6
 8005328:	d010      	beq.n	800534c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533a:	e007      	b.n	800534c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40010000 	.word	0x40010000
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40010400 	.word	0x40010400
 800536c:	40014000 	.word	0x40014000
 8005370:	40001800 	.word	0x40001800

08005374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005388:	2302      	movs	r3, #2
 800538a:	e05a      	b.n	8005442 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a21      	ldr	r2, [pc, #132]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d022      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d01d      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d018      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1a      	ldr	r2, [pc, #104]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00e      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a18      	ldr	r2, [pc, #96]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d009      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a17      	ldr	r2, [pc, #92]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d10c      	bne.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800541c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	4313      	orrs	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40010000 	.word	0x40010000
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40000c00 	.word	0x40000c00
 8005460:	40010400 	.word	0x40010400
 8005464:	40014000 	.word	0x40014000
 8005468:	40001800 	.word	0x40001800

0800546c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005484:	2302      	movs	r3, #2
 8005486:	e03d      	b.n	8005504 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2204      	movs	r2, #4
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1a      	ldr	r2, [r3, #32]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	43db      	mvns	r3, r3
 800555a:	401a      	ands	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1a      	ldr	r2, [r3, #32]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	431a      	orrs	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005582:	b084      	sub	sp, #16
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	f107 001c 	add.w	r0, r7, #28
 8005590:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	2b01      	cmp	r3, #1
 8005598:	d122      	bne.n	80055e0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d105      	bne.n	80055d4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f001 fbed 	bl	8006db4 <USB_CoreReset>
 80055da:	4603      	mov	r3, r0
 80055dc:	73fb      	strb	r3, [r7, #15]
 80055de:	e01a      	b.n	8005616 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 fbe1 	bl	8006db4 <USB_CoreReset>
 80055f2:	4603      	mov	r3, r0
 80055f4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
 8005608:	e005      	b.n	8005616 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10b      	bne.n	8005634 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f043 0206 	orr.w	r2, r3, #6
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f043 0220 	orr.w	r2, r3, #32
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005634:	7bfb      	ldrb	r3, [r7, #15]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005640:	b004      	add	sp, #16
 8005642:	4770      	bx	lr

08005644 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	2b02      	cmp	r3, #2
 8005656:	d165      	bne.n	8005724 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a41      	ldr	r2, [pc, #260]	; (8005760 <USB_SetTurnaroundTime+0x11c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d906      	bls.n	800566e <USB_SetTurnaroundTime+0x2a>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4a40      	ldr	r2, [pc, #256]	; (8005764 <USB_SetTurnaroundTime+0x120>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d202      	bcs.n	800566e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005668:	230f      	movs	r3, #15
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e062      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4a3c      	ldr	r2, [pc, #240]	; (8005764 <USB_SetTurnaroundTime+0x120>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d306      	bcc.n	8005684 <USB_SetTurnaroundTime+0x40>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4a3b      	ldr	r2, [pc, #236]	; (8005768 <USB_SetTurnaroundTime+0x124>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d202      	bcs.n	8005684 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800567e:	230e      	movs	r3, #14
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e057      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4a38      	ldr	r2, [pc, #224]	; (8005768 <USB_SetTurnaroundTime+0x124>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d306      	bcc.n	800569a <USB_SetTurnaroundTime+0x56>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4a37      	ldr	r2, [pc, #220]	; (800576c <USB_SetTurnaroundTime+0x128>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d202      	bcs.n	800569a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005694:	230d      	movs	r3, #13
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e04c      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4a33      	ldr	r2, [pc, #204]	; (800576c <USB_SetTurnaroundTime+0x128>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d306      	bcc.n	80056b0 <USB_SetTurnaroundTime+0x6c>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4a32      	ldr	r2, [pc, #200]	; (8005770 <USB_SetTurnaroundTime+0x12c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d802      	bhi.n	80056b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056aa:	230c      	movs	r3, #12
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e041      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4a2f      	ldr	r2, [pc, #188]	; (8005770 <USB_SetTurnaroundTime+0x12c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d906      	bls.n	80056c6 <USB_SetTurnaroundTime+0x82>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4a2e      	ldr	r2, [pc, #184]	; (8005774 <USB_SetTurnaroundTime+0x130>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d802      	bhi.n	80056c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056c0:	230b      	movs	r3, #11
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e036      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <USB_SetTurnaroundTime+0x130>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d906      	bls.n	80056dc <USB_SetTurnaroundTime+0x98>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4a29      	ldr	r2, [pc, #164]	; (8005778 <USB_SetTurnaroundTime+0x134>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d802      	bhi.n	80056dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80056d6:	230a      	movs	r3, #10
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	e02b      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4a26      	ldr	r2, [pc, #152]	; (8005778 <USB_SetTurnaroundTime+0x134>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d906      	bls.n	80056f2 <USB_SetTurnaroundTime+0xae>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4a25      	ldr	r2, [pc, #148]	; (800577c <USB_SetTurnaroundTime+0x138>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d202      	bcs.n	80056f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80056ec:	2309      	movs	r3, #9
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e020      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4a21      	ldr	r2, [pc, #132]	; (800577c <USB_SetTurnaroundTime+0x138>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d306      	bcc.n	8005708 <USB_SetTurnaroundTime+0xc4>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4a20      	ldr	r2, [pc, #128]	; (8005780 <USB_SetTurnaroundTime+0x13c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d802      	bhi.n	8005708 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005702:	2308      	movs	r3, #8
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e015      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <USB_SetTurnaroundTime+0x13c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d906      	bls.n	800571e <USB_SetTurnaroundTime+0xda>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <USB_SetTurnaroundTime+0x140>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d202      	bcs.n	800571e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005718:	2307      	movs	r3, #7
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e00a      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800571e:	2306      	movs	r3, #6
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e007      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800572a:	2309      	movs	r3, #9
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e001      	b.n	8005734 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005730:	2309      	movs	r3, #9
 8005732:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	029b      	lsls	r3, r3, #10
 8005748:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800574c:	431a      	orrs	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	00d8acbf 	.word	0x00d8acbf
 8005764:	00e4e1c0 	.word	0x00e4e1c0
 8005768:	00f42400 	.word	0x00f42400
 800576c:	01067380 	.word	0x01067380
 8005770:	011a499f 	.word	0x011a499f
 8005774:	01312cff 	.word	0x01312cff
 8005778:	014ca43f 	.word	0x014ca43f
 800577c:	016e3600 	.word	0x016e3600
 8005780:	01a6ab1f 	.word	0x01a6ab1f
 8005784:	01e84800 	.word	0x01e84800

08005788 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f043 0201 	orr.w	r2, r3, #1
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d115      	bne.n	800581a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057fa:	2001      	movs	r0, #1
 80057fc:	f7fb ffa0 	bl	8001740 <HAL_Delay>
      ms++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3301      	adds	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 fa45 	bl	8006c96 <USB_GetMode>
 800580c:	4603      	mov	r3, r0
 800580e:	2b01      	cmp	r3, #1
 8005810:	d01e      	beq.n	8005850 <USB_SetCurrentMode+0x84>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b31      	cmp	r3, #49	; 0x31
 8005816:	d9f0      	bls.n	80057fa <USB_SetCurrentMode+0x2e>
 8005818:	e01a      	b.n	8005850 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d115      	bne.n	800584c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800582c:	2001      	movs	r0, #1
 800582e:	f7fb ff87 	bl	8001740 <HAL_Delay>
      ms++;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3301      	adds	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f001 fa2c 	bl	8006c96 <USB_GetMode>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <USB_SetCurrentMode+0x84>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b31      	cmp	r3, #49	; 0x31
 8005848:	d9f0      	bls.n	800582c <USB_SetCurrentMode+0x60>
 800584a:	e001      	b.n	8005850 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e005      	b.n	800585c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b32      	cmp	r3, #50	; 0x32
 8005854:	d101      	bne.n	800585a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005864:	b084      	sub	sp, #16
 8005866:	b580      	push	{r7, lr}
 8005868:	b086      	sub	sp, #24
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e009      	b.n	8005898 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3340      	adds	r3, #64	; 0x40
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	2200      	movs	r2, #0
 8005890:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3301      	adds	r3, #1
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b0e      	cmp	r3, #14
 800589c:	d9f2      	bls.n	8005884 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800589e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d11c      	bne.n	80058de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b2:	f043 0302 	orr.w	r3, r3, #2
 80058b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	639a      	str	r2, [r3, #56]	; 0x38
 80058dc:	e00b      	b.n	80058f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058fc:	461a      	mov	r2, r3
 80058fe:	2300      	movs	r3, #0
 8005900:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005908:	4619      	mov	r1, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	461a      	mov	r2, r3
 8005912:	680b      	ldr	r3, [r1, #0]
 8005914:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	2b01      	cmp	r3, #1
 800591a:	d10c      	bne.n	8005936 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d104      	bne.n	800592c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005922:	2100      	movs	r1, #0
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f965 	bl	8005bf4 <USB_SetDevSpeed>
 800592a:	e008      	b.n	800593e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800592c:	2101      	movs	r1, #1
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f960 	bl	8005bf4 <USB_SetDevSpeed>
 8005934:	e003      	b.n	800593e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005936:	2103      	movs	r1, #3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f95b 	bl	8005bf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800593e:	2110      	movs	r1, #16
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f8f3 	bl	8005b2c <USB_FlushTxFifo>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f91f 	bl	8005b94 <USB_FlushRxFifo>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	461a      	mov	r2, r3
 8005968:	2300      	movs	r3, #0
 800596a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	461a      	mov	r2, r3
 8005974:	2300      	movs	r3, #0
 8005976:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	461a      	mov	r2, r3
 8005980:	2300      	movs	r3, #0
 8005982:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	e043      	b.n	8005a12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800599c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a0:	d118      	bne.n	80059d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	461a      	mov	r2, r3
 80059b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e013      	b.n	80059e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	461a      	mov	r2, r3
 80059cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	e008      	b.n	80059e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	461a      	mov	r2, r3
 80059e2:	2300      	movs	r3, #0
 80059e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	461a      	mov	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	461a      	mov	r2, r3
 8005a06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d3b7      	bcc.n	800598a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	e043      	b.n	8005aa8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a36:	d118      	bne.n	8005a6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	e013      	b.n	8005a7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a60:	461a      	mov	r2, r3
 8005a62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e008      	b.n	8005a7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a76:	461a      	mov	r2, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	613b      	str	r3, [r7, #16]
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d3b7      	bcc.n	8005a20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005abe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ac2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ad0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	f043 0210 	orr.w	r2, r3, #16
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <USB_DevInit+0x2c4>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f043 0208 	orr.w	r2, r3, #8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d107      	bne.n	8005b18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b10:	f043 0304 	orr.w	r3, r3, #4
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b24:	b004      	add	sp, #16
 8005b26:	4770      	bx	lr
 8005b28:	803c3800 	.word	0x803c3800

08005b2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4a13      	ldr	r2, [pc, #76]	; (8005b90 <USB_FlushTxFifo+0x64>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d901      	bls.n	8005b4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e01b      	b.n	8005b84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	daf2      	bge.n	8005b3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	019b      	lsls	r3, r3, #6
 8005b5c:	f043 0220 	orr.w	r2, r3, #32
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4a08      	ldr	r2, [pc, #32]	; (8005b90 <USB_FlushTxFifo+0x64>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e006      	b.n	8005b84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d0f0      	beq.n	8005b64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	00030d40 	.word	0x00030d40

08005b94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4a11      	ldr	r2, [pc, #68]	; (8005bf0 <USB_FlushRxFifo+0x5c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e018      	b.n	8005be4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	daf2      	bge.n	8005ba0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2210      	movs	r2, #16
 8005bc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a08      	ldr	r2, [pc, #32]	; (8005bf0 <USB_FlushRxFifo+0x5c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d901      	bls.n	8005bd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e006      	b.n	8005be4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d0f0      	beq.n	8005bc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	00030d40 	.word	0x00030d40

08005bf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	78fb      	ldrb	r3, [r7, #3]
 8005c0e:	68f9      	ldr	r1, [r7, #12]
 8005c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c14:	4313      	orrs	r3, r2
 8005c16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b087      	sub	sp, #28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 0306 	and.w	r3, r3, #6
 8005c3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c46:	2300      	movs	r3, #0
 8005c48:	75fb      	strb	r3, [r7, #23]
 8005c4a:	e00a      	b.n	8005c62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d002      	beq.n	8005c58 <USB_GetDevSpeed+0x32>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b06      	cmp	r3, #6
 8005c56:	d102      	bne.n	8005c5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	75fb      	strb	r3, [r7, #23]
 8005c5c:	e001      	b.n	8005c62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c5e:	230f      	movs	r3, #15
 8005c60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d13a      	bne.n	8005d02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	68f9      	ldr	r1, [r7, #12]
 8005ca6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005caa:	4313      	orrs	r3, r2
 8005cac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d155      	bne.n	8005d70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	791b      	ldrb	r3, [r3, #4]
 8005cde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ce0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	059b      	lsls	r3, r3, #22
 8005ce6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	e036      	b.n	8005d70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	69da      	ldr	r2, [r3, #28]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	2101      	movs	r1, #1
 8005d14:	fa01 f303 	lsl.w	r3, r1, r3
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d11a      	bne.n	8005d70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	791b      	ldrb	r3, [r3, #4]
 8005d54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d56:	430b      	orrs	r3, r1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d161      	bne.n	8005e60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db2:	d11f      	bne.n	8005df4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	2101      	movs	r1, #1
 8005e06:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	68f9      	ldr	r1, [r7, #12]
 8005e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e14:	4013      	ands	r3, r2
 8005e16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	2101      	movs	r1, #1
 8005e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	0159      	lsls	r1, r3, #5
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	440b      	add	r3, r1
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	4619      	mov	r1, r3
 8005e58:	4b35      	ldr	r3, [pc, #212]	; (8005f30 <USB_DeactivateEndpoint+0x1b0>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	600b      	str	r3, [r1, #0]
 8005e5e:	e060      	b.n	8005f22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e76:	d11f      	bne.n	8005eb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	2101      	movs	r1, #1
 8005eca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed8:	4013      	ands	r3, r2
 8005eda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005efc:	4013      	ands	r3, r2
 8005efe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	0159      	lsls	r1, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	440b      	add	r3, r1
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <USB_DeactivateEndpoint+0x1b4>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	ec337800 	.word	0xec337800
 8005f34:	eff37800 	.word	0xeff37800

08005f38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08a      	sub	sp, #40	; 0x28
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	4613      	mov	r3, r2
 8005f44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	785b      	ldrb	r3, [r3, #1]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	f040 815c 	bne.w	8006212 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d132      	bne.n	8005fc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc0:	0cdb      	lsrs	r3, r3, #19
 8005fc2:	04db      	lsls	r3, r3, #19
 8005fc4:	6113      	str	r3, [r2, #16]
 8005fc6:	e074      	b.n	80060b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe2:	0cdb      	lsrs	r3, r3, #19
 8005fe4:	04db      	lsls	r3, r3, #19
 8005fe6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006002:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006006:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800600a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006018:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6999      	ldr	r1, [r3, #24]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	440b      	add	r3, r1
 8006024:	1e59      	subs	r1, r3, #1
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	fbb1 f3f3 	udiv	r3, r1, r3
 800602e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006030:	4b9d      	ldr	r3, [pc, #628]	; (80062a8 <USB_EPStartXfer+0x370>)
 8006032:	400b      	ands	r3, r1
 8006034:	69b9      	ldr	r1, [r7, #24]
 8006036:	0148      	lsls	r0, r1, #5
 8006038:	69f9      	ldr	r1, [r7, #28]
 800603a:	4401      	add	r1, r0
 800603c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006040:	4313      	orrs	r3, r2
 8006042:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800605a:	69b9      	ldr	r1, [r7, #24]
 800605c:	0148      	lsls	r0, r1, #5
 800605e:	69f9      	ldr	r1, [r7, #28]
 8006060:	4401      	add	r1, r0
 8006062:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006066:	4313      	orrs	r3, r2
 8006068:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	791b      	ldrb	r3, [r3, #4]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d11f      	bne.n	80060b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	440a      	add	r2, r1
 8006088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006090:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d14b      	bne.n	8006150 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	461a      	mov	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	791b      	ldrb	r3, [r3, #4]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d128      	bne.n	800612e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d110      	bne.n	800610e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006106:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e00f      	b.n	800612e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006148:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e133      	b.n	80063b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800616e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	791b      	ldrb	r3, [r3, #4]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d015      	beq.n	80061a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 811b 	beq.w	80063b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	2101      	movs	r1, #1
 8006194:	fa01 f303 	lsl.w	r3, r1, r3
 8006198:	69f9      	ldr	r1, [r7, #28]
 800619a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800619e:	4313      	orrs	r3, r2
 80061a0:	634b      	str	r3, [r1, #52]	; 0x34
 80061a2:	e109      	b.n	80063b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d110      	bne.n	80061d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e00f      	b.n	80061f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6919      	ldr	r1, [r3, #16]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781a      	ldrb	r2, [r3, #0]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	b298      	uxth	r0, r3
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4603      	mov	r3, r0
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fade 	bl	80067cc <USB_WritePacket>
 8006210:	e0d2      	b.n	80063b8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	440a      	add	r2, r1
 8006228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622c:	0cdb      	lsrs	r3, r3, #19
 800622e:	04db      	lsls	r3, r3, #19
 8006230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	440a      	add	r2, r1
 8006248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006250:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006254:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d126      	bne.n	80062ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006274:	69b9      	ldr	r1, [r7, #24]
 8006276:	0148      	lsls	r0, r1, #5
 8006278:	69f9      	ldr	r1, [r7, #28]
 800627a:	4401      	add	r1, r0
 800627c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006280:	4313      	orrs	r3, r2
 8006282:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	440a      	add	r2, r1
 800629a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062a2:	6113      	str	r3, [r2, #16]
 80062a4:	e03a      	b.n	800631c <USB_EPStartXfer+0x3e4>
 80062a6:	bf00      	nop
 80062a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	1e5a      	subs	r2, r3, #1
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	8afa      	ldrh	r2, [r7, #22]
 80062c8:	fb03 f202 	mul.w	r2, r3, r2
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	8afb      	ldrh	r3, [r7, #22]
 80062e0:	04d9      	lsls	r1, r3, #19
 80062e2:	4b38      	ldr	r3, [pc, #224]	; (80063c4 <USB_EPStartXfer+0x48c>)
 80062e4:	400b      	ands	r3, r1
 80062e6:	69b9      	ldr	r1, [r7, #24]
 80062e8:	0148      	lsls	r0, r1, #5
 80062ea:	69f9      	ldr	r1, [r7, #28]
 80062ec:	4401      	add	r1, r0
 80062ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062f2:	4313      	orrs	r3, r2
 80062f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800630c:	69b9      	ldr	r1, [r7, #24]
 800630e:	0148      	lsls	r0, r1, #5
 8006310:	69f9      	ldr	r1, [r7, #28]
 8006312:	4401      	add	r1, r0
 8006314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006318:	4313      	orrs	r3, r2
 800631a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d10d      	bne.n	800633e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6919      	ldr	r1, [r3, #16]
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633a:	460a      	mov	r2, r1
 800633c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d128      	bne.n	8006398 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006352:	2b00      	cmp	r3, #0
 8006354:	d110      	bne.n	8006378 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	440a      	add	r2, r1
 800636c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e00f      	b.n	8006398 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006396:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	1ff80000 	.word	0x1ff80000

080063c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	f040 80ce 	bne.w	8006586 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d132      	bne.n	8006458 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006410:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	440a      	add	r2, r1
 800644c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006450:	0cdb      	lsrs	r3, r3, #19
 8006452:	04db      	lsls	r3, r3, #19
 8006454:	6113      	str	r3, [r2, #16]
 8006456:	e04e      	b.n	80064f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	0cdb      	lsrs	r3, r3, #19
 8006474:	04db      	lsls	r3, r3, #19
 8006476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	440a      	add	r2, r1
 800648e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006492:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006496:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800649a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d903      	bls.n	80064b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e6:	6939      	ldr	r1, [r7, #16]
 80064e8:	0148      	lsls	r0, r1, #5
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	4401      	add	r1, r0
 80064ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064f2:	4313      	orrs	r3, r2
 80064f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d11e      	bne.n	800653a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006510:	461a      	mov	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	e097      	b.n	800666a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006554:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006558:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8083 	beq.w	800666a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	2101      	movs	r1, #1
 8006576:	fa01 f303 	lsl.w	r3, r1, r3
 800657a:	6979      	ldr	r1, [r7, #20]
 800657c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006580:	4313      	orrs	r3, r2
 8006582:	634b      	str	r3, [r1, #52]	; 0x34
 8006584:	e071      	b.n	800666a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a0:	0cdb      	lsrs	r3, r3, #19
 80065a2:	04db      	lsls	r3, r3, #19
 80065a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006618:	6939      	ldr	r1, [r7, #16]
 800661a:	0148      	lsls	r0, r1, #5
 800661c:	6979      	ldr	r1, [r7, #20]
 800661e:	4401      	add	r1, r0
 8006620:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006624:	4313      	orrs	r3, r2
 8006626:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d10d      	bne.n	800664a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6919      	ldr	r1, [r3, #16]
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	460a      	mov	r2, r1
 8006648:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	440a      	add	r2, r1
 8006660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006664:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006668:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d14a      	bne.n	800672c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ae:	f040 8086 	bne.w	80067be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f242 7210 	movw	r2, #10000	; 0x2710
 8006706:	4293      	cmp	r3, r2
 8006708:	d902      	bls.n	8006710 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
          break;
 800670e:	e056      	b.n	80067be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006728:	d0e7      	beq.n	80066fa <USB_EPStopXfer+0x82>
 800672a:	e048      	b.n	80067be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006744:	d13b      	bne.n	80067be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	7812      	ldrb	r2, [r2, #0]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	440a      	add	r2, r1
 8006760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006764:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006768:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800678c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f242 7210 	movw	r2, #10000	; 0x2710
 800679a:	4293      	cmp	r3, r2
 800679c:	d902      	bls.n	80067a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	75fb      	strb	r3, [r7, #23]
          break;
 80067a2:	e00c      	b.n	80067be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067bc:	d0e7      	beq.n	800678e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b089      	sub	sp, #36	; 0x24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4611      	mov	r1, r2
 80067d8:	461a      	mov	r2, r3
 80067da:	460b      	mov	r3, r1
 80067dc:	71fb      	strb	r3, [r7, #7]
 80067de:	4613      	mov	r3, r2
 80067e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d123      	bne.n	800683a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067f2:	88bb      	ldrh	r3, [r7, #4]
 80067f4:	3303      	adds	r3, #3
 80067f6:	089b      	lsrs	r3, r3, #2
 80067f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067fa:	2300      	movs	r3, #0
 80067fc:	61bb      	str	r3, [r7, #24]
 80067fe:	e018      	b.n	8006832 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	031a      	lsls	r2, r3, #12
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4413      	add	r3, r2
 8006808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680c:	461a      	mov	r2, r3
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	3301      	adds	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	3301      	adds	r3, #1
 8006824:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	3301      	adds	r3, #1
 800682a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	3301      	adds	r3, #1
 8006830:	61bb      	str	r3, [r7, #24]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	429a      	cmp	r2, r3
 8006838:	d3e2      	bcc.n	8006800 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3724      	adds	r7, #36	; 0x24
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006848:	b480      	push	{r7}
 800684a:	b08b      	sub	sp, #44	; 0x2c
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	089b      	lsrs	r3, r3, #2
 8006862:	b29b      	uxth	r3, r3
 8006864:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006866:	88fb      	ldrh	r3, [r7, #6]
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800686e:	2300      	movs	r3, #0
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	e014      	b.n	800689e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	3301      	adds	r3, #1
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	3301      	adds	r3, #1
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	3301      	adds	r3, #1
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	3301      	adds	r3, #1
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	3301      	adds	r3, #1
 800689c:	623b      	str	r3, [r7, #32]
 800689e:	6a3a      	ldr	r2, [r7, #32]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d3e6      	bcc.n	8006874 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068a6:	8bfb      	ldrh	r3, [r7, #30]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01e      	beq.n	80068ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b6:	461a      	mov	r2, r3
 80068b8:	f107 0310 	add.w	r3, r7, #16
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	fa22 f303 	lsr.w	r3, r2, r3
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	701a      	strb	r2, [r3, #0]
      i++;
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	3301      	adds	r3, #1
 80068d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	3301      	adds	r3, #1
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80068de:	8bfb      	ldrh	r3, [r7, #30]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068e4:	8bfb      	ldrh	r3, [r7, #30]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1ea      	bne.n	80068c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	372c      	adds	r7, #44	; 0x2c
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d12c      	bne.n	800696e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	db12      	blt.n	800694c <USB_EPSetStall+0x54>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00f      	beq.n	800694c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	440a      	add	r2, r1
 8006942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800694a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	0151      	lsls	r1, r2, #5
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	440a      	add	r2, r1
 8006962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	e02b      	b.n	80069c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	db12      	blt.n	80069a6 <USB_EPSetStall+0xae>
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00f      	beq.n	80069a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	0151      	lsls	r1, r2, #5
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	440a      	add	r2, r1
 800699c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	0151      	lsls	r1, r2, #5
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	440a      	add	r2, r1
 80069bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d128      	bne.n	8006a42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	0151      	lsls	r1, r2, #5
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	440a      	add	r2, r1
 8006a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	791b      	ldrb	r3, [r3, #4]
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d003      	beq.n	8006a20 <USB_EPClearStall+0x4c>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	791b      	ldrb	r3, [r3, #4]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d138      	bne.n	8006a92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	e027      	b.n	8006a92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	791b      	ldrb	r3, [r3, #4]
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d003      	beq.n	8006a72 <USB_EPClearStall+0x9e>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	791b      	ldrb	r3, [r3, #4]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d10f      	bne.n	8006a92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006abe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ac2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ad4:	68f9      	ldr	r1, [r7, #12]
 8006ad6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ada:	4313      	orrs	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b1a:	f023 0302 	bic.w	r3, r3, #2
 8006b1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b085      	sub	sp, #20
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b48:	f023 0303 	bic.w	r3, r3, #3
 8006b4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b5c:	f043 0302 	orr.w	r3, r3, #2
 8006b60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4013      	ands	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b88:	68fb      	ldr	r3, [r7, #12]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	0c1b      	lsrs	r3, r3, #16
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	4013      	ands	r3, r2
 8006bec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	b29b      	uxth	r3, r3
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	460b      	mov	r3, r1
 8006c08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b087      	sub	sp, #28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	460b      	mov	r3, r1
 8006c44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6a:	01db      	lsls	r3, r3, #7
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4013      	ands	r3, r2
 8006c86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c88:	68bb      	ldr	r3, [r7, #8]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ccc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cd0:	f023 0307 	bic.w	r3, r3, #7
 8006cd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	460b      	mov	r3, r1
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	333c      	adds	r3, #60	; 0x3c
 8006d0e:	3304      	adds	r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <USB_EP0_OutStart+0xb8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d90a      	bls.n	8006d32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d2c:	d101      	bne.n	8006d32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e037      	b.n	8006da2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d38:	461a      	mov	r2, r3
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d60:	f043 0318 	orr.w	r3, r3, #24
 8006d64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d74:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d10f      	bne.n	8006da0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	461a      	mov	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d9a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	4f54300a 	.word	0x4f54300a

08006db4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a13      	ldr	r2, [pc, #76]	; (8006e18 <USB_CoreReset+0x64>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e01b      	b.n	8006e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	daf2      	bge.n	8006dc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f043 0201 	orr.w	r2, r3, #1
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3301      	adds	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <USB_CoreReset+0x64>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e006      	b.n	8006e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d0f0      	beq.n	8006dea <USB_CoreReset+0x36>

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	00030d40 	.word	0x00030d40

08006e1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e2c:	f002 fc9e 	bl	800976c <USBD_static_malloc>
 8006e30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d109      	bne.n	8006e4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	32b0      	adds	r2, #176	; 0xb0
 8006e42:	2100      	movs	r1, #0
 8006e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e0d4      	b.n	8006ff6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e50:	2100      	movs	r1, #0
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f002 fd06 	bl	8009864 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32b0      	adds	r2, #176	; 0xb0
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	32b0      	adds	r2, #176	; 0xb0
 8006e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	7c1b      	ldrb	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d138      	bne.n	8006ef6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e84:	4b5e      	ldr	r3, [pc, #376]	; (8007000 <USBD_CDC_Init+0x1e4>)
 8006e86:	7819      	ldrb	r1, [r3, #0]
 8006e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f002 fb49 	bl	8009526 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e94:	4b5a      	ldr	r3, [pc, #360]	; (8007000 <USBD_CDC_Init+0x1e4>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	3324      	adds	r3, #36	; 0x24
 8006eaa:	2201      	movs	r2, #1
 8006eac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006eae:	4b55      	ldr	r3, [pc, #340]	; (8007004 <USBD_CDC_Init+0x1e8>)
 8006eb0:	7819      	ldrb	r1, [r3, #0]
 8006eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f002 fb34 	bl	8009526 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ebe:	4b51      	ldr	r3, [pc, #324]	; (8007004 <USBD_CDC_Init+0x1e8>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	f003 020f 	and.w	r2, r3, #15
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006eda:	4b4b      	ldr	r3, [pc, #300]	; (8007008 <USBD_CDC_Init+0x1ec>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	3326      	adds	r3, #38	; 0x26
 8006ef0:	2210      	movs	r2, #16
 8006ef2:	801a      	strh	r2, [r3, #0]
 8006ef4:	e035      	b.n	8006f62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ef6:	4b42      	ldr	r3, [pc, #264]	; (8007000 <USBD_CDC_Init+0x1e4>)
 8006ef8:	7819      	ldrb	r1, [r3, #0]
 8006efa:	2340      	movs	r3, #64	; 0x40
 8006efc:	2202      	movs	r2, #2
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f002 fb11 	bl	8009526 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f04:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <USBD_CDC_Init+0x1e4>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	f003 020f 	and.w	r2, r3, #15
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	3324      	adds	r3, #36	; 0x24
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f1e:	4b39      	ldr	r3, [pc, #228]	; (8007004 <USBD_CDC_Init+0x1e8>)
 8006f20:	7819      	ldrb	r1, [r3, #0]
 8006f22:	2340      	movs	r3, #64	; 0x40
 8006f24:	2202      	movs	r2, #2
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f002 fafd 	bl	8009526 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f2c:	4b35      	ldr	r3, [pc, #212]	; (8007004 <USBD_CDC_Init+0x1e8>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f44:	2201      	movs	r2, #1
 8006f46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f48:	4b2f      	ldr	r3, [pc, #188]	; (8007008 <USBD_CDC_Init+0x1ec>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3326      	adds	r3, #38	; 0x26
 8006f5e:	2210      	movs	r2, #16
 8006f60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f62:	4b29      	ldr	r3, [pc, #164]	; (8007008 <USBD_CDC_Init+0x1ec>)
 8006f64:	7819      	ldrb	r1, [r3, #0]
 8006f66:	2308      	movs	r3, #8
 8006f68:	2203      	movs	r2, #3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f002 fadb 	bl	8009526 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f70:	4b25      	ldr	r3, [pc, #148]	; (8007008 <USBD_CDC_Init+0x1ec>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	3324      	adds	r3, #36	; 0x24
 8006f86:	2201      	movs	r2, #1
 8006f88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	33b0      	adds	r3, #176	; 0xb0
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e018      	b.n	8006ff6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7c1b      	ldrb	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fcc:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <USBD_CDC_Init+0x1e8>)
 8006fce:	7819      	ldrb	r1, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f002 fb92 	bl	8009704 <USBD_LL_PrepareReceive>
 8006fe0:	e008      	b.n	8006ff4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fe2:	4b08      	ldr	r3, [pc, #32]	; (8007004 <USBD_CDC_Init+0x1e8>)
 8006fe4:	7819      	ldrb	r1, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fec:	2340      	movs	r3, #64	; 0x40
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f002 fb88 	bl	8009704 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20000693 	.word	0x20000693
 8007004:	20000694 	.word	0x20000694
 8007008:	20000695 	.word	0x20000695

0800700c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007018:	4b3a      	ldr	r3, [pc, #232]	; (8007104 <USBD_CDC_DeInit+0xf8>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f002 faa7 	bl	8009572 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007024:	4b37      	ldr	r3, [pc, #220]	; (8007104 <USBD_CDC_DeInit+0xf8>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	f003 020f 	and.w	r2, r3, #15
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3324      	adds	r3, #36	; 0x24
 800703a:	2200      	movs	r2, #0
 800703c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800703e:	4b32      	ldr	r3, [pc, #200]	; (8007108 <USBD_CDC_DeInit+0xfc>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f002 fa94 	bl	8009572 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800704a:	4b2f      	ldr	r3, [pc, #188]	; (8007108 <USBD_CDC_DeInit+0xfc>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	f003 020f 	and.w	r2, r3, #15
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	440b      	add	r3, r1
 800705e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007062:	2200      	movs	r2, #0
 8007064:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007066:	4b29      	ldr	r3, [pc, #164]	; (800710c <USBD_CDC_DeInit+0x100>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f002 fa80 	bl	8009572 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007072:	4b26      	ldr	r3, [pc, #152]	; (800710c <USBD_CDC_DeInit+0x100>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	f003 020f 	and.w	r2, r3, #15
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	3324      	adds	r3, #36	; 0x24
 8007088:	2200      	movs	r2, #0
 800708a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800708c:	4b1f      	ldr	r3, [pc, #124]	; (800710c <USBD_CDC_DeInit+0x100>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	f003 020f 	and.w	r2, r3, #15
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	3326      	adds	r3, #38	; 0x26
 80070a2:	2200      	movs	r2, #0
 80070a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	32b0      	adds	r2, #176	; 0xb0
 80070b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01f      	beq.n	80070f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	33b0      	adds	r3, #176	; 0xb0
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	32b0      	adds	r2, #176	; 0xb0
 80070d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070da:	4618      	mov	r0, r3
 80070dc:	f002 fb54 	bl	8009788 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	32b0      	adds	r2, #176	; 0xb0
 80070ea:	2100      	movs	r1, #0
 80070ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	20000693 	.word	0x20000693
 8007108:	20000694 	.word	0x20000694
 800710c:	20000695 	.word	0x20000695

08007110 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32b0      	adds	r2, #176	; 0xb0
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	e0bf      	b.n	80072c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007148:	2b00      	cmp	r3, #0
 800714a:	d050      	beq.n	80071ee <USBD_CDC_Setup+0xde>
 800714c:	2b20      	cmp	r3, #32
 800714e:	f040 80af 	bne.w	80072b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d03a      	beq.n	80071d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	b25b      	sxtb	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	da1b      	bge.n	800719c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	33b0      	adds	r3, #176	; 0xb0
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800717a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	88d2      	ldrh	r2, [r2, #6]
 8007180:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	88db      	ldrh	r3, [r3, #6]
 8007186:	2b07      	cmp	r3, #7
 8007188:	bf28      	it	cs
 800718a:	2307      	movcs	r3, #7
 800718c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	89fa      	ldrh	r2, [r7, #14]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fd89 	bl	8008cac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800719a:	e090      	b.n	80072be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	785a      	ldrb	r2, [r3, #1]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	88db      	ldrh	r3, [r3, #6]
 80071aa:	2b3f      	cmp	r3, #63	; 0x3f
 80071ac:	d803      	bhi.n	80071b6 <USBD_CDC_Setup+0xa6>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	88db      	ldrh	r3, [r3, #6]
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	e000      	b.n	80071b8 <USBD_CDC_Setup+0xa8>
 80071b6:	2240      	movs	r2, #64	; 0x40
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071be:	6939      	ldr	r1, [r7, #16]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80071c6:	461a      	mov	r2, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fd9b 	bl	8008d04 <USBD_CtlPrepareRx>
      break;
 80071ce:	e076      	b.n	80072be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	33b0      	adds	r3, #176	; 0xb0
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	7850      	ldrb	r0, [r2, #1]
 80071e6:	2200      	movs	r2, #0
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	4798      	blx	r3
      break;
 80071ec:	e067      	b.n	80072be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	785b      	ldrb	r3, [r3, #1]
 80071f2:	2b0b      	cmp	r3, #11
 80071f4:	d851      	bhi.n	800729a <USBD_CDC_Setup+0x18a>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <USBD_CDC_Setup+0xec>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	0800722d 	.word	0x0800722d
 8007200:	080072a9 	.word	0x080072a9
 8007204:	0800729b 	.word	0x0800729b
 8007208:	0800729b 	.word	0x0800729b
 800720c:	0800729b 	.word	0x0800729b
 8007210:	0800729b 	.word	0x0800729b
 8007214:	0800729b 	.word	0x0800729b
 8007218:	0800729b 	.word	0x0800729b
 800721c:	0800729b 	.word	0x0800729b
 8007220:	0800729b 	.word	0x0800729b
 8007224:	08007257 	.word	0x08007257
 8007228:	08007281 	.word	0x08007281
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b03      	cmp	r3, #3
 8007236:	d107      	bne.n	8007248 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007238:	f107 030a 	add.w	r3, r7, #10
 800723c:	2202      	movs	r2, #2
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 fd33 	bl	8008cac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007246:	e032      	b.n	80072ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fcbd 	bl	8008bca <USBD_CtlError>
            ret = USBD_FAIL;
 8007250:	2303      	movs	r3, #3
 8007252:	75fb      	strb	r3, [r7, #23]
          break;
 8007254:	e02b      	b.n	80072ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b03      	cmp	r3, #3
 8007260:	d107      	bne.n	8007272 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007262:	f107 030d 	add.w	r3, r7, #13
 8007266:	2201      	movs	r2, #1
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fd1e 	bl	8008cac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007270:	e01d      	b.n	80072ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fca8 	bl	8008bca <USBD_CtlError>
            ret = USBD_FAIL;
 800727a:	2303      	movs	r3, #3
 800727c:	75fb      	strb	r3, [r7, #23]
          break;
 800727e:	e016      	b.n	80072ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b03      	cmp	r3, #3
 800728a:	d00f      	beq.n	80072ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fc9b 	bl	8008bca <USBD_CtlError>
            ret = USBD_FAIL;
 8007294:	2303      	movs	r3, #3
 8007296:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007298:	e008      	b.n	80072ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 fc94 	bl	8008bca <USBD_CtlError>
          ret = USBD_FAIL;
 80072a2:	2303      	movs	r3, #3
 80072a4:	75fb      	strb	r3, [r7, #23]
          break;
 80072a6:	e002      	b.n	80072ae <USBD_CDC_Setup+0x19e>
          break;
 80072a8:	bf00      	nop
 80072aa:	e008      	b.n	80072be <USBD_CDC_Setup+0x1ae>
          break;
 80072ac:	bf00      	nop
      }
      break;
 80072ae:	e006      	b.n	80072be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fc89 	bl	8008bca <USBD_CtlError>
      ret = USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	75fb      	strb	r3, [r7, #23]
      break;
 80072bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	32b0      	adds	r2, #176	; 0xb0
 80072e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e065      	b.n	80073be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	32b0      	adds	r2, #176	; 0xb0
 80072fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007300:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007302:	78fb      	ldrb	r3, [r7, #3]
 8007304:	f003 020f 	and.w	r2, r3, #15
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	3318      	adds	r3, #24
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d02f      	beq.n	800737c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	f003 020f 	and.w	r2, r3, #15
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	3318      	adds	r3, #24
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	f003 010f 	and.w	r1, r3, #15
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	460b      	mov	r3, r1
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	440b      	add	r3, r1
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4403      	add	r3, r0
 8007344:	3348      	adds	r3, #72	; 0x48
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	fbb2 f1f3 	udiv	r1, r2, r3
 800734c:	fb01 f303 	mul.w	r3, r1, r3
 8007350:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007352:	2b00      	cmp	r3, #0
 8007354:	d112      	bne.n	800737c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	f003 020f 	and.w	r2, r3, #15
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	440b      	add	r3, r1
 8007368:	3318      	adds	r3, #24
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800736e:	78f9      	ldrb	r1, [r7, #3]
 8007370:	2300      	movs	r3, #0
 8007372:	2200      	movs	r2, #0
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f002 f9a4 	bl	80096c2 <USBD_LL_Transmit>
 800737a:	e01f      	b.n	80073bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	33b0      	adds	r3, #176	; 0xb0
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d010      	beq.n	80073bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	33b0      	adds	r3, #176	; 0xb0
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	32b0      	adds	r2, #176	; 0xb0
 80073dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	32b0      	adds	r2, #176	; 0xb0
 80073ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e01a      	b.n	800742e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f002 f9a2 	bl	8009746 <USBD_LL_GetRxDataSize>
 8007402:	4602      	mov	r2, r0
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	33b0      	adds	r3, #176	; 0xb0
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007428:	4611      	mov	r1, r2
 800742a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	32b0      	adds	r2, #176	; 0xb0
 8007448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e025      	b.n	80074a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	33b0      	adds	r3, #176	; 0xb0
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01a      	beq.n	80074a2 <USBD_CDC_EP0_RxReady+0x6c>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007472:	2bff      	cmp	r3, #255	; 0xff
 8007474:	d015      	beq.n	80074a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	33b0      	adds	r3, #176	; 0xb0
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800748e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007496:	b292      	uxth	r2, r2
 8007498:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	22ff      	movs	r2, #255	; 0xff
 800749e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074b4:	2182      	movs	r1, #130	; 0x82
 80074b6:	4818      	ldr	r0, [pc, #96]	; (8007518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074b8:	f000 fd4f 	bl	8007f5a <USBD_GetEpDesc>
 80074bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074be:	2101      	movs	r1, #1
 80074c0:	4815      	ldr	r0, [pc, #84]	; (8007518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074c2:	f000 fd4a 	bl	8007f5a <USBD_GetEpDesc>
 80074c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074c8:	2181      	movs	r1, #129	; 0x81
 80074ca:	4813      	ldr	r0, [pc, #76]	; (8007518 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074cc:	f000 fd45 	bl	8007f5a <USBD_GetEpDesc>
 80074d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2210      	movs	r2, #16
 80074dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ec:	711a      	strb	r2, [r3, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d006      	beq.n	8007506 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007500:	711a      	strb	r2, [r3, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2243      	movs	r2, #67	; 0x43
 800750a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800750c:	4b02      	ldr	r3, [pc, #8]	; (8007518 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20000650 	.word	0x20000650

0800751c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007524:	2182      	movs	r1, #130	; 0x82
 8007526:	4818      	ldr	r0, [pc, #96]	; (8007588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007528:	f000 fd17 	bl	8007f5a <USBD_GetEpDesc>
 800752c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800752e:	2101      	movs	r1, #1
 8007530:	4815      	ldr	r0, [pc, #84]	; (8007588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007532:	f000 fd12 	bl	8007f5a <USBD_GetEpDesc>
 8007536:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007538:	2181      	movs	r1, #129	; 0x81
 800753a:	4813      	ldr	r0, [pc, #76]	; (8007588 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800753c:	f000 fd0d 	bl	8007f5a <USBD_GetEpDesc>
 8007540:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	2210      	movs	r2, #16
 800754c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d006      	beq.n	8007562 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2200      	movs	r2, #0
 8007558:	711a      	strb	r2, [r3, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f042 0202 	orr.w	r2, r2, #2
 8007560:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d006      	beq.n	8007576 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	711a      	strb	r2, [r3, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f042 0202 	orr.w	r2, r2, #2
 8007574:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2243      	movs	r2, #67	; 0x43
 800757a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800757c:	4b02      	ldr	r3, [pc, #8]	; (8007588 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20000650 	.word	0x20000650

0800758c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007594:	2182      	movs	r1, #130	; 0x82
 8007596:	4818      	ldr	r0, [pc, #96]	; (80075f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007598:	f000 fcdf 	bl	8007f5a <USBD_GetEpDesc>
 800759c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800759e:	2101      	movs	r1, #1
 80075a0:	4815      	ldr	r0, [pc, #84]	; (80075f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075a2:	f000 fcda 	bl	8007f5a <USBD_GetEpDesc>
 80075a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075a8:	2181      	movs	r1, #129	; 0x81
 80075aa:	4813      	ldr	r0, [pc, #76]	; (80075f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075ac:	f000 fcd5 	bl	8007f5a <USBD_GetEpDesc>
 80075b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2210      	movs	r2, #16
 80075bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d006      	beq.n	80075d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075cc:	711a      	strb	r2, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d006      	beq.n	80075e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e0:	711a      	strb	r2, [r3, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2243      	movs	r2, #67	; 0x43
 80075ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075ec:	4b02      	ldr	r3, [pc, #8]	; (80075f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000650 	.word	0x20000650

080075fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	220a      	movs	r2, #10
 8007608:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800760a:	4b03      	ldr	r3, [pc, #12]	; (8007618 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	2000060c 	.word	0x2000060c

0800761c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800762c:	2303      	movs	r3, #3
 800762e:	e009      	b.n	8007644 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	33b0      	adds	r3, #176	; 0xb0
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	32b0      	adds	r2, #176	; 0xb0
 8007666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007672:	2303      	movs	r3, #3
 8007674:	e008      	b.n	8007688 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	32b0      	adds	r2, #176	; 0xb0
 80076a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e004      	b.n	80076c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
	...

080076d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32b0      	adds	r2, #176	; 0xb0
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	32b0      	adds	r2, #176	; 0xb0
 80076f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80076fe:	2303      	movs	r3, #3
 8007700:	e025      	b.n	800774e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007708:	2b00      	cmp	r3, #0
 800770a:	d11f      	bne.n	800774c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2201      	movs	r2, #1
 8007710:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007714:	4b10      	ldr	r3, [pc, #64]	; (8007758 <USBD_CDC_TransmitPacket+0x88>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f003 020f 	and.w	r2, r3, #15
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4403      	add	r3, r0
 800772e:	3318      	adds	r3, #24
 8007730:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007732:	4b09      	ldr	r3, [pc, #36]	; (8007758 <USBD_CDC_TransmitPacket+0x88>)
 8007734:	7819      	ldrb	r1, [r3, #0]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 ffbd 	bl	80096c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000693 	.word	0x20000693

0800775c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	32b0      	adds	r2, #176	; 0xb0
 800776e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007772:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	32b0      	adds	r2, #176	; 0xb0
 800777e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007786:	2303      	movs	r3, #3
 8007788:	e018      	b.n	80077bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	7c1b      	ldrb	r3, [r3, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10a      	bne.n	80077a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007792:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <USBD_CDC_ReceivePacket+0x68>)
 8007794:	7819      	ldrb	r1, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800779c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f001 ffaf 	bl	8009704 <USBD_LL_PrepareReceive>
 80077a6:	e008      	b.n	80077ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <USBD_CDC_ReceivePacket+0x68>)
 80077aa:	7819      	ldrb	r1, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077b2:	2340      	movs	r3, #64	; 0x40
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f001 ffa5 	bl	8009704 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000694 	.word	0x20000694

080077c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077dc:	2303      	movs	r3, #3
 80077de:	e01f      	b.n	8007820 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	79fa      	ldrb	r2, [r7, #7]
 8007812:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f001 fe1f 	bl	8009458 <USBD_LL_Init>
 800781a:	4603      	mov	r3, r0
 800781c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800783c:	2303      	movs	r3, #3
 800783e:	e025      	b.n	800788c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	32ae      	adds	r2, #174	; 0xae
 8007852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00f      	beq.n	800787c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	32ae      	adds	r2, #174	; 0xae
 8007866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	f107 020e 	add.w	r2, r7, #14
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	4602      	mov	r2, r0
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007882:	1c5a      	adds	r2, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 fe27 	bl	80094f0 <USBD_LL_Start>
 80078a2:	4603      	mov	r3, r0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	460b      	mov	r3, r1
 80078cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d009      	beq.n	80078f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	78fa      	ldrb	r2, [r7, #3]
 80078e6:	4611      	mov	r1, r2
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	460b      	mov	r3, r1
 8007904:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	78fa      	ldrb	r2, [r7, #3]
 8007914:	4611      	mov	r1, r2
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007924:	7bfb      	ldrb	r3, [r7, #15]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	4618      	mov	r0, r3
 8007942:	f001 f908 	bl	8008b56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2b02      	cmp	r3, #2
 8007968:	d01a      	beq.n	80079a0 <USBD_LL_SetupStage+0x72>
 800796a:	2b02      	cmp	r3, #2
 800796c:	d822      	bhi.n	80079b4 <USBD_LL_SetupStage+0x86>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <USBD_LL_SetupStage+0x4a>
 8007972:	2b01      	cmp	r3, #1
 8007974:	d00a      	beq.n	800798c <USBD_LL_SetupStage+0x5e>
 8007976:	e01d      	b.n	80079b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fb5f 	bl	8008044 <USBD_StdDevReq>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
      break;
 800798a:	e020      	b.n	80079ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fbc7 	bl	8008128 <USBD_StdItfReq>
 800799a:	4603      	mov	r3, r0
 800799c:	73fb      	strb	r3, [r7, #15]
      break;
 800799e:	e016      	b.n	80079ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fc29 	bl	8008200 <USBD_StdEPReq>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
      break;
 80079b2:	e00c      	b.n	80079ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 fdf4 	bl	80095b0 <USBD_LL_StallEP>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
      break;
 80079cc:	bf00      	nop
  }

  return ret;
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	460b      	mov	r3, r1
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d16e      	bne.n	8007ace <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	f040 8098 	bne.w	8007b34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d913      	bls.n	8007a38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	1ad2      	subs	r2, r2, r3
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	4293      	cmp	r3, r2
 8007a28:	bf28      	it	cs
 8007a2a:	4613      	movcs	r3, r2
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f001 f984 	bl	8008d3e <USBD_CtlContinueRx>
 8007a36:	e07d      	b.n	8007b34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a3e:	f003 031f 	and.w	r3, r3, #31
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d014      	beq.n	8007a70 <USBD_LL_DataOutStage+0x98>
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d81d      	bhi.n	8007a86 <USBD_LL_DataOutStage+0xae>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <USBD_LL_DataOutStage+0x7c>
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d003      	beq.n	8007a5a <USBD_LL_DataOutStage+0x82>
 8007a52:	e018      	b.n	8007a86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	75bb      	strb	r3, [r7, #22]
            break;
 8007a58:	e018      	b.n	8007a8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	4619      	mov	r1, r3
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fa5e 	bl	8007f26 <USBD_CoreFindIF>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	75bb      	strb	r3, [r7, #22]
            break;
 8007a6e:	e00d      	b.n	8007a8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	4619      	mov	r1, r3
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fa60 	bl	8007f40 <USBD_CoreFindEP>
 8007a80:	4603      	mov	r3, r0
 8007a82:	75bb      	strb	r3, [r7, #22]
            break;
 8007a84:	e002      	b.n	8007a8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75bb      	strb	r3, [r7, #22]
            break;
 8007a8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a8c:	7dbb      	ldrb	r3, [r7, #22]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d119      	bne.n	8007ac6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d113      	bne.n	8007ac6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a9e:	7dba      	ldrb	r2, [r7, #22]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	32ae      	adds	r2, #174	; 0xae
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00b      	beq.n	8007ac6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007aae:	7dba      	ldrb	r2, [r7, #22]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ab6:	7dba      	ldrb	r2, [r7, #22]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	32ae      	adds	r2, #174	; 0xae
 8007abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f001 f94a 	bl	8008d60 <USBD_CtlSendStatus>
 8007acc:	e032      	b.n	8007b34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ace:	7afb      	ldrb	r3, [r7, #11]
 8007ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fa31 	bl	8007f40 <USBD_CoreFindEP>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ae2:	7dbb      	ldrb	r3, [r7, #22]
 8007ae4:	2bff      	cmp	r3, #255	; 0xff
 8007ae6:	d025      	beq.n	8007b34 <USBD_LL_DataOutStage+0x15c>
 8007ae8:	7dbb      	ldrb	r3, [r7, #22]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d122      	bne.n	8007b34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d117      	bne.n	8007b2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007afa:	7dba      	ldrb	r2, [r7, #22]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	32ae      	adds	r2, #174	; 0xae
 8007b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00f      	beq.n	8007b2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b0a:	7dba      	ldrb	r2, [r7, #22]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b12:	7dba      	ldrb	r2, [r7, #22]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	32ae      	adds	r2, #174	; 0xae
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	7afa      	ldrb	r2, [r7, #11]
 8007b20:	4611      	mov	r1, r2
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	4798      	blx	r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	e000      	b.n	8007b36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b086      	sub	sp, #24
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	460b      	mov	r3, r1
 8007b48:	607a      	str	r2, [r7, #4]
 8007b4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d16f      	bne.n	8007c32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3314      	adds	r3, #20
 8007b56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d15a      	bne.n	8007c18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d914      	bls.n	8007b98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	461a      	mov	r2, r3
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f001 f8ac 	bl	8008ce2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2100      	movs	r1, #0
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f001 fdb7 	bl	8009704 <USBD_LL_PrepareReceive>
 8007b96:	e03f      	b.n	8007c18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d11c      	bne.n	8007bde <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d316      	bcc.n	8007bde <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d20f      	bcs.n	8007bde <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f001 f88d 	bl	8008ce2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f001 fd94 	bl	8009704 <USBD_LL_PrepareReceive>
 8007bdc:	e01c      	b.n	8007c18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d10f      	bne.n	8007c0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c0a:	2180      	movs	r1, #128	; 0x80
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f001 fccf 	bl	80095b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f001 f8b7 	bl	8008d86 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d03a      	beq.n	8007c98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff fe42 	bl	80078ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c30:	e032      	b.n	8007c98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c32:	7afb      	ldrb	r3, [r7, #11]
 8007c34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f97f 	bl	8007f40 <USBD_CoreFindEP>
 8007c42:	4603      	mov	r3, r0
 8007c44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	2bff      	cmp	r3, #255	; 0xff
 8007c4a:	d025      	beq.n	8007c98 <USBD_LL_DataInStage+0x15a>
 8007c4c:	7dfb      	ldrb	r3, [r7, #23]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d122      	bne.n	8007c98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d11c      	bne.n	8007c98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c5e:	7dfa      	ldrb	r2, [r7, #23]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	32ae      	adds	r2, #174	; 0xae
 8007c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d014      	beq.n	8007c98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c6e:	7dfa      	ldrb	r2, [r7, #23]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c76:	7dfa      	ldrb	r2, [r7, #23]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	32ae      	adds	r2, #174	; 0xae
 8007c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	7afa      	ldrb	r2, [r7, #11]
 8007c84:	4611      	mov	r1, r2
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	4798      	blx	r3
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c8e:	7dbb      	ldrb	r3, [r7, #22]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c94:	7dbb      	ldrb	r3, [r7, #22]
 8007c96:	e000      	b.n	8007c9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d014      	beq.n	8007d08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00e      	beq.n	8007d08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6852      	ldr	r2, [r2, #4]
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d04:	2303      	movs	r3, #3
 8007d06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d08:	2340      	movs	r3, #64	; 0x40
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 fc09 	bl	8009526 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2240      	movs	r2, #64	; 0x40
 8007d20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d24:	2340      	movs	r3, #64	; 0x40
 8007d26:	2200      	movs	r2, #0
 8007d28:	2180      	movs	r1, #128	; 0x80
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fbfb 	bl	8009526 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2240      	movs	r2, #64	; 0x40
 8007d3a:	621a      	str	r2, [r3, #32]

  return ret;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2204      	movs	r2, #4
 8007d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d106      	bne.n	8007db4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d110      	bne.n	8007df8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	32ae      	adds	r2, #174	; 0xae
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e01c      	b.n	8007e5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d115      	bne.n	8007e5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	32ae      	adds	r2, #174	; 0xae
 8007e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	32ae      	adds	r2, #174	; 0xae
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	78fa      	ldrb	r2, [r7, #3]
 8007e56:	4611      	mov	r1, r2
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	32ae      	adds	r2, #174	; 0xae
 8007e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e01c      	b.n	8007ec2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d115      	bne.n	8007ec0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	32ae      	adds	r2, #174	; 0xae
 8007e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	32ae      	adds	r2, #174	; 0xae
 8007eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	78fa      	ldrb	r2, [r7, #3]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00e      	beq.n	8007f1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6852      	ldr	r2, [r2, #4]
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b086      	sub	sp, #24
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	885b      	ldrh	r3, [r3, #2]
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d920      	bls.n	8007fc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f8a:	e013      	b.n	8007fb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f8c:	f107 030a 	add.w	r3, r7, #10
 8007f90:	4619      	mov	r1, r3
 8007f92:	6978      	ldr	r0, [r7, #20]
 8007f94:	f000 f81b 	bl	8007fce <USBD_GetNextDesc>
 8007f98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	785b      	ldrb	r3, [r3, #1]
 8007f9e:	2b05      	cmp	r3, #5
 8007fa0:	d108      	bne.n	8007fb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	789b      	ldrb	r3, [r3, #2]
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d008      	beq.n	8007fc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	885b      	ldrh	r3, [r3, #2]
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	897b      	ldrh	r3, [r7, #10]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d8e5      	bhi.n	8007f8c <USBD_GetEpDesc+0x32>
 8007fc0:	e000      	b.n	8007fc4 <USBD_GetEpDesc+0x6a>
          break;
 8007fc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007fc4:	693b      	ldr	r3, [r7, #16]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	881a      	ldrh	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4413      	add	r3, r2
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	3301      	adds	r3, #1
 800801e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008026:	8a3b      	ldrh	r3, [r7, #16]
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	b21a      	sxth	r2, r3
 800802c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008030:	4313      	orrs	r3, r2
 8008032:	b21b      	sxth	r3, r3
 8008034:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008036:	89fb      	ldrh	r3, [r7, #14]
}
 8008038:	4618      	mov	r0, r3
 800803a:	371c      	adds	r7, #28
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800805a:	2b40      	cmp	r3, #64	; 0x40
 800805c:	d005      	beq.n	800806a <USBD_StdDevReq+0x26>
 800805e:	2b40      	cmp	r3, #64	; 0x40
 8008060:	d857      	bhi.n	8008112 <USBD_StdDevReq+0xce>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00f      	beq.n	8008086 <USBD_StdDevReq+0x42>
 8008066:	2b20      	cmp	r3, #32
 8008068:	d153      	bne.n	8008112 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	32ae      	adds	r2, #174	; 0xae
 8008074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]
      break;
 8008084:	e04a      	b.n	800811c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	2b09      	cmp	r3, #9
 800808c:	d83b      	bhi.n	8008106 <USBD_StdDevReq+0xc2>
 800808e:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USBD_StdDevReq+0x50>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080e9 	.word	0x080080e9
 8008098:	080080fd 	.word	0x080080fd
 800809c:	08008107 	.word	0x08008107
 80080a0:	080080f3 	.word	0x080080f3
 80080a4:	08008107 	.word	0x08008107
 80080a8:	080080c7 	.word	0x080080c7
 80080ac:	080080bd 	.word	0x080080bd
 80080b0:	08008107 	.word	0x08008107
 80080b4:	080080df 	.word	0x080080df
 80080b8:	080080d1 	.word	0x080080d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa3c 	bl	800853c <USBD_GetDescriptor>
          break;
 80080c4:	e024      	b.n	8008110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fba1 	bl	8008810 <USBD_SetAddress>
          break;
 80080ce:	e01f      	b.n	8008110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fbe0 	bl	8008898 <USBD_SetConfig>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
          break;
 80080dc:	e018      	b.n	8008110 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080de:	6839      	ldr	r1, [r7, #0]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fc83 	bl	80089ec <USBD_GetConfig>
          break;
 80080e6:	e013      	b.n	8008110 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fcb4 	bl	8008a58 <USBD_GetStatus>
          break;
 80080f0:	e00e      	b.n	8008110 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fce3 	bl	8008ac0 <USBD_SetFeature>
          break;
 80080fa:	e009      	b.n	8008110 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fd07 	bl	8008b12 <USBD_ClrFeature>
          break;
 8008104:	e004      	b.n	8008110 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fd5e 	bl	8008bca <USBD_CtlError>
          break;
 800810e:	bf00      	nop
      }
      break;
 8008110:	e004      	b.n	800811c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fd58 	bl	8008bca <USBD_CtlError>
      break;
 800811a:	bf00      	nop
  }

  return ret;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop

08008128 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800813e:	2b40      	cmp	r3, #64	; 0x40
 8008140:	d005      	beq.n	800814e <USBD_StdItfReq+0x26>
 8008142:	2b40      	cmp	r3, #64	; 0x40
 8008144:	d852      	bhi.n	80081ec <USBD_StdItfReq+0xc4>
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <USBD_StdItfReq+0x26>
 800814a:	2b20      	cmp	r3, #32
 800814c:	d14e      	bne.n	80081ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	b2db      	uxtb	r3, r3
 8008156:	3b01      	subs	r3, #1
 8008158:	2b02      	cmp	r3, #2
 800815a:	d840      	bhi.n	80081de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	889b      	ldrh	r3, [r3, #4]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b01      	cmp	r3, #1
 8008164:	d836      	bhi.n	80081d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	889b      	ldrh	r3, [r3, #4]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff fed9 	bl	8007f26 <USBD_CoreFindIF>
 8008174:	4603      	mov	r3, r0
 8008176:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	2bff      	cmp	r3, #255	; 0xff
 800817c:	d01d      	beq.n	80081ba <USBD_StdItfReq+0x92>
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d11a      	bne.n	80081ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008184:	7bba      	ldrb	r2, [r7, #14]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	32ae      	adds	r2, #174	; 0xae
 800818a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00f      	beq.n	80081b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008194:	7bba      	ldrb	r2, [r7, #14]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800819c:	7bba      	ldrb	r2, [r7, #14]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	32ae      	adds	r2, #174	; 0xae
 80081a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	4798      	blx	r3
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081b2:	e004      	b.n	80081be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081b8:	e001      	b.n	80081be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	88db      	ldrh	r3, [r3, #6]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d110      	bne.n	80081e8 <USBD_StdItfReq+0xc0>
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10d      	bne.n	80081e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fdc7 	bl	8008d60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081d2:	e009      	b.n	80081e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fcf7 	bl	8008bca <USBD_CtlError>
          break;
 80081dc:	e004      	b.n	80081e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fcf2 	bl	8008bca <USBD_CtlError>
          break;
 80081e6:	e000      	b.n	80081ea <USBD_StdItfReq+0xc2>
          break;
 80081e8:	bf00      	nop
      }
      break;
 80081ea:	e004      	b.n	80081f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fceb 	bl	8008bca <USBD_CtlError>
      break;
 80081f4:	bf00      	nop
  }

  return ret;
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	889b      	ldrh	r3, [r3, #4]
 8008212:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800821c:	2b40      	cmp	r3, #64	; 0x40
 800821e:	d007      	beq.n	8008230 <USBD_StdEPReq+0x30>
 8008220:	2b40      	cmp	r3, #64	; 0x40
 8008222:	f200 817f 	bhi.w	8008524 <USBD_StdEPReq+0x324>
 8008226:	2b00      	cmp	r3, #0
 8008228:	d02a      	beq.n	8008280 <USBD_StdEPReq+0x80>
 800822a:	2b20      	cmp	r3, #32
 800822c:	f040 817a 	bne.w	8008524 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff fe83 	bl	8007f40 <USBD_CoreFindEP>
 800823a:	4603      	mov	r3, r0
 800823c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800823e:	7b7b      	ldrb	r3, [r7, #13]
 8008240:	2bff      	cmp	r3, #255	; 0xff
 8008242:	f000 8174 	beq.w	800852e <USBD_StdEPReq+0x32e>
 8008246:	7b7b      	ldrb	r3, [r7, #13]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 8170 	bne.w	800852e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800824e:	7b7a      	ldrb	r2, [r7, #13]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008256:	7b7a      	ldrb	r2, [r7, #13]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	32ae      	adds	r2, #174	; 0xae
 800825c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 8163 	beq.w	800852e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008268:	7b7a      	ldrb	r2, [r7, #13]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	32ae      	adds	r2, #174	; 0xae
 800826e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800827e:	e156      	b.n	800852e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	2b03      	cmp	r3, #3
 8008286:	d008      	beq.n	800829a <USBD_StdEPReq+0x9a>
 8008288:	2b03      	cmp	r3, #3
 800828a:	f300 8145 	bgt.w	8008518 <USBD_StdEPReq+0x318>
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 809b 	beq.w	80083ca <USBD_StdEPReq+0x1ca>
 8008294:	2b01      	cmp	r3, #1
 8008296:	d03c      	beq.n	8008312 <USBD_StdEPReq+0x112>
 8008298:	e13e      	b.n	8008518 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d002      	beq.n	80082ac <USBD_StdEPReq+0xac>
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d016      	beq.n	80082d8 <USBD_StdEPReq+0xd8>
 80082aa:	e02c      	b.n	8008306 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00d      	beq.n	80082ce <USBD_StdEPReq+0xce>
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	2b80      	cmp	r3, #128	; 0x80
 80082b6:	d00a      	beq.n	80082ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 f977 	bl	80095b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082c2:	2180      	movs	r1, #128	; 0x80
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f001 f973 	bl	80095b0 <USBD_LL_StallEP>
 80082ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082cc:	e020      	b.n	8008310 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fc7a 	bl	8008bca <USBD_CtlError>
              break;
 80082d6:	e01b      	b.n	8008310 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	885b      	ldrh	r3, [r3, #2]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10e      	bne.n	80082fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <USBD_StdEPReq+0xfe>
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b80      	cmp	r3, #128	; 0x80
 80082ea:	d008      	beq.n	80082fe <USBD_StdEPReq+0xfe>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	88db      	ldrh	r3, [r3, #6]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082f4:	7bbb      	ldrb	r3, [r7, #14]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f959 	bl	80095b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fd2e 	bl	8008d60 <USBD_CtlSendStatus>

              break;
 8008304:	e004      	b.n	8008310 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fc5e 	bl	8008bca <USBD_CtlError>
              break;
 800830e:	bf00      	nop
          }
          break;
 8008310:	e107      	b.n	8008522 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b02      	cmp	r3, #2
 800831c:	d002      	beq.n	8008324 <USBD_StdEPReq+0x124>
 800831e:	2b03      	cmp	r3, #3
 8008320:	d016      	beq.n	8008350 <USBD_StdEPReq+0x150>
 8008322:	e04b      	b.n	80083bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00d      	beq.n	8008346 <USBD_StdEPReq+0x146>
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b80      	cmp	r3, #128	; 0x80
 800832e:	d00a      	beq.n	8008346 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f001 f93b 	bl	80095b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800833a:	2180      	movs	r1, #128	; 0x80
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 f937 	bl	80095b0 <USBD_LL_StallEP>
 8008342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008344:	e040      	b.n	80083c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc3e 	bl	8008bca <USBD_CtlError>
              break;
 800834e:	e03b      	b.n	80083c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	885b      	ldrh	r3, [r3, #2]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d136      	bne.n	80083c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835e:	2b00      	cmp	r3, #0
 8008360:	d004      	beq.n	800836c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 f941 	bl	80095ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fcf7 	bl	8008d60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fde2 	bl	8007f40 <USBD_CoreFindEP>
 800837c:	4603      	mov	r3, r0
 800837e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008380:	7b7b      	ldrb	r3, [r7, #13]
 8008382:	2bff      	cmp	r3, #255	; 0xff
 8008384:	d01f      	beq.n	80083c6 <USBD_StdEPReq+0x1c6>
 8008386:	7b7b      	ldrb	r3, [r7, #13]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d11c      	bne.n	80083c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800838c:	7b7a      	ldrb	r2, [r7, #13]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008394:	7b7a      	ldrb	r2, [r7, #13]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	32ae      	adds	r2, #174	; 0xae
 800839a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d010      	beq.n	80083c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083a4:	7b7a      	ldrb	r2, [r7, #13]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	32ae      	adds	r2, #174	; 0xae
 80083aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80083ba:	e004      	b.n	80083c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fc03 	bl	8008bca <USBD_CtlError>
              break;
 80083c4:	e000      	b.n	80083c8 <USBD_StdEPReq+0x1c8>
              break;
 80083c6:	bf00      	nop
          }
          break;
 80083c8:	e0ab      	b.n	8008522 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d002      	beq.n	80083dc <USBD_StdEPReq+0x1dc>
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d032      	beq.n	8008440 <USBD_StdEPReq+0x240>
 80083da:	e097      	b.n	800850c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d007      	beq.n	80083f2 <USBD_StdEPReq+0x1f2>
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	2b80      	cmp	r3, #128	; 0x80
 80083e6:	d004      	beq.n	80083f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fbed 	bl	8008bca <USBD_CtlError>
                break;
 80083f0:	e091      	b.n	8008516 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	da0b      	bge.n	8008412 <USBD_StdEPReq+0x212>
 80083fa:	7bbb      	ldrb	r3, [r7, #14]
 80083fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	3310      	adds	r3, #16
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	3304      	adds	r3, #4
 8008410:	e00b      	b.n	800842a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	4413      	add	r3, r2
 8008428:	3304      	adds	r3, #4
 800842a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2200      	movs	r2, #0
 8008430:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2202      	movs	r2, #2
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fc37 	bl	8008cac <USBD_CtlSendData>
              break;
 800843e:	e06a      	b.n	8008516 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008444:	2b00      	cmp	r3, #0
 8008446:	da11      	bge.n	800846c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	f003 020f 	and.w	r2, r3, #15
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	3324      	adds	r3, #36	; 0x24
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d117      	bne.n	8008492 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fbb0 	bl	8008bca <USBD_CtlError>
                  break;
 800846a:	e054      	b.n	8008516 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	f003 020f 	and.w	r2, r3, #15
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d104      	bne.n	8008492 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb9d 	bl	8008bca <USBD_CtlError>
                  break;
 8008490:	e041      	b.n	8008516 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008496:	2b00      	cmp	r3, #0
 8008498:	da0b      	bge.n	80084b2 <USBD_StdEPReq+0x2b2>
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	3310      	adds	r3, #16
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	3304      	adds	r3, #4
 80084b0:	e00b      	b.n	80084ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b8:	4613      	mov	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	4413      	add	r3, r2
 80084c8:	3304      	adds	r3, #4
 80084ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <USBD_StdEPReq+0x2d8>
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	2b80      	cmp	r3, #128	; 0x80
 80084d6:	d103      	bne.n	80084e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	e00e      	b.n	80084fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 f8a1 	bl	800962c <USBD_LL_IsStallEP>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2201      	movs	r2, #1
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	e002      	b.n	80084fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2202      	movs	r2, #2
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fbd1 	bl	8008cac <USBD_CtlSendData>
              break;
 800850a:	e004      	b.n	8008516 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fb5b 	bl	8008bca <USBD_CtlError>
              break;
 8008514:	bf00      	nop
          }
          break;
 8008516:	e004      	b.n	8008522 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fb55 	bl	8008bca <USBD_CtlError>
          break;
 8008520:	bf00      	nop
      }
      break;
 8008522:	e005      	b.n	8008530 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fb4f 	bl	8008bca <USBD_CtlError>
      break;
 800852c:	e000      	b.n	8008530 <USBD_StdEPReq+0x330>
      break;
 800852e:	bf00      	nop
  }

  return ret;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	885b      	ldrh	r3, [r3, #2]
 8008556:	0a1b      	lsrs	r3, r3, #8
 8008558:	b29b      	uxth	r3, r3
 800855a:	3b01      	subs	r3, #1
 800855c:	2b06      	cmp	r3, #6
 800855e:	f200 8128 	bhi.w	80087b2 <USBD_GetDescriptor+0x276>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <USBD_GetDescriptor+0x2c>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	08008585 	.word	0x08008585
 800856c:	0800859d 	.word	0x0800859d
 8008570:	080085dd 	.word	0x080085dd
 8008574:	080087b3 	.word	0x080087b3
 8008578:	080087b3 	.word	0x080087b3
 800857c:	08008753 	.word	0x08008753
 8008580:	0800877f 	.word	0x0800877f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	7c12      	ldrb	r2, [r2, #16]
 8008590:	f107 0108 	add.w	r1, r7, #8
 8008594:	4610      	mov	r0, r2
 8008596:	4798      	blx	r3
 8008598:	60f8      	str	r0, [r7, #12]
      break;
 800859a:	e112      	b.n	80087c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	7c1b      	ldrb	r3, [r3, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10d      	bne.n	80085c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	f107 0208 	add.w	r2, r7, #8
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	2202      	movs	r2, #2
 80085bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085be:	e100      	b.n	80087c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	f107 0208 	add.w	r2, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3301      	adds	r3, #1
 80085d6:	2202      	movs	r2, #2
 80085d8:	701a      	strb	r2, [r3, #0]
      break;
 80085da:	e0f2      	b.n	80087c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	885b      	ldrh	r3, [r3, #2]
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	f200 80ac 	bhi.w	8008740 <USBD_GetDescriptor+0x204>
 80085e8:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <USBD_GetDescriptor+0xb4>)
 80085ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ee:	bf00      	nop
 80085f0:	08008609 	.word	0x08008609
 80085f4:	0800863d 	.word	0x0800863d
 80085f8:	08008671 	.word	0x08008671
 80085fc:	080086a5 	.word	0x080086a5
 8008600:	080086d9 	.word	0x080086d9
 8008604:	0800870d 	.word	0x0800870d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	7c12      	ldrb	r2, [r2, #16]
 8008620:	f107 0108 	add.w	r1, r7, #8
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862a:	e091      	b.n	8008750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 facb 	bl	8008bca <USBD_CtlError>
            err++;
 8008634:	7afb      	ldrb	r3, [r7, #11]
 8008636:	3301      	adds	r3, #1
 8008638:	72fb      	strb	r3, [r7, #11]
          break;
 800863a:	e089      	b.n	8008750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00b      	beq.n	8008660 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	7c12      	ldrb	r2, [r2, #16]
 8008654:	f107 0108 	add.w	r1, r7, #8
 8008658:	4610      	mov	r0, r2
 800865a:	4798      	blx	r3
 800865c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800865e:	e077      	b.n	8008750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fab1 	bl	8008bca <USBD_CtlError>
            err++;
 8008668:	7afb      	ldrb	r3, [r7, #11]
 800866a:	3301      	adds	r3, #1
 800866c:	72fb      	strb	r3, [r7, #11]
          break;
 800866e:	e06f      	b.n	8008750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	7c12      	ldrb	r2, [r2, #16]
 8008688:	f107 0108 	add.w	r1, r7, #8
 800868c:	4610      	mov	r0, r2
 800868e:	4798      	blx	r3
 8008690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008692:	e05d      	b.n	8008750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa97 	bl	8008bca <USBD_CtlError>
            err++;
 800869c:	7afb      	ldrb	r3, [r7, #11]
 800869e:	3301      	adds	r3, #1
 80086a0:	72fb      	strb	r3, [r7, #11]
          break;
 80086a2:	e055      	b.n	8008750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00b      	beq.n	80086c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	7c12      	ldrb	r2, [r2, #16]
 80086bc:	f107 0108 	add.w	r1, r7, #8
 80086c0:	4610      	mov	r0, r2
 80086c2:	4798      	blx	r3
 80086c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086c6:	e043      	b.n	8008750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fa7d 	bl	8008bca <USBD_CtlError>
            err++;
 80086d0:	7afb      	ldrb	r3, [r7, #11]
 80086d2:	3301      	adds	r3, #1
 80086d4:	72fb      	strb	r3, [r7, #11]
          break;
 80086d6:	e03b      	b.n	8008750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00b      	beq.n	80086fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	7c12      	ldrb	r2, [r2, #16]
 80086f0:	f107 0108 	add.w	r1, r7, #8
 80086f4:	4610      	mov	r0, r2
 80086f6:	4798      	blx	r3
 80086f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086fa:	e029      	b.n	8008750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fa63 	bl	8008bca <USBD_CtlError>
            err++;
 8008704:	7afb      	ldrb	r3, [r7, #11]
 8008706:	3301      	adds	r3, #1
 8008708:	72fb      	strb	r3, [r7, #11]
          break;
 800870a:	e021      	b.n	8008750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00b      	beq.n	8008730 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	7c12      	ldrb	r2, [r2, #16]
 8008724:	f107 0108 	add.w	r1, r7, #8
 8008728:	4610      	mov	r0, r2
 800872a:	4798      	blx	r3
 800872c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800872e:	e00f      	b.n	8008750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fa49 	bl	8008bca <USBD_CtlError>
            err++;
 8008738:	7afb      	ldrb	r3, [r7, #11]
 800873a:	3301      	adds	r3, #1
 800873c:	72fb      	strb	r3, [r7, #11]
          break;
 800873e:	e007      	b.n	8008750 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa41 	bl	8008bca <USBD_CtlError>
          err++;
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	3301      	adds	r3, #1
 800874c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800874e:	bf00      	nop
      }
      break;
 8008750:	e037      	b.n	80087c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	7c1b      	ldrb	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d109      	bne.n	800876e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	f107 0208 	add.w	r2, r7, #8
 8008766:	4610      	mov	r0, r2
 8008768:	4798      	blx	r3
 800876a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800876c:	e029      	b.n	80087c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fa2a 	bl	8008bca <USBD_CtlError>
        err++;
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	3301      	adds	r3, #1
 800877a:	72fb      	strb	r3, [r7, #11]
      break;
 800877c:	e021      	b.n	80087c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	7c1b      	ldrb	r3, [r3, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10d      	bne.n	80087a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878e:	f107 0208 	add.w	r2, r7, #8
 8008792:	4610      	mov	r0, r2
 8008794:	4798      	blx	r3
 8008796:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3301      	adds	r3, #1
 800879c:	2207      	movs	r2, #7
 800879e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087a0:	e00f      	b.n	80087c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fa10 	bl	8008bca <USBD_CtlError>
        err++;
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	3301      	adds	r3, #1
 80087ae:	72fb      	strb	r3, [r7, #11]
      break;
 80087b0:	e007      	b.n	80087c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fa08 	bl	8008bca <USBD_CtlError>
      err++;
 80087ba:	7afb      	ldrb	r3, [r7, #11]
 80087bc:	3301      	adds	r3, #1
 80087be:	72fb      	strb	r3, [r7, #11]
      break;
 80087c0:	bf00      	nop
  }

  if (err != 0U)
 80087c2:	7afb      	ldrb	r3, [r7, #11]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d11e      	bne.n	8008806 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	88db      	ldrh	r3, [r3, #6]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d016      	beq.n	80087fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80087d0:	893b      	ldrh	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00e      	beq.n	80087f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	88da      	ldrh	r2, [r3, #6]
 80087da:	893b      	ldrh	r3, [r7, #8]
 80087dc:	4293      	cmp	r3, r2
 80087de:	bf28      	it	cs
 80087e0:	4613      	movcs	r3, r2
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087e6:	893b      	ldrh	r3, [r7, #8]
 80087e8:	461a      	mov	r2, r3
 80087ea:	68f9      	ldr	r1, [r7, #12]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fa5d 	bl	8008cac <USBD_CtlSendData>
 80087f2:	e009      	b.n	8008808 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f9e7 	bl	8008bca <USBD_CtlError>
 80087fc:	e004      	b.n	8008808 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 faae 	bl	8008d60 <USBD_CtlSendStatus>
 8008804:	e000      	b.n	8008808 <USBD_GetDescriptor+0x2cc>
    return;
 8008806:	bf00      	nop
  }
}
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop

08008810 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	889b      	ldrh	r3, [r3, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d131      	bne.n	8008886 <USBD_SetAddress+0x76>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	88db      	ldrh	r3, [r3, #6]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d12d      	bne.n	8008886 <USBD_SetAddress+0x76>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	885b      	ldrh	r3, [r3, #2]
 800882e:	2b7f      	cmp	r3, #127	; 0x7f
 8008830:	d829      	bhi.n	8008886 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	885b      	ldrh	r3, [r3, #2]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800883c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b03      	cmp	r3, #3
 8008848:	d104      	bne.n	8008854 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f9bc 	bl	8008bca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008852:	e01d      	b.n	8008890 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	7bfa      	ldrb	r2, [r7, #15]
 8008858:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	4619      	mov	r1, r3
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 ff0f 	bl	8009684 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fa7a 	bl	8008d60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d004      	beq.n	800887c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887a:	e009      	b.n	8008890 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008884:	e004      	b.n	8008890 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f99e 	bl	8008bca <USBD_CtlError>
  }
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	885b      	ldrh	r3, [r3, #2]
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	4b4e      	ldr	r3, [pc, #312]	; (80089e8 <USBD_SetConfig+0x150>)
 80088ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088b0:	4b4d      	ldr	r3, [pc, #308]	; (80089e8 <USBD_SetConfig+0x150>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d905      	bls.n	80088c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f985 	bl	8008bca <USBD_CtlError>
    return USBD_FAIL;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e08c      	b.n	80089de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d002      	beq.n	80088d6 <USBD_SetConfig+0x3e>
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d029      	beq.n	8008928 <USBD_SetConfig+0x90>
 80088d4:	e075      	b.n	80089c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088d6:	4b44      	ldr	r3, [pc, #272]	; (80089e8 <USBD_SetConfig+0x150>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d020      	beq.n	8008920 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80088de:	4b42      	ldr	r3, [pc, #264]	; (80089e8 <USBD_SetConfig+0x150>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088e8:	4b3f      	ldr	r3, [pc, #252]	; (80089e8 <USBD_SetConfig+0x150>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7fe ffe7 	bl	80078c2 <USBD_SetClassConfig>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d008      	beq.n	8008910 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f962 	bl	8008bca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2202      	movs	r2, #2
 800890a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800890e:	e065      	b.n	80089dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fa25 	bl	8008d60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2203      	movs	r2, #3
 800891a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800891e:	e05d      	b.n	80089dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fa1d 	bl	8008d60 <USBD_CtlSendStatus>
      break;
 8008926:	e059      	b.n	80089dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008928:	4b2f      	ldr	r3, [pc, #188]	; (80089e8 <USBD_SetConfig+0x150>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d112      	bne.n	8008956 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008938:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <USBD_SetConfig+0x150>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008942:	4b29      	ldr	r3, [pc, #164]	; (80089e8 <USBD_SetConfig+0x150>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7fe ffd6 	bl	80078fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fa06 	bl	8008d60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008954:	e042      	b.n	80089dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008956:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <USBD_SetConfig+0x150>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d02a      	beq.n	80089ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7fe ffc4 	bl	80078fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008972:	4b1d      	ldr	r3, [pc, #116]	; (80089e8 <USBD_SetConfig+0x150>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800897c:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <USBD_SetConfig+0x150>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7fe ff9d 	bl	80078c2 <USBD_SetClassConfig>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00f      	beq.n	80089b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f918 	bl	8008bca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7fe ffa9 	bl	80078fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089b0:	e014      	b.n	80089dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f9d4 	bl	8008d60 <USBD_CtlSendStatus>
      break;
 80089b8:	e010      	b.n	80089dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f9d0 	bl	8008d60 <USBD_CtlSendStatus>
      break;
 80089c0:	e00c      	b.n	80089dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f900 	bl	8008bca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <USBD_SetConfig+0x150>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7fe ff92 	bl	80078fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089d6:	2303      	movs	r3, #3
 80089d8:	73fb      	strb	r3, [r7, #15]
      break;
 80089da:	bf00      	nop
  }

  return ret;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	200008e4 	.word	0x200008e4

080089ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	88db      	ldrh	r3, [r3, #6]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d004      	beq.n	8008a08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f8e2 	bl	8008bca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a06:	e023      	b.n	8008a50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	dc02      	bgt.n	8008a1a <USBD_GetConfig+0x2e>
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dc03      	bgt.n	8008a20 <USBD_GetConfig+0x34>
 8008a18:	e015      	b.n	8008a46 <USBD_GetConfig+0x5a>
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d00b      	beq.n	8008a36 <USBD_GetConfig+0x4a>
 8008a1e:	e012      	b.n	8008a46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3308      	adds	r3, #8
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f93c 	bl	8008cac <USBD_CtlSendData>
        break;
 8008a34:	e00c      	b.n	8008a50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3304      	adds	r3, #4
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f934 	bl	8008cac <USBD_CtlSendData>
        break;
 8008a44:	e004      	b.n	8008a50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f8be 	bl	8008bca <USBD_CtlError>
        break;
 8008a4e:	bf00      	nop
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d81e      	bhi.n	8008aae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	88db      	ldrh	r3, [r3, #6]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d004      	beq.n	8008a82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f8a5 	bl	8008bca <USBD_CtlError>
        break;
 8008a80:	e01a      	b.n	8008ab8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f043 0202 	orr.w	r2, r3, #2
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	330c      	adds	r3, #12
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f900 	bl	8008cac <USBD_CtlSendData>
      break;
 8008aac:	e004      	b.n	8008ab8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f88a 	bl	8008bca <USBD_CtlError>
      break;
 8008ab6:	bf00      	nop
  }
}
 8008ab8:	bf00      	nop
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	885b      	ldrh	r3, [r3, #2]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d107      	bne.n	8008ae2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f940 	bl	8008d60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ae0:	e013      	b.n	8008b0a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d10b      	bne.n	8008b02 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	889b      	ldrh	r3, [r3, #4]
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f930 	bl	8008d60 <USBD_CtlSendStatus>
}
 8008b00:	e003      	b.n	8008b0a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f860 	bl	8008bca <USBD_CtlError>
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d80b      	bhi.n	8008b42 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	885b      	ldrh	r3, [r3, #2]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d10c      	bne.n	8008b4c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f910 	bl	8008d60 <USBD_CtlSendStatus>
      }
      break;
 8008b40:	e004      	b.n	8008b4c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f840 	bl	8008bca <USBD_CtlError>
      break;
 8008b4a:	e000      	b.n	8008b4e <USBD_ClrFeature+0x3c>
      break;
 8008b4c:	bf00      	nop
  }
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	781a      	ldrb	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f7ff fa41 	bl	8008008 <SWAPBYTE>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461a      	mov	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f7ff fa34 	bl	8008008 <SWAPBYTE>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f7ff fa27 	bl	8008008 <SWAPBYTE>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	80da      	strh	r2, [r3, #6]
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bd4:	2180      	movs	r1, #128	; 0x80
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fcea 	bl	80095b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bdc:	2100      	movs	r1, #0
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fce6 	bl	80095b0 <USBD_LL_StallEP>
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d036      	beq.n	8008c70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c06:	6938      	ldr	r0, [r7, #16]
 8008c08:	f000 f836 	bl	8008c78 <USBD_GetLen>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	3301      	adds	r3, #1
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	4413      	add	r3, r2
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	7812      	ldrb	r2, [r2, #0]
 8008c24:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	4413      	add	r3, r2
 8008c32:	2203      	movs	r2, #3
 8008c34:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c3c:	e013      	b.n	8008c66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	4413      	add	r3, r2
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	613b      	str	r3, [r7, #16]
    idx++;
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
 8008c52:	3301      	adds	r3, #1
 8008c54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	3301      	adds	r3, #1
 8008c64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e7      	bne.n	8008c3e <USBD_GetString+0x52>
 8008c6e:	e000      	b.n	8008c72 <USBD_GetString+0x86>
    return;
 8008c70:	bf00      	nop
  }
}
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c88:	e005      	b.n	8008c96 <USBD_GetLen+0x1e>
  {
    len++;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	3301      	adds	r3, #1
 8008c94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1f5      	bne.n	8008c8a <USBD_GetLen+0x12>
  }

  return len;
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 fcf5 	bl	80096c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 fce4 	bl	80096c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2203      	movs	r2, #3
 8008d14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 fce8 	bl	8009704 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	60f8      	str	r0, [r7, #12]
 8008d46:	60b9      	str	r1, [r7, #8]
 8008d48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	2100      	movs	r1, #0
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 fcd7 	bl	8009704 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2204      	movs	r2, #4
 8008d6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d70:	2300      	movs	r3, #0
 8008d72:	2200      	movs	r2, #0
 8008d74:	2100      	movs	r1, #0
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fca3 	bl	80096c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2205      	movs	r2, #5
 8008d92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d96:	2300      	movs	r3, #0
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fcb1 	bl	8009704 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008db0:	2200      	movs	r2, #0
 8008db2:	4912      	ldr	r1, [pc, #72]	; (8008dfc <MX_USB_DEVICE_Init+0x50>)
 8008db4:	4812      	ldr	r0, [pc, #72]	; (8008e00 <MX_USB_DEVICE_Init+0x54>)
 8008db6:	f7fe fd07 	bl	80077c8 <USBD_Init>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008dc0:	f7f8 fa76 	bl	80012b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008dc4:	490f      	ldr	r1, [pc, #60]	; (8008e04 <MX_USB_DEVICE_Init+0x58>)
 8008dc6:	480e      	ldr	r0, [pc, #56]	; (8008e00 <MX_USB_DEVICE_Init+0x54>)
 8008dc8:	f7fe fd2e 	bl	8007828 <USBD_RegisterClass>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008dd2:	f7f8 fa6d 	bl	80012b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008dd6:	490c      	ldr	r1, [pc, #48]	; (8008e08 <MX_USB_DEVICE_Init+0x5c>)
 8008dd8:	4809      	ldr	r0, [pc, #36]	; (8008e00 <MX_USB_DEVICE_Init+0x54>)
 8008dda:	f7fe fc1f 	bl	800761c <USBD_CDC_RegisterInterface>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008de4:	f7f8 fa64 	bl	80012b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008de8:	4805      	ldr	r0, [pc, #20]	; (8008e00 <MX_USB_DEVICE_Init+0x54>)
 8008dea:	f7fe fd53 	bl	8007894 <USBD_Start>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008df4:	f7f8 fa5c 	bl	80012b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008df8:	bf00      	nop
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	200006ac 	.word	0x200006ac
 8008e00:	200008e8 	.word	0x200008e8
 8008e04:	20000618 	.word	0x20000618
 8008e08:	20000698 	.word	0x20000698

08008e0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e10:	2200      	movs	r2, #0
 8008e12:	4905      	ldr	r1, [pc, #20]	; (8008e28 <CDC_Init_FS+0x1c>)
 8008e14:	4805      	ldr	r0, [pc, #20]	; (8008e2c <CDC_Init_FS+0x20>)
 8008e16:	f7fe fc1b 	bl	8007650 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e1a:	4905      	ldr	r1, [pc, #20]	; (8008e30 <CDC_Init_FS+0x24>)
 8008e1c:	4803      	ldr	r0, [pc, #12]	; (8008e2c <CDC_Init_FS+0x20>)
 8008e1e:	f7fe fc39 	bl	8007694 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200013c4 	.word	0x200013c4
 8008e2c:	200008e8 	.word	0x200008e8
 8008e30:	20000bc4 	.word	0x20000bc4

08008e34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
 8008e50:	4613      	mov	r3, r2
 8008e52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e54:	79fb      	ldrb	r3, [r7, #7]
 8008e56:	2b23      	cmp	r3, #35	; 0x23
 8008e58:	d84a      	bhi.n	8008ef0 <CDC_Control_FS+0xac>
 8008e5a:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <CDC_Control_FS+0x1c>)
 8008e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e60:	08008ef1 	.word	0x08008ef1
 8008e64:	08008ef1 	.word	0x08008ef1
 8008e68:	08008ef1 	.word	0x08008ef1
 8008e6c:	08008ef1 	.word	0x08008ef1
 8008e70:	08008ef1 	.word	0x08008ef1
 8008e74:	08008ef1 	.word	0x08008ef1
 8008e78:	08008ef1 	.word	0x08008ef1
 8008e7c:	08008ef1 	.word	0x08008ef1
 8008e80:	08008ef1 	.word	0x08008ef1
 8008e84:	08008ef1 	.word	0x08008ef1
 8008e88:	08008ef1 	.word	0x08008ef1
 8008e8c:	08008ef1 	.word	0x08008ef1
 8008e90:	08008ef1 	.word	0x08008ef1
 8008e94:	08008ef1 	.word	0x08008ef1
 8008e98:	08008ef1 	.word	0x08008ef1
 8008e9c:	08008ef1 	.word	0x08008ef1
 8008ea0:	08008ef1 	.word	0x08008ef1
 8008ea4:	08008ef1 	.word	0x08008ef1
 8008ea8:	08008ef1 	.word	0x08008ef1
 8008eac:	08008ef1 	.word	0x08008ef1
 8008eb0:	08008ef1 	.word	0x08008ef1
 8008eb4:	08008ef1 	.word	0x08008ef1
 8008eb8:	08008ef1 	.word	0x08008ef1
 8008ebc:	08008ef1 	.word	0x08008ef1
 8008ec0:	08008ef1 	.word	0x08008ef1
 8008ec4:	08008ef1 	.word	0x08008ef1
 8008ec8:	08008ef1 	.word	0x08008ef1
 8008ecc:	08008ef1 	.word	0x08008ef1
 8008ed0:	08008ef1 	.word	0x08008ef1
 8008ed4:	08008ef1 	.word	0x08008ef1
 8008ed8:	08008ef1 	.word	0x08008ef1
 8008edc:	08008ef1 	.word	0x08008ef1
 8008ee0:	08008ef1 	.word	0x08008ef1
 8008ee4:	08008ef1 	.word	0x08008ef1
 8008ee8:	08008ef1 	.word	0x08008ef1
 8008eec:	08008ef1 	.word	0x08008ef1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ef0:	bf00      	nop
  }

  return (USBD_OK);
 8008ef2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4809      	ldr	r0, [pc, #36]	; (8008f34 <CDC_Receive_FS+0x34>)
 8008f0e:	f7fe fbc1 	bl	8007694 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f12:	4808      	ldr	r0, [pc, #32]	; (8008f34 <CDC_Receive_FS+0x34>)
 8008f14:	f7fe fc22 	bl	800775c <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer,Buf,len);
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	4804      	ldr	r0, [pc, #16]	; (8008f38 <CDC_Receive_FS+0x38>)
 8008f26:	f000 fc8f 	bl	8009848 <memcpy>
  return (USBD_OK);
 8008f2a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200008e8 	.word	0x200008e8
 8008f38:	20000868 	.word	0x20000868

08008f3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <CDC_Transmit_FS+0x48>)
 8008f4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e00b      	b.n	8008f7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f62:	887b      	ldrh	r3, [r7, #2]
 8008f64:	461a      	mov	r2, r3
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	4806      	ldr	r0, [pc, #24]	; (8008f84 <CDC_Transmit_FS+0x48>)
 8008f6a:	f7fe fb71 	bl	8007650 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f6e:	4805      	ldr	r0, [pc, #20]	; (8008f84 <CDC_Transmit_FS+0x48>)
 8008f70:	f7fe fbae 	bl	80076d0 <USBD_CDC_TransmitPacket>
 8008f74:	4603      	mov	r3, r0
 8008f76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	200008e8 	.word	0x200008e8

08008f88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	6039      	str	r1, [r7, #0]
 8008fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2212      	movs	r2, #18
 8008fbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fbe:	4b03      	ldr	r3, [pc, #12]	; (8008fcc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	200006c8 	.word	0x200006c8

08008fd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	6039      	str	r1, [r7, #0]
 8008fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2204      	movs	r2, #4
 8008fe0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fe2:	4b03      	ldr	r3, [pc, #12]	; (8008ff0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	200006dc 	.word	0x200006dc

08008ff4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d105      	bne.n	8009012 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4907      	ldr	r1, [pc, #28]	; (8009028 <USBD_FS_ProductStrDescriptor+0x34>)
 800900a:	4808      	ldr	r0, [pc, #32]	; (800902c <USBD_FS_ProductStrDescriptor+0x38>)
 800900c:	f7ff fdee 	bl	8008bec <USBD_GetString>
 8009010:	e004      	b.n	800901c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4904      	ldr	r1, [pc, #16]	; (8009028 <USBD_FS_ProductStrDescriptor+0x34>)
 8009016:	4805      	ldr	r0, [pc, #20]	; (800902c <USBD_FS_ProductStrDescriptor+0x38>)
 8009018:	f7ff fde8 	bl	8008bec <USBD_GetString>
  }
  return USBD_StrDesc;
 800901c:	4b02      	ldr	r3, [pc, #8]	; (8009028 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20001bc4 	.word	0x20001bc4
 800902c:	0800a1ec 	.word	0x0800a1ec

08009030 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	6039      	str	r1, [r7, #0]
 800903a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	4904      	ldr	r1, [pc, #16]	; (8009050 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009040:	4804      	ldr	r0, [pc, #16]	; (8009054 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009042:	f7ff fdd3 	bl	8008bec <USBD_GetString>
  return USBD_StrDesc;
 8009046:	4b02      	ldr	r3, [pc, #8]	; (8009050 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009048:	4618      	mov	r0, r3
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	20001bc4 	.word	0x20001bc4
 8009054:	0800a204 	.word	0x0800a204

08009058 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	6039      	str	r1, [r7, #0]
 8009062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	221a      	movs	r2, #26
 8009068:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800906a:	f000 f843 	bl	80090f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800906e:	4b02      	ldr	r3, [pc, #8]	; (8009078 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	200006e0 	.word	0x200006e0

0800907c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d105      	bne.n	800909a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4907      	ldr	r1, [pc, #28]	; (80090b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009092:	4808      	ldr	r0, [pc, #32]	; (80090b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009094:	f7ff fdaa 	bl	8008bec <USBD_GetString>
 8009098:	e004      	b.n	80090a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4904      	ldr	r1, [pc, #16]	; (80090b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800909e:	4805      	ldr	r0, [pc, #20]	; (80090b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090a0:	f7ff fda4 	bl	8008bec <USBD_GetString>
  }
  return USBD_StrDesc;
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20001bc4 	.word	0x20001bc4
 80090b4:	0800a218 	.word	0x0800a218

080090b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d105      	bne.n	80090d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	4907      	ldr	r1, [pc, #28]	; (80090ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ce:	4808      	ldr	r0, [pc, #32]	; (80090f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090d0:	f7ff fd8c 	bl	8008bec <USBD_GetString>
 80090d4:	e004      	b.n	80090e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	4904      	ldr	r1, [pc, #16]	; (80090ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090da:	4805      	ldr	r0, [pc, #20]	; (80090f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090dc:	f7ff fd86 	bl	8008bec <USBD_GetString>
  }
  return USBD_StrDesc;
 80090e0:	4b02      	ldr	r3, [pc, #8]	; (80090ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20001bc4 	.word	0x20001bc4
 80090f0:	0800a224 	.word	0x0800a224

080090f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <Get_SerialNum+0x44>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009100:	4b0e      	ldr	r3, [pc, #56]	; (800913c <Get_SerialNum+0x48>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009106:	4b0e      	ldr	r3, [pc, #56]	; (8009140 <Get_SerialNum+0x4c>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4413      	add	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d009      	beq.n	800912e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800911a:	2208      	movs	r2, #8
 800911c:	4909      	ldr	r1, [pc, #36]	; (8009144 <Get_SerialNum+0x50>)
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f000 f814 	bl	800914c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009124:	2204      	movs	r2, #4
 8009126:	4908      	ldr	r1, [pc, #32]	; (8009148 <Get_SerialNum+0x54>)
 8009128:	68b8      	ldr	r0, [r7, #8]
 800912a:	f000 f80f 	bl	800914c <IntToUnicode>
  }
}
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	1fff7a10 	.word	0x1fff7a10
 800913c:	1fff7a14 	.word	0x1fff7a14
 8009140:	1fff7a18 	.word	0x1fff7a18
 8009144:	200006e2 	.word	0x200006e2
 8009148:	200006f2 	.word	0x200006f2

0800914c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	4613      	mov	r3, r2
 8009158:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800915e:	2300      	movs	r3, #0
 8009160:	75fb      	strb	r3, [r7, #23]
 8009162:	e027      	b.n	80091b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	0f1b      	lsrs	r3, r3, #28
 8009168:	2b09      	cmp	r3, #9
 800916a:	d80b      	bhi.n	8009184 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	0f1b      	lsrs	r3, r3, #28
 8009170:	b2da      	uxtb	r2, r3
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	4619      	mov	r1, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	440b      	add	r3, r1
 800917c:	3230      	adds	r2, #48	; 0x30
 800917e:	b2d2      	uxtb	r2, r2
 8009180:	701a      	strb	r2, [r3, #0]
 8009182:	e00a      	b.n	800919a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	0f1b      	lsrs	r3, r3, #28
 8009188:	b2da      	uxtb	r2, r3
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	4619      	mov	r1, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	440b      	add	r3, r1
 8009194:	3237      	adds	r2, #55	; 0x37
 8009196:	b2d2      	uxtb	r2, r2
 8009198:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	011b      	lsls	r3, r3, #4
 800919e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	3301      	adds	r3, #1
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	4413      	add	r3, r2
 80091aa:	2200      	movs	r2, #0
 80091ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	3301      	adds	r3, #1
 80091b2:	75fb      	strb	r3, [r7, #23]
 80091b4:	7dfa      	ldrb	r2, [r7, #23]
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d3d3      	bcc.n	8009164 <IntToUnicode+0x18>
  }
}
 80091bc:	bf00      	nop
 80091be:	bf00      	nop
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
	...

080091cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d4:	f107 0314 	add.w	r3, r7, #20
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	609a      	str	r2, [r3, #8]
 80091e0:	60da      	str	r2, [r3, #12]
 80091e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ec:	d13a      	bne.n	8009264 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091ee:	2300      	movs	r3, #0
 80091f0:	613b      	str	r3, [r7, #16]
 80091f2:	4b1e      	ldr	r3, [pc, #120]	; (800926c <HAL_PCD_MspInit+0xa0>)
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	4a1d      	ldr	r2, [pc, #116]	; (800926c <HAL_PCD_MspInit+0xa0>)
 80091f8:	f043 0301 	orr.w	r3, r3, #1
 80091fc:	6313      	str	r3, [r2, #48]	; 0x30
 80091fe:	4b1b      	ldr	r3, [pc, #108]	; (800926c <HAL_PCD_MspInit+0xa0>)
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800920a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800920e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009210:	2302      	movs	r3, #2
 8009212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009214:	2300      	movs	r3, #0
 8009216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009218:	2303      	movs	r3, #3
 800921a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800921c:	230a      	movs	r3, #10
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009220:	f107 0314 	add.w	r3, r7, #20
 8009224:	4619      	mov	r1, r3
 8009226:	4812      	ldr	r0, [pc, #72]	; (8009270 <HAL_PCD_MspInit+0xa4>)
 8009228:	f7f8 ffc0 	bl	80021ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800922c:	4b0f      	ldr	r3, [pc, #60]	; (800926c <HAL_PCD_MspInit+0xa0>)
 800922e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009230:	4a0e      	ldr	r2, [pc, #56]	; (800926c <HAL_PCD_MspInit+0xa0>)
 8009232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009236:	6353      	str	r3, [r2, #52]	; 0x34
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	4b0b      	ldr	r3, [pc, #44]	; (800926c <HAL_PCD_MspInit+0xa0>)
 800923e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009240:	4a0a      	ldr	r2, [pc, #40]	; (800926c <HAL_PCD_MspInit+0xa0>)
 8009242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009246:	6453      	str	r3, [r2, #68]	; 0x44
 8009248:	4b08      	ldr	r3, [pc, #32]	; (800926c <HAL_PCD_MspInit+0xa0>)
 800924a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009254:	2200      	movs	r2, #0
 8009256:	2100      	movs	r1, #0
 8009258:	2043      	movs	r0, #67	; 0x43
 800925a:	f7f8 ff70 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800925e:	2043      	movs	r0, #67	; 0x43
 8009260:	f7f8 ff89 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009264:	bf00      	nop
 8009266:	3728      	adds	r7, #40	; 0x28
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	40023800 	.word	0x40023800
 8009270:	40020000 	.word	0x40020000

08009274 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f7fe fb4f 	bl	800792e <USBD_LL_SetupStage>
}
 8009290:	bf00      	nop
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092aa:	78fa      	ldrb	r2, [r7, #3]
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	4613      	mov	r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	440b      	add	r3, r1
 80092b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	4619      	mov	r1, r3
 80092c2:	f7fe fb89 	bl	80079d8 <USBD_LL_DataOutStage>
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b082      	sub	sp, #8
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092e0:	78fa      	ldrb	r2, [r7, #3]
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	4613      	mov	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	334c      	adds	r3, #76	; 0x4c
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	4619      	mov	r1, r3
 80092f6:	f7fe fc22 	bl	8007b3e <USBD_LL_DataInStage>
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009310:	4618      	mov	r0, r3
 8009312:	f7fe fd56 	bl	8007dc2 <USBD_LL_SOF>
}
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009326:	2301      	movs	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d102      	bne.n	8009338 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]
 8009336:	e008      	b.n	800934a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d102      	bne.n	8009346 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009340:	2301      	movs	r3, #1
 8009342:	73fb      	strb	r3, [r7, #15]
 8009344:	e001      	b.n	800934a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009346:	f7f7 ffb3 	bl	80012b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009350:	7bfa      	ldrb	r2, [r7, #15]
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fcf6 	bl	8007d46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fc9e 	bl	8007ca2 <USBD_LL_Reset>
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe fcf1 	bl	8007d66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	6812      	ldr	r2, [r2, #0]
 8009392:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009396:	f043 0301 	orr.w	r3, r3, #1
 800939a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093a4:	4b04      	ldr	r3, [pc, #16]	; (80093b8 <HAL_PCD_SuspendCallback+0x48>)
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	4a03      	ldr	r2, [pc, #12]	; (80093b8 <HAL_PCD_SuspendCallback+0x48>)
 80093aa:	f043 0306 	orr.w	r3, r3, #6
 80093ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	e000ed00 	.word	0xe000ed00

080093bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fce1 	bl	8007d92 <USBD_LL_Resume>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ea:	78fa      	ldrb	r2, [r7, #3]
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fd39 	bl	8007e66 <USBD_LL_IsoOUTIncomplete>
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe fcf5 	bl	8007e02 <USBD_LL_IsoINIncomplete>
}
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fd4b 	bl	8007eca <USBD_LL_DevConnected>
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fd48 	bl	8007ee0 <USBD_LL_DevDisconnected>
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d13c      	bne.n	80094e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009468:	4a20      	ldr	r2, [pc, #128]	; (80094ec <USBD_LL_Init+0x94>)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a1e      	ldr	r2, [pc, #120]	; (80094ec <USBD_LL_Init+0x94>)
 8009474:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009478:	4b1c      	ldr	r3, [pc, #112]	; (80094ec <USBD_LL_Init+0x94>)
 800947a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800947e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009480:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <USBD_LL_Init+0x94>)
 8009482:	2204      	movs	r2, #4
 8009484:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009486:	4b19      	ldr	r3, [pc, #100]	; (80094ec <USBD_LL_Init+0x94>)
 8009488:	2202      	movs	r2, #2
 800948a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800948c:	4b17      	ldr	r3, [pc, #92]	; (80094ec <USBD_LL_Init+0x94>)
 800948e:	2200      	movs	r2, #0
 8009490:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009492:	4b16      	ldr	r3, [pc, #88]	; (80094ec <USBD_LL_Init+0x94>)
 8009494:	2202      	movs	r2, #2
 8009496:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009498:	4b14      	ldr	r3, [pc, #80]	; (80094ec <USBD_LL_Init+0x94>)
 800949a:	2200      	movs	r2, #0
 800949c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <USBD_LL_Init+0x94>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094a4:	4b11      	ldr	r3, [pc, #68]	; (80094ec <USBD_LL_Init+0x94>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <USBD_LL_Init+0x94>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094b0:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <USBD_LL_Init+0x94>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094b6:	480d      	ldr	r0, [pc, #52]	; (80094ec <USBD_LL_Init+0x94>)
 80094b8:	f7f9 f847 	bl	800254a <HAL_PCD_Init>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094c2:	f7f7 fef5 	bl	80012b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094c6:	2180      	movs	r1, #128	; 0x80
 80094c8:	4808      	ldr	r0, [pc, #32]	; (80094ec <USBD_LL_Init+0x94>)
 80094ca:	f7fa fa9e 	bl	8003a0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094ce:	2240      	movs	r2, #64	; 0x40
 80094d0:	2100      	movs	r1, #0
 80094d2:	4806      	ldr	r0, [pc, #24]	; (80094ec <USBD_LL_Init+0x94>)
 80094d4:	f7fa fa52 	bl	800397c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094d8:	2280      	movs	r2, #128	; 0x80
 80094da:	2101      	movs	r1, #1
 80094dc:	4803      	ldr	r0, [pc, #12]	; (80094ec <USBD_LL_Init+0x94>)
 80094de:	f7fa fa4d 	bl	800397c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20001dc4 	.word	0x20001dc4

080094f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009506:	4618      	mov	r0, r3
 8009508:	f7f9 f93c 	bl	8002784 <HAL_PCD_Start>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 f942 	bl	800979c <USBD_Get_USB_Status>
 8009518:	4603      	mov	r3, r0
 800951a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800951c:	7bbb      	ldrb	r3, [r7, #14]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	4608      	mov	r0, r1
 8009530:	4611      	mov	r1, r2
 8009532:	461a      	mov	r2, r3
 8009534:	4603      	mov	r3, r0
 8009536:	70fb      	strb	r3, [r7, #3]
 8009538:	460b      	mov	r3, r1
 800953a:	70bb      	strb	r3, [r7, #2]
 800953c:	4613      	mov	r3, r2
 800953e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800954e:	78bb      	ldrb	r3, [r7, #2]
 8009550:	883a      	ldrh	r2, [r7, #0]
 8009552:	78f9      	ldrb	r1, [r7, #3]
 8009554:	f7f9 fe0d 	bl	8003172 <HAL_PCD_EP_Open>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	4618      	mov	r0, r3
 8009560:	f000 f91c 	bl	800979c <USBD_Get_USB_Status>
 8009564:	4603      	mov	r3, r0
 8009566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009568:	7bbb      	ldrb	r3, [r7, #14]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	4611      	mov	r1, r2
 8009590:	4618      	mov	r0, r3
 8009592:	f7f9 fe56 	bl	8003242 <HAL_PCD_EP_Close>
 8009596:	4603      	mov	r3, r0
 8009598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f8fd 	bl	800979c <USBD_Get_USB_Status>
 80095a2:	4603      	mov	r3, r0
 80095a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095ca:	78fa      	ldrb	r2, [r7, #3]
 80095cc:	4611      	mov	r1, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7f9 ff2e 	bl	8003430 <HAL_PCD_EP_SetStall>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f8de 	bl	800979c <USBD_Get_USB_Status>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009608:	78fa      	ldrb	r2, [r7, #3]
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f7f9 ff73 	bl	80034f8 <HAL_PCD_EP_ClrStall>
 8009612:	4603      	mov	r3, r0
 8009614:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f8bf 	bl	800979c <USBD_Get_USB_Status>
 800961e:	4603      	mov	r3, r0
 8009620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009622:	7bbb      	ldrb	r3, [r7, #14]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800963e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009644:	2b00      	cmp	r3, #0
 8009646:	da0b      	bge.n	8009660 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	4613      	mov	r3, r2
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	333e      	adds	r3, #62	; 0x3e
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	e00b      	b.n	8009678 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009666:	68f9      	ldr	r1, [r7, #12]
 8009668:	4613      	mov	r3, r2
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009676:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800969e:	78fa      	ldrb	r2, [r7, #3]
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f9 fd40 	bl	8003128 <HAL_PCD_SetAddress>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 f874 	bl	800979c <USBD_Get_USB_Status>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
 80096ce:	460b      	mov	r3, r1
 80096d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096e0:	7af9      	ldrb	r1, [r7, #11]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	f7f9 fe59 	bl	800339c <HAL_PCD_EP_Transmit>
 80096ea:	4603      	mov	r3, r0
 80096ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 f853 	bl	800979c <USBD_Get_USB_Status>
 80096f6:	4603      	mov	r3, r0
 80096f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	607a      	str	r2, [r7, #4]
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	460b      	mov	r3, r1
 8009712:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009722:	7af9      	ldrb	r1, [r7, #11]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	f7f9 fdd5 	bl	80032d6 <HAL_PCD_EP_Receive>
 800972c:	4603      	mov	r3, r0
 800972e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f832 	bl	800979c <USBD_Get_USB_Status>
 8009738:	4603      	mov	r3, r0
 800973a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800973c:	7dbb      	ldrb	r3, [r7, #22]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	460b      	mov	r3, r1
 8009750:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009758:	78fa      	ldrb	r2, [r7, #3]
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f7f9 fe05 	bl	800336c <HAL_PCD_EP_GetRxCount>
 8009762:	4603      	mov	r3, r0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009774:	4b03      	ldr	r3, [pc, #12]	; (8009784 <USBD_static_malloc+0x18>)
}
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	200022d0 	.word	0x200022d0

08009788 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d817      	bhi.n	80097e0 <USBD_Get_USB_Status+0x44>
 80097b0:	a201      	add	r2, pc, #4	; (adr r2, 80097b8 <USBD_Get_USB_Status+0x1c>)
 80097b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b6:	bf00      	nop
 80097b8:	080097c9 	.word	0x080097c9
 80097bc:	080097cf 	.word	0x080097cf
 80097c0:	080097d5 	.word	0x080097d5
 80097c4:	080097db 	.word	0x080097db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	e00b      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ce:	2303      	movs	r3, #3
 80097d0:	73fb      	strb	r3, [r7, #15]
    break;
 80097d2:	e008      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]
    break;
 80097d8:	e005      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097da:	2303      	movs	r3, #3
 80097dc:	73fb      	strb	r3, [r7, #15]
    break;
 80097de:	e002      	b.n	80097e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097e0:	2303      	movs	r3, #3
 80097e2:	73fb      	strb	r3, [r7, #15]
    break;
 80097e4:	bf00      	nop
  }
  return usb_status;
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <__errno>:
 80097f4:	4b01      	ldr	r3, [pc, #4]	; (80097fc <__errno+0x8>)
 80097f6:	6818      	ldr	r0, [r3, #0]
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	200006fc 	.word	0x200006fc

08009800 <__libc_init_array>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	4d0d      	ldr	r5, [pc, #52]	; (8009838 <__libc_init_array+0x38>)
 8009804:	4c0d      	ldr	r4, [pc, #52]	; (800983c <__libc_init_array+0x3c>)
 8009806:	1b64      	subs	r4, r4, r5
 8009808:	10a4      	asrs	r4, r4, #2
 800980a:	2600      	movs	r6, #0
 800980c:	42a6      	cmp	r6, r4
 800980e:	d109      	bne.n	8009824 <__libc_init_array+0x24>
 8009810:	4d0b      	ldr	r5, [pc, #44]	; (8009840 <__libc_init_array+0x40>)
 8009812:	4c0c      	ldr	r4, [pc, #48]	; (8009844 <__libc_init_array+0x44>)
 8009814:	f000 fc8e 	bl	800a134 <_init>
 8009818:	1b64      	subs	r4, r4, r5
 800981a:	10a4      	asrs	r4, r4, #2
 800981c:	2600      	movs	r6, #0
 800981e:	42a6      	cmp	r6, r4
 8009820:	d105      	bne.n	800982e <__libc_init_array+0x2e>
 8009822:	bd70      	pop	{r4, r5, r6, pc}
 8009824:	f855 3b04 	ldr.w	r3, [r5], #4
 8009828:	4798      	blx	r3
 800982a:	3601      	adds	r6, #1
 800982c:	e7ee      	b.n	800980c <__libc_init_array+0xc>
 800982e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009832:	4798      	blx	r3
 8009834:	3601      	adds	r6, #1
 8009836:	e7f2      	b.n	800981e <__libc_init_array+0x1e>
 8009838:	0800a280 	.word	0x0800a280
 800983c:	0800a280 	.word	0x0800a280
 8009840:	0800a280 	.word	0x0800a280
 8009844:	0800a284 	.word	0x0800a284

08009848 <memcpy>:
 8009848:	440a      	add	r2, r1
 800984a:	4291      	cmp	r1, r2
 800984c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009850:	d100      	bne.n	8009854 <memcpy+0xc>
 8009852:	4770      	bx	lr
 8009854:	b510      	push	{r4, lr}
 8009856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800985a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800985e:	4291      	cmp	r1, r2
 8009860:	d1f9      	bne.n	8009856 <memcpy+0xe>
 8009862:	bd10      	pop	{r4, pc}

08009864 <memset>:
 8009864:	4402      	add	r2, r0
 8009866:	4603      	mov	r3, r0
 8009868:	4293      	cmp	r3, r2
 800986a:	d100      	bne.n	800986e <memset+0xa>
 800986c:	4770      	bx	lr
 800986e:	f803 1b01 	strb.w	r1, [r3], #1
 8009872:	e7f9      	b.n	8009868 <memset+0x4>

08009874 <siprintf>:
 8009874:	b40e      	push	{r1, r2, r3}
 8009876:	b500      	push	{lr}
 8009878:	b09c      	sub	sp, #112	; 0x70
 800987a:	ab1d      	add	r3, sp, #116	; 0x74
 800987c:	9002      	str	r0, [sp, #8]
 800987e:	9006      	str	r0, [sp, #24]
 8009880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009884:	4809      	ldr	r0, [pc, #36]	; (80098ac <siprintf+0x38>)
 8009886:	9107      	str	r1, [sp, #28]
 8009888:	9104      	str	r1, [sp, #16]
 800988a:	4909      	ldr	r1, [pc, #36]	; (80098b0 <siprintf+0x3c>)
 800988c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009890:	9105      	str	r1, [sp, #20]
 8009892:	6800      	ldr	r0, [r0, #0]
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	a902      	add	r1, sp, #8
 8009898:	f000 f868 	bl	800996c <_svfiprintf_r>
 800989c:	9b02      	ldr	r3, [sp, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	b01c      	add	sp, #112	; 0x70
 80098a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a8:	b003      	add	sp, #12
 80098aa:	4770      	bx	lr
 80098ac:	200006fc 	.word	0x200006fc
 80098b0:	ffff0208 	.word	0xffff0208

080098b4 <__ssputs_r>:
 80098b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b8:	688e      	ldr	r6, [r1, #8]
 80098ba:	429e      	cmp	r6, r3
 80098bc:	4682      	mov	sl, r0
 80098be:	460c      	mov	r4, r1
 80098c0:	4690      	mov	r8, r2
 80098c2:	461f      	mov	r7, r3
 80098c4:	d838      	bhi.n	8009938 <__ssputs_r+0x84>
 80098c6:	898a      	ldrh	r2, [r1, #12]
 80098c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098cc:	d032      	beq.n	8009934 <__ssputs_r+0x80>
 80098ce:	6825      	ldr	r5, [r4, #0]
 80098d0:	6909      	ldr	r1, [r1, #16]
 80098d2:	eba5 0901 	sub.w	r9, r5, r1
 80098d6:	6965      	ldr	r5, [r4, #20]
 80098d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098e0:	3301      	adds	r3, #1
 80098e2:	444b      	add	r3, r9
 80098e4:	106d      	asrs	r5, r5, #1
 80098e6:	429d      	cmp	r5, r3
 80098e8:	bf38      	it	cc
 80098ea:	461d      	movcc	r5, r3
 80098ec:	0553      	lsls	r3, r2, #21
 80098ee:	d531      	bpl.n	8009954 <__ssputs_r+0xa0>
 80098f0:	4629      	mov	r1, r5
 80098f2:	f000 fb55 	bl	8009fa0 <_malloc_r>
 80098f6:	4606      	mov	r6, r0
 80098f8:	b950      	cbnz	r0, 8009910 <__ssputs_r+0x5c>
 80098fa:	230c      	movs	r3, #12
 80098fc:	f8ca 3000 	str.w	r3, [sl]
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009906:	81a3      	strh	r3, [r4, #12]
 8009908:	f04f 30ff 	mov.w	r0, #4294967295
 800990c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009910:	6921      	ldr	r1, [r4, #16]
 8009912:	464a      	mov	r2, r9
 8009914:	f7ff ff98 	bl	8009848 <memcpy>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800991e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	6126      	str	r6, [r4, #16]
 8009926:	6165      	str	r5, [r4, #20]
 8009928:	444e      	add	r6, r9
 800992a:	eba5 0509 	sub.w	r5, r5, r9
 800992e:	6026      	str	r6, [r4, #0]
 8009930:	60a5      	str	r5, [r4, #8]
 8009932:	463e      	mov	r6, r7
 8009934:	42be      	cmp	r6, r7
 8009936:	d900      	bls.n	800993a <__ssputs_r+0x86>
 8009938:	463e      	mov	r6, r7
 800993a:	6820      	ldr	r0, [r4, #0]
 800993c:	4632      	mov	r2, r6
 800993e:	4641      	mov	r1, r8
 8009940:	f000 faa8 	bl	8009e94 <memmove>
 8009944:	68a3      	ldr	r3, [r4, #8]
 8009946:	1b9b      	subs	r3, r3, r6
 8009948:	60a3      	str	r3, [r4, #8]
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	4433      	add	r3, r6
 800994e:	6023      	str	r3, [r4, #0]
 8009950:	2000      	movs	r0, #0
 8009952:	e7db      	b.n	800990c <__ssputs_r+0x58>
 8009954:	462a      	mov	r2, r5
 8009956:	f000 fb97 	bl	800a088 <_realloc_r>
 800995a:	4606      	mov	r6, r0
 800995c:	2800      	cmp	r0, #0
 800995e:	d1e1      	bne.n	8009924 <__ssputs_r+0x70>
 8009960:	6921      	ldr	r1, [r4, #16]
 8009962:	4650      	mov	r0, sl
 8009964:	f000 fab0 	bl	8009ec8 <_free_r>
 8009968:	e7c7      	b.n	80098fa <__ssputs_r+0x46>
	...

0800996c <_svfiprintf_r>:
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	4698      	mov	r8, r3
 8009972:	898b      	ldrh	r3, [r1, #12]
 8009974:	061b      	lsls	r3, r3, #24
 8009976:	b09d      	sub	sp, #116	; 0x74
 8009978:	4607      	mov	r7, r0
 800997a:	460d      	mov	r5, r1
 800997c:	4614      	mov	r4, r2
 800997e:	d50e      	bpl.n	800999e <_svfiprintf_r+0x32>
 8009980:	690b      	ldr	r3, [r1, #16]
 8009982:	b963      	cbnz	r3, 800999e <_svfiprintf_r+0x32>
 8009984:	2140      	movs	r1, #64	; 0x40
 8009986:	f000 fb0b 	bl	8009fa0 <_malloc_r>
 800998a:	6028      	str	r0, [r5, #0]
 800998c:	6128      	str	r0, [r5, #16]
 800998e:	b920      	cbnz	r0, 800999a <_svfiprintf_r+0x2e>
 8009990:	230c      	movs	r3, #12
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	f04f 30ff 	mov.w	r0, #4294967295
 8009998:	e0d1      	b.n	8009b3e <_svfiprintf_r+0x1d2>
 800999a:	2340      	movs	r3, #64	; 0x40
 800999c:	616b      	str	r3, [r5, #20]
 800999e:	2300      	movs	r3, #0
 80099a0:	9309      	str	r3, [sp, #36]	; 0x24
 80099a2:	2320      	movs	r3, #32
 80099a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ac:	2330      	movs	r3, #48	; 0x30
 80099ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b58 <_svfiprintf_r+0x1ec>
 80099b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099b6:	f04f 0901 	mov.w	r9, #1
 80099ba:	4623      	mov	r3, r4
 80099bc:	469a      	mov	sl, r3
 80099be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c2:	b10a      	cbz	r2, 80099c8 <_svfiprintf_r+0x5c>
 80099c4:	2a25      	cmp	r2, #37	; 0x25
 80099c6:	d1f9      	bne.n	80099bc <_svfiprintf_r+0x50>
 80099c8:	ebba 0b04 	subs.w	fp, sl, r4
 80099cc:	d00b      	beq.n	80099e6 <_svfiprintf_r+0x7a>
 80099ce:	465b      	mov	r3, fp
 80099d0:	4622      	mov	r2, r4
 80099d2:	4629      	mov	r1, r5
 80099d4:	4638      	mov	r0, r7
 80099d6:	f7ff ff6d 	bl	80098b4 <__ssputs_r>
 80099da:	3001      	adds	r0, #1
 80099dc:	f000 80aa 	beq.w	8009b34 <_svfiprintf_r+0x1c8>
 80099e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099e2:	445a      	add	r2, fp
 80099e4:	9209      	str	r2, [sp, #36]	; 0x24
 80099e6:	f89a 3000 	ldrb.w	r3, [sl]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 80a2 	beq.w	8009b34 <_svfiprintf_r+0x1c8>
 80099f0:	2300      	movs	r3, #0
 80099f2:	f04f 32ff 	mov.w	r2, #4294967295
 80099f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099fa:	f10a 0a01 	add.w	sl, sl, #1
 80099fe:	9304      	str	r3, [sp, #16]
 8009a00:	9307      	str	r3, [sp, #28]
 8009a02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a06:	931a      	str	r3, [sp, #104]	; 0x68
 8009a08:	4654      	mov	r4, sl
 8009a0a:	2205      	movs	r2, #5
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	4851      	ldr	r0, [pc, #324]	; (8009b58 <_svfiprintf_r+0x1ec>)
 8009a12:	f7f6 fbe5 	bl	80001e0 <memchr>
 8009a16:	9a04      	ldr	r2, [sp, #16]
 8009a18:	b9d8      	cbnz	r0, 8009a52 <_svfiprintf_r+0xe6>
 8009a1a:	06d0      	lsls	r0, r2, #27
 8009a1c:	bf44      	itt	mi
 8009a1e:	2320      	movmi	r3, #32
 8009a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a24:	0711      	lsls	r1, r2, #28
 8009a26:	bf44      	itt	mi
 8009a28:	232b      	movmi	r3, #43	; 0x2b
 8009a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a32:	2b2a      	cmp	r3, #42	; 0x2a
 8009a34:	d015      	beq.n	8009a62 <_svfiprintf_r+0xf6>
 8009a36:	9a07      	ldr	r2, [sp, #28]
 8009a38:	4654      	mov	r4, sl
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f04f 0c0a 	mov.w	ip, #10
 8009a40:	4621      	mov	r1, r4
 8009a42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a46:	3b30      	subs	r3, #48	; 0x30
 8009a48:	2b09      	cmp	r3, #9
 8009a4a:	d94e      	bls.n	8009aea <_svfiprintf_r+0x17e>
 8009a4c:	b1b0      	cbz	r0, 8009a7c <_svfiprintf_r+0x110>
 8009a4e:	9207      	str	r2, [sp, #28]
 8009a50:	e014      	b.n	8009a7c <_svfiprintf_r+0x110>
 8009a52:	eba0 0308 	sub.w	r3, r0, r8
 8009a56:	fa09 f303 	lsl.w	r3, r9, r3
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	9304      	str	r3, [sp, #16]
 8009a5e:	46a2      	mov	sl, r4
 8009a60:	e7d2      	b.n	8009a08 <_svfiprintf_r+0x9c>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	1d19      	adds	r1, r3, #4
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	9103      	str	r1, [sp, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bfbb      	ittet	lt
 8009a6e:	425b      	neglt	r3, r3
 8009a70:	f042 0202 	orrlt.w	r2, r2, #2
 8009a74:	9307      	strge	r3, [sp, #28]
 8009a76:	9307      	strlt	r3, [sp, #28]
 8009a78:	bfb8      	it	lt
 8009a7a:	9204      	strlt	r2, [sp, #16]
 8009a7c:	7823      	ldrb	r3, [r4, #0]
 8009a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a80:	d10c      	bne.n	8009a9c <_svfiprintf_r+0x130>
 8009a82:	7863      	ldrb	r3, [r4, #1]
 8009a84:	2b2a      	cmp	r3, #42	; 0x2a
 8009a86:	d135      	bne.n	8009af4 <_svfiprintf_r+0x188>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	1d1a      	adds	r2, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	9203      	str	r2, [sp, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bfb8      	it	lt
 8009a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a98:	3402      	adds	r4, #2
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b68 <_svfiprintf_r+0x1fc>
 8009aa0:	7821      	ldrb	r1, [r4, #0]
 8009aa2:	2203      	movs	r2, #3
 8009aa4:	4650      	mov	r0, sl
 8009aa6:	f7f6 fb9b 	bl	80001e0 <memchr>
 8009aaa:	b140      	cbz	r0, 8009abe <_svfiprintf_r+0x152>
 8009aac:	2340      	movs	r3, #64	; 0x40
 8009aae:	eba0 000a 	sub.w	r0, r0, sl
 8009ab2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ab6:	9b04      	ldr	r3, [sp, #16]
 8009ab8:	4303      	orrs	r3, r0
 8009aba:	3401      	adds	r4, #1
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac2:	4826      	ldr	r0, [pc, #152]	; (8009b5c <_svfiprintf_r+0x1f0>)
 8009ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ac8:	2206      	movs	r2, #6
 8009aca:	f7f6 fb89 	bl	80001e0 <memchr>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d038      	beq.n	8009b44 <_svfiprintf_r+0x1d8>
 8009ad2:	4b23      	ldr	r3, [pc, #140]	; (8009b60 <_svfiprintf_r+0x1f4>)
 8009ad4:	bb1b      	cbnz	r3, 8009b1e <_svfiprintf_r+0x1b2>
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	3307      	adds	r3, #7
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	3308      	adds	r3, #8
 8009ae0:	9303      	str	r3, [sp, #12]
 8009ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae4:	4433      	add	r3, r6
 8009ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae8:	e767      	b.n	80099ba <_svfiprintf_r+0x4e>
 8009aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aee:	460c      	mov	r4, r1
 8009af0:	2001      	movs	r0, #1
 8009af2:	e7a5      	b.n	8009a40 <_svfiprintf_r+0xd4>
 8009af4:	2300      	movs	r3, #0
 8009af6:	3401      	adds	r4, #1
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	4619      	mov	r1, r3
 8009afc:	f04f 0c0a 	mov.w	ip, #10
 8009b00:	4620      	mov	r0, r4
 8009b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b06:	3a30      	subs	r2, #48	; 0x30
 8009b08:	2a09      	cmp	r2, #9
 8009b0a:	d903      	bls.n	8009b14 <_svfiprintf_r+0x1a8>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0c5      	beq.n	8009a9c <_svfiprintf_r+0x130>
 8009b10:	9105      	str	r1, [sp, #20]
 8009b12:	e7c3      	b.n	8009a9c <_svfiprintf_r+0x130>
 8009b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b18:	4604      	mov	r4, r0
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7f0      	b.n	8009b00 <_svfiprintf_r+0x194>
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	462a      	mov	r2, r5
 8009b24:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <_svfiprintf_r+0x1f8>)
 8009b26:	a904      	add	r1, sp, #16
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f3af 8000 	nop.w
 8009b2e:	1c42      	adds	r2, r0, #1
 8009b30:	4606      	mov	r6, r0
 8009b32:	d1d6      	bne.n	8009ae2 <_svfiprintf_r+0x176>
 8009b34:	89ab      	ldrh	r3, [r5, #12]
 8009b36:	065b      	lsls	r3, r3, #25
 8009b38:	f53f af2c 	bmi.w	8009994 <_svfiprintf_r+0x28>
 8009b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b3e:	b01d      	add	sp, #116	; 0x74
 8009b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b44:	ab03      	add	r3, sp, #12
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	462a      	mov	r2, r5
 8009b4a:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <_svfiprintf_r+0x1f8>)
 8009b4c:	a904      	add	r1, sp, #16
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f000 f87a 	bl	8009c48 <_printf_i>
 8009b54:	e7eb      	b.n	8009b2e <_svfiprintf_r+0x1c2>
 8009b56:	bf00      	nop
 8009b58:	0800a244 	.word	0x0800a244
 8009b5c:	0800a24e 	.word	0x0800a24e
 8009b60:	00000000 	.word	0x00000000
 8009b64:	080098b5 	.word	0x080098b5
 8009b68:	0800a24a 	.word	0x0800a24a

08009b6c <_printf_common>:
 8009b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b70:	4616      	mov	r6, r2
 8009b72:	4699      	mov	r9, r3
 8009b74:	688a      	ldr	r2, [r1, #8]
 8009b76:	690b      	ldr	r3, [r1, #16]
 8009b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	bfb8      	it	lt
 8009b80:	4613      	movlt	r3, r2
 8009b82:	6033      	str	r3, [r6, #0]
 8009b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b88:	4607      	mov	r7, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	b10a      	cbz	r2, 8009b92 <_printf_common+0x26>
 8009b8e:	3301      	adds	r3, #1
 8009b90:	6033      	str	r3, [r6, #0]
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	0699      	lsls	r1, r3, #26
 8009b96:	bf42      	ittt	mi
 8009b98:	6833      	ldrmi	r3, [r6, #0]
 8009b9a:	3302      	addmi	r3, #2
 8009b9c:	6033      	strmi	r3, [r6, #0]
 8009b9e:	6825      	ldr	r5, [r4, #0]
 8009ba0:	f015 0506 	ands.w	r5, r5, #6
 8009ba4:	d106      	bne.n	8009bb4 <_printf_common+0x48>
 8009ba6:	f104 0a19 	add.w	sl, r4, #25
 8009baa:	68e3      	ldr	r3, [r4, #12]
 8009bac:	6832      	ldr	r2, [r6, #0]
 8009bae:	1a9b      	subs	r3, r3, r2
 8009bb0:	42ab      	cmp	r3, r5
 8009bb2:	dc26      	bgt.n	8009c02 <_printf_common+0x96>
 8009bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bb8:	1e13      	subs	r3, r2, #0
 8009bba:	6822      	ldr	r2, [r4, #0]
 8009bbc:	bf18      	it	ne
 8009bbe:	2301      	movne	r3, #1
 8009bc0:	0692      	lsls	r2, r2, #26
 8009bc2:	d42b      	bmi.n	8009c1c <_printf_common+0xb0>
 8009bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bc8:	4649      	mov	r1, r9
 8009bca:	4638      	mov	r0, r7
 8009bcc:	47c0      	blx	r8
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d01e      	beq.n	8009c10 <_printf_common+0xa4>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	68e5      	ldr	r5, [r4, #12]
 8009bd6:	6832      	ldr	r2, [r6, #0]
 8009bd8:	f003 0306 	and.w	r3, r3, #6
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	bf08      	it	eq
 8009be0:	1aad      	subeq	r5, r5, r2
 8009be2:	68a3      	ldr	r3, [r4, #8]
 8009be4:	6922      	ldr	r2, [r4, #16]
 8009be6:	bf0c      	ite	eq
 8009be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bec:	2500      	movne	r5, #0
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	bfc4      	itt	gt
 8009bf2:	1a9b      	subgt	r3, r3, r2
 8009bf4:	18ed      	addgt	r5, r5, r3
 8009bf6:	2600      	movs	r6, #0
 8009bf8:	341a      	adds	r4, #26
 8009bfa:	42b5      	cmp	r5, r6
 8009bfc:	d11a      	bne.n	8009c34 <_printf_common+0xc8>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	e008      	b.n	8009c14 <_printf_common+0xa8>
 8009c02:	2301      	movs	r3, #1
 8009c04:	4652      	mov	r2, sl
 8009c06:	4649      	mov	r1, r9
 8009c08:	4638      	mov	r0, r7
 8009c0a:	47c0      	blx	r8
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d103      	bne.n	8009c18 <_printf_common+0xac>
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c18:	3501      	adds	r5, #1
 8009c1a:	e7c6      	b.n	8009baa <_printf_common+0x3e>
 8009c1c:	18e1      	adds	r1, r4, r3
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	2030      	movs	r0, #48	; 0x30
 8009c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c26:	4422      	add	r2, r4
 8009c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c30:	3302      	adds	r3, #2
 8009c32:	e7c7      	b.n	8009bc4 <_printf_common+0x58>
 8009c34:	2301      	movs	r3, #1
 8009c36:	4622      	mov	r2, r4
 8009c38:	4649      	mov	r1, r9
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	47c0      	blx	r8
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d0e6      	beq.n	8009c10 <_printf_common+0xa4>
 8009c42:	3601      	adds	r6, #1
 8009c44:	e7d9      	b.n	8009bfa <_printf_common+0x8e>
	...

08009c48 <_printf_i>:
 8009c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c4c:	7e0f      	ldrb	r7, [r1, #24]
 8009c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c50:	2f78      	cmp	r7, #120	; 0x78
 8009c52:	4691      	mov	r9, r2
 8009c54:	4680      	mov	r8, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	469a      	mov	sl, r3
 8009c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c5e:	d807      	bhi.n	8009c70 <_printf_i+0x28>
 8009c60:	2f62      	cmp	r7, #98	; 0x62
 8009c62:	d80a      	bhi.n	8009c7a <_printf_i+0x32>
 8009c64:	2f00      	cmp	r7, #0
 8009c66:	f000 80d8 	beq.w	8009e1a <_printf_i+0x1d2>
 8009c6a:	2f58      	cmp	r7, #88	; 0x58
 8009c6c:	f000 80a3 	beq.w	8009db6 <_printf_i+0x16e>
 8009c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c78:	e03a      	b.n	8009cf0 <_printf_i+0xa8>
 8009c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c7e:	2b15      	cmp	r3, #21
 8009c80:	d8f6      	bhi.n	8009c70 <_printf_i+0x28>
 8009c82:	a101      	add	r1, pc, #4	; (adr r1, 8009c88 <_printf_i+0x40>)
 8009c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c88:	08009ce1 	.word	0x08009ce1
 8009c8c:	08009cf5 	.word	0x08009cf5
 8009c90:	08009c71 	.word	0x08009c71
 8009c94:	08009c71 	.word	0x08009c71
 8009c98:	08009c71 	.word	0x08009c71
 8009c9c:	08009c71 	.word	0x08009c71
 8009ca0:	08009cf5 	.word	0x08009cf5
 8009ca4:	08009c71 	.word	0x08009c71
 8009ca8:	08009c71 	.word	0x08009c71
 8009cac:	08009c71 	.word	0x08009c71
 8009cb0:	08009c71 	.word	0x08009c71
 8009cb4:	08009e01 	.word	0x08009e01
 8009cb8:	08009d25 	.word	0x08009d25
 8009cbc:	08009de3 	.word	0x08009de3
 8009cc0:	08009c71 	.word	0x08009c71
 8009cc4:	08009c71 	.word	0x08009c71
 8009cc8:	08009e23 	.word	0x08009e23
 8009ccc:	08009c71 	.word	0x08009c71
 8009cd0:	08009d25 	.word	0x08009d25
 8009cd4:	08009c71 	.word	0x08009c71
 8009cd8:	08009c71 	.word	0x08009c71
 8009cdc:	08009deb 	.word	0x08009deb
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	1d1a      	adds	r2, r3, #4
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	602a      	str	r2, [r5, #0]
 8009ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e0a3      	b.n	8009e3c <_printf_i+0x1f4>
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	6829      	ldr	r1, [r5, #0]
 8009cf8:	0606      	lsls	r6, r0, #24
 8009cfa:	f101 0304 	add.w	r3, r1, #4
 8009cfe:	d50a      	bpl.n	8009d16 <_printf_i+0xce>
 8009d00:	680e      	ldr	r6, [r1, #0]
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	2e00      	cmp	r6, #0
 8009d06:	da03      	bge.n	8009d10 <_printf_i+0xc8>
 8009d08:	232d      	movs	r3, #45	; 0x2d
 8009d0a:	4276      	negs	r6, r6
 8009d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d10:	485e      	ldr	r0, [pc, #376]	; (8009e8c <_printf_i+0x244>)
 8009d12:	230a      	movs	r3, #10
 8009d14:	e019      	b.n	8009d4a <_printf_i+0x102>
 8009d16:	680e      	ldr	r6, [r1, #0]
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d1e:	bf18      	it	ne
 8009d20:	b236      	sxthne	r6, r6
 8009d22:	e7ef      	b.n	8009d04 <_printf_i+0xbc>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	6820      	ldr	r0, [r4, #0]
 8009d28:	1d19      	adds	r1, r3, #4
 8009d2a:	6029      	str	r1, [r5, #0]
 8009d2c:	0601      	lsls	r1, r0, #24
 8009d2e:	d501      	bpl.n	8009d34 <_printf_i+0xec>
 8009d30:	681e      	ldr	r6, [r3, #0]
 8009d32:	e002      	b.n	8009d3a <_printf_i+0xf2>
 8009d34:	0646      	lsls	r6, r0, #25
 8009d36:	d5fb      	bpl.n	8009d30 <_printf_i+0xe8>
 8009d38:	881e      	ldrh	r6, [r3, #0]
 8009d3a:	4854      	ldr	r0, [pc, #336]	; (8009e8c <_printf_i+0x244>)
 8009d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8009d3e:	bf0c      	ite	eq
 8009d40:	2308      	moveq	r3, #8
 8009d42:	230a      	movne	r3, #10
 8009d44:	2100      	movs	r1, #0
 8009d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d4a:	6865      	ldr	r5, [r4, #4]
 8009d4c:	60a5      	str	r5, [r4, #8]
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	bfa2      	ittt	ge
 8009d52:	6821      	ldrge	r1, [r4, #0]
 8009d54:	f021 0104 	bicge.w	r1, r1, #4
 8009d58:	6021      	strge	r1, [r4, #0]
 8009d5a:	b90e      	cbnz	r6, 8009d60 <_printf_i+0x118>
 8009d5c:	2d00      	cmp	r5, #0
 8009d5e:	d04d      	beq.n	8009dfc <_printf_i+0x1b4>
 8009d60:	4615      	mov	r5, r2
 8009d62:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d66:	fb03 6711 	mls	r7, r3, r1, r6
 8009d6a:	5dc7      	ldrb	r7, [r0, r7]
 8009d6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d70:	4637      	mov	r7, r6
 8009d72:	42bb      	cmp	r3, r7
 8009d74:	460e      	mov	r6, r1
 8009d76:	d9f4      	bls.n	8009d62 <_printf_i+0x11a>
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d10b      	bne.n	8009d94 <_printf_i+0x14c>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	07de      	lsls	r6, r3, #31
 8009d80:	d508      	bpl.n	8009d94 <_printf_i+0x14c>
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	6861      	ldr	r1, [r4, #4]
 8009d86:	4299      	cmp	r1, r3
 8009d88:	bfde      	ittt	le
 8009d8a:	2330      	movle	r3, #48	; 0x30
 8009d8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d94:	1b52      	subs	r2, r2, r5
 8009d96:	6122      	str	r2, [r4, #16]
 8009d98:	f8cd a000 	str.w	sl, [sp]
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	aa03      	add	r2, sp, #12
 8009da0:	4621      	mov	r1, r4
 8009da2:	4640      	mov	r0, r8
 8009da4:	f7ff fee2 	bl	8009b6c <_printf_common>
 8009da8:	3001      	adds	r0, #1
 8009daa:	d14c      	bne.n	8009e46 <_printf_i+0x1fe>
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	b004      	add	sp, #16
 8009db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db6:	4835      	ldr	r0, [pc, #212]	; (8009e8c <_printf_i+0x244>)
 8009db8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009dbc:	6829      	ldr	r1, [r5, #0]
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dc4:	6029      	str	r1, [r5, #0]
 8009dc6:	061d      	lsls	r5, r3, #24
 8009dc8:	d514      	bpl.n	8009df4 <_printf_i+0x1ac>
 8009dca:	07df      	lsls	r7, r3, #31
 8009dcc:	bf44      	itt	mi
 8009dce:	f043 0320 	orrmi.w	r3, r3, #32
 8009dd2:	6023      	strmi	r3, [r4, #0]
 8009dd4:	b91e      	cbnz	r6, 8009dde <_printf_i+0x196>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	f023 0320 	bic.w	r3, r3, #32
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	2310      	movs	r3, #16
 8009de0:	e7b0      	b.n	8009d44 <_printf_i+0xfc>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	f043 0320 	orr.w	r3, r3, #32
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	2378      	movs	r3, #120	; 0x78
 8009dec:	4828      	ldr	r0, [pc, #160]	; (8009e90 <_printf_i+0x248>)
 8009dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009df2:	e7e3      	b.n	8009dbc <_printf_i+0x174>
 8009df4:	0659      	lsls	r1, r3, #25
 8009df6:	bf48      	it	mi
 8009df8:	b2b6      	uxthmi	r6, r6
 8009dfa:	e7e6      	b.n	8009dca <_printf_i+0x182>
 8009dfc:	4615      	mov	r5, r2
 8009dfe:	e7bb      	b.n	8009d78 <_printf_i+0x130>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	6826      	ldr	r6, [r4, #0]
 8009e04:	6961      	ldr	r1, [r4, #20]
 8009e06:	1d18      	adds	r0, r3, #4
 8009e08:	6028      	str	r0, [r5, #0]
 8009e0a:	0635      	lsls	r5, r6, #24
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	d501      	bpl.n	8009e14 <_printf_i+0x1cc>
 8009e10:	6019      	str	r1, [r3, #0]
 8009e12:	e002      	b.n	8009e1a <_printf_i+0x1d2>
 8009e14:	0670      	lsls	r0, r6, #25
 8009e16:	d5fb      	bpl.n	8009e10 <_printf_i+0x1c8>
 8009e18:	8019      	strh	r1, [r3, #0]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	6123      	str	r3, [r4, #16]
 8009e1e:	4615      	mov	r5, r2
 8009e20:	e7ba      	b.n	8009d98 <_printf_i+0x150>
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	1d1a      	adds	r2, r3, #4
 8009e26:	602a      	str	r2, [r5, #0]
 8009e28:	681d      	ldr	r5, [r3, #0]
 8009e2a:	6862      	ldr	r2, [r4, #4]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f7f6 f9d6 	bl	80001e0 <memchr>
 8009e34:	b108      	cbz	r0, 8009e3a <_printf_i+0x1f2>
 8009e36:	1b40      	subs	r0, r0, r5
 8009e38:	6060      	str	r0, [r4, #4]
 8009e3a:	6863      	ldr	r3, [r4, #4]
 8009e3c:	6123      	str	r3, [r4, #16]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e44:	e7a8      	b.n	8009d98 <_printf_i+0x150>
 8009e46:	6923      	ldr	r3, [r4, #16]
 8009e48:	462a      	mov	r2, r5
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	4640      	mov	r0, r8
 8009e4e:	47d0      	blx	sl
 8009e50:	3001      	adds	r0, #1
 8009e52:	d0ab      	beq.n	8009dac <_printf_i+0x164>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	079b      	lsls	r3, r3, #30
 8009e58:	d413      	bmi.n	8009e82 <_printf_i+0x23a>
 8009e5a:	68e0      	ldr	r0, [r4, #12]
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	4298      	cmp	r0, r3
 8009e60:	bfb8      	it	lt
 8009e62:	4618      	movlt	r0, r3
 8009e64:	e7a4      	b.n	8009db0 <_printf_i+0x168>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4632      	mov	r2, r6
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	47d0      	blx	sl
 8009e70:	3001      	adds	r0, #1
 8009e72:	d09b      	beq.n	8009dac <_printf_i+0x164>
 8009e74:	3501      	adds	r5, #1
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	9903      	ldr	r1, [sp, #12]
 8009e7a:	1a5b      	subs	r3, r3, r1
 8009e7c:	42ab      	cmp	r3, r5
 8009e7e:	dcf2      	bgt.n	8009e66 <_printf_i+0x21e>
 8009e80:	e7eb      	b.n	8009e5a <_printf_i+0x212>
 8009e82:	2500      	movs	r5, #0
 8009e84:	f104 0619 	add.w	r6, r4, #25
 8009e88:	e7f5      	b.n	8009e76 <_printf_i+0x22e>
 8009e8a:	bf00      	nop
 8009e8c:	0800a255 	.word	0x0800a255
 8009e90:	0800a266 	.word	0x0800a266

08009e94 <memmove>:
 8009e94:	4288      	cmp	r0, r1
 8009e96:	b510      	push	{r4, lr}
 8009e98:	eb01 0402 	add.w	r4, r1, r2
 8009e9c:	d902      	bls.n	8009ea4 <memmove+0x10>
 8009e9e:	4284      	cmp	r4, r0
 8009ea0:	4623      	mov	r3, r4
 8009ea2:	d807      	bhi.n	8009eb4 <memmove+0x20>
 8009ea4:	1e43      	subs	r3, r0, #1
 8009ea6:	42a1      	cmp	r1, r4
 8009ea8:	d008      	beq.n	8009ebc <memmove+0x28>
 8009eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eb2:	e7f8      	b.n	8009ea6 <memmove+0x12>
 8009eb4:	4402      	add	r2, r0
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	428a      	cmp	r2, r1
 8009eba:	d100      	bne.n	8009ebe <memmove+0x2a>
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ec6:	e7f7      	b.n	8009eb8 <memmove+0x24>

08009ec8 <_free_r>:
 8009ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eca:	2900      	cmp	r1, #0
 8009ecc:	d044      	beq.n	8009f58 <_free_r+0x90>
 8009ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ed2:	9001      	str	r0, [sp, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8009eda:	bfb8      	it	lt
 8009edc:	18e4      	addlt	r4, r4, r3
 8009ede:	f000 f913 	bl	800a108 <__malloc_lock>
 8009ee2:	4a1e      	ldr	r2, [pc, #120]	; (8009f5c <_free_r+0x94>)
 8009ee4:	9801      	ldr	r0, [sp, #4]
 8009ee6:	6813      	ldr	r3, [r2, #0]
 8009ee8:	b933      	cbnz	r3, 8009ef8 <_free_r+0x30>
 8009eea:	6063      	str	r3, [r4, #4]
 8009eec:	6014      	str	r4, [r2, #0]
 8009eee:	b003      	add	sp, #12
 8009ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ef4:	f000 b90e 	b.w	800a114 <__malloc_unlock>
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	d908      	bls.n	8009f0e <_free_r+0x46>
 8009efc:	6825      	ldr	r5, [r4, #0]
 8009efe:	1961      	adds	r1, r4, r5
 8009f00:	428b      	cmp	r3, r1
 8009f02:	bf01      	itttt	eq
 8009f04:	6819      	ldreq	r1, [r3, #0]
 8009f06:	685b      	ldreq	r3, [r3, #4]
 8009f08:	1949      	addeq	r1, r1, r5
 8009f0a:	6021      	streq	r1, [r4, #0]
 8009f0c:	e7ed      	b.n	8009eea <_free_r+0x22>
 8009f0e:	461a      	mov	r2, r3
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	b10b      	cbz	r3, 8009f18 <_free_r+0x50>
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	d9fa      	bls.n	8009f0e <_free_r+0x46>
 8009f18:	6811      	ldr	r1, [r2, #0]
 8009f1a:	1855      	adds	r5, r2, r1
 8009f1c:	42a5      	cmp	r5, r4
 8009f1e:	d10b      	bne.n	8009f38 <_free_r+0x70>
 8009f20:	6824      	ldr	r4, [r4, #0]
 8009f22:	4421      	add	r1, r4
 8009f24:	1854      	adds	r4, r2, r1
 8009f26:	42a3      	cmp	r3, r4
 8009f28:	6011      	str	r1, [r2, #0]
 8009f2a:	d1e0      	bne.n	8009eee <_free_r+0x26>
 8009f2c:	681c      	ldr	r4, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	6053      	str	r3, [r2, #4]
 8009f32:	4421      	add	r1, r4
 8009f34:	6011      	str	r1, [r2, #0]
 8009f36:	e7da      	b.n	8009eee <_free_r+0x26>
 8009f38:	d902      	bls.n	8009f40 <_free_r+0x78>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	6003      	str	r3, [r0, #0]
 8009f3e:	e7d6      	b.n	8009eee <_free_r+0x26>
 8009f40:	6825      	ldr	r5, [r4, #0]
 8009f42:	1961      	adds	r1, r4, r5
 8009f44:	428b      	cmp	r3, r1
 8009f46:	bf04      	itt	eq
 8009f48:	6819      	ldreq	r1, [r3, #0]
 8009f4a:	685b      	ldreq	r3, [r3, #4]
 8009f4c:	6063      	str	r3, [r4, #4]
 8009f4e:	bf04      	itt	eq
 8009f50:	1949      	addeq	r1, r1, r5
 8009f52:	6021      	streq	r1, [r4, #0]
 8009f54:	6054      	str	r4, [r2, #4]
 8009f56:	e7ca      	b.n	8009eee <_free_r+0x26>
 8009f58:	b003      	add	sp, #12
 8009f5a:	bd30      	pop	{r4, r5, pc}
 8009f5c:	200024f0 	.word	0x200024f0

08009f60 <sbrk_aligned>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	4e0e      	ldr	r6, [pc, #56]	; (8009f9c <sbrk_aligned+0x3c>)
 8009f64:	460c      	mov	r4, r1
 8009f66:	6831      	ldr	r1, [r6, #0]
 8009f68:	4605      	mov	r5, r0
 8009f6a:	b911      	cbnz	r1, 8009f72 <sbrk_aligned+0x12>
 8009f6c:	f000 f8bc 	bl	800a0e8 <_sbrk_r>
 8009f70:	6030      	str	r0, [r6, #0]
 8009f72:	4621      	mov	r1, r4
 8009f74:	4628      	mov	r0, r5
 8009f76:	f000 f8b7 	bl	800a0e8 <_sbrk_r>
 8009f7a:	1c43      	adds	r3, r0, #1
 8009f7c:	d00a      	beq.n	8009f94 <sbrk_aligned+0x34>
 8009f7e:	1cc4      	adds	r4, r0, #3
 8009f80:	f024 0403 	bic.w	r4, r4, #3
 8009f84:	42a0      	cmp	r0, r4
 8009f86:	d007      	beq.n	8009f98 <sbrk_aligned+0x38>
 8009f88:	1a21      	subs	r1, r4, r0
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f000 f8ac 	bl	800a0e8 <_sbrk_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d101      	bne.n	8009f98 <sbrk_aligned+0x38>
 8009f94:	f04f 34ff 	mov.w	r4, #4294967295
 8009f98:	4620      	mov	r0, r4
 8009f9a:	bd70      	pop	{r4, r5, r6, pc}
 8009f9c:	200024f4 	.word	0x200024f4

08009fa0 <_malloc_r>:
 8009fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa4:	1ccd      	adds	r5, r1, #3
 8009fa6:	f025 0503 	bic.w	r5, r5, #3
 8009faa:	3508      	adds	r5, #8
 8009fac:	2d0c      	cmp	r5, #12
 8009fae:	bf38      	it	cc
 8009fb0:	250c      	movcc	r5, #12
 8009fb2:	2d00      	cmp	r5, #0
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	db01      	blt.n	8009fbc <_malloc_r+0x1c>
 8009fb8:	42a9      	cmp	r1, r5
 8009fba:	d905      	bls.n	8009fc8 <_malloc_r+0x28>
 8009fbc:	230c      	movs	r3, #12
 8009fbe:	603b      	str	r3, [r7, #0]
 8009fc0:	2600      	movs	r6, #0
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc8:	4e2e      	ldr	r6, [pc, #184]	; (800a084 <_malloc_r+0xe4>)
 8009fca:	f000 f89d 	bl	800a108 <__malloc_lock>
 8009fce:	6833      	ldr	r3, [r6, #0]
 8009fd0:	461c      	mov	r4, r3
 8009fd2:	bb34      	cbnz	r4, 800a022 <_malloc_r+0x82>
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	f7ff ffc2 	bl	8009f60 <sbrk_aligned>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	4604      	mov	r4, r0
 8009fe0:	d14d      	bne.n	800a07e <_malloc_r+0xde>
 8009fe2:	6834      	ldr	r4, [r6, #0]
 8009fe4:	4626      	mov	r6, r4
 8009fe6:	2e00      	cmp	r6, #0
 8009fe8:	d140      	bne.n	800a06c <_malloc_r+0xcc>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	4631      	mov	r1, r6
 8009fee:	4638      	mov	r0, r7
 8009ff0:	eb04 0803 	add.w	r8, r4, r3
 8009ff4:	f000 f878 	bl	800a0e8 <_sbrk_r>
 8009ff8:	4580      	cmp	r8, r0
 8009ffa:	d13a      	bne.n	800a072 <_malloc_r+0xd2>
 8009ffc:	6821      	ldr	r1, [r4, #0]
 8009ffe:	3503      	adds	r5, #3
 800a000:	1a6d      	subs	r5, r5, r1
 800a002:	f025 0503 	bic.w	r5, r5, #3
 800a006:	3508      	adds	r5, #8
 800a008:	2d0c      	cmp	r5, #12
 800a00a:	bf38      	it	cc
 800a00c:	250c      	movcc	r5, #12
 800a00e:	4629      	mov	r1, r5
 800a010:	4638      	mov	r0, r7
 800a012:	f7ff ffa5 	bl	8009f60 <sbrk_aligned>
 800a016:	3001      	adds	r0, #1
 800a018:	d02b      	beq.n	800a072 <_malloc_r+0xd2>
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	442b      	add	r3, r5
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	e00e      	b.n	800a040 <_malloc_r+0xa0>
 800a022:	6822      	ldr	r2, [r4, #0]
 800a024:	1b52      	subs	r2, r2, r5
 800a026:	d41e      	bmi.n	800a066 <_malloc_r+0xc6>
 800a028:	2a0b      	cmp	r2, #11
 800a02a:	d916      	bls.n	800a05a <_malloc_r+0xba>
 800a02c:	1961      	adds	r1, r4, r5
 800a02e:	42a3      	cmp	r3, r4
 800a030:	6025      	str	r5, [r4, #0]
 800a032:	bf18      	it	ne
 800a034:	6059      	strne	r1, [r3, #4]
 800a036:	6863      	ldr	r3, [r4, #4]
 800a038:	bf08      	it	eq
 800a03a:	6031      	streq	r1, [r6, #0]
 800a03c:	5162      	str	r2, [r4, r5]
 800a03e:	604b      	str	r3, [r1, #4]
 800a040:	4638      	mov	r0, r7
 800a042:	f104 060b 	add.w	r6, r4, #11
 800a046:	f000 f865 	bl	800a114 <__malloc_unlock>
 800a04a:	f026 0607 	bic.w	r6, r6, #7
 800a04e:	1d23      	adds	r3, r4, #4
 800a050:	1af2      	subs	r2, r6, r3
 800a052:	d0b6      	beq.n	8009fc2 <_malloc_r+0x22>
 800a054:	1b9b      	subs	r3, r3, r6
 800a056:	50a3      	str	r3, [r4, r2]
 800a058:	e7b3      	b.n	8009fc2 <_malloc_r+0x22>
 800a05a:	6862      	ldr	r2, [r4, #4]
 800a05c:	42a3      	cmp	r3, r4
 800a05e:	bf0c      	ite	eq
 800a060:	6032      	streq	r2, [r6, #0]
 800a062:	605a      	strne	r2, [r3, #4]
 800a064:	e7ec      	b.n	800a040 <_malloc_r+0xa0>
 800a066:	4623      	mov	r3, r4
 800a068:	6864      	ldr	r4, [r4, #4]
 800a06a:	e7b2      	b.n	8009fd2 <_malloc_r+0x32>
 800a06c:	4634      	mov	r4, r6
 800a06e:	6876      	ldr	r6, [r6, #4]
 800a070:	e7b9      	b.n	8009fe6 <_malloc_r+0x46>
 800a072:	230c      	movs	r3, #12
 800a074:	603b      	str	r3, [r7, #0]
 800a076:	4638      	mov	r0, r7
 800a078:	f000 f84c 	bl	800a114 <__malloc_unlock>
 800a07c:	e7a1      	b.n	8009fc2 <_malloc_r+0x22>
 800a07e:	6025      	str	r5, [r4, #0]
 800a080:	e7de      	b.n	800a040 <_malloc_r+0xa0>
 800a082:	bf00      	nop
 800a084:	200024f0 	.word	0x200024f0

0800a088 <_realloc_r>:
 800a088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a08c:	4680      	mov	r8, r0
 800a08e:	4614      	mov	r4, r2
 800a090:	460e      	mov	r6, r1
 800a092:	b921      	cbnz	r1, 800a09e <_realloc_r+0x16>
 800a094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a098:	4611      	mov	r1, r2
 800a09a:	f7ff bf81 	b.w	8009fa0 <_malloc_r>
 800a09e:	b92a      	cbnz	r2, 800a0ac <_realloc_r+0x24>
 800a0a0:	f7ff ff12 	bl	8009ec8 <_free_r>
 800a0a4:	4625      	mov	r5, r4
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ac:	f000 f838 	bl	800a120 <_malloc_usable_size_r>
 800a0b0:	4284      	cmp	r4, r0
 800a0b2:	4607      	mov	r7, r0
 800a0b4:	d802      	bhi.n	800a0bc <_realloc_r+0x34>
 800a0b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0ba:	d812      	bhi.n	800a0e2 <_realloc_r+0x5a>
 800a0bc:	4621      	mov	r1, r4
 800a0be:	4640      	mov	r0, r8
 800a0c0:	f7ff ff6e 	bl	8009fa0 <_malloc_r>
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d0ed      	beq.n	800a0a6 <_realloc_r+0x1e>
 800a0ca:	42bc      	cmp	r4, r7
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	bf28      	it	cs
 800a0d2:	463a      	movcs	r2, r7
 800a0d4:	f7ff fbb8 	bl	8009848 <memcpy>
 800a0d8:	4631      	mov	r1, r6
 800a0da:	4640      	mov	r0, r8
 800a0dc:	f7ff fef4 	bl	8009ec8 <_free_r>
 800a0e0:	e7e1      	b.n	800a0a6 <_realloc_r+0x1e>
 800a0e2:	4635      	mov	r5, r6
 800a0e4:	e7df      	b.n	800a0a6 <_realloc_r+0x1e>
	...

0800a0e8 <_sbrk_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4d06      	ldr	r5, [pc, #24]	; (800a104 <_sbrk_r+0x1c>)
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	602b      	str	r3, [r5, #0]
 800a0f4:	f7f7 fa40 	bl	8001578 <_sbrk>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_sbrk_r+0x1a>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_sbrk_r+0x1a>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	200024f8 	.word	0x200024f8

0800a108 <__malloc_lock>:
 800a108:	4801      	ldr	r0, [pc, #4]	; (800a110 <__malloc_lock+0x8>)
 800a10a:	f000 b811 	b.w	800a130 <__retarget_lock_acquire_recursive>
 800a10e:	bf00      	nop
 800a110:	200024fc 	.word	0x200024fc

0800a114 <__malloc_unlock>:
 800a114:	4801      	ldr	r0, [pc, #4]	; (800a11c <__malloc_unlock+0x8>)
 800a116:	f000 b80c 	b.w	800a132 <__retarget_lock_release_recursive>
 800a11a:	bf00      	nop
 800a11c:	200024fc 	.word	0x200024fc

0800a120 <_malloc_usable_size_r>:
 800a120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a124:	1f18      	subs	r0, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfbc      	itt	lt
 800a12a:	580b      	ldrlt	r3, [r1, r0]
 800a12c:	18c0      	addlt	r0, r0, r3
 800a12e:	4770      	bx	lr

0800a130 <__retarget_lock_acquire_recursive>:
 800a130:	4770      	bx	lr

0800a132 <__retarget_lock_release_recursive>:
 800a132:	4770      	bx	lr

0800a134 <_init>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr

0800a140 <_fini>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	bf00      	nop
 800a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a146:	bc08      	pop	{r3}
 800a148:	469e      	mov	lr, r3
 800a14a:	4770      	bx	lr
