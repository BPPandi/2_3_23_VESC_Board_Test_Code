
2_3_23_VESC_Board_Test_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008640  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080087c8  080087c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008820  08008820  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008828  08008828  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008828  08008828  00018828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800882c  0800882c  0001882c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d44  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e40  20001e40  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015000  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003197  00000000  00000000  0003512c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  000382c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c8  00000000  00000000  000394f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235f9  00000000  00000000  0003a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fe9  00000000  00000000  0005dbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce73e  00000000  00000000  00073ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001422e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bc8  00000000  00000000  00142330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087b0 	.word	0x080087b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080087b0 	.word	0x080087b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc58 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f810 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa4a 	bl	8000970 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004dc:	f000 f874 	bl	80005c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e0:	f000 f942 	bl	8000768 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004e4:	f000 f9f8 	bl	80008d8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f007 fc2a 	bl	8007d40 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80004ec:	4801      	ldr	r0, [pc, #4]	; (80004f4 <main+0x28>)
 80004ee:	f003 f905 	bl	80036fc <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <main+0x26>
 80004f4:	200001a8 	.word	0x200001a8

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b094      	sub	sp, #80	; 0x50
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f008 f94a 	bl	80087a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <SystemClock_Config+0xc8>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	4a26      	ldr	r2, [pc, #152]	; (80005c0 <SystemClock_Config+0xc8>)
 8000526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052a:	6413      	str	r3, [r2, #64]	; 0x40
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <SystemClock_Config+0xc8>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <SystemClock_Config+0xcc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <SystemClock_Config+0xcc>)
 8000542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <SystemClock_Config+0xcc>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000568:	2310      	movs	r3, #16
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800056c:	23c0      	movs	r3, #192	; 0xc0
 800056e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fc3d 	bl	8002dfc <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000588:	f000 fa5c 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fea0 	bl	80032ec <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005b2:	f000 fa47 	bl	8000a44 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005da:	4b60      	ldr	r3, [pc, #384]	; (800075c <MX_ADC1_Init+0x194>)
 80005dc:	4a60      	ldr	r2, [pc, #384]	; (8000760 <MX_ADC1_Init+0x198>)
 80005de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005e0:	4b5e      	ldr	r3, [pc, #376]	; (800075c <MX_ADC1_Init+0x194>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e6:	4b5d      	ldr	r3, [pc, #372]	; (800075c <MX_ADC1_Init+0x194>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ec:	4b5b      	ldr	r3, [pc, #364]	; (800075c <MX_ADC1_Init+0x194>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005f2:	4b5a      	ldr	r3, [pc, #360]	; (800075c <MX_ADC1_Init+0x194>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f8:	4b58      	ldr	r3, [pc, #352]	; (800075c <MX_ADC1_Init+0x194>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000600:	4b56      	ldr	r3, [pc, #344]	; (800075c <MX_ADC1_Init+0x194>)
 8000602:	2200      	movs	r2, #0
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <MX_ADC1_Init+0x194>)
 8000608:	4a56      	ldr	r2, [pc, #344]	; (8000764 <MX_ADC1_Init+0x19c>)
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060c:	4b53      	ldr	r3, [pc, #332]	; (800075c <MX_ADC1_Init+0x194>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8000612:	4b52      	ldr	r3, [pc, #328]	; (800075c <MX_ADC1_Init+0x194>)
 8000614:	220a      	movs	r2, #10
 8000616:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000618:	4b50      	ldr	r3, [pc, #320]	; (800075c <MX_ADC1_Init+0x194>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000620:	4b4e      	ldr	r3, [pc, #312]	; (800075c <MX_ADC1_Init+0x194>)
 8000622:	2201      	movs	r2, #1
 8000624:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000626:	484d      	ldr	r0, [pc, #308]	; (800075c <MX_ADC1_Init+0x194>)
 8000628:	f000 fc42 	bl	8000eb0 <HAL_ADC_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 fa07 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	4845      	ldr	r0, [pc, #276]	; (800075c <MX_ADC1_Init+0x194>)
 8000648:	f000 fc76 	bl	8000f38 <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000652:	f000 f9f7 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000656:	2301      	movs	r3, #1
 8000658:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800065a:	2302      	movs	r3, #2
 800065c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	4619      	mov	r1, r3
 8000662:	483e      	ldr	r0, [pc, #248]	; (800075c <MX_ADC1_Init+0x194>)
 8000664:	f000 fc68 	bl	8000f38 <HAL_ADC_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800066e:	f000 f9e9 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000672:	2302      	movs	r3, #2
 8000674:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000676:	2303      	movs	r3, #3
 8000678:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4837      	ldr	r0, [pc, #220]	; (800075c <MX_ADC1_Init+0x194>)
 8000680:	f000 fc5a 	bl	8000f38 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800068a:	f000 f9db 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800068e:	2303      	movs	r3, #3
 8000690:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000692:	2304      	movs	r3, #4
 8000694:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	4830      	ldr	r0, [pc, #192]	; (800075c <MX_ADC1_Init+0x194>)
 800069c:	f000 fc4c 	bl	8000f38 <HAL_ADC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006a6:	f000 f9cd 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006aa:	2305      	movs	r3, #5
 80006ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80006ae:	2305      	movs	r3, #5
 80006b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4829      	ldr	r0, [pc, #164]	; (800075c <MX_ADC1_Init+0x194>)
 80006b8:	f000 fc3e 	bl	8000f38 <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006c2:	f000 f9bf 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006c6:	2306      	movs	r3, #6
 80006c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80006ca:	2306      	movs	r3, #6
 80006cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4822      	ldr	r0, [pc, #136]	; (800075c <MX_ADC1_Init+0x194>)
 80006d4:	f000 fc30 	bl	8000f38 <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006de:	f000 f9b1 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006e2:	230a      	movs	r3, #10
 80006e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	481b      	ldr	r0, [pc, #108]	; (800075c <MX_ADC1_Init+0x194>)
 80006f0:	f000 fc22 	bl	8000f38 <HAL_ADC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80006fa:	f000 f9a3 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006fe:	230b      	movs	r3, #11
 8000700:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000702:	2308      	movs	r3, #8
 8000704:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4814      	ldr	r0, [pc, #80]	; (800075c <MX_ADC1_Init+0x194>)
 800070c:	f000 fc14 	bl	8000f38 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000716:	f000 f995 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800071a:	230c      	movs	r3, #12
 800071c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800071e:	2309      	movs	r3, #9
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_ADC1_Init+0x194>)
 8000728:	f000 fc06 	bl	8000f38 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000732:	f000 f987 	bl	8000a44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000736:	230e      	movs	r3, #14
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800073a:	230a      	movs	r3, #10
 800073c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_ADC1_Init+0x194>)
 8000744:	f000 fbf8 	bl	8000f38 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800074e:	f000 f979 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000118 	.word	0x20000118
 8000760:	40012000 	.word	0x40012000
 8000764:	0f000001 	.word	0x0f000001

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	; 0x58
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f007 fffd 	bl	80087a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a6:	4b4a      	ldr	r3, [pc, #296]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007a8:	4a4a      	ldr	r2, [pc, #296]	; (80008d4 <MX_TIM1_Init+0x16c>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 80007ac:	4b48      	ldr	r3, [pc, #288]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007ae:	220d      	movs	r2, #13
 80007b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b47      	ldr	r3, [pc, #284]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 102;
 80007b8:	4b45      	ldr	r3, [pc, #276]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007ba:	2266      	movs	r2, #102	; 0x66
 80007bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b44      	ldr	r3, [pc, #272]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c4:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ca:	4b41      	ldr	r3, [pc, #260]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d0:	483f      	ldr	r0, [pc, #252]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007d2:	f002 ff43 	bl	800365c <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007dc:	f000 f932 	bl	8000a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ea:	4619      	mov	r1, r3
 80007ec:	4838      	ldr	r0, [pc, #224]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007ee:	f003 fa11 	bl	8003c14 <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007f8:	f000 f924 	bl	8000a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fc:	4834      	ldr	r0, [pc, #208]	; (80008d0 <MX_TIM1_Init+0x168>)
 80007fe:	f002 ffe5 	bl	80037cc <HAL_TIM_PWM_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000808:	f000 f91c 	bl	8000a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000818:	4619      	mov	r1, r3
 800081a:	482d      	ldr	r0, [pc, #180]	; (80008d0 <MX_TIM1_Init+0x168>)
 800081c:	f003 fdde 	bl	80043dc <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000826:	f000 f90d 	bl	8000a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	481f      	ldr	r0, [pc, #124]	; (80008d0 <MX_TIM1_Init+0x168>)
 8000852:	f003 f91d 	bl	8003a90 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800085c:	f000 f8f2 	bl	8000a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000864:	2204      	movs	r2, #4
 8000866:	4619      	mov	r1, r3
 8000868:	4819      	ldr	r0, [pc, #100]	; (80008d0 <MX_TIM1_Init+0x168>)
 800086a:	f003 f911 	bl	8003a90 <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000874:	f000 f8e6 	bl	8000a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087c:	2208      	movs	r2, #8
 800087e:	4619      	mov	r1, r3
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_TIM1_Init+0x168>)
 8000882:	f003 f905 	bl	8003a90 <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800088c:	f000 f8da 	bl	8000a44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 800089c:	2314      	movs	r3, #20
 800089e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM1_Init+0x168>)
 80008b4:	f003 fe0e 	bl	80044d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80008be:	f000 f8c1 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM1_Init+0x168>)
 80008c4:	f000 f988 	bl	8000bd8 <HAL_TIM_MspPostInit>

}
 80008c8:	bf00      	nop
 80008ca:	3758      	adds	r7, #88	; 0x58
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000160 	.word	0x20000160
 80008d4:	40010000 	.word	0x40010000

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_TIM2_Init+0x94>)
 80008f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_TIM2_Init+0x94>)
 80008fe:	220e      	movs	r2, #14
 8000900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_TIM2_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_TIM2_Init+0x94>)
 800090a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800090e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_TIM2_Init+0x94>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_TIM2_Init+0x94>)
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_TIM2_Init+0x94>)
 800091e:	f002 fe9d 	bl	800365c <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000928:	f000 f88c 	bl	8000a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_TIM2_Init+0x94>)
 800093a:	f003 f96b 	bl	8003c14 <HAL_TIM_ConfigClockSource>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000944:	f000 f87e 	bl	8000a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_TIM2_Init+0x94>)
 8000956:	f003 fd41 	bl	80043dc <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 f870 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200001a8 	.word	0x200001a8

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_GPIO_Init+0xcc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <MX_GPIO_Init+0xcc>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_GPIO_Init+0xcc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a24      	ldr	r2, [pc, #144]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_GPIO_Init+0xcc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2123      	movs	r1, #35	; 0x23
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009fc:	f000 ff68 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin EN_GATE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin;
 8000a00:	2323      	movs	r3, #35	; 0x23
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480a      	ldr	r0, [pc, #40]	; (8000a40 <MX_GPIO_Init+0xd0>)
 8000a18:	f000 fdbe 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0xd0>)
 8000a30:	f000 fdb2 	bl	8001598 <HAL_GPIO_Init>

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <HAL_ADC_MspInit+0xb0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d141      	bne.n	8000b46 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a22      	ldr	r2, [pc, #136]	; (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_ADC_MspInit+0xb4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = CURREN_1_Pin|CURREN_2_Pin|CURREN_3_Pin|TEMP_MOTOR_Pin;
 8000b16:	2317      	movs	r3, #23
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	480b      	ldr	r0, [pc, #44]	; (8000b58 <HAL_ADC_MspInit+0xb8>)
 8000b2a:	f000 fd35 	bl	8001598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VSENS_1_Pin|VSENS_2_Pin|VSENS_3_Pin|TEMP_NTC_Pin
 8000b2e:	236f      	movs	r3, #111	; 0x6f
 8000b30:	617b      	str	r3, [r7, #20]
                          |ADC_EXT1_Pin|ADC_EXT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b32:	2303      	movs	r3, #3
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <HAL_ADC_MspInit+0xbc>)
 8000b42:	f000 fd29 	bl	8001598 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40012000 	.word	0x40012000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020800 	.word	0x40020800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_TIM_Base_MspInit+0x70>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10e      	bne.n	8000b90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_TIM_Base_MspInit+0x74>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <HAL_TIM_Base_MspInit+0x74>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_TIM_Base_MspInit+0x74>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b8e:	e01a      	b.n	8000bc6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b98:	d115      	bne.n	8000bc6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_TIM_Base_MspInit+0x74>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <HAL_TIM_Base_MspInit+0x74>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_TIM_Base_MspInit+0x74>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	201c      	movs	r0, #28
 8000bbc:	f000 fcb5 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc0:	201c      	movs	r0, #28
 8000bc2:	f000 fcce 	bl	8001562 <HAL_NVIC_EnableIRQ>
}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40010000 	.word	0x40010000
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <HAL_TIM_MspPostInit+0xa8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d13d      	bne.n	8000c76 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <HAL_TIM_MspPostInit+0xac>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <HAL_TIM_MspPostInit+0xac>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <HAL_TIM_MspPostInit+0xac>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_TIM_MspPostInit+0xac>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_TIM_MspPostInit+0xac>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_TIM_MspPostInit+0xac>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 8000c32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <HAL_TIM_MspPostInit+0xb0>)
 8000c50:	f000 fca2 	bl	8001598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 8000c54:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <HAL_TIM_MspPostInit+0xb4>)
 8000c72:	f000 fc91 	bl	8001598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010000 	.word	0x40010000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020000 	.word	0x40020000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f8a4 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <TIM2_IRQHandler+0x10>)
 8000cea:	f002 fdc8 	bl	800387e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001a8 	.word	0x200001a8

08000cf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <OTG_FS_IRQHandler+0x10>)
 8000cfe:	f000 ff50 	bl	8001ba2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20001714 	.word	0x20001714

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d5a:	f7ff ffd7 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f007 fced 	bl	800873c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fbb3 	bl	80004cc <main>
  bx  lr    
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000d74:	08008830 	.word	0x08008830
  ldr r2, =_sbss
 8000d78:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000d7c:	20001e40 	.word	0x20001e40

08000d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 fbb1 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fe4a 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 fbc9 	bl	800157e <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 fb91 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000230 	.word	0x20000230

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000230 	.word	0x20000230

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e033      	b.n	8000f2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d109      	bne.n	8000ee2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff fde6 	bl	8000aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d118      	bne.n	8000f20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ef6:	f023 0302 	bic.w	r3, r3, #2
 8000efa:	f043 0202 	orr.w	r2, r3, #2
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f93a 	bl	800117c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f023 0303 	bic.w	r3, r3, #3
 8000f16:	f043 0201 	orr.w	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f1e:	e001      	b.n	8000f24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d101      	bne.n	8000f54 <HAL_ADC_ConfigChannel+0x1c>
 8000f50:	2302      	movs	r3, #2
 8000f52:	e105      	b.n	8001160 <HAL_ADC_ConfigChannel+0x228>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	d925      	bls.n	8000fb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68d9      	ldr	r1, [r3, #12]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	3b1e      	subs	r3, #30
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43da      	mvns	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	400a      	ands	r2, r1
 8000f88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68d9      	ldr	r1, [r3, #12]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4403      	add	r3, r0
 8000fa2:	3b1e      	subs	r3, #30
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	e022      	b.n	8000ff6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6919      	ldr	r1, [r3, #16]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6919      	ldr	r1, [r3, #16]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4403      	add	r3, r0
 8000fec:	409a      	lsls	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d824      	bhi.n	8001048 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	3b05      	subs	r3, #5
 8001010:	221f      	movs	r2, #31
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	400a      	ands	r2, r1
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	3b05      	subs	r3, #5
 800103a:	fa00 f203 	lsl.w	r2, r0, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
 8001046:	e04c      	b.n	80010e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d824      	bhi.n	800109a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	3b23      	subs	r3, #35	; 0x23
 8001062:	221f      	movs	r2, #31
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43da      	mvns	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	400a      	ands	r2, r1
 8001070:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	3b23      	subs	r3, #35	; 0x23
 800108c:	fa00 f203 	lsl.w	r2, r0, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
 8001098:	e023      	b.n	80010e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3b41      	subs	r3, #65	; 0x41
 80010ac:	221f      	movs	r2, #31
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	400a      	ands	r2, r1
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	3b41      	subs	r3, #65	; 0x41
 80010d6:	fa00 f203 	lsl.w	r2, r0, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_ADC_ConfigChannel+0x234>)
 80010e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a21      	ldr	r2, [pc, #132]	; (8001170 <HAL_ADC_ConfigChannel+0x238>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d109      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x1cc>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b12      	cmp	r3, #18
 80010f6:	d105      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_ADC_ConfigChannel+0x238>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d123      	bne.n	8001156 <HAL_ADC_ConfigChannel+0x21e>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b10      	cmp	r3, #16
 8001114:	d003      	beq.n	800111e <HAL_ADC_ConfigChannel+0x1e6>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b11      	cmp	r3, #17
 800111c:	d11b      	bne.n	8001156 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b10      	cmp	r3, #16
 8001130:	d111      	bne.n	8001156 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_ADC_ConfigChannel+0x23c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_ADC_ConfigChannel+0x240>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	0c9a      	lsrs	r2, r3, #18
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001148:	e002      	b.n	8001150 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3b01      	subs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f9      	bne.n	800114a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40012300 	.word	0x40012300
 8001170:	40012000 	.word	0x40012000
 8001174:	20000000 	.word	0x20000000
 8001178:	431bde83 	.word	0x431bde83

0800117c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001184:	4b79      	ldr	r3, [pc, #484]	; (800136c <ADC_Init+0x1f0>)
 8001186:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	431a      	orrs	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6859      	ldr	r1, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	021a      	lsls	r2, r3, #8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6859      	ldr	r1, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6899      	ldr	r1, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	4a58      	ldr	r2, [pc, #352]	; (8001370 <ADC_Init+0x1f4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d022      	beq.n	800125a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001222:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6899      	ldr	r1, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6899      	ldr	r1, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	e00f      	b.n	800127a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001278:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0202 	bic.w	r2, r2, #2
 8001288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6899      	ldr	r1, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7e1b      	ldrb	r3, [r3, #24]
 8001294:	005a      	lsls	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01b      	beq.n	80012e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	3b01      	subs	r3, #1
 80012d4:	035a      	lsls	r2, r3, #13
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	e007      	b.n	80012f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	3b01      	subs	r3, #1
 800130c:	051a      	lsls	r2, r3, #20
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6899      	ldr	r1, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001332:	025a      	lsls	r2, r3, #9
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800134a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6899      	ldr	r1, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	029a      	lsls	r2, r3, #10
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	609a      	str	r2, [r3, #8]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40012300 	.word	0x40012300
 8001370:	0f000001 	.word	0x0f000001

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff3e 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff8e 	bl	8001468 <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5d 	bl	8001414 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff31 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa2 	bl	80014d0 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e16b      	b.n	800188c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	f040 815a 	bne.w	8001886 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d005      	beq.n	80015ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d130      	bne.n	800164c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b03      	cmp	r3, #3
 8001656:	d017      	beq.n	8001688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d123      	bne.n	80016dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80b4 	beq.w	8001886 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <HAL_GPIO_Init+0x30c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a5f      	ldr	r2, [pc, #380]	; (80018a4 <HAL_GPIO_Init+0x30c>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <HAL_GPIO_Init+0x30c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173a:	4a5b      	ldr	r2, [pc, #364]	; (80018a8 <HAL_GPIO_Init+0x310>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_GPIO_Init+0x314>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d02b      	beq.n	80017be <HAL_GPIO_Init+0x226>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a51      	ldr	r2, [pc, #324]	; (80018b0 <HAL_GPIO_Init+0x318>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d025      	beq.n	80017ba <HAL_GPIO_Init+0x222>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a50      	ldr	r2, [pc, #320]	; (80018b4 <HAL_GPIO_Init+0x31c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01f      	beq.n	80017b6 <HAL_GPIO_Init+0x21e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4f      	ldr	r2, [pc, #316]	; (80018b8 <HAL_GPIO_Init+0x320>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0x21a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4e      	ldr	r2, [pc, #312]	; (80018bc <HAL_GPIO_Init+0x324>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x216>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4d      	ldr	r2, [pc, #308]	; (80018c0 <HAL_GPIO_Init+0x328>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x212>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4c      	ldr	r2, [pc, #304]	; (80018c4 <HAL_GPIO_Init+0x32c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x20e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <HAL_GPIO_Init+0x330>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x20a>
 800179e:	2307      	movs	r3, #7
 80017a0:	e00e      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017a2:	2308      	movs	r3, #8
 80017a4:	e00c      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e00a      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x228>
 80017be:	2300      	movs	r3, #0
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d0:	4935      	ldr	r1, [pc, #212]	; (80018a8 <HAL_GPIO_Init+0x310>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_GPIO_Init+0x334>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001802:	4a32      	ldr	r2, [pc, #200]	; (80018cc <HAL_GPIO_Init+0x334>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_GPIO_Init+0x334>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800182c:	4a27      	ldr	r2, [pc, #156]	; (80018cc <HAL_GPIO_Init+0x334>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_GPIO_Init+0x334>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001856:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_GPIO_Init+0x334>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_GPIO_Init+0x334>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <HAL_GPIO_Init+0x334>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	f67f ae90 	bls.w	80015b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40021400 	.word	0x40021400
 80018c4:	40021800 	.word	0x40021800
 80018c8:	40021c00 	.word	0x40021c00
 80018cc:	40013c00 	.word	0x40013c00

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ec:	e003      	b.n	80018f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	619a      	str	r2, [r3, #24]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001904:	b08f      	sub	sp, #60	; 0x3c
 8001906:	af0a      	add	r7, sp, #40	; 0x28
 8001908:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e10f      	b.n	8001b34 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f006 fbf0 	bl	8008114 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2203      	movs	r2, #3
 8001938:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f002 ff39 	bl	80047ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	687e      	ldr	r6, [r7, #4]
 8001960:	466d      	mov	r5, sp
 8001962:	f106 0410 	add.w	r4, r6, #16
 8001966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001972:	e885 0003 	stmia.w	r5, {r0, r1}
 8001976:	1d33      	adds	r3, r6, #4
 8001978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197a:	6838      	ldr	r0, [r7, #0]
 800197c:	f002 fe10 	bl	80045a0 <USB_CoreInit>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0d0      	b.n	8001b34 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f002 ff27 	bl	80047ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e04a      	b.n	8001a3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	333d      	adds	r3, #61	; 0x3d
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	333c      	adds	r3, #60	; 0x3c
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	b298      	uxth	r0, r3
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	3344      	adds	r3, #68	; 0x44
 80019e0:	4602      	mov	r2, r0
 80019e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	3340      	adds	r3, #64	; 0x40
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3348      	adds	r3, #72	; 0x48
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	334c      	adds	r3, #76	; 0x4c
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3354      	adds	r3, #84	; 0x54
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	3301      	adds	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d3af      	bcc.n	80019a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e044      	b.n	8001ad4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3b5      	bcc.n	8001a4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	687e      	ldr	r6, [r7, #4]
 8001ae6:	466d      	mov	r5, sp
 8001ae8:	f106 0410 	add.w	r4, r6, #16
 8001aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001afc:	1d33      	adds	r3, r6, #4
 8001afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	f002 febf 	bl	8004884 <USB_DevInit>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e00d      	b.n	8001b34 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 f80e 	bl	8005b4e <USB_DevDisconnect>

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_PCD_Start+0x1c>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e020      	b.n	8001b9a <HAL_PCD_Start+0x5e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d109      	bne.n	8001b7c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d005      	beq.n	8001b7c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fe11 	bl	80047a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 ffbe 	bl	8005b0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ba2:	b590      	push	{r4, r7, lr}
 8001ba4:	b08d      	sub	sp, #52	; 0x34
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 f87c 	bl	8005cb6 <USB_GetMode>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f040 848a 	bne.w	80024da <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 ffe0 	bl	8005b90 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8480 	beq.w	80024d8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 ffcd 	bl	8005b90 <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d107      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f002 0202 	and.w	r2, r2, #2
 8001c0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 ffbb 	bl	8005b90 <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b10      	cmp	r3, #16
 8001c22:	d161      	bne.n	8001ce8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0210 	bic.w	r2, r2, #16
 8001c32:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f003 020f 	and.w	r2, r3, #15
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	0c5b      	lsrs	r3, r3, #17
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d124      	bne.n	8001caa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d035      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	6a38      	ldr	r0, [r7, #32]
 8001c80:	f003 fdf2 	bl	8005868 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c90:	441a      	add	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ca2:	441a      	add	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	621a      	str	r2, [r3, #32]
 8001ca8:	e016      	b.n	8001cd8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	0c5b      	lsrs	r3, r3, #17
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	2b06      	cmp	r3, #6
 8001cb4:	d110      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6a38      	ldr	r0, [r7, #32]
 8001cc2:	f003 fdd1 	bl	8005868 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6a1a      	ldr	r2, [r3, #32]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cd2:	441a      	add	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0210 	orr.w	r2, r2, #16
 8001ce6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 ff4f 	bl	8005b90 <USB_ReadInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cfc:	f040 80a7 	bne.w	8001e4e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 ff54 	bl	8005bb6 <USB_ReadDevAllOutEpInterrupt>
 8001d0e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d10:	e099      	b.n	8001e46 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 808e 	beq.w	8001e3a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 ff78 	bl	8005c1e <USB_ReadDevOutEPInterrupt>
 8001d2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00c      	beq.n	8001d54 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d46:	461a      	mov	r2, r3
 8001d48:	2301      	movs	r3, #1
 8001d4a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fec2 	bl	8002ad8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00c      	beq.n	8001d78 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 ff98 	bl	8002ca8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2310      	movs	r3, #16
 8001d92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d030      	beq.n	8001e00 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b80      	cmp	r3, #128	; 0x80
 8001da8:	d109      	bne.n	8001dbe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	78db      	ldrb	r3, [r3, #3]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2200      	movs	r2, #0
 8001de0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f006 fa99 	bl	8008320 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e16:	461a      	mov	r2, r3
 8001e18:	2320      	movs	r3, #32
 8001e1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e32:	461a      	mov	r2, r3
 8001e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e38:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f47f af62 	bne.w	8001d12 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 fe9c 	bl	8005b90 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e62:	f040 80db 	bne.w	800201c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 febd 	bl	8005bea <USB_ReadDevAllInEpInterrupt>
 8001e70:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e76:	e0cd      	b.n	8002014 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80c2 	beq.w	8002008 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fee3 	bl	8005c5a <USB_ReadDevInEPInterrupt>
 8001e94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d057      	beq.n	8001f50 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69f9      	ldr	r1, [r7, #28]
 8001ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d132      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	334c      	adds	r3, #76	; 0x4c
 8001eee:	6819      	ldr	r1, [r3, #0]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4403      	add	r3, r0
 8001efe:	3348      	adds	r3, #72	; 0x48
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4419      	add	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4403      	add	r3, r0
 8001f12:	334c      	adds	r3, #76	; 0x4c
 8001f14:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d113      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x3a2>
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	3354      	adds	r3, #84	; 0x54
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d108      	bne.n	8001f44 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2101      	movs	r1, #1
 8001f40:	f003 feea 	bl	8005d18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f006 f963 	bl	8008216 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f66:	461a      	mov	r2, r3
 8001f68:	2308      	movs	r3, #8
 8001f6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	015a      	lsls	r2, r3, #5
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f82:	461a      	mov	r2, r3
 8001f84:	2310      	movs	r3, #16
 8001f86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2340      	movs	r3, #64	; 0x40
 8001fa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d023      	beq.n	8001ff6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb0:	6a38      	ldr	r0, [r7, #32]
 8001fb2:	f002 fdcb 	bl	8004b4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3338      	adds	r3, #56	; 0x38
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d108      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f006 f9b0 	bl	8008344 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fcdb 	bl	80029be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	3301      	adds	r3, #1
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f af2e 	bne.w	8001e78 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fdb5 	bl	8005b90 <USB_ReadInterrupts>
 8002026:	4603      	mov	r3, r0
 8002028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800202c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002030:	d122      	bne.n	8002078 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800204c:	2b01      	cmp	r3, #1
 800204e:	d108      	bne.n	8002062 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002058:	2100      	movs	r1, #0
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fec2 	bl	8002de4 <HAL_PCDEx_LPM_Callback>
 8002060:	e002      	b.n	8002068 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f006 f94e 	bl	8008304 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f003 fd87 	bl	8005b90 <USB_ReadInterrupts>
 8002082:	4603      	mov	r3, r0
 8002084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800208c:	d112      	bne.n	80020b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f006 f90a 	bl	80082b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80020b2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fd69 	bl	8005b90 <USB_ReadInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c8:	f040 80b7 	bne.w	800223a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2110      	movs	r1, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 fd30 	bl	8004b4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f0:	e046      	b.n	8002180 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020fe:	461a      	mov	r2, r3
 8002100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002104:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002116:	0151      	lsls	r1, r2, #5
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	440a      	add	r2, r1
 800211c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002120:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002124:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002132:	461a      	mov	r2, r3
 8002134:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002138:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800214a:	0151      	lsls	r1, r2, #5
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	440a      	add	r2, r1
 8002150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002154:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002158:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216a:	0151      	lsls	r1, r2, #5
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	440a      	add	r2, r1
 8002170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002174:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002178:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	3301      	adds	r3, #1
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002186:	429a      	cmp	r2, r3
 8002188:	d3b3      	bcc.n	80020f2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002198:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800219c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d016      	beq.n	80021d4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b6:	f043 030b 	orr.w	r3, r3, #11
 80021ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021cc:	f043 030b 	orr.w	r3, r3, #11
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	e015      	b.n	8002200 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021fa:	f043 030b 	orr.w	r3, r3, #11
 80021fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800220e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002212:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002224:	461a      	mov	r2, r3
 8002226:	f003 fd77 	bl	8005d18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002238:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fca6 	bl	8005b90 <USB_ReadInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800224a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224e:	d124      	bne.n	800229a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f003 fd3c 	bl	8005cd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f002 fcf1 	bl	8004c46 <USB_GetDevSpeed>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681c      	ldr	r4, [r3, #0]
 8002270:	f001 f9e8 	bl	8003644 <HAL_RCC_GetHCLKFreq>
 8002274:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4620      	mov	r0, r4
 8002280:	f002 f9f0 	bl	8004664 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f005 ffee 	bl	8008266 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002298:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fc76 	bl	8005b90 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d10a      	bne.n	80022c4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f005 ffcb 	bl	800824a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f002 0208 	and.w	r2, r2, #8
 80022c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 fc61 	bl	8005b90 <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d4:	2b80      	cmp	r3, #128	; 0x80
 80022d6:	d122      	bne.n	800231e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022e4:	2301      	movs	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
 80022e8:	e014      	b.n	8002314 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d105      	bne.n	800230e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4619      	mov	r1, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fb27 	bl	800295c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	3301      	adds	r3, #1
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	429a      	cmp	r2, r3
 800231c:	d3e5      	bcc.n	80022ea <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fc34 	bl	8005b90 <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002332:	d13b      	bne.n	80023ac <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002334:	2301      	movs	r3, #1
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
 8002338:	e02b      	b.n	8002392 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	3340      	adds	r3, #64	; 0x40
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d115      	bne.n	800238c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002360:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	da12      	bge.n	800238c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	333f      	adds	r3, #63	; 0x3f
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002382:	b2db      	uxtb	r3, r3
 8002384:	4619      	mov	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fae8 	bl	800295c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3301      	adds	r3, #1
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	429a      	cmp	r2, r3
 800239a:	d3ce      	bcc.n	800233a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80023aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 fbed 	bl	8005b90 <USB_ReadInterrupts>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023c0:	d155      	bne.n	800246e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023c2:	2301      	movs	r3, #1
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	e045      	b.n	8002454 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023dc:	4613      	mov	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d12e      	bne.n	800244e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da2b      	bge.n	800244e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002402:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002406:	429a      	cmp	r2, r3
 8002408:	d121      	bne.n	800244e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244a:	6053      	str	r3, [r2, #4]
            break;
 800244c:	e007      	b.n	800245e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3301      	adds	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245a:	429a      	cmp	r2, r3
 800245c:	d3b4      	bcc.n	80023c8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800246c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fb8c 	bl	8005b90 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800247e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002482:	d10a      	bne.n	800249a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f005 ff6f 	bl	8008368 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fb76 	bl	8005b90 <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d115      	bne.n	80024da <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f005 ff5f 	bl	8008384 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	e000      	b.n	80024da <HAL_PCD_IRQHandler+0x938>
      return;
 80024d8:	bf00      	nop
    }
  }
}
 80024da:	3734      	adds	r7, #52	; 0x34
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_PCD_SetAddress+0x1a>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e013      	b.n	8002522 <HAL_PCD_SetAddress+0x42>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fad4 	bl	8005ac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	4608      	mov	r0, r1
 8002534:	4611      	mov	r1, r2
 8002536:	461a      	mov	r2, r3
 8002538:	4603      	mov	r3, r0
 800253a:	70fb      	strb	r3, [r7, #3]
 800253c:	460b      	mov	r3, r1
 800253e:	803b      	strh	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254c:	2b00      	cmp	r3, #0
 800254e:	da0f      	bge.n	8002570 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	f003 020f 	and.w	r2, r3, #15
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	3338      	adds	r3, #56	; 0x38
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	705a      	strb	r2, [r3, #1]
 800256e:	e00f      	b.n	8002590 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	f003 020f 	and.w	r2, r3, #15
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	3304      	adds	r3, #4
 8002588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800259c:	883a      	ldrh	r2, [r7, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	78ba      	ldrb	r2, [r7, #2]
 80025a6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	785b      	ldrb	r3, [r3, #1]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025ba:	78bb      	ldrb	r3, [r7, #2]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d102      	bne.n	80025c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_PCD_EP_Open+0xaa>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e00e      	b.n	80025f2 <HAL_PCD_EP_Open+0xc8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fb54 	bl	8004c90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80025f0:	7afb      	ldrb	r3, [r7, #11]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da0f      	bge.n	800262e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 020f 	and.w	r2, r3, #15
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	3338      	adds	r3, #56	; 0x38
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	3304      	adds	r3, #4
 8002624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	705a      	strb	r2, [r3, #1]
 800262c:	e00f      	b.n	800264e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	f003 020f 	and.w	r2, r3, #15
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	3304      	adds	r3, #4
 8002646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_PCD_EP_Close+0x6e>
 8002664:	2302      	movs	r3, #2
 8002666:	e00e      	b.n	8002686 <HAL_PCD_EP_Close+0x8c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68f9      	ldr	r1, [r7, #12]
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fb92 	bl	8004da0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	460b      	mov	r3, r1
 800269c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800269e:	7afb      	ldrb	r3, [r7, #11]
 80026a0:	f003 020f 	and.w	r2, r3, #15
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2200      	movs	r2, #0
 80026c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2200      	movs	r2, #0
 80026ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d0:	7afb      	ldrb	r3, [r7, #11]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	6979      	ldr	r1, [r7, #20]
 8002702:	f002 fe71 	bl	80053e8 <USB_EP0StartXfer>
 8002706:	e008      	b.n	800271a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	6979      	ldr	r1, [r7, #20]
 8002716:	f002 fc1f 	bl	8004f58 <USB_EPStartXfer>
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	460b      	mov	r3, r1
 8002762:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	f003 020f 	and.w	r2, r3, #15
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	3338      	adds	r3, #56	; 0x38
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2200      	movs	r2, #0
 800278c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2201      	movs	r2, #1
 8002792:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002794:	7afb      	ldrb	r3, [r7, #11]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	b2da      	uxtb	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d102      	bne.n	80027ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027ae:	7afb      	ldrb	r3, [r7, #11]
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	6979      	ldr	r1, [r7, #20]
 80027c6:	f002 fe0f 	bl	80053e8 <USB_EP0StartXfer>
 80027ca:	e008      	b.n	80027de <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	6979      	ldr	r1, [r7, #20]
 80027da:	f002 fbbd 	bl	8004f58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	f003 020f 	and.w	r2, r3, #15
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d901      	bls.n	8002806 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e050      	b.n	80028a8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800280a:	2b00      	cmp	r3, #0
 800280c:	da0f      	bge.n	800282e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	f003 020f 	and.w	r2, r3, #15
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	3338      	adds	r3, #56	; 0x38
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	3304      	adds	r3, #4
 8002824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2201      	movs	r2, #1
 800282a:	705a      	strb	r2, [r3, #1]
 800282c:	e00d      	b.n	800284a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	4613      	mov	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	3304      	adds	r3, #4
 8002842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	b2da      	uxtb	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_PCD_EP_SetStall+0x82>
 8002866:	2302      	movs	r3, #2
 8002868:	e01e      	b.n	80028a8 <HAL_PCD_EP_SetStall+0xc0>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 f84d 	bl	8005918 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	b2d9      	uxtb	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002898:	461a      	mov	r2, r3
 800289a:	f003 fa3d 	bl	8005d18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 020f 	and.w	r2, r3, #15
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d901      	bls.n	80028ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e042      	b.n	8002954 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da0f      	bge.n	80028f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 020f 	and.w	r2, r3, #15
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	3338      	adds	r3, #56	; 0x38
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	705a      	strb	r2, [r3, #1]
 80028f4:	e00f      	b.n	8002916 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 020f 	and.w	r2, r3, #15
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	3304      	adds	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	b2da      	uxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_PCD_EP_ClrStall+0x86>
 8002932:	2302      	movs	r3, #2
 8002934:	e00e      	b.n	8002954 <HAL_PCD_EP_ClrStall+0xa4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68f9      	ldr	r1, [r7, #12]
 8002944:	4618      	mov	r0, r3
 8002946:	f003 f855 	bl	80059f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800296c:	2b00      	cmp	r3, #0
 800296e:	da0c      	bge.n	800298a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	f003 020f 	and.w	r2, r3, #15
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	3338      	adds	r3, #56	; 0x38
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e00c      	b.n	80029a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 020f 	and.w	r2, r3, #15
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68f9      	ldr	r1, [r7, #12]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f002 fe74 	bl	8005698 <USB_EPStopXfer>
 80029b0:	4603      	mov	r3, r0
 80029b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029b4:	7afb      	ldrb	r3, [r7, #11]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b08a      	sub	sp, #40	; 0x28
 80029c2:	af02      	add	r7, sp, #8
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	3338      	adds	r3, #56	; 0x38
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	3304      	adds	r3, #4
 80029e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1a      	ldr	r2, [r3, #32]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d901      	bls.n	80029f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06c      	b.n	8002ad0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d902      	bls.n	8002a12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3303      	adds	r3, #3
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a1a:	e02b      	b.n	8002a74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d902      	bls.n	8002a38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	3303      	adds	r3, #3
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6919      	ldr	r1, [r3, #16]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	4603      	mov	r3, r0
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f002 fec8 	bl	80057ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	441a      	add	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1a      	ldr	r2, [r3, #32]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	441a      	add	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d809      	bhi.n	8002a9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1a      	ldr	r2, [r3, #32]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d203      	bcs.n	8002a9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1be      	bne.n	8002a1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d811      	bhi.n	8002ace <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	6939      	ldr	r1, [r7, #16]
 8002ac6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002aca:	4013      	ands	r3, r2
 8002acc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	333c      	adds	r3, #60	; 0x3c
 8002af0:	3304      	adds	r3, #4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d17b      	bne.n	8002c06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	4a61      	ldr	r2, [pc, #388]	; (8002ca0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	f240 80b9 	bls.w	8002c94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80b3 	beq.w	8002c94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b40:	6093      	str	r3, [r2, #8]
 8002b42:	e0a7      	b.n	8002c94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2320      	movs	r3, #32
 8002b5e:	6093      	str	r3, [r2, #8]
 8002b60:	e098      	b.n	8002c94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f040 8093 	bne.w	8002c94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	4a4b      	ldr	r2, [pc, #300]	; (8002ca0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d90f      	bls.n	8002b96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b92:	6093      	str	r3, [r2, #8]
 8002b94:	e07e      	b.n	8002c94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	0159      	lsls	r1, r3, #5
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	1ad2      	subs	r2, r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d114      	bne.n	8002bf8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002be0:	461a      	mov	r2, r3
 8002be2:	2101      	movs	r1, #1
 8002be4:	f003 f898 	bl	8005d18 <USB_EP0_OutStart>
 8002be8:	e006      	b.n	8002bf8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f005 faee 	bl	80081e0 <HAL_PCD_DataOutStageCallback>
 8002c04:	e046      	b.n	8002c94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d124      	bne.n	8002c58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c24:	461a      	mov	r2, r3
 8002c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c2a:	6093      	str	r3, [r2, #8]
 8002c2c:	e032      	b.n	8002c94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c44:	461a      	mov	r2, r3
 8002c46:	2320      	movs	r3, #32
 8002c48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f005 fac5 	bl	80081e0 <HAL_PCD_DataOutStageCallback>
 8002c56:	e01d      	b.n	8002c94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d114      	bne.n	8002c88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d108      	bne.n	8002c88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c80:	461a      	mov	r2, r3
 8002c82:	2100      	movs	r1, #0
 8002c84:	f003 f848 	bl	8005d18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f005 faa6 	bl	80081e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	4f54300a 	.word	0x4f54300a
 8002ca4:	4f54310a 	.word	0x4f54310a

08002ca8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	333c      	adds	r3, #60	; 0x3c
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d90e      	bls.n	8002cfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f005 fa5d 	bl	80081bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d90c      	bls.n	8002d24 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2101      	movs	r1, #1
 8002d20:	f002 fffa 	bl	8005d18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	4f54300a 	.word	0x4f54300a

08002d34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	70fb      	strb	r3, [r7, #3]
 8002d40:	4613      	mov	r3, r2
 8002d42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d107      	bne.n	8002d62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d52:	883b      	ldrh	r3, [r7, #0]
 8002d54:	0419      	lsls	r1, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d60:	e028      	b.n	8002db4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
 8002d74:	e00d      	b.n	8002d92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	3340      	adds	r3, #64	; 0x40
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	4413      	add	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d3ec      	bcc.n	8002d76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d9c:	883b      	ldrh	r3, [r7, #0]
 8002d9e:	0418      	lsls	r0, r3, #16
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	4302      	orrs	r2, r0
 8002dac:	3340      	adds	r3, #64	; 0x40
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e267      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d075      	beq.n	8002f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e1a:	4b88      	ldr	r3, [pc, #544]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d00c      	beq.n	8002e40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e26:	4b85      	ldr	r3, [pc, #532]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d112      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e32:	4b82      	ldr	r3, [pc, #520]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3e:	d10b      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	4b7e      	ldr	r3, [pc, #504]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d05b      	beq.n	8002f04 <HAL_RCC_OscConfig+0x108>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d157      	bne.n	8002f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e242      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d106      	bne.n	8002e70 <HAL_RCC_OscConfig+0x74>
 8002e62:	4b76      	ldr	r3, [pc, #472]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a75      	ldr	r2, [pc, #468]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e01d      	b.n	8002eac <HAL_RCC_OscConfig+0xb0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x98>
 8002e7a:	4b70      	ldr	r3, [pc, #448]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a6f      	ldr	r2, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b6d      	ldr	r3, [pc, #436]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a6c      	ldr	r2, [pc, #432]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0xb0>
 8002e94:	4b69      	ldr	r3, [pc, #420]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a68      	ldr	r2, [pc, #416]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b66      	ldr	r3, [pc, #408]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a65      	ldr	r2, [pc, #404]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d013      	beq.n	8002edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fd ffcc 	bl	8000e50 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7fd ffc8 	bl	8000e50 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e207      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0xc0>
 8002eda:	e014      	b.n	8002f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fd ffb8 	bl	8000e50 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fd ffb4 	bl	8000e50 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e1f3      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	4b51      	ldr	r3, [pc, #324]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xe8>
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d063      	beq.n	8002fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f12:	4b4a      	ldr	r3, [pc, #296]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00b      	beq.n	8002f36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d11c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2a:	4b44      	ldr	r3, [pc, #272]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d116      	bne.n	8002f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_RCC_OscConfig+0x152>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e1c7      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4937      	ldr	r1, [pc, #220]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	e03a      	b.n	8002fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6c:	4b34      	ldr	r3, [pc, #208]	; (8003040 <HAL_RCC_OscConfig+0x244>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7fd ff6d 	bl	8000e50 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f7a:	f7fd ff69 	bl	8000e50 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e1a8      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f0      	beq.n	8002f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	4b28      	ldr	r3, [pc, #160]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4925      	ldr	r1, [pc, #148]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]
 8002fac:	e015      	b.n	8002fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCC_OscConfig+0x244>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fd ff4c 	bl	8000e50 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbc:	f7fd ff48 	bl	8000e50 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e187      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d036      	beq.n	8003054 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fee:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_RCC_OscConfig+0x248>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fd ff2c 	bl	8000e50 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffc:	f7fd ff28 	bl	8000e50 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e167      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_OscConfig+0x240>)
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x200>
 800301a:	e01b      	b.n	8003054 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_OscConfig+0x248>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003022:	f7fd ff15 	bl	8000e50 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003028:	e00e      	b.n	8003048 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302a:	f7fd ff11 	bl	8000e50 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d907      	bls.n	8003048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e150      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
 800303c:	40023800 	.word	0x40023800
 8003040:	42470000 	.word	0x42470000
 8003044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	4b88      	ldr	r3, [pc, #544]	; (800326c <HAL_RCC_OscConfig+0x470>)
 800304a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ea      	bne.n	800302a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8097 	beq.w	8003190 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003066:	4b81      	ldr	r3, [pc, #516]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b7d      	ldr	r3, [pc, #500]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a7c      	ldr	r2, [pc, #496]	; (800326c <HAL_RCC_OscConfig+0x470>)
 800307c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
 8003082:	4b7a      	ldr	r3, [pc, #488]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003092:	4b77      	ldr	r3, [pc, #476]	; (8003270 <HAL_RCC_OscConfig+0x474>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d118      	bne.n	80030d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309e:	4b74      	ldr	r3, [pc, #464]	; (8003270 <HAL_RCC_OscConfig+0x474>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a73      	ldr	r2, [pc, #460]	; (8003270 <HAL_RCC_OscConfig+0x474>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030aa:	f7fd fed1 	bl	8000e50 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b2:	f7fd fecd 	bl	8000e50 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e10c      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <HAL_RCC_OscConfig+0x474>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x2ea>
 80030d8:	4b64      	ldr	r3, [pc, #400]	; (800326c <HAL_RCC_OscConfig+0x470>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	4a63      	ldr	r2, [pc, #396]	; (800326c <HAL_RCC_OscConfig+0x470>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	6713      	str	r3, [r2, #112]	; 0x70
 80030e4:	e01c      	b.n	8003120 <HAL_RCC_OscConfig+0x324>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x30c>
 80030ee:	4b5f      	ldr	r3, [pc, #380]	; (800326c <HAL_RCC_OscConfig+0x470>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	4a5e      	ldr	r2, [pc, #376]	; (800326c <HAL_RCC_OscConfig+0x470>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	6713      	str	r3, [r2, #112]	; 0x70
 80030fa:	4b5c      	ldr	r3, [pc, #368]	; (800326c <HAL_RCC_OscConfig+0x470>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4a5b      	ldr	r2, [pc, #364]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6713      	str	r3, [r2, #112]	; 0x70
 8003106:	e00b      	b.n	8003120 <HAL_RCC_OscConfig+0x324>
 8003108:	4b58      	ldr	r3, [pc, #352]	; (800326c <HAL_RCC_OscConfig+0x470>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	4a57      	ldr	r2, [pc, #348]	; (800326c <HAL_RCC_OscConfig+0x470>)
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	6713      	str	r3, [r2, #112]	; 0x70
 8003114:	4b55      	ldr	r3, [pc, #340]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a54      	ldr	r2, [pc, #336]	; (800326c <HAL_RCC_OscConfig+0x470>)
 800311a:	f023 0304 	bic.w	r3, r3, #4
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d015      	beq.n	8003154 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fd fe92 	bl	8000e50 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fd fe8e 	bl	8000e50 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0cb      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003146:	4b49      	ldr	r3, [pc, #292]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ee      	beq.n	8003130 <HAL_RCC_OscConfig+0x334>
 8003152:	e014      	b.n	800317e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003154:	f7fd fe7c 	bl	8000e50 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fd fe78 	bl	8000e50 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0b5      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003172:	4b3e      	ldr	r3, [pc, #248]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1ee      	bne.n	800315c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800317e:	7dfb      	ldrb	r3, [r7, #23]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d105      	bne.n	8003190 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003184:	4b39      	ldr	r3, [pc, #228]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	4a38      	ldr	r2, [pc, #224]	; (800326c <HAL_RCC_OscConfig+0x470>)
 800318a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80a1 	beq.w	80032dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800319a:	4b34      	ldr	r3, [pc, #208]	; (800326c <HAL_RCC_OscConfig+0x470>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d05c      	beq.n	8003260 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d141      	bne.n	8003232 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_OscConfig+0x478>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fd fe4c 	bl	8000e50 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fd fe48 	bl	8000e50 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e087      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ce:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_RCC_OscConfig+0x470>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	019b      	lsls	r3, r3, #6
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	3b01      	subs	r3, #1
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	061b      	lsls	r3, r3, #24
 80031fe:	491b      	ldr	r1, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCC_OscConfig+0x478>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fd fe21 	bl	8000e50 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003212:	f7fd fe1d 	bl	8000e50 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e05c      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x416>
 8003230:	e054      	b.n	80032dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_RCC_OscConfig+0x478>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fd fe0a 	bl	8000e50 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fd fe06 	bl	8000e50 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e045      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_RCC_OscConfig+0x470>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x444>
 800325e:	e03d      	b.n	80032dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d107      	bne.n	8003278 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e038      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
 800326c:	40023800 	.word	0x40023800
 8003270:	40007000 	.word	0x40007000
 8003274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003278:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCC_OscConfig+0x4ec>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d028      	beq.n	80032d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d121      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	429a      	cmp	r2, r3
 80032a0:	d11a      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a8:	4013      	ands	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d111      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	085b      	lsrs	r3, r3, #1
 80032c0:	3b01      	subs	r3, #1
 80032c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800

080032ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0cc      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b68      	ldr	r3, [pc, #416]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d90c      	bls.n	8003328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b65      	ldr	r3, [pc, #404]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b63      	ldr	r3, [pc, #396]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0b8      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003340:	4b59      	ldr	r3, [pc, #356]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a58      	ldr	r2, [pc, #352]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800334a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003358:	4b53      	ldr	r3, [pc, #332]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a52      	ldr	r2, [pc, #328]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003364:	4b50      	ldr	r3, [pc, #320]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	494d      	ldr	r1, [pc, #308]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d044      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d119      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e07f      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e06f      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e067      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4934      	ldr	r1, [pc, #208]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fd fd38 	bl	8000e50 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fd fd34 	bl	8000e50 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e04f      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d20c      	bcs.n	8003434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e032      	b.n	800349a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003440:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4916      	ldr	r1, [pc, #88]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	490e      	ldr	r1, [pc, #56]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003472:	f000 f821 	bl	80034b8 <HAL_RCC_GetSysClockFreq>
 8003476:	4602      	mov	r2, r0
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	490a      	ldr	r1, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	5ccb      	ldrb	r3, [r1, r3]
 8003486:	fa22 f303 	lsr.w	r3, r2, r3
 800348a:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fc98 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023c00 	.word	0x40023c00
 80034a8:	40023800 	.word	0x40023800
 80034ac:	08008810 	.word	0x08008810
 80034b0:	20000000 	.word	0x20000000
 80034b4:	20000004 	.word	0x20000004

080034b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034bc:	b090      	sub	sp, #64	; 0x40
 80034be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
 80034c4:	2300      	movs	r3, #0
 80034c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c8:	2300      	movs	r3, #0
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_GetSysClockFreq+0x180>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d00d      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x40>
 80034dc:	2b08      	cmp	r3, #8
 80034de:	f200 80a1 	bhi.w	8003624 <HAL_RCC_GetSysClockFreq+0x16c>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x34>
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ea:	e09b      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034ec:	4b53      	ldr	r3, [pc, #332]	; (800363c <HAL_RCC_GetSysClockFreq+0x184>)
 80034ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80034f0:	e09b      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034f2:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCC_GetSysClockFreq+0x188>)
 80034f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034f6:	e098      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f8:	4b4f      	ldr	r3, [pc, #316]	; (8003638 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003502:	4b4d      	ldr	r3, [pc, #308]	; (8003638 <HAL_RCC_GetSysClockFreq+0x180>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d028      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350e:	4b4a      	ldr	r3, [pc, #296]	; (8003638 <HAL_RCC_GetSysClockFreq+0x180>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	099b      	lsrs	r3, r3, #6
 8003514:	2200      	movs	r2, #0
 8003516:	623b      	str	r3, [r7, #32]
 8003518:	627a      	str	r2, [r7, #36]	; 0x24
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003520:	2100      	movs	r1, #0
 8003522:	4b47      	ldr	r3, [pc, #284]	; (8003640 <HAL_RCC_GetSysClockFreq+0x188>)
 8003524:	fb03 f201 	mul.w	r2, r3, r1
 8003528:	2300      	movs	r3, #0
 800352a:	fb00 f303 	mul.w	r3, r0, r3
 800352e:	4413      	add	r3, r2
 8003530:	4a43      	ldr	r2, [pc, #268]	; (8003640 <HAL_RCC_GetSysClockFreq+0x188>)
 8003532:	fba0 1202 	umull	r1, r2, r0, r2
 8003536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003538:	460a      	mov	r2, r1
 800353a:	62ba      	str	r2, [r7, #40]	; 0x28
 800353c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353e:	4413      	add	r3, r2
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003544:	2200      	movs	r2, #0
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	61fa      	str	r2, [r7, #28]
 800354a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800354e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003552:	f7fc fe39 	bl	80001c8 <__aeabi_uldivmod>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4613      	mov	r3, r2
 800355c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800355e:	e053      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003560:	4b35      	ldr	r3, [pc, #212]	; (8003638 <HAL_RCC_GetSysClockFreq+0x180>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	2200      	movs	r2, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	617a      	str	r2, [r7, #20]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003572:	f04f 0b00 	mov.w	fp, #0
 8003576:	4652      	mov	r2, sl
 8003578:	465b      	mov	r3, fp
 800357a:	f04f 0000 	mov.w	r0, #0
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	0159      	lsls	r1, r3, #5
 8003584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003588:	0150      	lsls	r0, r2, #5
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	ebb2 080a 	subs.w	r8, r2, sl
 8003592:	eb63 090b 	sbc.w	r9, r3, fp
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035aa:	ebb2 0408 	subs.w	r4, r2, r8
 80035ae:	eb63 0509 	sbc.w	r5, r3, r9
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	00eb      	lsls	r3, r5, #3
 80035bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035c0:	00e2      	lsls	r2, r4, #3
 80035c2:	4614      	mov	r4, r2
 80035c4:	461d      	mov	r5, r3
 80035c6:	eb14 030a 	adds.w	r3, r4, sl
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	eb45 030b 	adc.w	r3, r5, fp
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035de:	4629      	mov	r1, r5
 80035e0:	028b      	lsls	r3, r1, #10
 80035e2:	4621      	mov	r1, r4
 80035e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035e8:	4621      	mov	r1, r4
 80035ea:	028a      	lsls	r2, r1, #10
 80035ec:	4610      	mov	r0, r2
 80035ee:	4619      	mov	r1, r3
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f2:	2200      	movs	r2, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	60fa      	str	r2, [r7, #12]
 80035f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035fc:	f7fc fde4 	bl	80001c8 <__aeabi_uldivmod>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4613      	mov	r3, r2
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_GetSysClockFreq+0x180>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	3301      	adds	r3, #1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003622:	e002      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_RCC_GetSysClockFreq+0x184>)
 8003626:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800362c:	4618      	mov	r0, r3
 800362e:	3740      	adds	r7, #64	; 0x40
 8003630:	46bd      	mov	sp, r7
 8003632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	00f42400 	.word	0x00f42400
 8003640:	017d7840 	.word	0x017d7840

08003644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003648:	4b03      	ldr	r3, [pc, #12]	; (8003658 <HAL_RCC_GetHCLKFreq+0x14>)
 800364a:	681b      	ldr	r3, [r3, #0]
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000000 	.word	0x20000000

0800365c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e041      	b.n	80036f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fa6c 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f000 fbb4 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d001      	beq.n	8003714 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e046      	b.n	80037a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <HAL_TIM_Base_Start+0xb4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d022      	beq.n	800376c <HAL_TIM_Base_Start+0x70>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372e:	d01d      	beq.n	800376c <HAL_TIM_Base_Start+0x70>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <HAL_TIM_Base_Start+0xb8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d018      	beq.n	800376c <HAL_TIM_Base_Start+0x70>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_TIM_Base_Start+0xbc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_TIM_Base_Start+0x70>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_TIM_Base_Start+0xc0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00e      	beq.n	800376c <HAL_TIM_Base_Start+0x70>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_TIM_Base_Start+0xc4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d009      	beq.n	800376c <HAL_TIM_Base_Start+0x70>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <HAL_TIM_Base_Start+0xc8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_TIM_Base_Start+0x70>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_TIM_Base_Start+0xcc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d111      	bne.n	8003790 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b06      	cmp	r3, #6
 800377c:	d010      	beq.n	80037a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f042 0201 	orr.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	e007      	b.n	80037a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40001800 	.word	0x40001800

080037cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e041      	b.n	8003862 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f839 	bl	800386a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	4619      	mov	r1, r3
 800380a:	4610      	mov	r0, r2
 800380c:	f000 fafc 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	d122      	bne.n	80038da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d11b      	bne.n	80038da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0202 	mvn.w	r2, #2
 80038aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fa82 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 80038c6:	e005      	b.n	80038d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fa74 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa85 	bl	8003dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d122      	bne.n	800392e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d11b      	bne.n	800392e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f06f 0204 	mvn.w	r2, #4
 80038fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fa58 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 800391a:	e005      	b.n	8003928 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa4a 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fa5b 	bl	8003dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b08      	cmp	r3, #8
 800393a:	d122      	bne.n	8003982 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b08      	cmp	r3, #8
 8003948:	d11b      	bne.n	8003982 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0208 	mvn.w	r2, #8
 8003952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fa2e 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 800396e:	e005      	b.n	800397c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa20 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fa31 	bl	8003dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b10      	cmp	r3, #16
 800398e:	d122      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b10      	cmp	r3, #16
 800399c:	d11b      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f06f 0210 	mvn.w	r2, #16
 80039a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2208      	movs	r2, #8
 80039ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fa04 	bl	8003dca <HAL_TIM_IC_CaptureCallback>
 80039c2:	e005      	b.n	80039d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f9f6 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fa07 	bl	8003dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10e      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d107      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f06f 0201 	mvn.w	r2, #1
 80039fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f9d0 	bl	8003da2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0c:	2b80      	cmp	r3, #128	; 0x80
 8003a0e:	d10e      	bne.n	8003a2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d107      	bne.n	8003a2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fdaf 	bl	800458c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d10e      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d107      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f9cc 	bl	8003df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d10e      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f06f 0220 	mvn.w	r2, #32
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fd79 	bl	8004578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0ae      	b.n	8003c0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b0c      	cmp	r3, #12
 8003aba:	f200 809f 	bhi.w	8003bfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003af9 	.word	0x08003af9
 8003ac8:	08003bfd 	.word	0x08003bfd
 8003acc:	08003bfd 	.word	0x08003bfd
 8003ad0:	08003bfd 	.word	0x08003bfd
 8003ad4:	08003b39 	.word	0x08003b39
 8003ad8:	08003bfd 	.word	0x08003bfd
 8003adc:	08003bfd 	.word	0x08003bfd
 8003ae0:	08003bfd 	.word	0x08003bfd
 8003ae4:	08003b7b 	.word	0x08003b7b
 8003ae8:	08003bfd 	.word	0x08003bfd
 8003aec:	08003bfd 	.word	0x08003bfd
 8003af0:	08003bfd 	.word	0x08003bfd
 8003af4:	08003bbb 	.word	0x08003bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fa22 	bl	8003f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0208 	orr.w	r2, r2, #8
 8003b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0204 	bic.w	r2, r2, #4
 8003b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6999      	ldr	r1, [r3, #24]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	619a      	str	r2, [r3, #24]
      break;
 8003b36:	e064      	b.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fa72 	bl	8004028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6999      	ldr	r1, [r3, #24]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	021a      	lsls	r2, r3, #8
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	619a      	str	r2, [r3, #24]
      break;
 8003b78:	e043      	b.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fac7 	bl	8004114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0208 	orr.w	r2, r2, #8
 8003b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0204 	bic.w	r2, r2, #4
 8003ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69d9      	ldr	r1, [r3, #28]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	61da      	str	r2, [r3, #28]
      break;
 8003bb8:	e023      	b.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fb1b 	bl	80041fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	021a      	lsls	r2, r3, #8
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	61da      	str	r2, [r3, #28]
      break;
 8003bfa:	e002      	b.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIM_ConfigClockSource+0x1c>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0b4      	b.n	8003d9a <HAL_TIM_ConfigClockSource+0x186>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c68:	d03e      	beq.n	8003ce8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6e:	f200 8087 	bhi.w	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	f000 8086 	beq.w	8003d86 <HAL_TIM_ConfigClockSource+0x172>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d87f      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b70      	cmp	r3, #112	; 0x70
 8003c82:	d01a      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0xa6>
 8003c84:	2b70      	cmp	r3, #112	; 0x70
 8003c86:	d87b      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b60      	cmp	r3, #96	; 0x60
 8003c8a:	d050      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x11a>
 8003c8c:	2b60      	cmp	r3, #96	; 0x60
 8003c8e:	d877      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b50      	cmp	r3, #80	; 0x50
 8003c92:	d03c      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0xfa>
 8003c94:	2b50      	cmp	r3, #80	; 0x50
 8003c96:	d873      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d058      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x13a>
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d86f      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b30      	cmp	r3, #48	; 0x30
 8003ca2:	d064      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003ca4:	2b30      	cmp	r3, #48	; 0x30
 8003ca6:	d86b      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d060      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d867      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d05c      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d05a      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003cb8:	e062      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6899      	ldr	r1, [r3, #8]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f000 fb67 	bl	800439c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	609a      	str	r2, [r3, #8]
      break;
 8003ce6:	e04f      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6899      	ldr	r1, [r3, #8]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f000 fb50 	bl	800439c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d0a:	609a      	str	r2, [r3, #8]
      break;
 8003d0c:	e03c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 fac4 	bl	80042a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2150      	movs	r1, #80	; 0x50
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fb1d 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e02c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 fae3 	bl	8004306 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2160      	movs	r1, #96	; 0x60
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fb0d 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e01c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 faa4 	bl	80042a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fafd 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e00c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 faf4 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8003d7e:	e003      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      break;
 8003d84:	e000      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a40      	ldr	r2, [pc, #256]	; (8003f1c <TIM_Base_SetConfig+0x114>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d013      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e26:	d00f      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a3d      	ldr	r2, [pc, #244]	; (8003f20 <TIM_Base_SetConfig+0x118>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00b      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a3c      	ldr	r2, [pc, #240]	; (8003f24 <TIM_Base_SetConfig+0x11c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d007      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3b      	ldr	r2, [pc, #236]	; (8003f28 <TIM_Base_SetConfig+0x120>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d003      	beq.n	8003e48 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3a      	ldr	r2, [pc, #232]	; (8003f2c <TIM_Base_SetConfig+0x124>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d108      	bne.n	8003e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2f      	ldr	r2, [pc, #188]	; (8003f1c <TIM_Base_SetConfig+0x114>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d02b      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d027      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <TIM_Base_SetConfig+0x118>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d023      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2b      	ldr	r2, [pc, #172]	; (8003f24 <TIM_Base_SetConfig+0x11c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d01f      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2a      	ldr	r2, [pc, #168]	; (8003f28 <TIM_Base_SetConfig+0x120>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01b      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a29      	ldr	r2, [pc, #164]	; (8003f2c <TIM_Base_SetConfig+0x124>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d017      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a28      	ldr	r2, [pc, #160]	; (8003f30 <TIM_Base_SetConfig+0x128>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <TIM_Base_SetConfig+0x12c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00f      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <TIM_Base_SetConfig+0x130>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <TIM_Base_SetConfig+0x134>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a24      	ldr	r2, [pc, #144]	; (8003f40 <TIM_Base_SetConfig+0x138>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <TIM_Base_SetConfig+0x13c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d108      	bne.n	8003ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <TIM_Base_SetConfig+0x114>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_Base_SetConfig+0xf8>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <TIM_Base_SetConfig+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d103      	bne.n	8003f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40010400 	.word	0x40010400
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40014400 	.word	0x40014400
 8003f38:	40014800 	.word	0x40014800
 8003f3c:	40001800 	.word	0x40001800
 8003f40:	40001c00 	.word	0x40001c00
 8003f44:	40002000 	.word	0x40002000

08003f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f023 0201 	bic.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f023 0302 	bic.w	r3, r3, #2
 8003f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a20      	ldr	r2, [pc, #128]	; (8004020 <TIM_OC1_SetConfig+0xd8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_OC1_SetConfig+0x64>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <TIM_OC1_SetConfig+0xdc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10c      	bne.n	8003fc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0308 	bic.w	r3, r3, #8
 8003fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a15      	ldr	r2, [pc, #84]	; (8004020 <TIM_OC1_SetConfig+0xd8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_OC1_SetConfig+0x8e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a14      	ldr	r2, [pc, #80]	; (8004024 <TIM_OC1_SetConfig+0xdc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d111      	bne.n	8003ffa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40010000 	.word	0x40010000
 8004024:	40010400 	.word	0x40010400

08004028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f023 0210 	bic.w	r2, r3, #16
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0320 	bic.w	r3, r3, #32
 8004072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a22      	ldr	r2, [pc, #136]	; (800410c <TIM_OC2_SetConfig+0xe4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_OC2_SetConfig+0x68>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a21      	ldr	r2, [pc, #132]	; (8004110 <TIM_OC2_SetConfig+0xe8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d10d      	bne.n	80040ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a17      	ldr	r2, [pc, #92]	; (800410c <TIM_OC2_SetConfig+0xe4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC2_SetConfig+0x94>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a16      	ldr	r2, [pc, #88]	; (8004110 <TIM_OC2_SetConfig+0xe8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d113      	bne.n	80040e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40010400 	.word	0x40010400

08004114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800415c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <TIM_OC3_SetConfig+0xe0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_OC3_SetConfig+0x66>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a20      	ldr	r2, [pc, #128]	; (80041f8 <TIM_OC3_SetConfig+0xe4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10d      	bne.n	8004196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <TIM_OC3_SetConfig+0xe0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_OC3_SetConfig+0x92>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <TIM_OC3_SetConfig+0xe4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d113      	bne.n	80041ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	bf00      	nop
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40010400 	.word	0x40010400

080041fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	031b      	lsls	r3, r3, #12
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <TIM_OC4_SetConfig+0xa4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_OC4_SetConfig+0x68>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <TIM_OC4_SetConfig+0xa8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d109      	bne.n	8004278 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	019b      	lsls	r3, r3, #6
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40010000 	.word	0x40010000
 80042a4:	40010400 	.word	0x40010400

080042a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 030a 	bic.w	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004306:	b480      	push	{r7}
 8004308:	b087      	sub	sp, #28
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0210 	bic.w	r2, r3, #16
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	f043 0307 	orr.w	r3, r3, #7
 8004388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	431a      	orrs	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e05a      	b.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a21      	ldr	r2, [pc, #132]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d022      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d01d      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d018      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1b      	ldr	r2, [pc, #108]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00e      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d009      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a17      	ldr	r2, [pc, #92]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d004      	beq.n	800447e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10c      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40001800 	.word	0x40001800

080044d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e03d      	b.n	800456c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045a0:	b084      	sub	sp, #16
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	f107 001c 	add.w	r0, r7, #28
 80045ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d122      	bne.n	80045fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f001 fbee 	bl	8005dd4 <USB_CoreReset>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]
 80045fc:	e01a      	b.n	8004634 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f001 fbe2 	bl	8005dd4 <USB_CoreReset>
 8004610:	4603      	mov	r3, r0
 8004612:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
 8004626:	e005      	b.n	8004634 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	2b01      	cmp	r3, #1
 8004638:	d10b      	bne.n	8004652 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f043 0206 	orr.w	r2, r3, #6
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800465e:	b004      	add	sp, #16
 8004660:	4770      	bx	lr
	...

08004664 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d165      	bne.n	8004744 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4a41      	ldr	r2, [pc, #260]	; (8004780 <USB_SetTurnaroundTime+0x11c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d906      	bls.n	800468e <USB_SetTurnaroundTime+0x2a>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4a40      	ldr	r2, [pc, #256]	; (8004784 <USB_SetTurnaroundTime+0x120>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d202      	bcs.n	800468e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004688:	230f      	movs	r3, #15
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	e062      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	4a3c      	ldr	r2, [pc, #240]	; (8004784 <USB_SetTurnaroundTime+0x120>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d306      	bcc.n	80046a4 <USB_SetTurnaroundTime+0x40>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <USB_SetTurnaroundTime+0x124>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d202      	bcs.n	80046a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800469e:	230e      	movs	r3, #14
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	e057      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4a38      	ldr	r2, [pc, #224]	; (8004788 <USB_SetTurnaroundTime+0x124>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d306      	bcc.n	80046ba <USB_SetTurnaroundTime+0x56>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4a37      	ldr	r2, [pc, #220]	; (800478c <USB_SetTurnaroundTime+0x128>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d202      	bcs.n	80046ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046b4:	230d      	movs	r3, #13
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e04c      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4a33      	ldr	r2, [pc, #204]	; (800478c <USB_SetTurnaroundTime+0x128>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d306      	bcc.n	80046d0 <USB_SetTurnaroundTime+0x6c>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4a32      	ldr	r2, [pc, #200]	; (8004790 <USB_SetTurnaroundTime+0x12c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d802      	bhi.n	80046d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046ca:	230c      	movs	r3, #12
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e041      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4a2f      	ldr	r2, [pc, #188]	; (8004790 <USB_SetTurnaroundTime+0x12c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d906      	bls.n	80046e6 <USB_SetTurnaroundTime+0x82>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4a2e      	ldr	r2, [pc, #184]	; (8004794 <USB_SetTurnaroundTime+0x130>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d802      	bhi.n	80046e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046e0:	230b      	movs	r3, #11
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e036      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <USB_SetTurnaroundTime+0x130>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d906      	bls.n	80046fc <USB_SetTurnaroundTime+0x98>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4a29      	ldr	r2, [pc, #164]	; (8004798 <USB_SetTurnaroundTime+0x134>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d802      	bhi.n	80046fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046f6:	230a      	movs	r3, #10
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e02b      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4a26      	ldr	r2, [pc, #152]	; (8004798 <USB_SetTurnaroundTime+0x134>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d906      	bls.n	8004712 <USB_SetTurnaroundTime+0xae>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4a25      	ldr	r2, [pc, #148]	; (800479c <USB_SetTurnaroundTime+0x138>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d202      	bcs.n	8004712 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800470c:	2309      	movs	r3, #9
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e020      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4a21      	ldr	r2, [pc, #132]	; (800479c <USB_SetTurnaroundTime+0x138>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d306      	bcc.n	8004728 <USB_SetTurnaroundTime+0xc4>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <USB_SetTurnaroundTime+0x13c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d802      	bhi.n	8004728 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004722:	2308      	movs	r3, #8
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e015      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <USB_SetTurnaroundTime+0x13c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d906      	bls.n	800473e <USB_SetTurnaroundTime+0xda>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <USB_SetTurnaroundTime+0x140>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d202      	bcs.n	800473e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004738:	2307      	movs	r3, #7
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e00a      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800473e:	2306      	movs	r3, #6
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e007      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800474a:	2309      	movs	r3, #9
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e001      	b.n	8004754 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004750:	2309      	movs	r3, #9
 8004752:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	029b      	lsls	r3, r3, #10
 8004768:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800476c:	431a      	orrs	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	00d8acbf 	.word	0x00d8acbf
 8004784:	00e4e1c0 	.word	0x00e4e1c0
 8004788:	00f42400 	.word	0x00f42400
 800478c:	01067380 	.word	0x01067380
 8004790:	011a499f 	.word	0x011a499f
 8004794:	01312cff 	.word	0x01312cff
 8004798:	014ca43f 	.word	0x014ca43f
 800479c:	016e3600 	.word	0x016e3600
 80047a0:	01a6ab1f 	.word	0x01a6ab1f
 80047a4:	01e84800 	.word	0x01e84800

080047a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f043 0201 	orr.w	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 0201 	bic.w	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d115      	bne.n	800483a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800481a:	2001      	movs	r0, #1
 800481c:	f7fc fb24 	bl	8000e68 <HAL_Delay>
      ms++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f001 fa45 	bl	8005cb6 <USB_GetMode>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d01e      	beq.n	8004870 <USB_SetCurrentMode+0x84>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b31      	cmp	r3, #49	; 0x31
 8004836:	d9f0      	bls.n	800481a <USB_SetCurrentMode+0x2e>
 8004838:	e01a      	b.n	8004870 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d115      	bne.n	800486c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800484c:	2001      	movs	r0, #1
 800484e:	f7fc fb0b 	bl	8000e68 <HAL_Delay>
      ms++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3301      	adds	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 fa2c 	bl	8005cb6 <USB_GetMode>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <USB_SetCurrentMode+0x84>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b31      	cmp	r3, #49	; 0x31
 8004868:	d9f0      	bls.n	800484c <USB_SetCurrentMode+0x60>
 800486a:	e001      	b.n	8004870 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e005      	b.n	800487c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b32      	cmp	r3, #50	; 0x32
 8004874:	d101      	bne.n	800487a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004884:	b084      	sub	sp, #16
 8004886:	b580      	push	{r7, lr}
 8004888:	b086      	sub	sp, #24
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	e009      	b.n	80048b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3340      	adds	r3, #64	; 0x40
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	2200      	movs	r2, #0
 80048b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3301      	adds	r3, #1
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b0e      	cmp	r3, #14
 80048bc:	d9f2      	bls.n	80048a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d11c      	bne.n	80048fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d2:	f043 0302 	orr.w	r3, r3, #2
 80048d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	639a      	str	r2, [r3, #56]	; 0x38
 80048fc:	e00b      	b.n	8004916 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	4619      	mov	r1, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004930:	461a      	mov	r2, r3
 8004932:	680b      	ldr	r3, [r1, #0]
 8004934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10c      	bne.n	8004956 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d104      	bne.n	800494c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004942:	2100      	movs	r1, #0
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f965 	bl	8004c14 <USB_SetDevSpeed>
 800494a:	e008      	b.n	800495e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800494c:	2101      	movs	r1, #1
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f960 	bl	8004c14 <USB_SetDevSpeed>
 8004954:	e003      	b.n	800495e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004956:	2103      	movs	r1, #3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f95b 	bl	8004c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800495e:	2110      	movs	r1, #16
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f8f3 	bl	8004b4c <USB_FlushTxFifo>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f91f 	bl	8004bb4 <USB_FlushRxFifo>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004986:	461a      	mov	r2, r3
 8004988:	2300      	movs	r3, #0
 800498a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	461a      	mov	r2, r3
 8004994:	2300      	movs	r3, #0
 8004996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	461a      	mov	r2, r3
 80049a0:	2300      	movs	r3, #0
 80049a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a4:	2300      	movs	r3, #0
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e043      	b.n	8004a32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c0:	d118      	bne.n	80049f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	461a      	mov	r2, r3
 80049d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e013      	b.n	8004a06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	461a      	mov	r2, r3
 80049ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e008      	b.n	8004a06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	461a      	mov	r2, r3
 8004a02:	2300      	movs	r3, #0
 8004a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	461a      	mov	r2, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	461a      	mov	r2, r3
 8004a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d3b7      	bcc.n	80049aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	e043      	b.n	8004ac8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a56:	d118      	bne.n	8004a8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e013      	b.n	8004a9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	461a      	mov	r2, r3
 8004a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e008      	b.n	8004a9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a96:	461a      	mov	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3b7      	bcc.n	8004a40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f043 0210 	orr.w	r2, r3, #16
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699a      	ldr	r2, [r3, #24]
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <USB_DevInit+0x2c4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f043 0208 	orr.w	r2, r3, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d107      	bne.n	8004b38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b44:	b004      	add	sp, #16
 8004b46:	4770      	bx	lr
 8004b48:	803c3800 	.word	0x803c3800

08004b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a13      	ldr	r2, [pc, #76]	; (8004bb0 <USB_FlushTxFifo+0x64>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e01b      	b.n	8004ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	daf2      	bge.n	8004b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	019b      	lsls	r3, r3, #6
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <USB_FlushTxFifo+0x64>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e006      	b.n	8004ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d0f0      	beq.n	8004b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	00030d40 	.word	0x00030d40

08004bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4a11      	ldr	r2, [pc, #68]	; (8004c10 <USB_FlushRxFifo+0x5c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e018      	b.n	8004c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	daf2      	bge.n	8004bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2210      	movs	r2, #16
 8004be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a08      	ldr	r2, [pc, #32]	; (8004c10 <USB_FlushRxFifo+0x5c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e006      	b.n	8004c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d0f0      	beq.n	8004be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	00030d40 	.word	0x00030d40

08004c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b087      	sub	sp, #28
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0306 	and.w	r3, r3, #6
 8004c5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d102      	bne.n	8004c6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c66:	2300      	movs	r3, #0
 8004c68:	75fb      	strb	r3, [r7, #23]
 8004c6a:	e00a      	b.n	8004c82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d002      	beq.n	8004c78 <USB_GetDevSpeed+0x32>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b06      	cmp	r3, #6
 8004c76:	d102      	bne.n	8004c7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	75fb      	strb	r3, [r7, #23]
 8004c7c:	e001      	b.n	8004c82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c7e:	230f      	movs	r3, #15
 8004c80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d13a      	bne.n	8004d22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	f003 030f 	and.w	r3, r3, #15
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	68f9      	ldr	r1, [r7, #12]
 8004cc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d155      	bne.n	8004d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	791b      	ldrb	r3, [r3, #4]
 8004cfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	059b      	lsls	r3, r3, #22
 8004d06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	0151      	lsls	r1, r2, #5
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	440a      	add	r2, r1
 8004d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	e036      	b.n	8004d90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	2101      	movs	r1, #1
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d11a      	bne.n	8004d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	791b      	ldrb	r3, [r3, #4]
 8004d74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d76:	430b      	orrs	r3, r1
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d161      	bne.n	8004e80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd2:	d11f      	bne.n	8004e14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004df2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	2101      	movs	r1, #1
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e34:	4013      	ands	r3, r2
 8004e36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	43db      	mvns	r3, r3
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	0159      	lsls	r1, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	440b      	add	r3, r1
 8004e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e76:	4619      	mov	r1, r3
 8004e78:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <USB_DeactivateEndpoint+0x1b0>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
 8004e7e:	e060      	b.n	8004f42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e96:	d11f      	bne.n	8004ed8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004eb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	2101      	movs	r1, #1
 8004eea:	fa01 f303 	lsl.w	r3, r1, r3
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef8:	4013      	ands	r3, r2
 8004efa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f12:	041b      	lsls	r3, r3, #16
 8004f14:	43db      	mvns	r3, r3
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	0159      	lsls	r1, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	440b      	add	r3, r1
 8004f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <USB_DeactivateEndpoint+0x1b4>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	ec337800 	.word	0xec337800
 8004f54:	eff37800 	.word	0xeff37800

08004f58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f040 815c 	bne.w	8005232 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d132      	bne.n	8004fe8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fa0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe0:	0cdb      	lsrs	r3, r3, #19
 8004fe2:	04db      	lsls	r3, r3, #19
 8004fe4:	6113      	str	r3, [r2, #16]
 8004fe6:	e074      	b.n	80050d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005002:	0cdb      	lsrs	r3, r3, #19
 8005004:	04db      	lsls	r3, r3, #19
 8005006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005022:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005026:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800502a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005038:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6999      	ldr	r1, [r3, #24]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	440b      	add	r3, r1
 8005044:	1e59      	subs	r1, r3, #1
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	fbb1 f3f3 	udiv	r3, r1, r3
 800504e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005050:	4b9d      	ldr	r3, [pc, #628]	; (80052c8 <USB_EPStartXfer+0x370>)
 8005052:	400b      	ands	r3, r1
 8005054:	69b9      	ldr	r1, [r7, #24]
 8005056:	0148      	lsls	r0, r1, #5
 8005058:	69f9      	ldr	r1, [r7, #28]
 800505a:	4401      	add	r1, r0
 800505c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005060:	4313      	orrs	r3, r2
 8005062:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507a:	69b9      	ldr	r1, [r7, #24]
 800507c:	0148      	lsls	r0, r1, #5
 800507e:	69f9      	ldr	r1, [r7, #28]
 8005080:	4401      	add	r1, r0
 8005082:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005086:	4313      	orrs	r3, r2
 8005088:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	791b      	ldrb	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d11f      	bne.n	80050d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	0151      	lsls	r1, r2, #5
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	440a      	add	r2, r1
 80050a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80050b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d14b      	bne.n	8005170 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d009      	beq.n	80050f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	461a      	mov	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	791b      	ldrb	r3, [r3, #4]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d128      	bne.n	800514e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d110      	bne.n	800512e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	e00f      	b.n	800514e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005168:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e133      	b.n	80053d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800518e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	791b      	ldrb	r3, [r3, #4]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d015      	beq.n	80051c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 811b 	beq.w	80053d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	2101      	movs	r1, #1
 80051b4:	fa01 f303 	lsl.w	r3, r1, r3
 80051b8:	69f9      	ldr	r1, [r7, #28]
 80051ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051be:	4313      	orrs	r3, r2
 80051c0:	634b      	str	r3, [r1, #52]	; 0x34
 80051c2:	e109      	b.n	80053d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d110      	bne.n	80051f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	e00f      	b.n	8005216 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	440a      	add	r2, r1
 800520c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005214:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6919      	ldr	r1, [r3, #16]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	b298      	uxth	r0, r3
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	4603      	mov	r3, r0
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fade 	bl	80057ec <USB_WritePacket>
 8005230:	e0d2      	b.n	80053d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800524c:	0cdb      	lsrs	r3, r3, #19
 800524e:	04db      	lsls	r3, r3, #19
 8005250:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005270:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005274:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d126      	bne.n	80052cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005294:	69b9      	ldr	r1, [r7, #24]
 8005296:	0148      	lsls	r0, r1, #5
 8005298:	69f9      	ldr	r1, [r7, #28]
 800529a:	4401      	add	r1, r0
 800529c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052a0:	4313      	orrs	r3, r2
 80052a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052c2:	6113      	str	r3, [r2, #16]
 80052c4:	e03a      	b.n	800533c <USB_EPStartXfer+0x3e4>
 80052c6:	bf00      	nop
 80052c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	4413      	add	r3, r2
 80052d6:	1e5a      	subs	r2, r3, #1
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	8afa      	ldrh	r2, [r7, #22]
 80052e8:	fb03 f202 	mul.w	r2, r3, r2
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	8afb      	ldrh	r3, [r7, #22]
 8005300:	04d9      	lsls	r1, r3, #19
 8005302:	4b38      	ldr	r3, [pc, #224]	; (80053e4 <USB_EPStartXfer+0x48c>)
 8005304:	400b      	ands	r3, r1
 8005306:	69b9      	ldr	r1, [r7, #24]
 8005308:	0148      	lsls	r0, r1, #5
 800530a:	69f9      	ldr	r1, [r7, #28]
 800530c:	4401      	add	r1, r0
 800530e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005312:	4313      	orrs	r3, r2
 8005314:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	0148      	lsls	r0, r1, #5
 8005330:	69f9      	ldr	r1, [r7, #28]
 8005332:	4401      	add	r1, r0
 8005334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005338:	4313      	orrs	r3, r2
 800533a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10d      	bne.n	800535e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6919      	ldr	r1, [r3, #16]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535a:	460a      	mov	r2, r1
 800535c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	791b      	ldrb	r3, [r3, #4]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d128      	bne.n	80053b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d110      	bne.n	8005398 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e00f      	b.n	80053b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	1ff80000 	.word	0x1ff80000

080053e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b01      	cmp	r3, #1
 8005406:	f040 80ce 	bne.w	80055a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d132      	bne.n	8005478 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	0151      	lsls	r1, r2, #5
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	440a      	add	r2, r1
 800546c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005470:	0cdb      	lsrs	r3, r3, #19
 8005472:	04db      	lsls	r3, r3, #19
 8005474:	6113      	str	r3, [r2, #16]
 8005476:	e04e      	b.n	8005516 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	440a      	add	r2, r1
 800548e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005492:	0cdb      	lsrs	r3, r3, #19
 8005494:	04db      	lsls	r3, r3, #19
 8005496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d903      	bls.n	80054d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005506:	6939      	ldr	r1, [r7, #16]
 8005508:	0148      	lsls	r0, r1, #5
 800550a:	6979      	ldr	r1, [r7, #20]
 800550c:	4401      	add	r1, r0
 800550e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005512:	4313      	orrs	r3, r2
 8005514:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d11e      	bne.n	800555a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d009      	beq.n	8005538 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	461a      	mov	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	e097      	b.n	800568a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005574:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005578:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8083 	beq.w	800568a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	2101      	movs	r1, #1
 8005596:	fa01 f303 	lsl.w	r3, r1, r3
 800559a:	6979      	ldr	r1, [r7, #20]
 800559c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a0:	4313      	orrs	r3, r2
 80055a2:	634b      	str	r3, [r1, #52]	; 0x34
 80055a4:	e071      	b.n	800568a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c0:	0cdb      	lsrs	r3, r3, #19
 80055c2:	04db      	lsls	r3, r3, #19
 80055c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005638:	6939      	ldr	r1, [r7, #16]
 800563a:	0148      	lsls	r0, r1, #5
 800563c:	6979      	ldr	r1, [r7, #20]
 800563e:	4401      	add	r1, r0
 8005640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005644:	4313      	orrs	r3, r2
 8005646:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10d      	bne.n	800566a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d009      	beq.n	800566a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6919      	ldr	r1, [r3, #16]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	460a      	mov	r2, r1
 8005668:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005684:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005688:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d14a      	bne.n	800574c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056ce:	f040 8086 	bne.w	80057de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	7812      	ldrb	r2, [r2, #0]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005718:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f242 7210 	movw	r2, #10000	; 0x2710
 8005726:	4293      	cmp	r3, r2
 8005728:	d902      	bls.n	8005730 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	75fb      	strb	r3, [r7, #23]
          break;
 800572e:	e056      	b.n	80057de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005748:	d0e7      	beq.n	800571a <USB_EPStopXfer+0x82>
 800574a:	e048      	b.n	80057de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005764:	d13b      	bne.n	80057de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	7812      	ldrb	r2, [r2, #0]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005784:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005788:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3301      	adds	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d902      	bls.n	80057c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	75fb      	strb	r3, [r7, #23]
          break;
 80057c2:	e00c      	b.n	80057de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057dc:	d0e7      	beq.n	80057ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80057de:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b089      	sub	sp, #36	; 0x24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	460b      	mov	r3, r1
 80057fc:	71fb      	strb	r3, [r7, #7]
 80057fe:	4613      	mov	r3, r2
 8005800:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800580a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d123      	bne.n	800585a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005812:	88bb      	ldrh	r3, [r7, #4]
 8005814:	3303      	adds	r3, #3
 8005816:	089b      	lsrs	r3, r3, #2
 8005818:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e018      	b.n	8005852 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	031a      	lsls	r2, r3, #12
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800582c:	461a      	mov	r2, r3
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3301      	adds	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	3301      	adds	r3, #1
 800583e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	3301      	adds	r3, #1
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	429a      	cmp	r2, r3
 8005858:	d3e2      	bcc.n	8005820 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3724      	adds	r7, #36	; 0x24
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005868:	b480      	push	{r7}
 800586a:	b08b      	sub	sp, #44	; 0x2c
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	089b      	lsrs	r3, r3, #2
 8005882:	b29b      	uxth	r3, r3
 8005884:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800588e:	2300      	movs	r3, #0
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	e014      	b.n	80058be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	601a      	str	r2, [r3, #0]
    pDest++;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	3301      	adds	r3, #1
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	3301      	adds	r3, #1
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	3301      	adds	r3, #1
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	3301      	adds	r3, #1
 80058b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	3301      	adds	r3, #1
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	6a3a      	ldr	r2, [r7, #32]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3e6      	bcc.n	8005894 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058c6:	8bfb      	ldrh	r3, [r7, #30]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01e      	beq.n	800590a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d6:	461a      	mov	r2, r3
 80058d8:	f107 0310 	add.w	r3, r7, #16
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	701a      	strb	r2, [r3, #0]
      i++;
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	3301      	adds	r3, #1
 80058f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	3301      	adds	r3, #1
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058fe:	8bfb      	ldrh	r3, [r7, #30]
 8005900:	3b01      	subs	r3, #1
 8005902:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005904:	8bfb      	ldrh	r3, [r7, #30]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1ea      	bne.n	80058e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800590c:	4618      	mov	r0, r3
 800590e:	372c      	adds	r7, #44	; 0x2c
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d12c      	bne.n	800598e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	db12      	blt.n	800596c <USB_EPSetStall+0x54>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00f      	beq.n	800596c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005966:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800596a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	e02b      	b.n	80059e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	db12      	blt.n	80059c6 <USB_EPSetStall+0xae>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00f      	beq.n	80059c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	0151      	lsls	r1, r2, #5
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	440a      	add	r2, r1
 80059dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d128      	bne.n	8005a62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	791b      	ldrb	r3, [r3, #4]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d003      	beq.n	8005a40 <USB_EPClearStall+0x4c>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	791b      	ldrb	r3, [r3, #4]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d138      	bne.n	8005ab2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e027      	b.n	8005ab2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	0151      	lsls	r1, r2, #5
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	440a      	add	r2, r1
 8005a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	791b      	ldrb	r3, [r3, #4]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d003      	beq.n	8005a92 <USB_EPClearStall+0x9e>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	791b      	ldrb	r3, [r3, #4]
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d10f      	bne.n	8005ab2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ade:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ae2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005af4:	68f9      	ldr	r1, [r7, #12]
 8005af6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b3a:	f023 0302 	bic.w	r3, r3, #2
 8005b3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b68:	f023 0303 	bic.w	r3, r3, #3
 8005b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b7c:	f043 0302 	orr.w	r3, r3, #2
 8005b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	0c1b      	lsrs	r3, r3, #16
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	b29b      	uxth	r3, r3
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b087      	sub	sp, #28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8a:	01db      	lsls	r3, r3, #7
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cf0:	f023 0307 	bic.w	r3, r3, #7
 8005cf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	460b      	mov	r3, r1
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	333c      	adds	r3, #60	; 0x3c
 8005d2e:	3304      	adds	r3, #4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4a26      	ldr	r2, [pc, #152]	; (8005dd0 <USB_EP0_OutStart+0xb8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d90a      	bls.n	8005d52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4c:	d101      	bne.n	8005d52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e037      	b.n	8005dc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d80:	f043 0318 	orr.w	r3, r3, #24
 8005d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d9a:	7afb      	ldrb	r3, [r7, #11]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10f      	bne.n	8005dc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	461a      	mov	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005dbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	4f54300a 	.word	0x4f54300a

08005dd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3301      	adds	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <USB_CoreReset+0x64>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e01b      	b.n	8005e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	daf2      	bge.n	8005de0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f043 0201 	orr.w	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a09      	ldr	r2, [pc, #36]	; (8005e38 <USB_CoreReset+0x64>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d901      	bls.n	8005e1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e006      	b.n	8005e2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d0f0      	beq.n	8005e0a <USB_CoreReset+0x36>

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	00030d40 	.word	0x00030d40

08005e3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e4c:	f002 fc32 	bl	80086b4 <USBD_static_malloc>
 8005e50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	32b0      	adds	r2, #176	; 0xb0
 8005e62:	2100      	movs	r1, #0
 8005e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e0d4      	b.n	8006016 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005e70:	2100      	movs	r1, #0
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f002 fc94 	bl	80087a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	32b0      	adds	r2, #176	; 0xb0
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	32b0      	adds	r2, #176	; 0xb0
 8005e92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	7c1b      	ldrb	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d138      	bne.n	8005f16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ea4:	4b5e      	ldr	r3, [pc, #376]	; (8006020 <USBD_CDC_Init+0x1e4>)
 8005ea6:	7819      	ldrb	r1, [r3, #0]
 8005ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eac:	2202      	movs	r2, #2
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f002 fadd 	bl	800846e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005eb4:	4b5a      	ldr	r3, [pc, #360]	; (8006020 <USBD_CDC_Init+0x1e4>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f003 020f 	and.w	r2, r3, #15
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3324      	adds	r3, #36	; 0x24
 8005eca:	2201      	movs	r2, #1
 8005ecc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ece:	4b55      	ldr	r3, [pc, #340]	; (8006024 <USBD_CDC_Init+0x1e8>)
 8005ed0:	7819      	ldrb	r1, [r3, #0]
 8005ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f002 fac8 	bl	800846e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ede:	4b51      	ldr	r3, [pc, #324]	; (8006024 <USBD_CDC_Init+0x1e8>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005efa:	4b4b      	ldr	r3, [pc, #300]	; (8006028 <USBD_CDC_Init+0x1ec>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	f003 020f 	and.w	r2, r3, #15
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3326      	adds	r3, #38	; 0x26
 8005f10:	2210      	movs	r2, #16
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e035      	b.n	8005f82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f16:	4b42      	ldr	r3, [pc, #264]	; (8006020 <USBD_CDC_Init+0x1e4>)
 8005f18:	7819      	ldrb	r1, [r3, #0]
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f002 faa5 	bl	800846e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f24:	4b3e      	ldr	r3, [pc, #248]	; (8006020 <USBD_CDC_Init+0x1e4>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 020f 	and.w	r2, r3, #15
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	3324      	adds	r3, #36	; 0x24
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f3e:	4b39      	ldr	r3, [pc, #228]	; (8006024 <USBD_CDC_Init+0x1e8>)
 8005f40:	7819      	ldrb	r1, [r3, #0]
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	2202      	movs	r2, #2
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f002 fa91 	bl	800846e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f4c:	4b35      	ldr	r3, [pc, #212]	; (8006024 <USBD_CDC_Init+0x1e8>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f64:	2201      	movs	r2, #1
 8005f66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f68:	4b2f      	ldr	r3, [pc, #188]	; (8006028 <USBD_CDC_Init+0x1ec>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f003 020f 	and.w	r2, r3, #15
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3326      	adds	r3, #38	; 0x26
 8005f7e:	2210      	movs	r2, #16
 8005f80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f82:	4b29      	ldr	r3, [pc, #164]	; (8006028 <USBD_CDC_Init+0x1ec>)
 8005f84:	7819      	ldrb	r1, [r3, #0]
 8005f86:	2308      	movs	r3, #8
 8005f88:	2203      	movs	r2, #3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f002 fa6f 	bl	800846e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f90:	4b25      	ldr	r3, [pc, #148]	; (8006028 <USBD_CDC_Init+0x1ec>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3324      	adds	r3, #36	; 0x24
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	33b0      	adds	r3, #176	; 0xb0
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e018      	b.n	8006016 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	7c1b      	ldrb	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10a      	bne.n	8006002 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fec:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <USBD_CDC_Init+0x1e8>)
 8005fee:	7819      	ldrb	r1, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 fb26 	bl	800864c <USBD_LL_PrepareReceive>
 8006000:	e008      	b.n	8006014 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006002:	4b08      	ldr	r3, [pc, #32]	; (8006024 <USBD_CDC_Init+0x1e8>)
 8006004:	7819      	ldrb	r1, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800600c:	2340      	movs	r3, #64	; 0x40
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f002 fb1c 	bl	800864c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20000093 	.word	0x20000093
 8006024:	20000094 	.word	0x20000094
 8006028:	20000095 	.word	0x20000095

0800602c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006038:	4b3a      	ldr	r3, [pc, #232]	; (8006124 <USBD_CDC_DeInit+0xf8>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	4619      	mov	r1, r3
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f002 fa3b 	bl	80084ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006044:	4b37      	ldr	r3, [pc, #220]	; (8006124 <USBD_CDC_DeInit+0xf8>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	f003 020f 	and.w	r2, r3, #15
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	3324      	adds	r3, #36	; 0x24
 800605a:	2200      	movs	r2, #0
 800605c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800605e:	4b32      	ldr	r3, [pc, #200]	; (8006128 <USBD_CDC_DeInit+0xfc>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f002 fa28 	bl	80084ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <USBD_CDC_DeInit+0xfc>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f003 020f 	and.w	r2, r3, #15
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006082:	2200      	movs	r2, #0
 8006084:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006086:	4b29      	ldr	r3, [pc, #164]	; (800612c <USBD_CDC_DeInit+0x100>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f002 fa14 	bl	80084ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006092:	4b26      	ldr	r3, [pc, #152]	; (800612c <USBD_CDC_DeInit+0x100>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	f003 020f 	and.w	r2, r3, #15
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	3324      	adds	r3, #36	; 0x24
 80060a8:	2200      	movs	r2, #0
 80060aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80060ac:	4b1f      	ldr	r3, [pc, #124]	; (800612c <USBD_CDC_DeInit+0x100>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	f003 020f 	and.w	r2, r3, #15
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	440b      	add	r3, r1
 80060c0:	3326      	adds	r3, #38	; 0x26
 80060c2:	2200      	movs	r2, #0
 80060c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	32b0      	adds	r2, #176	; 0xb0
 80060d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01f      	beq.n	8006118 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	33b0      	adds	r3, #176	; 0xb0
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	32b0      	adds	r2, #176	; 0xb0
 80060f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f002 fae8 	bl	80086d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	32b0      	adds	r2, #176	; 0xb0
 800610a:	2100      	movs	r1, #0
 800610c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000093 	.word	0x20000093
 8006128:	20000094 	.word	0x20000094
 800612c:	20000095 	.word	0x20000095

08006130 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	32b0      	adds	r2, #176	; 0xb0
 8006144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006148:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	e0bf      	b.n	80062e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006168:	2b00      	cmp	r3, #0
 800616a:	d050      	beq.n	800620e <USBD_CDC_Setup+0xde>
 800616c:	2b20      	cmp	r3, #32
 800616e:	f040 80af 	bne.w	80062d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	88db      	ldrh	r3, [r3, #6]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d03a      	beq.n	80061f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	b25b      	sxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	da1b      	bge.n	80061bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	33b0      	adds	r3, #176	; 0xb0
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800619a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	88d2      	ldrh	r2, [r2, #6]
 80061a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	88db      	ldrh	r3, [r3, #6]
 80061a6:	2b07      	cmp	r3, #7
 80061a8:	bf28      	it	cs
 80061aa:	2307      	movcs	r3, #7
 80061ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	89fa      	ldrh	r2, [r7, #14]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 fd43 	bl	8007c40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80061ba:	e090      	b.n	80062de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785a      	ldrb	r2, [r3, #1]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	88db      	ldrh	r3, [r3, #6]
 80061ca:	2b3f      	cmp	r3, #63	; 0x3f
 80061cc:	d803      	bhi.n	80061d6 <USBD_CDC_Setup+0xa6>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	88db      	ldrh	r3, [r3, #6]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	e000      	b.n	80061d8 <USBD_CDC_Setup+0xa8>
 80061d6:	2240      	movs	r2, #64	; 0x40
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80061de:	6939      	ldr	r1, [r7, #16]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80061e6:	461a      	mov	r2, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 fd55 	bl	8007c98 <USBD_CtlPrepareRx>
      break;
 80061ee:	e076      	b.n	80062de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	33b0      	adds	r3, #176	; 0xb0
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	7850      	ldrb	r0, [r2, #1]
 8006206:	2200      	movs	r2, #0
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	4798      	blx	r3
      break;
 800620c:	e067      	b.n	80062de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b0b      	cmp	r3, #11
 8006214:	d851      	bhi.n	80062ba <USBD_CDC_Setup+0x18a>
 8006216:	a201      	add	r2, pc, #4	; (adr r2, 800621c <USBD_CDC_Setup+0xec>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	0800624d 	.word	0x0800624d
 8006220:	080062c9 	.word	0x080062c9
 8006224:	080062bb 	.word	0x080062bb
 8006228:	080062bb 	.word	0x080062bb
 800622c:	080062bb 	.word	0x080062bb
 8006230:	080062bb 	.word	0x080062bb
 8006234:	080062bb 	.word	0x080062bb
 8006238:	080062bb 	.word	0x080062bb
 800623c:	080062bb 	.word	0x080062bb
 8006240:	080062bb 	.word	0x080062bb
 8006244:	08006277 	.word	0x08006277
 8006248:	080062a1 	.word	0x080062a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b03      	cmp	r3, #3
 8006256:	d107      	bne.n	8006268 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006258:	f107 030a 	add.w	r3, r7, #10
 800625c:	2202      	movs	r2, #2
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 fced 	bl	8007c40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006266:	e032      	b.n	80062ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 fc77 	bl	8007b5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	75fb      	strb	r3, [r7, #23]
          break;
 8006274:	e02b      	b.n	80062ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b03      	cmp	r3, #3
 8006280:	d107      	bne.n	8006292 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006282:	f107 030d 	add.w	r3, r7, #13
 8006286:	2201      	movs	r2, #1
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 fcd8 	bl	8007c40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006290:	e01d      	b.n	80062ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 fc62 	bl	8007b5e <USBD_CtlError>
            ret = USBD_FAIL;
 800629a:	2303      	movs	r3, #3
 800629c:	75fb      	strb	r3, [r7, #23]
          break;
 800629e:	e016      	b.n	80062ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d00f      	beq.n	80062cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f001 fc55 	bl	8007b5e <USBD_CtlError>
            ret = USBD_FAIL;
 80062b4:	2303      	movs	r3, #3
 80062b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062b8:	e008      	b.n	80062cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 fc4e 	bl	8007b5e <USBD_CtlError>
          ret = USBD_FAIL;
 80062c2:	2303      	movs	r3, #3
 80062c4:	75fb      	strb	r3, [r7, #23]
          break;
 80062c6:	e002      	b.n	80062ce <USBD_CDC_Setup+0x19e>
          break;
 80062c8:	bf00      	nop
 80062ca:	e008      	b.n	80062de <USBD_CDC_Setup+0x1ae>
          break;
 80062cc:	bf00      	nop
      }
      break;
 80062ce:	e006      	b.n	80062de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fc43 	bl	8007b5e <USBD_CtlError>
      ret = USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	75fb      	strb	r3, [r7, #23]
      break;
 80062dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80062fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	32b0      	adds	r2, #176	; 0xb0
 8006306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800630e:	2303      	movs	r3, #3
 8006310:	e065      	b.n	80063de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	32b0      	adds	r2, #176	; 0xb0
 800631c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006320:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	f003 020f 	and.w	r2, r3, #15
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	3318      	adds	r3, #24
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d02f      	beq.n	800639c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	f003 020f 	and.w	r2, r3, #15
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	3318      	adds	r3, #24
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	f003 010f 	and.w	r1, r3, #15
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	460b      	mov	r3, r1
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	440b      	add	r3, r1
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4403      	add	r3, r0
 8006364:	3348      	adds	r3, #72	; 0x48
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	fbb2 f1f3 	udiv	r1, r2, r3
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006372:	2b00      	cmp	r3, #0
 8006374:	d112      	bne.n	800639c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	f003 020f 	and.w	r2, r3, #15
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	3318      	adds	r3, #24
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800638e:	78f9      	ldrb	r1, [r7, #3]
 8006390:	2300      	movs	r3, #0
 8006392:	2200      	movs	r2, #0
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f002 f938 	bl	800860a <USBD_LL_Transmit>
 800639a:	e01f      	b.n	80063dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	33b0      	adds	r3, #176	; 0xb0
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d010      	beq.n	80063dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	33b0      	adds	r3, #176	; 0xb0
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80063d8:	78fa      	ldrb	r2, [r7, #3]
 80063da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	32b0      	adds	r2, #176	; 0xb0
 80063fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006400:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	32b0      	adds	r2, #176	; 0xb0
 800640c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006414:	2303      	movs	r3, #3
 8006416:	e01a      	b.n	800644e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	4619      	mov	r1, r3
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f002 f936 	bl	800868e <USBD_LL_GetRxDataSize>
 8006422:	4602      	mov	r2, r0
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	33b0      	adds	r3, #176	; 0xb0
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006448:	4611      	mov	r1, r2
 800644a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	32b0      	adds	r2, #176	; 0xb0
 8006468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006474:	2303      	movs	r3, #3
 8006476:	e025      	b.n	80064c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	33b0      	adds	r3, #176	; 0xb0
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01a      	beq.n	80064c2 <USBD_CDC_EP0_RxReady+0x6c>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006492:	2bff      	cmp	r3, #255	; 0xff
 8006494:	d015      	beq.n	80064c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	33b0      	adds	r3, #176	; 0xb0
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80064ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064b6:	b292      	uxth	r2, r2
 80064b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	22ff      	movs	r2, #255	; 0xff
 80064be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064d4:	2182      	movs	r1, #130	; 0x82
 80064d6:	4818      	ldr	r0, [pc, #96]	; (8006538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064d8:	f000 fd09 	bl	8006eee <USBD_GetEpDesc>
 80064dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064de:	2101      	movs	r1, #1
 80064e0:	4815      	ldr	r0, [pc, #84]	; (8006538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064e2:	f000 fd04 	bl	8006eee <USBD_GetEpDesc>
 80064e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064e8:	2181      	movs	r1, #129	; 0x81
 80064ea:	4813      	ldr	r0, [pc, #76]	; (8006538 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064ec:	f000 fcff 	bl	8006eee <USBD_GetEpDesc>
 80064f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2210      	movs	r2, #16
 80064fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d006      	beq.n	8006512 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2200      	movs	r2, #0
 8006508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800650c:	711a      	strb	r2, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d006      	beq.n	8006526 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006520:	711a      	strb	r2, [r3, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2243      	movs	r2, #67	; 0x43
 800652a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800652c:	4b02      	ldr	r3, [pc, #8]	; (8006538 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000050 	.word	0x20000050

0800653c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006544:	2182      	movs	r1, #130	; 0x82
 8006546:	4818      	ldr	r0, [pc, #96]	; (80065a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006548:	f000 fcd1 	bl	8006eee <USBD_GetEpDesc>
 800654c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800654e:	2101      	movs	r1, #1
 8006550:	4815      	ldr	r0, [pc, #84]	; (80065a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006552:	f000 fccc 	bl	8006eee <USBD_GetEpDesc>
 8006556:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006558:	2181      	movs	r1, #129	; 0x81
 800655a:	4813      	ldr	r0, [pc, #76]	; (80065a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800655c:	f000 fcc7 	bl	8006eee <USBD_GetEpDesc>
 8006560:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2210      	movs	r2, #16
 800656c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2200      	movs	r2, #0
 8006578:	711a      	strb	r2, [r3, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f042 0202 	orr.w	r2, r2, #2
 8006580:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d006      	beq.n	8006596 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	711a      	strb	r2, [r3, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f042 0202 	orr.w	r2, r2, #2
 8006594:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2243      	movs	r2, #67	; 0x43
 800659a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000050 	.word	0x20000050

080065ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065b4:	2182      	movs	r1, #130	; 0x82
 80065b6:	4818      	ldr	r0, [pc, #96]	; (8006618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065b8:	f000 fc99 	bl	8006eee <USBD_GetEpDesc>
 80065bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065be:	2101      	movs	r1, #1
 80065c0:	4815      	ldr	r0, [pc, #84]	; (8006618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065c2:	f000 fc94 	bl	8006eee <USBD_GetEpDesc>
 80065c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065c8:	2181      	movs	r1, #129	; 0x81
 80065ca:	4813      	ldr	r0, [pc, #76]	; (8006618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065cc:	f000 fc8f 	bl	8006eee <USBD_GetEpDesc>
 80065d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2210      	movs	r2, #16
 80065dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d006      	beq.n	80065f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ec:	711a      	strb	r2, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d006      	beq.n	8006606 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006600:	711a      	strb	r2, [r3, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2243      	movs	r2, #67	; 0x43
 800660a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800660c:	4b02      	ldr	r3, [pc, #8]	; (8006618 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000050 	.word	0x20000050

0800661c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	220a      	movs	r2, #10
 8006628:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800662a:	4b03      	ldr	r3, [pc, #12]	; (8006638 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	2000000c 	.word	0x2000000c

0800663c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800664c:	2303      	movs	r3, #3
 800664e:	e009      	b.n	8006664 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	33b0      	adds	r3, #176	; 0xb0
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	32b0      	adds	r2, #176	; 0xb0
 8006686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006692:	2303      	movs	r3, #3
 8006694:	e008      	b.n	80066a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	32b0      	adds	r2, #176	; 0xb0
 80066c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e004      	b.n	80066e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	32b0      	adds	r2, #176	; 0xb0
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32b0      	adds	r2, #176	; 0xb0
 8006712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800671a:	2303      	movs	r3, #3
 800671c:	e018      	b.n	8006750 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7c1b      	ldrb	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006726:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <USBD_CDC_ReceivePacket+0x68>)
 8006728:	7819      	ldrb	r1, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f001 ff89 	bl	800864c <USBD_LL_PrepareReceive>
 800673a:	e008      	b.n	800674e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <USBD_CDC_ReceivePacket+0x68>)
 800673e:	7819      	ldrb	r1, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006746:	2340      	movs	r3, #64	; 0x40
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 ff7f 	bl	800864c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000094 	.word	0x20000094

0800675c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006770:	2303      	movs	r3, #3
 8006772:	e01f      	b.n	80067b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	79fa      	ldrb	r2, [r7, #7]
 80067a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f001 fdf9 	bl	80083a0 <USBD_LL_Init>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e025      	b.n	8006820 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	32ae      	adds	r2, #174	; 0xae
 80067e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00f      	beq.n	8006810 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32ae      	adds	r2, #174	; 0xae
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	f107 020e 	add.w	r2, r7, #14
 8006804:	4610      	mov	r0, r2
 8006806:	4798      	blx	r3
 8006808:	4602      	mov	r2, r0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 fe01 	bl	8008438 <USBD_LL_Start>
 8006836:	4603      	mov	r3, r0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006848:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	460b      	mov	r3, r1
 8006860:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d009      	beq.n	8006884 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	4611      	mov	r1, r2
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	4611      	mov	r1, r2
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068b4:	2303      	movs	r3, #3
 80068b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f001 f908 	bl	8007aea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068e8:	461a      	mov	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d01a      	beq.n	8006934 <USBD_LL_SetupStage+0x72>
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d822      	bhi.n	8006948 <USBD_LL_SetupStage+0x86>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <USBD_LL_SetupStage+0x4a>
 8006906:	2b01      	cmp	r3, #1
 8006908:	d00a      	beq.n	8006920 <USBD_LL_SetupStage+0x5e>
 800690a:	e01d      	b.n	8006948 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb5f 	bl	8006fd8 <USBD_StdDevReq>
 800691a:	4603      	mov	r3, r0
 800691c:	73fb      	strb	r3, [r7, #15]
      break;
 800691e:	e020      	b.n	8006962 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fbc7 	bl	80070bc <USBD_StdItfReq>
 800692e:	4603      	mov	r3, r0
 8006930:	73fb      	strb	r3, [r7, #15]
      break;
 8006932:	e016      	b.n	8006962 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fc29 	bl	8007194 <USBD_StdEPReq>
 8006942:	4603      	mov	r3, r0
 8006944:	73fb      	strb	r3, [r7, #15]
      break;
 8006946:	e00c      	b.n	8006962 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800694e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006952:	b2db      	uxtb	r3, r3
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fdce 	bl	80084f8 <USBD_LL_StallEP>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
      break;
 8006960:	bf00      	nop
  }

  return ret;
 8006962:	7bfb      	ldrb	r3, [r7, #15]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	460b      	mov	r3, r1
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d16e      	bne.n	8006a62 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800698a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006992:	2b03      	cmp	r3, #3
 8006994:	f040 8098 	bne.w	8006ac8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d913      	bls.n	80069cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	1ad2      	subs	r2, r2, r3
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	4293      	cmp	r3, r2
 80069bc:	bf28      	it	cs
 80069be:	4613      	movcs	r3, r2
 80069c0:	461a      	mov	r2, r3
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 f984 	bl	8007cd2 <USBD_CtlContinueRx>
 80069ca:	e07d      	b.n	8006ac8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d014      	beq.n	8006a04 <USBD_LL_DataOutStage+0x98>
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d81d      	bhi.n	8006a1a <USBD_LL_DataOutStage+0xae>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <USBD_LL_DataOutStage+0x7c>
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d003      	beq.n	80069ee <USBD_LL_DataOutStage+0x82>
 80069e6:	e018      	b.n	8006a1a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	75bb      	strb	r3, [r7, #22]
            break;
 80069ec:	e018      	b.n	8006a20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	4619      	mov	r1, r3
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fa5e 	bl	8006eba <USBD_CoreFindIF>
 80069fe:	4603      	mov	r3, r0
 8006a00:	75bb      	strb	r3, [r7, #22]
            break;
 8006a02:	e00d      	b.n	8006a20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fa60 	bl	8006ed4 <USBD_CoreFindEP>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75bb      	strb	r3, [r7, #22]
            break;
 8006a18:	e002      	b.n	8006a20 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75bb      	strb	r3, [r7, #22]
            break;
 8006a1e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a20:	7dbb      	ldrb	r3, [r7, #22]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d119      	bne.n	8006a5a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d113      	bne.n	8006a5a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a32:	7dba      	ldrb	r2, [r7, #22]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	32ae      	adds	r2, #174	; 0xae
 8006a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a42:	7dba      	ldrb	r2, [r7, #22]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a4a:	7dba      	ldrb	r2, [r7, #22]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	32ae      	adds	r2, #174	; 0xae
 8006a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f001 f94a 	bl	8007cf4 <USBD_CtlSendStatus>
 8006a60:	e032      	b.n	8006ac8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a62:	7afb      	ldrb	r3, [r7, #11]
 8006a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fa31 	bl	8006ed4 <USBD_CoreFindEP>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a76:	7dbb      	ldrb	r3, [r7, #22]
 8006a78:	2bff      	cmp	r3, #255	; 0xff
 8006a7a:	d025      	beq.n	8006ac8 <USBD_LL_DataOutStage+0x15c>
 8006a7c:	7dbb      	ldrb	r3, [r7, #22]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d122      	bne.n	8006ac8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d117      	bne.n	8006abe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a8e:	7dba      	ldrb	r2, [r7, #22]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	32ae      	adds	r2, #174	; 0xae
 8006a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00f      	beq.n	8006abe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a9e:	7dba      	ldrb	r2, [r7, #22]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006aa6:	7dba      	ldrb	r2, [r7, #22]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	32ae      	adds	r2, #174	; 0xae
 8006aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	7afa      	ldrb	r2, [r7, #11]
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	4798      	blx	r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	e000      	b.n	8006aca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b086      	sub	sp, #24
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	460b      	mov	r3, r1
 8006adc:	607a      	str	r2, [r7, #4]
 8006ade:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d16f      	bne.n	8006bc6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3314      	adds	r3, #20
 8006aea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d15a      	bne.n	8006bac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d914      	bls.n	8006b2c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	1ad2      	subs	r2, r2, r3
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f001 f8ac 	bl	8007c76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2200      	movs	r2, #0
 8006b22:	2100      	movs	r1, #0
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f001 fd91 	bl	800864c <USBD_LL_PrepareReceive>
 8006b2a:	e03f      	b.n	8006bac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d11c      	bne.n	8006b72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d316      	bcc.n	8006b72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d20f      	bcs.n	8006b72 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b52:	2200      	movs	r2, #0
 8006b54:	2100      	movs	r1, #0
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f001 f88d 	bl	8007c76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b64:	2300      	movs	r3, #0
 8006b66:	2200      	movs	r2, #0
 8006b68:	2100      	movs	r1, #0
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 fd6e 	bl	800864c <USBD_LL_PrepareReceive>
 8006b70:	e01c      	b.n	8006bac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d10f      	bne.n	8006b9e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b9e:	2180      	movs	r1, #128	; 0x80
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f001 fca9 	bl	80084f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f001 f8b7 	bl	8007d1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d03a      	beq.n	8006c2c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff fe42 	bl	8006840 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bc4:	e032      	b.n	8006c2c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	4619      	mov	r1, r3
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f97f 	bl	8006ed4 <USBD_CoreFindEP>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2bff      	cmp	r3, #255	; 0xff
 8006bde:	d025      	beq.n	8006c2c <USBD_LL_DataInStage+0x15a>
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d122      	bne.n	8006c2c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d11c      	bne.n	8006c2c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bf2:	7dfa      	ldrb	r2, [r7, #23]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	32ae      	adds	r2, #174	; 0xae
 8006bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d014      	beq.n	8006c2c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c02:	7dfa      	ldrb	r2, [r7, #23]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c0a:	7dfa      	ldrb	r2, [r7, #23]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	32ae      	adds	r2, #174	; 0xae
 8006c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	7afa      	ldrb	r2, [r7, #11]
 8006c18:	4611      	mov	r1, r2
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	4798      	blx	r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c22:	7dbb      	ldrb	r3, [r7, #22]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c28:	7dbb      	ldrb	r3, [r7, #22]
 8006c2a:	e000      	b.n	8006c2e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d014      	beq.n	8006c9c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00e      	beq.n	8006c9c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6852      	ldr	r2, [r2, #4]
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c9c:	2340      	movs	r3, #64	; 0x40
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fbe3 	bl	800846e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2240      	movs	r2, #64	; 0x40
 8006cb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cb8:	2340      	movs	r3, #64	; 0x40
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2180      	movs	r1, #128	; 0x80
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fbd5 	bl	800846e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2240      	movs	r2, #64	; 0x40
 8006cce:	621a      	str	r2, [r3, #32]

  return ret;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	78fa      	ldrb	r2, [r7, #3]
 8006cea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2204      	movs	r2, #4
 8006d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d106      	bne.n	8006d48 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d110      	bne.n	8006d8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d005      	beq.n	8006d8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	32ae      	adds	r2, #174	; 0xae
 8006dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e01c      	b.n	8006df2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d115      	bne.n	8006df0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32ae      	adds	r2, #174	; 0xae
 8006dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	32ae      	adds	r2, #174	; 0xae
 8006de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	78fa      	ldrb	r2, [r7, #3]
 8006dea:	4611      	mov	r1, r2
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	32ae      	adds	r2, #174	; 0xae
 8006e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e01c      	b.n	8006e56 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d115      	bne.n	8006e54 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	32ae      	adds	r2, #174	; 0xae
 8006e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	32ae      	adds	r2, #174	; 0xae
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	4611      	mov	r1, r2
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6852      	ldr	r2, [r2, #4]
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	4798      	blx	r3
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006eac:	2303      	movs	r3, #3
 8006eae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ec6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ee0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	885b      	ldrh	r3, [r3, #2]
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d920      	bls.n	8006f58 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f1e:	e013      	b.n	8006f48 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f20:	f107 030a 	add.w	r3, r7, #10
 8006f24:	4619      	mov	r1, r3
 8006f26:	6978      	ldr	r0, [r7, #20]
 8006f28:	f000 f81b 	bl	8006f62 <USBD_GetNextDesc>
 8006f2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	785b      	ldrb	r3, [r3, #1]
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	d108      	bne.n	8006f48 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	789b      	ldrb	r3, [r3, #2]
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d008      	beq.n	8006f56 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	885b      	ldrh	r3, [r3, #2]
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	897b      	ldrh	r3, [r7, #10]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d8e5      	bhi.n	8006f20 <USBD_GetEpDesc+0x32>
 8006f54:	e000      	b.n	8006f58 <USBD_GetEpDesc+0x6a>
          break;
 8006f56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f58:	693b      	ldr	r3, [r7, #16]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	881a      	ldrh	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fba:	8a3b      	ldrh	r3, [r7, #16]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	b21a      	sxth	r2, r3
 8006fc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	b21b      	sxth	r3, r3
 8006fc8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fca:	89fb      	ldrh	r3, [r7, #14]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d005      	beq.n	8006ffe <USBD_StdDevReq+0x26>
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d857      	bhi.n	80070a6 <USBD_StdDevReq+0xce>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00f      	beq.n	800701a <USBD_StdDevReq+0x42>
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d153      	bne.n	80070a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	32ae      	adds	r2, #174	; 0xae
 8007008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
 8007014:	4603      	mov	r3, r0
 8007016:	73fb      	strb	r3, [r7, #15]
      break;
 8007018:	e04a      	b.n	80070b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b09      	cmp	r3, #9
 8007020:	d83b      	bhi.n	800709a <USBD_StdDevReq+0xc2>
 8007022:	a201      	add	r2, pc, #4	; (adr r2, 8007028 <USBD_StdDevReq+0x50>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	0800707d 	.word	0x0800707d
 800702c:	08007091 	.word	0x08007091
 8007030:	0800709b 	.word	0x0800709b
 8007034:	08007087 	.word	0x08007087
 8007038:	0800709b 	.word	0x0800709b
 800703c:	0800705b 	.word	0x0800705b
 8007040:	08007051 	.word	0x08007051
 8007044:	0800709b 	.word	0x0800709b
 8007048:	08007073 	.word	0x08007073
 800704c:	08007065 	.word	0x08007065
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa3c 	bl	80074d0 <USBD_GetDescriptor>
          break;
 8007058:	e024      	b.n	80070a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fba1 	bl	80077a4 <USBD_SetAddress>
          break;
 8007062:	e01f      	b.n	80070a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fbe0 	bl	800782c <USBD_SetConfig>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]
          break;
 8007070:	e018      	b.n	80070a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fc83 	bl	8007980 <USBD_GetConfig>
          break;
 800707a:	e013      	b.n	80070a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fcb4 	bl	80079ec <USBD_GetStatus>
          break;
 8007084:	e00e      	b.n	80070a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fce3 	bl	8007a54 <USBD_SetFeature>
          break;
 800708e:	e009      	b.n	80070a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fd07 	bl	8007aa6 <USBD_ClrFeature>
          break;
 8007098:	e004      	b.n	80070a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fd5e 	bl	8007b5e <USBD_CtlError>
          break;
 80070a2:	bf00      	nop
      }
      break;
 80070a4:	e004      	b.n	80070b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fd58 	bl	8007b5e <USBD_CtlError>
      break;
 80070ae:	bf00      	nop
  }

  return ret;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop

080070bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070d2:	2b40      	cmp	r3, #64	; 0x40
 80070d4:	d005      	beq.n	80070e2 <USBD_StdItfReq+0x26>
 80070d6:	2b40      	cmp	r3, #64	; 0x40
 80070d8:	d852      	bhi.n	8007180 <USBD_StdItfReq+0xc4>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <USBD_StdItfReq+0x26>
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d14e      	bne.n	8007180 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d840      	bhi.n	8007172 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	889b      	ldrh	r3, [r3, #4]
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d836      	bhi.n	8007168 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	889b      	ldrh	r3, [r3, #4]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff fed9 	bl	8006eba <USBD_CoreFindIF>
 8007108:	4603      	mov	r3, r0
 800710a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	2bff      	cmp	r3, #255	; 0xff
 8007110:	d01d      	beq.n	800714e <USBD_StdItfReq+0x92>
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d11a      	bne.n	800714e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007118:	7bba      	ldrb	r2, [r7, #14]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	32ae      	adds	r2, #174	; 0xae
 800711e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00f      	beq.n	8007148 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007128:	7bba      	ldrb	r2, [r7, #14]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007130:	7bba      	ldrb	r2, [r7, #14]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	32ae      	adds	r2, #174	; 0xae
 8007136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007146:	e004      	b.n	8007152 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007148:	2303      	movs	r3, #3
 800714a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800714c:	e001      	b.n	8007152 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800714e:	2303      	movs	r3, #3
 8007150:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d110      	bne.n	800717c <USBD_StdItfReq+0xc0>
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10d      	bne.n	800717c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fdc7 	bl	8007cf4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007166:	e009      	b.n	800717c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fcf7 	bl	8007b5e <USBD_CtlError>
          break;
 8007170:	e004      	b.n	800717c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fcf2 	bl	8007b5e <USBD_CtlError>
          break;
 800717a:	e000      	b.n	800717e <USBD_StdItfReq+0xc2>
          break;
 800717c:	bf00      	nop
      }
      break;
 800717e:	e004      	b.n	800718a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fceb 	bl	8007b5e <USBD_CtlError>
      break;
 8007188:	bf00      	nop
  }

  return ret;
 800718a:	7bfb      	ldrb	r3, [r7, #15]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	889b      	ldrh	r3, [r3, #4]
 80071a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d007      	beq.n	80071c4 <USBD_StdEPReq+0x30>
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	f200 817f 	bhi.w	80074b8 <USBD_StdEPReq+0x324>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d02a      	beq.n	8007214 <USBD_StdEPReq+0x80>
 80071be:	2b20      	cmp	r3, #32
 80071c0:	f040 817a 	bne.w	80074b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff fe83 	bl	8006ed4 <USBD_CoreFindEP>
 80071ce:	4603      	mov	r3, r0
 80071d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071d2:	7b7b      	ldrb	r3, [r7, #13]
 80071d4:	2bff      	cmp	r3, #255	; 0xff
 80071d6:	f000 8174 	beq.w	80074c2 <USBD_StdEPReq+0x32e>
 80071da:	7b7b      	ldrb	r3, [r7, #13]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f040 8170 	bne.w	80074c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071e2:	7b7a      	ldrb	r2, [r7, #13]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071ea:	7b7a      	ldrb	r2, [r7, #13]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	32ae      	adds	r2, #174	; 0xae
 80071f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 8163 	beq.w	80074c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071fc:	7b7a      	ldrb	r2, [r7, #13]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	32ae      	adds	r2, #174	; 0xae
 8007202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007212:	e156      	b.n	80074c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b03      	cmp	r3, #3
 800721a:	d008      	beq.n	800722e <USBD_StdEPReq+0x9a>
 800721c:	2b03      	cmp	r3, #3
 800721e:	f300 8145 	bgt.w	80074ac <USBD_StdEPReq+0x318>
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 809b 	beq.w	800735e <USBD_StdEPReq+0x1ca>
 8007228:	2b01      	cmp	r3, #1
 800722a:	d03c      	beq.n	80072a6 <USBD_StdEPReq+0x112>
 800722c:	e13e      	b.n	80074ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b02      	cmp	r3, #2
 8007238:	d002      	beq.n	8007240 <USBD_StdEPReq+0xac>
 800723a:	2b03      	cmp	r3, #3
 800723c:	d016      	beq.n	800726c <USBD_StdEPReq+0xd8>
 800723e:	e02c      	b.n	800729a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00d      	beq.n	8007262 <USBD_StdEPReq+0xce>
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b80      	cmp	r3, #128	; 0x80
 800724a:	d00a      	beq.n	8007262 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 f951 	bl	80084f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 f94d 	bl	80084f8 <USBD_LL_StallEP>
 800725e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007260:	e020      	b.n	80072a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fc7a 	bl	8007b5e <USBD_CtlError>
              break;
 800726a:	e01b      	b.n	80072a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	885b      	ldrh	r3, [r3, #2]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10e      	bne.n	8007292 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00b      	beq.n	8007292 <USBD_StdEPReq+0xfe>
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b80      	cmp	r3, #128	; 0x80
 800727e:	d008      	beq.n	8007292 <USBD_StdEPReq+0xfe>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	88db      	ldrh	r3, [r3, #6]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d104      	bne.n	8007292 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f933 	bl	80084f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fd2e 	bl	8007cf4 <USBD_CtlSendStatus>

              break;
 8007298:	e004      	b.n	80072a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fc5e 	bl	8007b5e <USBD_CtlError>
              break;
 80072a2:	bf00      	nop
          }
          break;
 80072a4:	e107      	b.n	80074b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d002      	beq.n	80072b8 <USBD_StdEPReq+0x124>
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d016      	beq.n	80072e4 <USBD_StdEPReq+0x150>
 80072b6:	e04b      	b.n	8007350 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00d      	beq.n	80072da <USBD_StdEPReq+0x146>
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b80      	cmp	r3, #128	; 0x80
 80072c2:	d00a      	beq.n	80072da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 f915 	bl	80084f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f911 	bl	80084f8 <USBD_LL_StallEP>
 80072d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072d8:	e040      	b.n	800735c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fc3e 	bl	8007b5e <USBD_CtlError>
              break;
 80072e2:	e03b      	b.n	800735c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	885b      	ldrh	r3, [r3, #2]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d136      	bne.n	800735a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d004      	beq.n	8007300 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 f91b 	bl	8008536 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fcf7 	bl	8007cf4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff fde2 	bl	8006ed4 <USBD_CoreFindEP>
 8007310:	4603      	mov	r3, r0
 8007312:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007314:	7b7b      	ldrb	r3, [r7, #13]
 8007316:	2bff      	cmp	r3, #255	; 0xff
 8007318:	d01f      	beq.n	800735a <USBD_StdEPReq+0x1c6>
 800731a:	7b7b      	ldrb	r3, [r7, #13]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11c      	bne.n	800735a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007320:	7b7a      	ldrb	r2, [r7, #13]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007328:	7b7a      	ldrb	r2, [r7, #13]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	32ae      	adds	r2, #174	; 0xae
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d010      	beq.n	800735a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007338:	7b7a      	ldrb	r2, [r7, #13]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	32ae      	adds	r2, #174	; 0xae
 800733e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
 800734a:	4603      	mov	r3, r0
 800734c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800734e:	e004      	b.n	800735a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fc03 	bl	8007b5e <USBD_CtlError>
              break;
 8007358:	e000      	b.n	800735c <USBD_StdEPReq+0x1c8>
              break;
 800735a:	bf00      	nop
          }
          break;
 800735c:	e0ab      	b.n	80074b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d002      	beq.n	8007370 <USBD_StdEPReq+0x1dc>
 800736a:	2b03      	cmp	r3, #3
 800736c:	d032      	beq.n	80073d4 <USBD_StdEPReq+0x240>
 800736e:	e097      	b.n	80074a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d007      	beq.n	8007386 <USBD_StdEPReq+0x1f2>
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	2b80      	cmp	r3, #128	; 0x80
 800737a:	d004      	beq.n	8007386 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fbed 	bl	8007b5e <USBD_CtlError>
                break;
 8007384:	e091      	b.n	80074aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800738a:	2b00      	cmp	r3, #0
 800738c:	da0b      	bge.n	80073a6 <USBD_StdEPReq+0x212>
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	3310      	adds	r3, #16
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	3304      	adds	r3, #4
 80073a4:	e00b      	b.n	80073be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4413      	add	r3, r2
 80073bc:	3304      	adds	r3, #4
 80073be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2202      	movs	r2, #2
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fc37 	bl	8007c40 <USBD_CtlSendData>
              break;
 80073d2:	e06a      	b.n	80074aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da11      	bge.n	8007400 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	f003 020f 	and.w	r2, r3, #15
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	3324      	adds	r3, #36	; 0x24
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d117      	bne.n	8007426 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fbb0 	bl	8007b5e <USBD_CtlError>
                  break;
 80073fe:	e054      	b.n	80074aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	f003 020f 	and.w	r2, r3, #15
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb9d 	bl	8007b5e <USBD_CtlError>
                  break;
 8007424:	e041      	b.n	80074aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007426:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800742a:	2b00      	cmp	r3, #0
 800742c:	da0b      	bge.n	8007446 <USBD_StdEPReq+0x2b2>
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	3310      	adds	r3, #16
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	3304      	adds	r3, #4
 8007444:	e00b      	b.n	800745e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	4413      	add	r3, r2
 800745c:	3304      	adds	r3, #4
 800745e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <USBD_StdEPReq+0x2d8>
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b80      	cmp	r3, #128	; 0x80
 800746a:	d103      	bne.n	8007474 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e00e      	b.n	8007492 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 f87b 	bl	8008574 <USBD_LL_IsStallEP>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2201      	movs	r2, #1
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	e002      	b.n	8007492 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2200      	movs	r2, #0
 8007490:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2202      	movs	r2, #2
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fbd1 	bl	8007c40 <USBD_CtlSendData>
              break;
 800749e:	e004      	b.n	80074aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fb5b 	bl	8007b5e <USBD_CtlError>
              break;
 80074a8:	bf00      	nop
          }
          break;
 80074aa:	e004      	b.n	80074b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fb55 	bl	8007b5e <USBD_CtlError>
          break;
 80074b4:	bf00      	nop
      }
      break;
 80074b6:	e005      	b.n	80074c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fb4f 	bl	8007b5e <USBD_CtlError>
      break;
 80074c0:	e000      	b.n	80074c4 <USBD_StdEPReq+0x330>
      break;
 80074c2:	bf00      	nop
  }

  return ret;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	885b      	ldrh	r3, [r3, #2]
 80074ea:	0a1b      	lsrs	r3, r3, #8
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3b01      	subs	r3, #1
 80074f0:	2b06      	cmp	r3, #6
 80074f2:	f200 8128 	bhi.w	8007746 <USBD_GetDescriptor+0x276>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <USBD_GetDescriptor+0x2c>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007519 	.word	0x08007519
 8007500:	08007531 	.word	0x08007531
 8007504:	08007571 	.word	0x08007571
 8007508:	08007747 	.word	0x08007747
 800750c:	08007747 	.word	0x08007747
 8007510:	080076e7 	.word	0x080076e7
 8007514:	08007713 	.word	0x08007713
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	7c12      	ldrb	r2, [r2, #16]
 8007524:	f107 0108 	add.w	r1, r7, #8
 8007528:	4610      	mov	r0, r2
 800752a:	4798      	blx	r3
 800752c:	60f8      	str	r0, [r7, #12]
      break;
 800752e:	e112      	b.n	8007756 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	7c1b      	ldrb	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10d      	bne.n	8007554 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	f107 0208 	add.w	r2, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
 8007548:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3301      	adds	r3, #1
 800754e:	2202      	movs	r2, #2
 8007550:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007552:	e100      	b.n	8007756 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755c:	f107 0208 	add.w	r2, r7, #8
 8007560:	4610      	mov	r0, r2
 8007562:	4798      	blx	r3
 8007564:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3301      	adds	r3, #1
 800756a:	2202      	movs	r2, #2
 800756c:	701a      	strb	r2, [r3, #0]
      break;
 800756e:	e0f2      	b.n	8007756 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	885b      	ldrh	r3, [r3, #2]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b05      	cmp	r3, #5
 8007578:	f200 80ac 	bhi.w	80076d4 <USBD_GetDescriptor+0x204>
 800757c:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <USBD_GetDescriptor+0xb4>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	0800759d 	.word	0x0800759d
 8007588:	080075d1 	.word	0x080075d1
 800758c:	08007605 	.word	0x08007605
 8007590:	08007639 	.word	0x08007639
 8007594:	0800766d 	.word	0x0800766d
 8007598:	080076a1 	.word	0x080076a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075be:	e091      	b.n	80076e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 facb 	bl	8007b5e <USBD_CtlError>
            err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
          break;
 80075ce:	e089      	b.n	80076e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f2:	e077      	b.n	80076e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fab1 	bl	8007b5e <USBD_CtlError>
            err++;
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	3301      	adds	r3, #1
 8007600:	72fb      	strb	r3, [r7, #11]
          break;
 8007602:	e06f      	b.n	80076e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007626:	e05d      	b.n	80076e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa97 	bl	8007b5e <USBD_CtlError>
            err++;
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	3301      	adds	r3, #1
 8007634:	72fb      	strb	r3, [r7, #11]
          break;
 8007636:	e055      	b.n	80076e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	7c12      	ldrb	r2, [r2, #16]
 8007650:	f107 0108 	add.w	r1, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765a:	e043      	b.n	80076e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa7d 	bl	8007b5e <USBD_CtlError>
            err++;
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	3301      	adds	r3, #1
 8007668:	72fb      	strb	r3, [r7, #11]
          break;
 800766a:	e03b      	b.n	80076e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	7c12      	ldrb	r2, [r2, #16]
 8007684:	f107 0108 	add.w	r1, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800768e:	e029      	b.n	80076e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa63 	bl	8007b5e <USBD_CtlError>
            err++;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	3301      	adds	r3, #1
 800769c:	72fb      	strb	r3, [r7, #11]
          break;
 800769e:	e021      	b.n	80076e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	7c12      	ldrb	r2, [r2, #16]
 80076b8:	f107 0108 	add.w	r1, r7, #8
 80076bc:	4610      	mov	r0, r2
 80076be:	4798      	blx	r3
 80076c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076c2:	e00f      	b.n	80076e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fa49 	bl	8007b5e <USBD_CtlError>
            err++;
 80076cc:	7afb      	ldrb	r3, [r7, #11]
 80076ce:	3301      	adds	r3, #1
 80076d0:	72fb      	strb	r3, [r7, #11]
          break;
 80076d2:	e007      	b.n	80076e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa41 	bl	8007b5e <USBD_CtlError>
          err++;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	3301      	adds	r3, #1
 80076e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076e2:	bf00      	nop
      }
      break;
 80076e4:	e037      	b.n	8007756 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7c1b      	ldrb	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f6:	f107 0208 	add.w	r2, r7, #8
 80076fa:	4610      	mov	r0, r2
 80076fc:	4798      	blx	r3
 80076fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007700:	e029      	b.n	8007756 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa2a 	bl	8007b5e <USBD_CtlError>
        err++;
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	3301      	adds	r3, #1
 800770e:	72fb      	strb	r3, [r7, #11]
      break;
 8007710:	e021      	b.n	8007756 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	7c1b      	ldrb	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10d      	bne.n	8007736 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	f107 0208 	add.w	r2, r7, #8
 8007726:	4610      	mov	r0, r2
 8007728:	4798      	blx	r3
 800772a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	2207      	movs	r2, #7
 8007732:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007734:	e00f      	b.n	8007756 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fa10 	bl	8007b5e <USBD_CtlError>
        err++;
 800773e:	7afb      	ldrb	r3, [r7, #11]
 8007740:	3301      	adds	r3, #1
 8007742:	72fb      	strb	r3, [r7, #11]
      break;
 8007744:	e007      	b.n	8007756 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa08 	bl	8007b5e <USBD_CtlError>
      err++;
 800774e:	7afb      	ldrb	r3, [r7, #11]
 8007750:	3301      	adds	r3, #1
 8007752:	72fb      	strb	r3, [r7, #11]
      break;
 8007754:	bf00      	nop
  }

  if (err != 0U)
 8007756:	7afb      	ldrb	r3, [r7, #11]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d11e      	bne.n	800779a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	88db      	ldrh	r3, [r3, #6]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d016      	beq.n	8007792 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007764:	893b      	ldrh	r3, [r7, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00e      	beq.n	8007788 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	88da      	ldrh	r2, [r3, #6]
 800776e:	893b      	ldrh	r3, [r7, #8]
 8007770:	4293      	cmp	r3, r2
 8007772:	bf28      	it	cs
 8007774:	4613      	movcs	r3, r2
 8007776:	b29b      	uxth	r3, r3
 8007778:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800777a:	893b      	ldrh	r3, [r7, #8]
 800777c:	461a      	mov	r2, r3
 800777e:	68f9      	ldr	r1, [r7, #12]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fa5d 	bl	8007c40 <USBD_CtlSendData>
 8007786:	e009      	b.n	800779c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f9e7 	bl	8007b5e <USBD_CtlError>
 8007790:	e004      	b.n	800779c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 faae 	bl	8007cf4 <USBD_CtlSendStatus>
 8007798:	e000      	b.n	800779c <USBD_GetDescriptor+0x2cc>
    return;
 800779a:	bf00      	nop
  }
}
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop

080077a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	889b      	ldrh	r3, [r3, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d131      	bne.n	800781a <USBD_SetAddress+0x76>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	88db      	ldrh	r3, [r3, #6]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d12d      	bne.n	800781a <USBD_SetAddress+0x76>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	885b      	ldrh	r3, [r3, #2]
 80077c2:	2b7f      	cmp	r3, #127	; 0x7f
 80077c4:	d829      	bhi.n	800781a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	885b      	ldrh	r3, [r3, #2]
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d104      	bne.n	80077e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f9bc 	bl	8007b5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e6:	e01d      	b.n	8007824 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7bfa      	ldrb	r2, [r7, #15]
 80077ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fee9 	bl	80085cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa7a 	bl	8007cf4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d004      	beq.n	8007810 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2202      	movs	r2, #2
 800780a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780e:	e009      	b.n	8007824 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007818:	e004      	b.n	8007824 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f99e 	bl	8007b5e <USBD_CtlError>
  }
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	885b      	ldrh	r3, [r3, #2]
 800783e:	b2da      	uxtb	r2, r3
 8007840:	4b4e      	ldr	r3, [pc, #312]	; (800797c <USBD_SetConfig+0x150>)
 8007842:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007844:	4b4d      	ldr	r3, [pc, #308]	; (800797c <USBD_SetConfig+0x150>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d905      	bls.n	8007858 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f985 	bl	8007b5e <USBD_CtlError>
    return USBD_FAIL;
 8007854:	2303      	movs	r3, #3
 8007856:	e08c      	b.n	8007972 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d002      	beq.n	800786a <USBD_SetConfig+0x3e>
 8007864:	2b03      	cmp	r3, #3
 8007866:	d029      	beq.n	80078bc <USBD_SetConfig+0x90>
 8007868:	e075      	b.n	8007956 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800786a:	4b44      	ldr	r3, [pc, #272]	; (800797c <USBD_SetConfig+0x150>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d020      	beq.n	80078b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007872:	4b42      	ldr	r3, [pc, #264]	; (800797c <USBD_SetConfig+0x150>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800787c:	4b3f      	ldr	r3, [pc, #252]	; (800797c <USBD_SetConfig+0x150>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fe ffe7 	bl	8006856 <USBD_SetClassConfig>
 8007888:	4603      	mov	r3, r0
 800788a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d008      	beq.n	80078a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f962 	bl	8007b5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2202      	movs	r2, #2
 800789e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078a2:	e065      	b.n	8007970 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa25 	bl	8007cf4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2203      	movs	r2, #3
 80078ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078b2:	e05d      	b.n	8007970 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa1d 	bl	8007cf4 <USBD_CtlSendStatus>
      break;
 80078ba:	e059      	b.n	8007970 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078bc:	4b2f      	ldr	r3, [pc, #188]	; (800797c <USBD_SetConfig+0x150>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d112      	bne.n	80078ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078cc:	4b2b      	ldr	r3, [pc, #172]	; (800797c <USBD_SetConfig+0x150>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078d6:	4b29      	ldr	r3, [pc, #164]	; (800797c <USBD_SetConfig+0x150>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fe ffd6 	bl	800688e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa06 	bl	8007cf4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078e8:	e042      	b.n	8007970 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078ea:	4b24      	ldr	r3, [pc, #144]	; (800797c <USBD_SetConfig+0x150>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d02a      	beq.n	800794e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fe ffc4 	bl	800688e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007906:	4b1d      	ldr	r3, [pc, #116]	; (800797c <USBD_SetConfig+0x150>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007910:	4b1a      	ldr	r3, [pc, #104]	; (800797c <USBD_SetConfig+0x150>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fe ff9d 	bl	8006856 <USBD_SetClassConfig>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00f      	beq.n	8007946 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f918 	bl	8007b5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7fe ffa9 	bl	800688e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007944:	e014      	b.n	8007970 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f9d4 	bl	8007cf4 <USBD_CtlSendStatus>
      break;
 800794c:	e010      	b.n	8007970 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f9d0 	bl	8007cf4 <USBD_CtlSendStatus>
      break;
 8007954:	e00c      	b.n	8007970 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f900 	bl	8007b5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800795e:	4b07      	ldr	r3, [pc, #28]	; (800797c <USBD_SetConfig+0x150>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fe ff92 	bl	800688e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	73fb      	strb	r3, [r7, #15]
      break;
 800796e:	bf00      	nop
  }

  return ret;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000234 	.word	0x20000234

08007980 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	88db      	ldrh	r3, [r3, #6]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d004      	beq.n	800799c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f8e2 	bl	8007b5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800799a:	e023      	b.n	80079e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	dc02      	bgt.n	80079ae <USBD_GetConfig+0x2e>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	dc03      	bgt.n	80079b4 <USBD_GetConfig+0x34>
 80079ac:	e015      	b.n	80079da <USBD_GetConfig+0x5a>
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d00b      	beq.n	80079ca <USBD_GetConfig+0x4a>
 80079b2:	e012      	b.n	80079da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3308      	adds	r3, #8
 80079be:	2201      	movs	r2, #1
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f93c 	bl	8007c40 <USBD_CtlSendData>
        break;
 80079c8:	e00c      	b.n	80079e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3304      	adds	r3, #4
 80079ce:	2201      	movs	r2, #1
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f934 	bl	8007c40 <USBD_CtlSendData>
        break;
 80079d8:	e004      	b.n	80079e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8be 	bl	8007b5e <USBD_CtlError>
        break;
 80079e2:	bf00      	nop
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d81e      	bhi.n	8007a42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	88db      	ldrh	r3, [r3, #6]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d004      	beq.n	8007a16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8a5 	bl	8007b5e <USBD_CtlError>
        break;
 8007a14:	e01a      	b.n	8007a4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f043 0202 	orr.w	r2, r3, #2
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	330c      	adds	r3, #12
 8007a36:	2202      	movs	r2, #2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f900 	bl	8007c40 <USBD_CtlSendData>
      break;
 8007a40:	e004      	b.n	8007a4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f88a 	bl	8007b5e <USBD_CtlError>
      break;
 8007a4a:	bf00      	nop
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d107      	bne.n	8007a76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f940 	bl	8007cf4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a74:	e013      	b.n	8007a9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	885b      	ldrh	r3, [r3, #2]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d10b      	bne.n	8007a96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	889b      	ldrh	r3, [r3, #4]
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f930 	bl	8007cf4 <USBD_CtlSendStatus>
}
 8007a94:	e003      	b.n	8007a9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f860 	bl	8007b5e <USBD_CtlError>
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d80b      	bhi.n	8007ad6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	885b      	ldrh	r3, [r3, #2]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d10c      	bne.n	8007ae0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f910 	bl	8007cf4 <USBD_CtlSendStatus>
      }
      break;
 8007ad4:	e004      	b.n	8007ae0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f840 	bl	8007b5e <USBD_CtlError>
      break;
 8007ade:	e000      	b.n	8007ae2 <USBD_ClrFeature+0x3c>
      break;
 8007ae0:	bf00      	nop
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3301      	adds	r3, #1
 8007b12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff fa41 	bl	8006f9c <SWAPBYTE>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f7ff fa34 	bl	8006f9c <SWAPBYTE>
 8007b34:	4603      	mov	r3, r0
 8007b36:	461a      	mov	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3301      	adds	r3, #1
 8007b46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7ff fa27 	bl	8006f9c <SWAPBYTE>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	461a      	mov	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	80da      	strh	r2, [r3, #6]
}
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b68:	2180      	movs	r1, #128	; 0x80
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fcc4 	bl	80084f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b70:	2100      	movs	r1, #0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fcc0 	bl	80084f8 <USBD_LL_StallEP>
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d036      	beq.n	8007c04 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b9a:	6938      	ldr	r0, [r7, #16]
 8007b9c:	f000 f836 	bl	8007c0c <USBD_GetLen>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	7812      	ldrb	r2, [r2, #0]
 8007bb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	2203      	movs	r2, #3
 8007bc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bd0:	e013      	b.n	8007bfa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	7812      	ldrb	r2, [r2, #0]
 8007bdc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	3301      	adds	r3, #1
 8007be2:	613b      	str	r3, [r7, #16]
    idx++;
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
 8007be6:	3301      	adds	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	4413      	add	r3, r2
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e7      	bne.n	8007bd2 <USBD_GetString+0x52>
 8007c02:	e000      	b.n	8007c06 <USBD_GetString+0x86>
    return;
 8007c04:	bf00      	nop
  }
}
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c1c:	e005      	b.n	8007c2a <USBD_GetLen+0x1e>
  {
    len++;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	3301      	adds	r3, #1
 8007c22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f5      	bne.n	8007c1e <USBD_GetLen+0x12>
  }

  return len;
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	2100      	movs	r1, #0
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 fccf 	bl	800860a <USBD_LL_Transmit>

  return USBD_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	2100      	movs	r1, #0
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 fcbe 	bl	800860a <USBD_LL_Transmit>

  return USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fcc2 	bl	800864c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fcb1 	bl	800864c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2204      	movs	r2, #4
 8007d00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d04:	2300      	movs	r3, #0
 8007d06:	2200      	movs	r2, #0
 8007d08:	2100      	movs	r1, #0
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fc7d 	bl	800860a <USBD_LL_Transmit>

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2205      	movs	r2, #5
 8007d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2100      	movs	r1, #0
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc8b 	bl	800864c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d44:	2200      	movs	r2, #0
 8007d46:	4912      	ldr	r1, [pc, #72]	; (8007d90 <MX_USB_DEVICE_Init+0x50>)
 8007d48:	4812      	ldr	r0, [pc, #72]	; (8007d94 <MX_USB_DEVICE_Init+0x54>)
 8007d4a:	f7fe fd07 	bl	800675c <USBD_Init>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d54:	f7f8 fe76 	bl	8000a44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d58:	490f      	ldr	r1, [pc, #60]	; (8007d98 <MX_USB_DEVICE_Init+0x58>)
 8007d5a:	480e      	ldr	r0, [pc, #56]	; (8007d94 <MX_USB_DEVICE_Init+0x54>)
 8007d5c:	f7fe fd2e 	bl	80067bc <USBD_RegisterClass>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d66:	f7f8 fe6d 	bl	8000a44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d6a:	490c      	ldr	r1, [pc, #48]	; (8007d9c <MX_USB_DEVICE_Init+0x5c>)
 8007d6c:	4809      	ldr	r0, [pc, #36]	; (8007d94 <MX_USB_DEVICE_Init+0x54>)
 8007d6e:	f7fe fc65 	bl	800663c <USBD_CDC_RegisterInterface>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d78:	f7f8 fe64 	bl	8000a44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d7c:	4805      	ldr	r0, [pc, #20]	; (8007d94 <MX_USB_DEVICE_Init+0x54>)
 8007d7e:	f7fe fd53 	bl	8006828 <USBD_Start>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d88:	f7f8 fe5c 	bl	8000a44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d8c:	bf00      	nop
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	200000ac 	.word	0x200000ac
 8007d94:	20000238 	.word	0x20000238
 8007d98:	20000018 	.word	0x20000018
 8007d9c:	20000098 	.word	0x20000098

08007da0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007da4:	2200      	movs	r2, #0
 8007da6:	4905      	ldr	r1, [pc, #20]	; (8007dbc <CDC_Init_FS+0x1c>)
 8007da8:	4805      	ldr	r0, [pc, #20]	; (8007dc0 <CDC_Init_FS+0x20>)
 8007daa:	f7fe fc61 	bl	8006670 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007dae:	4905      	ldr	r1, [pc, #20]	; (8007dc4 <CDC_Init_FS+0x24>)
 8007db0:	4803      	ldr	r0, [pc, #12]	; (8007dc0 <CDC_Init_FS+0x20>)
 8007db2:	f7fe fc7f 	bl	80066b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007db6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20000d14 	.word	0x20000d14
 8007dc0:	20000238 	.word	0x20000238
 8007dc4:	20000514 	.word	0x20000514

08007dc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007dcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
 8007de4:	4613      	mov	r3, r2
 8007de6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	2b23      	cmp	r3, #35	; 0x23
 8007dec:	d84a      	bhi.n	8007e84 <CDC_Control_FS+0xac>
 8007dee:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <CDC_Control_FS+0x1c>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e85 	.word	0x08007e85
 8007df8:	08007e85 	.word	0x08007e85
 8007dfc:	08007e85 	.word	0x08007e85
 8007e00:	08007e85 	.word	0x08007e85
 8007e04:	08007e85 	.word	0x08007e85
 8007e08:	08007e85 	.word	0x08007e85
 8007e0c:	08007e85 	.word	0x08007e85
 8007e10:	08007e85 	.word	0x08007e85
 8007e14:	08007e85 	.word	0x08007e85
 8007e18:	08007e85 	.word	0x08007e85
 8007e1c:	08007e85 	.word	0x08007e85
 8007e20:	08007e85 	.word	0x08007e85
 8007e24:	08007e85 	.word	0x08007e85
 8007e28:	08007e85 	.word	0x08007e85
 8007e2c:	08007e85 	.word	0x08007e85
 8007e30:	08007e85 	.word	0x08007e85
 8007e34:	08007e85 	.word	0x08007e85
 8007e38:	08007e85 	.word	0x08007e85
 8007e3c:	08007e85 	.word	0x08007e85
 8007e40:	08007e85 	.word	0x08007e85
 8007e44:	08007e85 	.word	0x08007e85
 8007e48:	08007e85 	.word	0x08007e85
 8007e4c:	08007e85 	.word	0x08007e85
 8007e50:	08007e85 	.word	0x08007e85
 8007e54:	08007e85 	.word	0x08007e85
 8007e58:	08007e85 	.word	0x08007e85
 8007e5c:	08007e85 	.word	0x08007e85
 8007e60:	08007e85 	.word	0x08007e85
 8007e64:	08007e85 	.word	0x08007e85
 8007e68:	08007e85 	.word	0x08007e85
 8007e6c:	08007e85 	.word	0x08007e85
 8007e70:	08007e85 	.word	0x08007e85
 8007e74:	08007e85 	.word	0x08007e85
 8007e78:	08007e85 	.word	0x08007e85
 8007e7c:	08007e85 	.word	0x08007e85
 8007e80:	08007e85 	.word	0x08007e85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e84:	bf00      	nop
  }

  return (USBD_OK);
 8007e86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	4809      	ldr	r0, [pc, #36]	; (8007ec8 <CDC_Receive_FS+0x34>)
 8007ea2:	f7fe fc07 	bl	80066b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ea6:	4808      	ldr	r0, [pc, #32]	; (8007ec8 <CDC_Receive_FS+0x34>)
 8007ea8:	f7fe fc22 	bl	80066f0 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer,Buf,len);
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	4804      	ldr	r0, [pc, #16]	; (8007ecc <CDC_Receive_FS+0x38>)
 8007eba:	f000 fc63 	bl	8008784 <memcpy>
  return (USBD_OK);
 8007ebe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000238 	.word	0x20000238
 8007ecc:	200001f0 	.word	0x200001f0

08007ed0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
	...

08007ef4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2212      	movs	r2, #18
 8007f04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f06:	4b03      	ldr	r3, [pc, #12]	; (8007f14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	200000c8 	.word	0x200000c8

08007f18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6039      	str	r1, [r7, #0]
 8007f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2204      	movs	r2, #4
 8007f28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f2a:	4b03      	ldr	r3, [pc, #12]	; (8007f38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	200000dc 	.word	0x200000dc

08007f3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	6039      	str	r1, [r7, #0]
 8007f46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d105      	bne.n	8007f5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	4907      	ldr	r1, [pc, #28]	; (8007f70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f52:	4808      	ldr	r0, [pc, #32]	; (8007f74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f54:	f7ff fe14 	bl	8007b80 <USBD_GetString>
 8007f58:	e004      	b.n	8007f64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	4904      	ldr	r1, [pc, #16]	; (8007f70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f5e:	4805      	ldr	r0, [pc, #20]	; (8007f74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f60:	f7ff fe0e 	bl	8007b80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f64:	4b02      	ldr	r3, [pc, #8]	; (8007f70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20001514 	.word	0x20001514
 8007f74:	080087c8 	.word	0x080087c8

08007f78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	6039      	str	r1, [r7, #0]
 8007f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	4904      	ldr	r1, [pc, #16]	; (8007f98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f88:	4804      	ldr	r0, [pc, #16]	; (8007f9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f8a:	f7ff fdf9 	bl	8007b80 <USBD_GetString>
  return USBD_StrDesc;
 8007f8e:	4b02      	ldr	r3, [pc, #8]	; (8007f98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20001514 	.word	0x20001514
 8007f9c:	080087e0 	.word	0x080087e0

08007fa0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	6039      	str	r1, [r7, #0]
 8007faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	221a      	movs	r2, #26
 8007fb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fb2:	f000 f843 	bl	800803c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fb6:	4b02      	ldr	r3, [pc, #8]	; (8007fc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	200000e0 	.word	0x200000e0

08007fc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	6039      	str	r1, [r7, #0]
 8007fce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d105      	bne.n	8007fe2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	4907      	ldr	r1, [pc, #28]	; (8007ff8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fda:	4808      	ldr	r0, [pc, #32]	; (8007ffc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fdc:	f7ff fdd0 	bl	8007b80 <USBD_GetString>
 8007fe0:	e004      	b.n	8007fec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	4904      	ldr	r1, [pc, #16]	; (8007ff8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007fe6:	4805      	ldr	r0, [pc, #20]	; (8007ffc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007fe8:	f7ff fdca 	bl	8007b80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fec:	4b02      	ldr	r3, [pc, #8]	; (8007ff8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20001514 	.word	0x20001514
 8007ffc:	080087f4 	.word	0x080087f4

08008000 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	6039      	str	r1, [r7, #0]
 800800a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d105      	bne.n	800801e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4907      	ldr	r1, [pc, #28]	; (8008034 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008016:	4808      	ldr	r0, [pc, #32]	; (8008038 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008018:	f7ff fdb2 	bl	8007b80 <USBD_GetString>
 800801c:	e004      	b.n	8008028 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	4904      	ldr	r1, [pc, #16]	; (8008034 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008022:	4805      	ldr	r0, [pc, #20]	; (8008038 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008024:	f7ff fdac 	bl	8007b80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008028:	4b02      	ldr	r3, [pc, #8]	; (8008034 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20001514 	.word	0x20001514
 8008038:	08008800 	.word	0x08008800

0800803c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <Get_SerialNum+0x44>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008048:	4b0e      	ldr	r3, [pc, #56]	; (8008084 <Get_SerialNum+0x48>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800804e:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <Get_SerialNum+0x4c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4413      	add	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008062:	2208      	movs	r2, #8
 8008064:	4909      	ldr	r1, [pc, #36]	; (800808c <Get_SerialNum+0x50>)
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f814 	bl	8008094 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800806c:	2204      	movs	r2, #4
 800806e:	4908      	ldr	r1, [pc, #32]	; (8008090 <Get_SerialNum+0x54>)
 8008070:	68b8      	ldr	r0, [r7, #8]
 8008072:	f000 f80f 	bl	8008094 <IntToUnicode>
  }
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	1fff7a10 	.word	0x1fff7a10
 8008084:	1fff7a14 	.word	0x1fff7a14
 8008088:	1fff7a18 	.word	0x1fff7a18
 800808c:	200000e2 	.word	0x200000e2
 8008090:	200000f2 	.word	0x200000f2

08008094 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]
 80080aa:	e027      	b.n	80080fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	0f1b      	lsrs	r3, r3, #28
 80080b0:	2b09      	cmp	r3, #9
 80080b2:	d80b      	bhi.n	80080cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	0f1b      	lsrs	r3, r3, #28
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	4619      	mov	r1, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	440b      	add	r3, r1
 80080c4:	3230      	adds	r2, #48	; 0x30
 80080c6:	b2d2      	uxtb	r2, r2
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	e00a      	b.n	80080e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	0f1b      	lsrs	r3, r3, #28
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	4619      	mov	r1, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	440b      	add	r3, r1
 80080dc:	3237      	adds	r2, #55	; 0x37
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	3301      	adds	r3, #1
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4413      	add	r3, r2
 80080f2:	2200      	movs	r2, #0
 80080f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	3301      	adds	r3, #1
 80080fa:	75fb      	strb	r3, [r7, #23]
 80080fc:	7dfa      	ldrb	r2, [r7, #23]
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	429a      	cmp	r2, r3
 8008102:	d3d3      	bcc.n	80080ac <IntToUnicode+0x18>
  }
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
	...

08008114 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800811c:	f107 0314 	add.w	r3, r7, #20
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	605a      	str	r2, [r3, #4]
 8008126:	609a      	str	r2, [r3, #8]
 8008128:	60da      	str	r2, [r3, #12]
 800812a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008134:	d13a      	bne.n	80081ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008136:	2300      	movs	r3, #0
 8008138:	613b      	str	r3, [r7, #16]
 800813a:	4b1e      	ldr	r3, [pc, #120]	; (80081b4 <HAL_PCD_MspInit+0xa0>)
 800813c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813e:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <HAL_PCD_MspInit+0xa0>)
 8008140:	f043 0301 	orr.w	r3, r3, #1
 8008144:	6313      	str	r3, [r2, #48]	; 0x30
 8008146:	4b1b      	ldr	r3, [pc, #108]	; (80081b4 <HAL_PCD_MspInit+0xa0>)
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	613b      	str	r3, [r7, #16]
 8008150:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008152:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008158:	2302      	movs	r3, #2
 800815a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815c:	2300      	movs	r3, #0
 800815e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008160:	2303      	movs	r3, #3
 8008162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008164:	230a      	movs	r3, #10
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008168:	f107 0314 	add.w	r3, r7, #20
 800816c:	4619      	mov	r1, r3
 800816e:	4812      	ldr	r0, [pc, #72]	; (80081b8 <HAL_PCD_MspInit+0xa4>)
 8008170:	f7f9 fa12 	bl	8001598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008174:	4b0f      	ldr	r3, [pc, #60]	; (80081b4 <HAL_PCD_MspInit+0xa0>)
 8008176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008178:	4a0e      	ldr	r2, [pc, #56]	; (80081b4 <HAL_PCD_MspInit+0xa0>)
 800817a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817e:	6353      	str	r3, [r2, #52]	; 0x34
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <HAL_PCD_MspInit+0xa0>)
 8008186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008188:	4a0a      	ldr	r2, [pc, #40]	; (80081b4 <HAL_PCD_MspInit+0xa0>)
 800818a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800818e:	6453      	str	r3, [r2, #68]	; 0x44
 8008190:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <HAL_PCD_MspInit+0xa0>)
 8008192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800819c:	2200      	movs	r2, #0
 800819e:	2100      	movs	r1, #0
 80081a0:	2043      	movs	r0, #67	; 0x43
 80081a2:	f7f9 f9c2 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081a6:	2043      	movs	r0, #67	; 0x43
 80081a8:	f7f9 f9db 	bl	8001562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081ac:	bf00      	nop
 80081ae:	3728      	adds	r7, #40	; 0x28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40023800 	.word	0x40023800
 80081b8:	40020000 	.word	0x40020000

080081bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80081d0:	4619      	mov	r1, r3
 80081d2:	4610      	mov	r0, r2
 80081d4:	f7fe fb75 	bl	80068c2 <USBD_LL_SetupStage>
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081f2:	78fa      	ldrb	r2, [r7, #3]
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	4613      	mov	r3, r2
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	4619      	mov	r1, r3
 800820a:	f7fe fbaf 	bl	800696c <USBD_LL_DataOutStage>
}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b082      	sub	sp, #8
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008228:	78fa      	ldrb	r2, [r7, #3]
 800822a:	6879      	ldr	r1, [r7, #4]
 800822c:	4613      	mov	r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	334c      	adds	r3, #76	; 0x4c
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	4619      	mov	r1, r3
 800823e:	f7fe fc48 	bl	8006ad2 <USBD_LL_DataInStage>
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fd7c 	bl	8006d56 <USBD_LL_SOF>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800826e:	2301      	movs	r3, #1
 8008270:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d102      	bne.n	8008280 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
 800827e:	e008      	b.n	8008292 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d102      	bne.n	800828e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
 800828c:	e001      	b.n	8008292 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800828e:	f7f8 fbd9 	bl	8000a44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008298:	7bfa      	ldrb	r2, [r7, #15]
 800829a:	4611      	mov	r1, r2
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fd1c 	bl	8006cda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe fcc4 	bl	8006c36 <USBD_LL_Reset>
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fd17 	bl	8006cfa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6812      	ldr	r2, [r2, #0]
 80082da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082de:	f043 0301 	orr.w	r3, r3, #1
 80082e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082ec:	4b04      	ldr	r3, [pc, #16]	; (8008300 <HAL_PCD_SuspendCallback+0x48>)
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	4a03      	ldr	r2, [pc, #12]	; (8008300 <HAL_PCD_SuspendCallback+0x48>)
 80082f2:	f043 0306 	orr.w	r3, r3, #6
 80082f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	e000ed00 	.word	0xe000ed00

08008304 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fd07 	bl	8006d26 <USBD_LL_Resume>
}
 8008318:	bf00      	nop
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	4611      	mov	r1, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fd5f 	bl	8006dfa <USBD_LL_IsoOUTIncomplete>
}
 800833c:	bf00      	nop
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fd1b 	bl	8006d96 <USBD_LL_IsoINIncomplete>
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fd71 	bl	8006e5e <USBD_LL_DevConnected>
}
 800837c:	bf00      	nop
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fd6e 	bl	8006e74 <USBD_LL_DevDisconnected>
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d13c      	bne.n	800842a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083b0:	4a20      	ldr	r2, [pc, #128]	; (8008434 <USBD_LL_Init+0x94>)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a1e      	ldr	r2, [pc, #120]	; (8008434 <USBD_LL_Init+0x94>)
 80083bc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083c0:	4b1c      	ldr	r3, [pc, #112]	; (8008434 <USBD_LL_Init+0x94>)
 80083c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80083c8:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <USBD_LL_Init+0x94>)
 80083ca:	2204      	movs	r2, #4
 80083cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80083ce:	4b19      	ldr	r3, [pc, #100]	; (8008434 <USBD_LL_Init+0x94>)
 80083d0:	2202      	movs	r2, #2
 80083d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <USBD_LL_Init+0x94>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083da:	4b16      	ldr	r3, [pc, #88]	; (8008434 <USBD_LL_Init+0x94>)
 80083dc:	2202      	movs	r2, #2
 80083de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083e0:	4b14      	ldr	r3, [pc, #80]	; (8008434 <USBD_LL_Init+0x94>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083e6:	4b13      	ldr	r3, [pc, #76]	; (8008434 <USBD_LL_Init+0x94>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083ec:	4b11      	ldr	r3, [pc, #68]	; (8008434 <USBD_LL_Init+0x94>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083f2:	4b10      	ldr	r3, [pc, #64]	; (8008434 <USBD_LL_Init+0x94>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083f8:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <USBD_LL_Init+0x94>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083fe:	480d      	ldr	r0, [pc, #52]	; (8008434 <USBD_LL_Init+0x94>)
 8008400:	f7f9 fa7f 	bl	8001902 <HAL_PCD_Init>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800840a:	f7f8 fb1b 	bl	8000a44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800840e:	2180      	movs	r1, #128	; 0x80
 8008410:	4808      	ldr	r0, [pc, #32]	; (8008434 <USBD_LL_Init+0x94>)
 8008412:	f7fa fcd6 	bl	8002dc2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008416:	2240      	movs	r2, #64	; 0x40
 8008418:	2100      	movs	r1, #0
 800841a:	4806      	ldr	r0, [pc, #24]	; (8008434 <USBD_LL_Init+0x94>)
 800841c:	f7fa fc8a 	bl	8002d34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008420:	2280      	movs	r2, #128	; 0x80
 8008422:	2101      	movs	r1, #1
 8008424:	4803      	ldr	r0, [pc, #12]	; (8008434 <USBD_LL_Init+0x94>)
 8008426:	f7fa fc85 	bl	8002d34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	20001714 	.word	0x20001714

08008438 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800844e:	4618      	mov	r0, r3
 8008450:	f7f9 fb74 	bl	8001b3c <HAL_PCD_Start>
 8008454:	4603      	mov	r3, r0
 8008456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 f942 	bl	80086e4 <USBD_Get_USB_Status>
 8008460:	4603      	mov	r3, r0
 8008462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008464:	7bbb      	ldrb	r3, [r7, #14]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	4608      	mov	r0, r1
 8008478:	4611      	mov	r1, r2
 800847a:	461a      	mov	r2, r3
 800847c:	4603      	mov	r3, r0
 800847e:	70fb      	strb	r3, [r7, #3]
 8008480:	460b      	mov	r3, r1
 8008482:	70bb      	strb	r3, [r7, #2]
 8008484:	4613      	mov	r3, r2
 8008486:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008496:	78bb      	ldrb	r3, [r7, #2]
 8008498:	883a      	ldrh	r2, [r7, #0]
 800849a:	78f9      	ldrb	r1, [r7, #3]
 800849c:	f7fa f845 	bl	800252a <HAL_PCD_EP_Open>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 f91c 	bl	80086e4 <USBD_Get_USB_Status>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	460b      	mov	r3, r1
 80084c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084d4:	78fa      	ldrb	r2, [r7, #3]
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fa f88e 	bl	80025fa <HAL_PCD_EP_Close>
 80084de:	4603      	mov	r3, r0
 80084e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 f8fd 	bl	80086e4 <USBD_Get_USB_Status>
 80084ea:	4603      	mov	r3, r0
 80084ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008512:	78fa      	ldrb	r2, [r7, #3]
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f7fa f966 	bl	80027e8 <HAL_PCD_EP_SetStall>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 f8de 	bl	80086e4 <USBD_Get_USB_Status>
 8008528:	4603      	mov	r3, r0
 800852a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852c:	7bbb      	ldrb	r3, [r7, #14]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	460b      	mov	r3, r1
 8008540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	4611      	mov	r1, r2
 8008554:	4618      	mov	r0, r3
 8008556:	f7fa f9ab 	bl	80028b0 <HAL_PCD_EP_ClrStall>
 800855a:	4603      	mov	r3, r0
 800855c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f8bf 	bl	80086e4 <USBD_Get_USB_Status>
 8008566:	4603      	mov	r3, r0
 8008568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800856a:	7bbb      	ldrb	r3, [r7, #14]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008586:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800858c:	2b00      	cmp	r3, #0
 800858e:	da0b      	bge.n	80085a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008596:	68f9      	ldr	r1, [r7, #12]
 8008598:	4613      	mov	r3, r2
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	4413      	add	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	440b      	add	r3, r1
 80085a2:	333e      	adds	r3, #62	; 0x3e
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	e00b      	b.n	80085c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ae:	68f9      	ldr	r1, [r7, #12]
 80085b0:	4613      	mov	r3, r2
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	440b      	add	r3, r1
 80085ba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80085be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085e6:	78fa      	ldrb	r2, [r7, #3]
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7f9 ff78 	bl	80024e0 <HAL_PCD_SetAddress>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f874 	bl	80086e4 <USBD_Get_USB_Status>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008600:	7bbb      	ldrb	r3, [r7, #14]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b086      	sub	sp, #24
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
 8008616:	460b      	mov	r3, r1
 8008618:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008628:	7af9      	ldrb	r1, [r7, #11]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	f7fa f891 	bl	8002754 <HAL_PCD_EP_Transmit>
 8008632:	4603      	mov	r3, r0
 8008634:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	4618      	mov	r0, r3
 800863a:	f000 f853 	bl	80086e4 <USBD_Get_USB_Status>
 800863e:	4603      	mov	r3, r0
 8008640:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008642:	7dbb      	ldrb	r3, [r7, #22]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	460b      	mov	r3, r1
 800865a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800866a:	7af9      	ldrb	r1, [r7, #11]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	f7fa f80d 	bl	800268e <HAL_PCD_EP_Receive>
 8008674:	4603      	mov	r3, r0
 8008676:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008678:	7dfb      	ldrb	r3, [r7, #23]
 800867a:	4618      	mov	r0, r3
 800867c:	f000 f832 	bl	80086e4 <USBD_Get_USB_Status>
 8008680:	4603      	mov	r3, r0
 8008682:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008684:	7dbb      	ldrb	r3, [r7, #22]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fa f83d 	bl	8002724 <HAL_PCD_EP_GetRxCount>
 80086aa:	4603      	mov	r3, r0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086bc:	4b03      	ldr	r3, [pc, #12]	; (80086cc <USBD_static_malloc+0x18>)
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	20001c20 	.word	0x20001c20

080086d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]

}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d817      	bhi.n	8008728 <USBD_Get_USB_Status+0x44>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <USBD_Get_USB_Status+0x1c>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008711 	.word	0x08008711
 8008704:	08008717 	.word	0x08008717
 8008708:	0800871d 	.word	0x0800871d
 800870c:	08008723 	.word	0x08008723
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
    break;
 8008714:	e00b      	b.n	800872e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008716:	2303      	movs	r3, #3
 8008718:	73fb      	strb	r3, [r7, #15]
    break;
 800871a:	e008      	b.n	800872e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800871c:	2301      	movs	r3, #1
 800871e:	73fb      	strb	r3, [r7, #15]
    break;
 8008720:	e005      	b.n	800872e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008722:	2303      	movs	r3, #3
 8008724:	73fb      	strb	r3, [r7, #15]
    break;
 8008726:	e002      	b.n	800872e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008728:	2303      	movs	r3, #3
 800872a:	73fb      	strb	r3, [r7, #15]
    break;
 800872c:	bf00      	nop
  }
  return usb_status;
 800872e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <__libc_init_array>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	4d0d      	ldr	r5, [pc, #52]	; (8008774 <__libc_init_array+0x38>)
 8008740:	4c0d      	ldr	r4, [pc, #52]	; (8008778 <__libc_init_array+0x3c>)
 8008742:	1b64      	subs	r4, r4, r5
 8008744:	10a4      	asrs	r4, r4, #2
 8008746:	2600      	movs	r6, #0
 8008748:	42a6      	cmp	r6, r4
 800874a:	d109      	bne.n	8008760 <__libc_init_array+0x24>
 800874c:	4d0b      	ldr	r5, [pc, #44]	; (800877c <__libc_init_array+0x40>)
 800874e:	4c0c      	ldr	r4, [pc, #48]	; (8008780 <__libc_init_array+0x44>)
 8008750:	f000 f82e 	bl	80087b0 <_init>
 8008754:	1b64      	subs	r4, r4, r5
 8008756:	10a4      	asrs	r4, r4, #2
 8008758:	2600      	movs	r6, #0
 800875a:	42a6      	cmp	r6, r4
 800875c:	d105      	bne.n	800876a <__libc_init_array+0x2e>
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	f855 3b04 	ldr.w	r3, [r5], #4
 8008764:	4798      	blx	r3
 8008766:	3601      	adds	r6, #1
 8008768:	e7ee      	b.n	8008748 <__libc_init_array+0xc>
 800876a:	f855 3b04 	ldr.w	r3, [r5], #4
 800876e:	4798      	blx	r3
 8008770:	3601      	adds	r6, #1
 8008772:	e7f2      	b.n	800875a <__libc_init_array+0x1e>
 8008774:	08008828 	.word	0x08008828
 8008778:	08008828 	.word	0x08008828
 800877c:	08008828 	.word	0x08008828
 8008780:	0800882c 	.word	0x0800882c

08008784 <memcpy>:
 8008784:	440a      	add	r2, r1
 8008786:	4291      	cmp	r1, r2
 8008788:	f100 33ff 	add.w	r3, r0, #4294967295
 800878c:	d100      	bne.n	8008790 <memcpy+0xc>
 800878e:	4770      	bx	lr
 8008790:	b510      	push	{r4, lr}
 8008792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800879a:	4291      	cmp	r1, r2
 800879c:	d1f9      	bne.n	8008792 <memcpy+0xe>
 800879e:	bd10      	pop	{r4, pc}

080087a0 <memset>:
 80087a0:	4402      	add	r2, r0
 80087a2:	4603      	mov	r3, r0
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d100      	bne.n	80087aa <memset+0xa>
 80087a8:	4770      	bx	lr
 80087aa:	f803 1b01 	strb.w	r1, [r3], #1
 80087ae:	e7f9      	b.n	80087a4 <memset+0x4>

080087b0 <_init>:
 80087b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b2:	bf00      	nop
 80087b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087b6:	bc08      	pop	{r3}
 80087b8:	469e      	mov	lr, r3
 80087ba:	4770      	bx	lr

080087bc <_fini>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	bf00      	nop
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr
