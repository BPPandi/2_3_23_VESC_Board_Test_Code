
2_3_23_VESC_Board_Test_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008490  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008670  08008670  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008678  08008678  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d44  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e40  20001e40  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d36  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003171  00000000  00000000  00034e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00037fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001048  00000000  00000000  00039188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023599  00000000  00000000  0003a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c01  00000000  00000000  0005d769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce58d  00000000  00000000  0007336a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001418f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049fc  00000000  00000000  00141948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008600 	.word	0x08008600

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008600 	.word	0x08008600

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ledBlink>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledBlink()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin);
 80004d0:	2103      	movs	r1, #3
 80004d2:	4804      	ldr	r0, [pc, #16]	; (80004e4 <ledBlink+0x18>)
 80004d4:	f001 f98d 	bl	80017f2 <HAL_GPIO_TogglePin>
	HAL_Delay(5000);
 80004d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80004dc:	f000 fc3c 	bl	8000d58 <HAL_Delay>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40020400 	.word	0x40020400

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fbc2 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f814 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f9d0 	bl	8000898 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004f8:	f000 f878 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 80004fc:	f000 f8c8 	bl	8000690 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000500:	f000 f97e 	bl	8000800 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000504:	f007 fb44 	bl	8007b90 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (buffer[0] == 1)
 8000508:	4b03      	ldr	r3, [pc, #12]	; (8000518 <main+0x30>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d1fb      	bne.n	8000508 <main+0x20>
	  {
		  ledBlink();
 8000510:	f7ff ffdc 	bl	80004cc <ledBlink>
	  if (buffer[0] == 1)
 8000514:	e7f8      	b.n	8000508 <main+0x20>
 8000516:	bf00      	nop
 8000518:	200001f0 	.word	0x200001f0

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f008 f860 	bl	80085f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <SystemClock_Config+0xc8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <SystemClock_Config+0xc8>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <SystemClock_Config+0xc8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <SystemClock_Config+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <SystemClock_Config+0xcc>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <SystemClock_Config+0xcc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2310      	movs	r3, #16
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800058c:	2310      	movs	r3, #16
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000590:	23c0      	movs	r3, #192	; 0xc0
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fbbd 	bl	8002d20 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f9de 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fe20 	bl	8003210 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005d6:	f000 f9c9 	bl	800096c <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x98>)
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000646:	2201      	movs	r2, #1
 8000648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <MX_ADC1_Init+0x98>)
 800064c:	f000 fba8 	bl	8000da0 <HAL_ADC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 f989 	bl	800096c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800065e:	2301      	movs	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x98>)
 800066c:	f000 fbdc 	bl	8000e28 <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000676:	f000 f979 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000118 	.word	0x20000118
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2220      	movs	r2, #32
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 ff91 	bl	80085f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ce:	4b4a      	ldr	r3, [pc, #296]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006d0:	4a4a      	ldr	r2, [pc, #296]	; (80007fc <MX_TIM1_Init+0x16c>)
 80006d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 80006d4:	4b48      	ldr	r3, [pc, #288]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006d6:	220d      	movs	r2, #13
 80006d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006da:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 102;
 80006e0:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006e2:	2266      	movs	r2, #102	; 0x66
 80006e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e6:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ec:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006f2:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006f8:	483f      	ldr	r0, [pc, #252]	; (80007f8 <MX_TIM1_Init+0x168>)
 80006fa:	f002 ff41 	bl	8003580 <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000704:	f000 f932 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800070e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000712:	4619      	mov	r1, r3
 8000714:	4838      	ldr	r0, [pc, #224]	; (80007f8 <MX_TIM1_Init+0x168>)
 8000716:	f003 f9a5 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000720:	f000 f924 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000724:	4834      	ldr	r0, [pc, #208]	; (80007f8 <MX_TIM1_Init+0x168>)
 8000726:	f002 ff7a 	bl	800361e <HAL_TIM_PWM_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000730:	f000 f91c 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000740:	4619      	mov	r1, r3
 8000742:	482d      	ldr	r0, [pc, #180]	; (80007f8 <MX_TIM1_Init+0x168>)
 8000744:	f003 fd72 	bl	800422c <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800074e:	f000 f90d 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	; 0x60
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075e:	2300      	movs	r3, #0
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800076a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	2200      	movs	r2, #0
 8000776:	4619      	mov	r1, r3
 8000778:	481f      	ldr	r0, [pc, #124]	; (80007f8 <MX_TIM1_Init+0x168>)
 800077a:	f003 f8b1 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000784:	f000 f8f2 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	2204      	movs	r2, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4819      	ldr	r0, [pc, #100]	; (80007f8 <MX_TIM1_Init+0x168>)
 8000792:	f003 f8a5 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800079c:	f000 f8e6 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	2208      	movs	r2, #8
 80007a6:	4619      	mov	r1, r3
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <MX_TIM1_Init+0x168>)
 80007aa:	f003 f899 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80007b4:	f000 f8da 	bl	800096c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 80007c4:	2314      	movs	r3, #20
 80007c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_TIM1_Init+0x168>)
 80007dc:	f003 fda2 	bl	8004324 <HAL_TIMEx_ConfigBreakDeadTime>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80007e6:	f000 f8c1 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <MX_TIM1_Init+0x168>)
 80007ec:	f000 f96c 	bl	8000ac8 <HAL_TIM_MspPostInit>

}
 80007f0:	bf00      	nop
 80007f2:	3758      	adds	r7, #88	; 0x58
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000160 	.word	0x20000160
 80007fc:	40010000 	.word	0x40010000

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_TIM2_Init+0x94>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_TIM2_Init+0x94>)
 8000826:	220e      	movs	r2, #14
 8000828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_TIM2_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_TIM2_Init+0x94>)
 8000832:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_TIM2_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_TIM2_Init+0x94>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <MX_TIM2_Init+0x94>)
 8000846:	f002 fe9b 	bl	8003580 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000850:	f000 f88c 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_TIM2_Init+0x94>)
 8000862:	f003 f8ff 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800086c:	f000 f87e 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_TIM2_Init+0x94>)
 800087e:	f003 fcd5 	bl	800422c <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000888:	f000 f870 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200001a8 	.word	0x200001a8

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_GPIO_Init+0xcc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a2b      	ldr	r2, [pc, #172]	; (8000964 <MX_GPIO_Init+0xcc>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_GPIO_Init+0xcc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_GPIO_Init+0xcc>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a24      	ldr	r2, [pc, #144]	; (8000964 <MX_GPIO_Init+0xcc>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_GPIO_Init+0xcc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <MX_GPIO_Init+0xcc>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a1d      	ldr	r2, [pc, #116]	; (8000964 <MX_GPIO_Init+0xcc>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_GPIO_Init+0xcc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_GPIO_Init+0xcc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a16      	ldr	r2, [pc, #88]	; (8000964 <MX_GPIO_Init+0xcc>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_GPIO_Init+0xcc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2123      	movs	r1, #35	; 0x23
 8000922:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_GPIO_Init+0xd0>)
 8000924:	f000 ff4c 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin EN_GATE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin;
 8000928:	2323      	movs	r3, #35	; 0x23
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480a      	ldr	r0, [pc, #40]	; (8000968 <MX_GPIO_Init+0xd0>)
 8000940:	f000 fda2 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_GPIO_Init+0xd0>)
 8000958:	f000 fd96 	bl	8001488 <HAL_GPIO_Init>

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_MspInit+0x4c>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_ADC_MspInit+0x7c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d127      	bne.n	8000a3a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <HAL_ADC_MspInit+0x80>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <HAL_ADC_MspInit+0x80>)
 80009f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <HAL_ADC_MspInit+0x80>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_ADC_MspInit+0x80>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_ADC_MspInit+0x80>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_ADC_MspInit+0x80>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = VSENS_1_Pin|VSENS_2_Pin|VSENS_3_Pin|TEMP_NTC_Pin
 8000a22:	236f      	movs	r3, #111	; 0x6f
 8000a24:	617b      	str	r3, [r7, #20]
                          |ADC_EXT1_Pin|ADC_EXT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	2303      	movs	r3, #3
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_ADC_MspInit+0x84>)
 8000a36:	f000 fd27 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40012000 	.word	0x40012000
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000

08000a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <HAL_TIM_Base_MspInit+0x70>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d10e      	bne.n	8000a80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_TIM_Base_MspInit+0x74>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <HAL_TIM_Base_MspInit+0x74>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_TIM_Base_MspInit+0x74>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a7e:	e01a      	b.n	8000ab6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a88:	d115      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_TIM_Base_MspInit+0x74>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <HAL_TIM_Base_MspInit+0x74>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_TIM_Base_MspInit+0x74>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	201c      	movs	r0, #28
 8000aac:	f000 fcb5 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ab0:	201c      	movs	r0, #28
 8000ab2:	f000 fcce 	bl	8001452 <HAL_NVIC_EnableIRQ>
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <HAL_TIM_MspPostInit+0xa8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d13d      	bne.n	8000b66 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <HAL_TIM_MspPostInit+0xac>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <HAL_TIM_MspPostInit+0xac>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <HAL_TIM_MspPostInit+0xac>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_TIM_MspPostInit+0xac>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_TIM_MspPostInit+0xac>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_TIM_MspPostInit+0xac>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 8000b22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <HAL_TIM_MspPostInit+0xb0>)
 8000b40:	f000 fca2 	bl	8001488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 8000b44:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_TIM_MspPostInit+0xb4>)
 8000b62:	f000 fc91 	bl	8001488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40010000 	.word	0x40010000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020000 	.word	0x40020000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f8a4 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM2_IRQHandler+0x10>)
 8000bda:	f002 fd79 	bl	80036d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001a8 	.word	0x200001a8

08000be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <OTG_FS_IRQHandler+0x10>)
 8000bee:	f000 ff6a 	bl	8001ac6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20001714 	.word	0x20001714

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f007 fc9d 	bl	800858c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc49 	bl	80004e8 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000c64:	08008680 	.word	0x08008680
  ldr r2, =_sbss
 8000c68:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000c6c:	20001e40 	.word	0x20001e40

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 fbb1 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fe66 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fbc9 	bl	800146e <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 fb91 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000230 	.word	0x20000230

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000230 	.word	0x20000230

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e033      	b.n	8000e1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d109      	bne.n	8000dd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fe02 	bl	80009c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d118      	bne.n	8000e10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000de6:	f023 0302 	bic.w	r3, r3, #2
 8000dea:	f043 0202 	orr.w	r2, r3, #2
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f93a 	bl	800106c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	f023 0303 	bic.w	r3, r3, #3
 8000e06:	f043 0201 	orr.w	r2, r3, #1
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e0e:	e001      	b.n	8000e14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d101      	bne.n	8000e44 <HAL_ADC_ConfigChannel+0x1c>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e105      	b.n	8001050 <HAL_ADC_ConfigChannel+0x228>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b09      	cmp	r3, #9
 8000e52:	d925      	bls.n	8000ea0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68d9      	ldr	r1, [r3, #12]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	4613      	mov	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	3b1e      	subs	r3, #30
 8000e6a:	2207      	movs	r2, #7
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43da      	mvns	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	400a      	ands	r2, r1
 8000e78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68d9      	ldr	r1, [r3, #12]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4403      	add	r3, r0
 8000e92:	3b1e      	subs	r3, #30
 8000e94:	409a      	lsls	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	e022      	b.n	8000ee6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6919      	ldr	r1, [r3, #16]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6919      	ldr	r1, [r3, #16]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4403      	add	r3, r0
 8000edc:	409a      	lsls	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d824      	bhi.n	8000f38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	3b05      	subs	r3, #5
 8000f00:	221f      	movs	r2, #31
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	3b05      	subs	r3, #5
 8000f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
 8000f36:	e04c      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b0c      	cmp	r3, #12
 8000f3e:	d824      	bhi.n	8000f8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b23      	subs	r3, #35	; 0x23
 8000f52:	221f      	movs	r2, #31
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	400a      	ands	r2, r1
 8000f60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	3b23      	subs	r3, #35	; 0x23
 8000f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
 8000f88:	e023      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	3b41      	subs	r3, #65	; 0x41
 8000f9c:	221f      	movs	r2, #31
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	400a      	ands	r2, r1
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3b41      	subs	r3, #65	; 0x41
 8000fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <HAL_ADC_ConfigChannel+0x234>)
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <HAL_ADC_ConfigChannel+0x238>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x1cc>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b12      	cmp	r3, #18
 8000fe6:	d105      	bne.n	8000ff4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_ADC_ConfigChannel+0x238>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d123      	bne.n	8001046 <HAL_ADC_ConfigChannel+0x21e>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b10      	cmp	r3, #16
 8001004:	d003      	beq.n	800100e <HAL_ADC_ConfigChannel+0x1e6>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b11      	cmp	r3, #17
 800100c:	d11b      	bne.n	8001046 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b10      	cmp	r3, #16
 8001020:	d111      	bne.n	8001046 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_ADC_ConfigChannel+0x23c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <HAL_ADC_ConfigChannel+0x240>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	0c9a      	lsrs	r2, r3, #18
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001038:	e002      	b.n	8001040 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3b01      	subs	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f9      	bne.n	800103a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40012300 	.word	0x40012300
 8001060:	40012000 	.word	0x40012000
 8001064:	20000000 	.word	0x20000000
 8001068:	431bde83 	.word	0x431bde83

0800106c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001074:	4b79      	ldr	r3, [pc, #484]	; (800125c <ADC_Init+0x1f0>)
 8001076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	431a      	orrs	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6859      	ldr	r1, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	021a      	lsls	r2, r3, #8
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80010c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6859      	ldr	r1, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6899      	ldr	r1, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fe:	4a58      	ldr	r2, [pc, #352]	; (8001260 <ADC_Init+0x1f4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d022      	beq.n	800114a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6899      	ldr	r1, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	430a      	orrs	r2, r1
 8001124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6899      	ldr	r1, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	e00f      	b.n	800116a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0202 	bic.w	r2, r2, #2
 8001178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6899      	ldr	r1, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e1b      	ldrb	r3, [r3, #24]
 8001184:	005a      	lsls	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d01b      	beq.n	80011d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80011b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6859      	ldr	r1, [r3, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	3b01      	subs	r3, #1
 80011c4:	035a      	lsls	r2, r3, #13
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	e007      	b.n	80011e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	051a      	lsls	r2, r3, #20
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6899      	ldr	r1, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001222:	025a      	lsls	r2, r3, #9
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800123a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6899      	ldr	r1, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	029a      	lsls	r2, r3, #10
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	609a      	str	r2, [r3, #8]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	40012300 	.word	0x40012300
 8001260:	0f000001 	.word	0x0f000001

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff29 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff3e 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff8e 	bl	8001358 <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5d 	bl	8001304 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff31 	bl	80012c8 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	e16b      	b.n	800177c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	429a      	cmp	r2, r3
 80014be:	f040 815a 	bne.w	8001776 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d005      	beq.n	80014da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d130      	bne.n	800153c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 0201 	and.w	r2, r3, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b03      	cmp	r3, #3
 8001546:	d017      	beq.n	8001578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d123      	bne.n	80015cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	220f      	movs	r2, #15
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	69b9      	ldr	r1, [r7, #24]
 80015c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0203 	and.w	r2, r3, #3
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80b4 	beq.w	8001776 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b60      	ldr	r3, [pc, #384]	; (8001794 <HAL_GPIO_Init+0x30c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a5f      	ldr	r2, [pc, #380]	; (8001794 <HAL_GPIO_Init+0x30c>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_GPIO_Init+0x30c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162a:	4a5b      	ldr	r2, [pc, #364]	; (8001798 <HAL_GPIO_Init+0x310>)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	220f      	movs	r2, #15
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_GPIO_Init+0x314>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d02b      	beq.n	80016ae <HAL_GPIO_Init+0x226>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <HAL_GPIO_Init+0x318>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d025      	beq.n	80016aa <HAL_GPIO_Init+0x222>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a50      	ldr	r2, [pc, #320]	; (80017a4 <HAL_GPIO_Init+0x31c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01f      	beq.n	80016a6 <HAL_GPIO_Init+0x21e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4f      	ldr	r2, [pc, #316]	; (80017a8 <HAL_GPIO_Init+0x320>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d019      	beq.n	80016a2 <HAL_GPIO_Init+0x21a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <HAL_GPIO_Init+0x324>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x216>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x328>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x212>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x32c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x20e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_GPIO_Init+0x330>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x20a>
 800168e:	2307      	movs	r3, #7
 8001690:	e00e      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 8001692:	2308      	movs	r3, #8
 8001694:	e00c      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 8001696:	2306      	movs	r3, #6
 8001698:	e00a      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 800169a:	2305      	movs	r3, #5
 800169c:	e008      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 800169e:	2304      	movs	r3, #4
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e004      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016ae:	2300      	movs	r3, #0
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4093      	lsls	r3, r2
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c0:	4935      	ldr	r1, [pc, #212]	; (8001798 <HAL_GPIO_Init+0x310>)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f2:	4a32      	ldr	r2, [pc, #200]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f8:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800171c:	4a27      	ldr	r2, [pc, #156]	; (80017bc <HAL_GPIO_Init+0x334>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001746:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_GPIO_Init+0x334>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3301      	adds	r3, #1
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b0f      	cmp	r3, #15
 8001780:	f67f ae90 	bls.w	80014a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40013800 	.word	0x40013800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020c00 	.word	0x40020c00
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40021400 	.word	0x40021400
 80017b4:	40021800 	.word	0x40021800
 80017b8:	40021c00 	.word	0x40021c00
 80017bc:	40013c00 	.word	0x40013c00

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	619a      	str	r2, [r3, #24]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	460b      	mov	r3, r1
 80017fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001804:	887a      	ldrh	r2, [r7, #2]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	041a      	lsls	r2, r3, #16
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43d9      	mvns	r1, r3
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	400b      	ands	r3, r1
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	619a      	str	r2, [r3, #24]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001828:	b08f      	sub	sp, #60	; 0x3c
 800182a:	af0a      	add	r7, sp, #40	; 0x28
 800182c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e10f      	b.n	8001a58 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f006 fb86 	bl	8007f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fecf 	bl	800461a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	687e      	ldr	r6, [r7, #4]
 8001884:	466d      	mov	r5, sp
 8001886:	f106 0410 	add.w	r4, r6, #16
 800188a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001892:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001896:	e885 0003 	stmia.w	r5, {r0, r1}
 800189a:	1d33      	adds	r3, r6, #4
 800189c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f002 fda6 	bl	80043f0 <USB_CoreInit>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2202      	movs	r2, #2
 80018ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0d0      	b.n	8001a58 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 febd 	bl	800463c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
 80018c6:	e04a      	b.n	800195e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	333d      	adds	r3, #61	; 0x3d
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	333c      	adds	r3, #60	; 0x3c
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	b298      	uxth	r0, r3
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3344      	adds	r3, #68	; 0x44
 8001904:	4602      	mov	r2, r0
 8001906:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3340      	adds	r3, #64	; 0x40
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	3348      	adds	r3, #72	; 0x48
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	334c      	adds	r3, #76	; 0x4c
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3354      	adds	r3, #84	; 0x54
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	3301      	adds	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	d3af      	bcc.n	80018c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e044      	b.n	80019f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800199a:	7bfa      	ldrb	r2, [r7, #15]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	3301      	adds	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3b5      	bcc.n	800196e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	687e      	ldr	r6, [r7, #4]
 8001a0a:	466d      	mov	r5, sp
 8001a0c:	f106 0410 	add.w	r4, r6, #16
 8001a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a20:	1d33      	adds	r3, r6, #4
 8001a22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f002 fe55 	bl	80046d4 <USB_DevInit>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e00d      	b.n	8001a58 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 ffa4 	bl	800599e <USB_DevDisconnect>

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_PCD_Start+0x1c>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e020      	b.n	8001abe <HAL_PCD_Start+0x5e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d109      	bne.n	8001aa0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d005      	beq.n	8001aa0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fda7 	bl	80045f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 ff54 	bl	800595c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ac6:	b590      	push	{r4, r7, lr}
 8001ac8:	b08d      	sub	sp, #52	; 0x34
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 f812 	bl	8005b06 <USB_GetMode>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 848a 	bne.w	80023fe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 ff76 	bl	80059e0 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8480 	beq.w	80023fc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 ff63 	bl	80059e0 <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d107      	bne.n	8001b34 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f002 0202 	and.w	r2, r2, #2
 8001b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 ff51 	bl	80059e0 <USB_ReadInterrupts>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d161      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0210 	bic.w	r2, r2, #16
 8001b56:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	f003 020f 	and.w	r2, r3, #15
 8001b64:	4613      	mov	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	3304      	adds	r3, #4
 8001b76:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	0c5b      	lsrs	r3, r3, #17
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d124      	bne.n	8001bce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d035      	beq.n	8001bfc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6a38      	ldr	r0, [r7, #32]
 8001ba4:	f003 fd88 	bl	80056b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb4:	441a      	add	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	6a1a      	ldr	r2, [r3, #32]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc6:	441a      	add	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	621a      	str	r2, [r3, #32]
 8001bcc:	e016      	b.n	8001bfc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	0c5b      	lsrs	r3, r3, #17
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d110      	bne.n	8001bfc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001be0:	2208      	movs	r2, #8
 8001be2:	4619      	mov	r1, r3
 8001be4:	6a38      	ldr	r0, [r7, #32]
 8001be6:	f003 fd67 	bl	80056b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	6a1a      	ldr	r2, [r3, #32]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bf6:	441a      	add	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0210 	orr.w	r2, r2, #16
 8001c0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fee5 	bl	80059e0 <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c20:	f040 80a7 	bne.w	8001d72 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 feea 	bl	8005a06 <USB_ReadDevAllOutEpInterrupt>
 8001c32:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c34:	e099      	b.n	8001d6a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 808e 	beq.w	8001d5e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 ff0e 	bl	8005a6e <USB_ReadDevOutEPInterrupt>
 8001c52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00c      	beq.n	8001c78 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fec2 	bl	80029fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2308      	movs	r3, #8
 8001c92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 ff98 	bl	8002bcc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d008      	beq.n	8001cb8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d030      	beq.n	8001d24 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b80      	cmp	r3, #128	; 0x80
 8001ccc:	d109      	bne.n	8001ce2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	78db      	ldrb	r3, [r3, #3]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d108      	bne.n	8001d12 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2200      	movs	r2, #0
 8001d04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f006 fa2f 	bl	8008170 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2302      	movs	r3, #2
 8001d22:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d56:	461a      	mov	r2, r3
 8001d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	3301      	adds	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f47f af62 	bne.w	8001c36 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fe32 	bl	80059e0 <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d86:	f040 80db 	bne.w	8001f40 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fe53 	bl	8005a3a <USB_ReadDevAllInEpInterrupt>
 8001d94:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d9a:	e0cd      	b.n	8001f38 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80c2 	beq.w	8001f2c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fe79 	bl	8005aaa <USB_ReadDevInEPInterrupt>
 8001db8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d057      	beq.n	8001e74 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	2201      	movs	r2, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69f9      	ldr	r1, [r7, #28]
 8001de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001de4:	4013      	ands	r3, r2
 8001de6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df4:	461a      	mov	r2, r3
 8001df6:	2301      	movs	r3, #1
 8001df8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d132      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	334c      	adds	r3, #76	; 0x4c
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4403      	add	r3, r0
 8001e22:	3348      	adds	r3, #72	; 0x48
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4419      	add	r1, r3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4403      	add	r3, r0
 8001e36:	334c      	adds	r3, #76	; 0x4c
 8001e38:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d113      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x3a2>
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3354      	adds	r3, #84	; 0x54
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d108      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e60:	461a      	mov	r2, r3
 8001e62:	2101      	movs	r1, #1
 8001e64:	f003 fe80 	bl	8005b68 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f006 f8f9 	bl	8008066 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d008      	beq.n	8001e90 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d008      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2340      	movs	r3, #64	; 0x40
 8001ec6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d023      	beq.n	8001f1a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed4:	6a38      	ldr	r0, [r7, #32]
 8001ed6:	f002 fd61 	bl	800499c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	3338      	adds	r3, #56	; 0x38
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3304      	adds	r3, #4
 8001eec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	78db      	ldrb	r3, [r3, #3]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d108      	bne.n	8001f08 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	4619      	mov	r1, r3
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f006 f946 	bl	8008194 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f14:	461a      	mov	r2, r3
 8001f16:	2302      	movs	r3, #2
 8001f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fcdb 	bl	80028e2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	3301      	adds	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f47f af2e 	bne.w	8001d9c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fd4b 	bl	80059e0 <USB_ReadInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f54:	d122      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fec2 	bl	8002d08 <HAL_PCDEx_LPM_Callback>
 8001f84:	e002      	b.n	8001f8c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f006 f8e4 	bl	8008154 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fd1d 	bl	80059e0 <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb0:	d112      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f006 f8a0 	bl	8008108 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fd6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fcff 	bl	80059e0 <USB_ReadInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fec:	f040 80b7 	bne.w	800215e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2110      	movs	r1, #16
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fcc6 	bl	800499c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002014:	e046      	b.n	80020a4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002022:	461a      	mov	r2, r3
 8002024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002028:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800203a:	0151      	lsls	r1, r2, #5
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	440a      	add	r2, r1
 8002040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002048:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002056:	461a      	mov	r2, r3
 8002058:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800205c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206e:	0151      	lsls	r1, r2, #5
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	440a      	add	r2, r1
 8002074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002078:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800207c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	4413      	add	r3, r2
 8002086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208e:	0151      	lsls	r1, r2, #5
 8002090:	69fa      	ldr	r2, [r7, #28]
 8002092:	440a      	add	r2, r1
 8002094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002098:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800209c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	3301      	adds	r3, #1
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d3b3      	bcc.n	8002016 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d016      	beq.n	80020f8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020da:	f043 030b 	orr.w	r3, r3, #11
 80020de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f0:	f043 030b 	orr.w	r3, r3, #11
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	e015      	b.n	8002124 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002106:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800210a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800210e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800211e:	f043 030b 	orr.w	r3, r3, #11
 8002122:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002132:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002136:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002148:	461a      	mov	r2, r3
 800214a:	f003 fd0d 	bl	8005b68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800215c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fc3c 	bl	80059e0 <USB_ReadInterrupts>
 8002168:	4603      	mov	r3, r0
 800216a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800216e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002172:	d124      	bne.n	80021be <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 fcd2 	bl	8005b22 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f002 fc87 	bl	8004a96 <USB_GetDevSpeed>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681c      	ldr	r4, [r3, #0]
 8002194:	f001 f9e8 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8002198:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	4620      	mov	r0, r4
 80021a4:	f002 f986 	bl	80044b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f005 ff84 	bl	80080b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fc0c 	bl	80059e0 <USB_ReadInterrupts>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d10a      	bne.n	80021e8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f005 ff61 	bl	800809a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f002 0208 	and.w	r2, r2, #8
 80021e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 fbf7 	bl	80059e0 <USB_ReadInterrupts>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f8:	2b80      	cmp	r3, #128	; 0x80
 80021fa:	d122      	bne.n	8002242 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002208:	2301      	movs	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
 800220c:	e014      	b.n	8002238 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fb27 	bl	8002880 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	3301      	adds	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	429a      	cmp	r2, r3
 8002240:	d3e5      	bcc.n	800220e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f003 fbca 	bl	80059e0 <USB_ReadInterrupts>
 800224c:	4603      	mov	r3, r0
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002256:	d13b      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002258:	2301      	movs	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
 800225c:	e02b      	b.n	80022b6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3340      	adds	r3, #64	; 0x40
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d115      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002284:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002286:	2b00      	cmp	r3, #0
 8002288:	da12      	bge.n	80022b0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	333f      	adds	r3, #63	; 0x3f
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fae8 	bl	8002880 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	3301      	adds	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3ce      	bcc.n	800225e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fb83 	bl	80059e0 <USB_ReadInterrupts>
 80022da:	4603      	mov	r3, r0
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022e4:	d155      	bne.n	8002392 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022e6:	2301      	movs	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ea:	e045      	b.n	8002378 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d12e      	bne.n	8002372 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002314:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	da2b      	bge.n	8002372 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002326:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800232a:	429a      	cmp	r2, r3
 800232c:	d121      	bne.n	8002372 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236e:	6053      	str	r3, [r2, #4]
            break;
 8002370:	e007      	b.n	8002382 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	3301      	adds	r3, #1
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237e:	429a      	cmp	r2, r3
 8002380:	d3b4      	bcc.n	80022ec <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002390:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f003 fb22 	bl	80059e0 <USB_ReadInterrupts>
 800239c:	4603      	mov	r3, r0
 800239e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a6:	d10a      	bne.n	80023be <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f005 ff05 	bl	80081b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fb0c 	bl	80059e0 <USB_ReadInterrupts>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d115      	bne.n	80023fe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f005 fef5 	bl	80081d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	e000      	b.n	80023fe <HAL_PCD_IRQHandler+0x938>
      return;
 80023fc:	bf00      	nop
    }
  }
}
 80023fe:	3734      	adds	r7, #52	; 0x34
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_PCD_SetAddress+0x1a>
 800241a:	2302      	movs	r3, #2
 800241c:	e013      	b.n	8002446 <HAL_PCD_SetAddress+0x42>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fa6a 	bl	8005910 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	4608      	mov	r0, r1
 8002458:	4611      	mov	r1, r2
 800245a:	461a      	mov	r2, r3
 800245c:	4603      	mov	r3, r0
 800245e:	70fb      	strb	r3, [r7, #3]
 8002460:	460b      	mov	r3, r1
 8002462:	803b      	strh	r3, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800246c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002470:	2b00      	cmp	r3, #0
 8002472:	da0f      	bge.n	8002494 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	f003 020f 	and.w	r2, r3, #15
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	3338      	adds	r3, #56	; 0x38
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	705a      	strb	r2, [r3, #1]
 8002492:	e00f      	b.n	80024b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	f003 020f 	and.w	r2, r3, #15
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	3304      	adds	r3, #4
 80024ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024c0:	883a      	ldrh	r2, [r7, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	78ba      	ldrb	r2, [r7, #2]
 80024ca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	785b      	ldrb	r3, [r3, #1]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d004      	beq.n	80024de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024de:	78bb      	ldrb	r3, [r7, #2]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d102      	bne.n	80024ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_PCD_EP_Open+0xaa>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e00e      	b.n	8002516 <HAL_PCD_EP_Open+0xc8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 faea 	bl	8004ae0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002514:	7afb      	ldrb	r3, [r7, #11]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800252a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800252e:	2b00      	cmp	r3, #0
 8002530:	da0f      	bge.n	8002552 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	f003 020f 	and.w	r2, r3, #15
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	3338      	adds	r3, #56	; 0x38
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	3304      	adds	r3, #4
 8002548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	705a      	strb	r2, [r3, #1]
 8002550:	e00f      	b.n	8002572 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 020f 	and.w	r2, r3, #15
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_PCD_EP_Close+0x6e>
 8002588:	2302      	movs	r3, #2
 800258a:	e00e      	b.n	80025aa <HAL_PCD_EP_Close+0x8c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68f9      	ldr	r1, [r7, #12]
 800259a:	4618      	mov	r0, r3
 800259c:	f002 fb28 	bl	8004bf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	460b      	mov	r3, r1
 80025c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c2:	7afb      	ldrb	r3, [r7, #11]
 80025c4:	f003 020f 	and.w	r2, r3, #15
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	3304      	adds	r3, #4
 80025da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2200      	movs	r2, #0
 80025ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2200      	movs	r2, #0
 80025f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f4:	7afb      	ldrb	r3, [r7, #11]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d102      	bne.n	800260e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	6979      	ldr	r1, [r7, #20]
 8002626:	f002 fe07 	bl	8005238 <USB_EP0StartXfer>
 800262a:	e008      	b.n	800263e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	6979      	ldr	r1, [r7, #20]
 800263a:	f002 fbb5 	bl	8004da8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	460b      	mov	r3, r1
 8002686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002688:	7afb      	ldrb	r3, [r7, #11]
 800268a:	f003 020f 	and.w	r2, r3, #15
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	3338      	adds	r3, #56	; 0x38
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	3304      	adds	r3, #4
 800269e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2200      	movs	r2, #0
 80026b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2201      	movs	r2, #1
 80026b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026b8:	7afb      	ldrb	r3, [r7, #11]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d102      	bne.n	80026d2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	6979      	ldr	r1, [r7, #20]
 80026ea:	f002 fda5 	bl	8005238 <USB_EP0StartXfer>
 80026ee:	e008      	b.n	8002702 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	6979      	ldr	r1, [r7, #20]
 80026fe:	f002 fb53 	bl	8004da8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 020f 	and.w	r2, r3, #15
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	d901      	bls.n	800272a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e050      	b.n	80027cc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800272a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800272e:	2b00      	cmp	r3, #0
 8002730:	da0f      	bge.n	8002752 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	f003 020f 	and.w	r2, r3, #15
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	3338      	adds	r3, #56	; 0x38
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	3304      	adds	r3, #4
 8002748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	705a      	strb	r2, [r3, #1]
 8002750:	e00d      	b.n	800276e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	3304      	adds	r3, #4
 8002766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_PCD_EP_SetStall+0x82>
 800278a:	2302      	movs	r3, #2
 800278c:	e01e      	b.n	80027cc <HAL_PCD_EP_SetStall+0xc0>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68f9      	ldr	r1, [r7, #12]
 800279c:	4618      	mov	r0, r3
 800279e:	f002 ffe3 	bl	8005768 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	b2d9      	uxtb	r1, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027bc:	461a      	mov	r2, r3
 80027be:	f003 f9d3 	bl	8005b68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f003 020f 	and.w	r2, r3, #15
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d901      	bls.n	80027f2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e042      	b.n	8002878 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da0f      	bge.n	800281a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	3338      	adds	r3, #56	; 0x38
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	3304      	adds	r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	705a      	strb	r2, [r3, #1]
 8002818:	e00f      	b.n	800283a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	f003 020f 	and.w	r2, r3, #15
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	b2da      	uxtb	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_PCD_EP_ClrStall+0x86>
 8002856:	2302      	movs	r3, #2
 8002858:	e00e      	b.n	8002878 <HAL_PCD_EP_ClrStall+0xa4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	f002 ffeb 	bl	8005844 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800288c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002890:	2b00      	cmp	r3, #0
 8002892:	da0c      	bge.n	80028ae <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	f003 020f 	and.w	r2, r3, #15
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	3338      	adds	r3, #56	; 0x38
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	3304      	adds	r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e00c      	b.n	80028c8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 020f 	and.w	r2, r3, #15
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fe0a 	bl	80054e8 <USB_EPStopXfer>
 80028d4:	4603      	mov	r3, r0
 80028d6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80028d8:	7afb      	ldrb	r3, [r7, #11]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b08a      	sub	sp, #40	; 0x28
 80028e6:	af02      	add	r7, sp, #8
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	3338      	adds	r3, #56	; 0x38
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	3304      	adds	r3, #4
 8002908:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a1a      	ldr	r2, [r3, #32]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	429a      	cmp	r2, r3
 8002914:	d901      	bls.n	800291a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e06c      	b.n	80029f4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	429a      	cmp	r2, r3
 800292e:	d902      	bls.n	8002936 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3303      	adds	r3, #3
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800293e:	e02b      	b.n	8002998 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	429a      	cmp	r2, r3
 8002954:	d902      	bls.n	800295c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	3303      	adds	r3, #3
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6919      	ldr	r1, [r3, #16]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002974:	b2db      	uxtb	r3, r3
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4603      	mov	r3, r0
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f002 fe5e 	bl	800563c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	441a      	add	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	441a      	add	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d809      	bhi.n	80029c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d203      	bcs.n	80029c2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1be      	bne.n	8002940 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d811      	bhi.n	80029f2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	2201      	movs	r2, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	6939      	ldr	r1, [r7, #16]
 80029ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029ee:	4013      	ands	r3, r2
 80029f0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	333c      	adds	r3, #60	; 0x3c
 8002a14:	3304      	adds	r3, #4
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d17b      	bne.n	8002b2a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	4a61      	ldr	r2, [pc, #388]	; (8002bc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	f240 80b9 	bls.w	8002bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80b3 	beq.w	8002bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a64:	6093      	str	r3, [r2, #8]
 8002a66:	e0a7      	b.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2320      	movs	r3, #32
 8002a82:	6093      	str	r3, [r2, #8]
 8002a84:	e098      	b.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 8093 	bne.w	8002bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	4a4b      	ldr	r2, [pc, #300]	; (8002bc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d90f      	bls.n	8002aba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab6:	6093      	str	r3, [r2, #8]
 8002ab8:	e07e      	b.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	3304      	adds	r3, #4
 8002ace:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	0159      	lsls	r1, r3, #5
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	440b      	add	r3, r1
 8002adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	1ad2      	subs	r2, r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d114      	bne.n	8002b1c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b04:	461a      	mov	r2, r3
 8002b06:	2101      	movs	r1, #1
 8002b08:	f003 f82e 	bl	8005b68 <USB_EP0_OutStart>
 8002b0c:	e006      	b.n	8002b1c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	441a      	add	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	4619      	mov	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f005 fa84 	bl	8008030 <HAL_PCD_DataOutStageCallback>
 8002b28:	e046      	b.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	4a26      	ldr	r2, [pc, #152]	; (8002bc8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d124      	bne.n	8002b7c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4e:	6093      	str	r3, [r2, #8]
 8002b50:	e032      	b.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f005 fa5b 	bl	8008030 <HAL_PCD_DataOutStageCallback>
 8002b7a:	e01d      	b.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d114      	bne.n	8002bac <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	f002 ffde 	bl	8005b68 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f005 fa3c 	bl	8008030 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	4f54300a 	.word	0x4f54300a
 8002bc8:	4f54310a 	.word	0x4f54310a

08002bcc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	333c      	adds	r3, #60	; 0x3c
 8002be4:	3304      	adds	r3, #4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d90e      	bls.n	8002c20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f005 f9f3 	bl	800800c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d90c      	bls.n	8002c48 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d108      	bne.n	8002c48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c40:	461a      	mov	r2, r3
 8002c42:	2101      	movs	r1, #1
 8002c44:	f002 ff90 	bl	8005b68 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	4f54300a 	.word	0x4f54300a

08002c58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
 8002c64:	4613      	mov	r3, r2
 8002c66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d107      	bne.n	8002c86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c76:	883b      	ldrh	r3, [r7, #0]
 8002c78:	0419      	lsls	r1, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
 8002c84:	e028      	b.n	8002cd8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4413      	add	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e00d      	b.n	8002cb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	3340      	adds	r3, #64	; 0x40
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	4413      	add	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d3ec      	bcc.n	8002c9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002cc0:	883b      	ldrh	r3, [r7, #0]
 8002cc2:	0418      	lsls	r0, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6819      	ldr	r1, [r3, #0]
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	4302      	orrs	r2, r0
 8002cd0:	3340      	adds	r3, #64	; 0x40
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	887a      	ldrh	r2, [r7, #2]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e267      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d075      	beq.n	8002e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3e:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d00c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d4a:	4b85      	ldr	r3, [pc, #532]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d112      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d56:	4b82      	ldr	r3, [pc, #520]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d62:	d10b      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	4b7e      	ldr	r3, [pc, #504]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d05b      	beq.n	8002e28 <HAL_RCC_OscConfig+0x108>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d157      	bne.n	8002e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e242      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d84:	d106      	bne.n	8002d94 <HAL_RCC_OscConfig+0x74>
 8002d86:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e01d      	b.n	8002dd0 <HAL_RCC_OscConfig+0xb0>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x98>
 8002d9e:	4b70      	ldr	r3, [pc, #448]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6f      	ldr	r2, [pc, #444]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6c      	ldr	r2, [pc, #432]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0xb0>
 8002db8:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a68      	ldr	r2, [pc, #416]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fd ffb2 	bl	8000d40 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fd ffae 	bl	8000d40 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e207      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b5b      	ldr	r3, [pc, #364]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0xc0>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fd ff9e 	bl	8000d40 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fd ff9a 	bl	8000d40 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1f3      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0xe8>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d063      	beq.n	8002efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e36:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d11c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4e:	4b44      	ldr	r3, [pc, #272]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d116      	bne.n	8002e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_RCC_OscConfig+0x152>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1c7      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4937      	ldr	r1, [pc, #220]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	e03a      	b.n	8002efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e90:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <HAL_RCC_OscConfig+0x244>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e96:	f7fd ff53 	bl	8000d40 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7fd ff4f 	bl	8000d40 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e1a8      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4925      	ldr	r1, [pc, #148]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	e015      	b.n	8002efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCC_OscConfig+0x244>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fd ff32 	bl	8000d40 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fd ff2e 	bl	8000d40 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e187      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d036      	beq.n	8002f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_RCC_OscConfig+0x248>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fd ff12 	bl	8000d40 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fd ff0e 	bl	8000d40 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e167      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_RCC_OscConfig+0x240>)
 8002f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x200>
 8002f3e:	e01b      	b.n	8002f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_OscConfig+0x248>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7fd fefb 	bl	8000d40 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	e00e      	b.n	8002f6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f4e:	f7fd fef7 	bl	8000d40 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d907      	bls.n	8002f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e150      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
 8002f60:	40023800 	.word	0x40023800
 8002f64:	42470000 	.word	0x42470000
 8002f68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6c:	4b88      	ldr	r3, [pc, #544]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ea      	bne.n	8002f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8097 	beq.w	80030b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f8a:	4b81      	ldr	r3, [pc, #516]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	4b7d      	ldr	r3, [pc, #500]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a7c      	ldr	r2, [pc, #496]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb6:	4b77      	ldr	r3, [pc, #476]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d118      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc2:	4b74      	ldr	r3, [pc, #464]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a73      	ldr	r2, [pc, #460]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fce:	f7fd feb7 	bl	8000d40 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd6:	f7fd feb3 	bl	8000d40 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e10c      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	4b6a      	ldr	r3, [pc, #424]	; (8003194 <HAL_RCC_OscConfig+0x474>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x2ea>
 8002ffc:	4b64      	ldr	r3, [pc, #400]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a63      	ldr	r2, [pc, #396]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	e01c      	b.n	8003044 <HAL_RCC_OscConfig+0x324>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b05      	cmp	r3, #5
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x30c>
 8003012:	4b5f      	ldr	r3, [pc, #380]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a5e      	ldr	r2, [pc, #376]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003018:	f043 0304 	orr.w	r3, r3, #4
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	4b5c      	ldr	r3, [pc, #368]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a5b      	ldr	r2, [pc, #364]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	e00b      	b.n	8003044 <HAL_RCC_OscConfig+0x324>
 800302c:	4b58      	ldr	r3, [pc, #352]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a57      	ldr	r2, [pc, #348]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003032:	f023 0301 	bic.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	4b55      	ldr	r3, [pc, #340]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a54      	ldr	r2, [pc, #336]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800303e:	f023 0304 	bic.w	r3, r3, #4
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d015      	beq.n	8003078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fd fe78 	bl	8000d40 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fd fe74 	bl	8000d40 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e0cb      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	4b49      	ldr	r3, [pc, #292]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0ee      	beq.n	8003054 <HAL_RCC_OscConfig+0x334>
 8003076:	e014      	b.n	80030a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003078:	f7fd fe62 	bl	8000d40 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	e00a      	b.n	8003096 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fd fe5e 	bl	8000d40 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0b5      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003096:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1ee      	bne.n	8003080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d105      	bne.n	80030b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a8:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	4a38      	ldr	r2, [pc, #224]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80a1 	beq.w	8003200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030be:	4b34      	ldr	r3, [pc, #208]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d05c      	beq.n	8003184 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d141      	bne.n	8003156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <HAL_RCC_OscConfig+0x478>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fd fe32 	bl	8000d40 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fd fe2e 	bl	8000d40 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e087      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	019b      	lsls	r3, r3, #6
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	3b01      	subs	r3, #1
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	491b      	ldr	r1, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x478>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fd fe07 	bl	8000d40 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003136:	f7fd fe03 	bl	8000d40 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e05c      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x416>
 8003154:	e054      	b.n	8003200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_RCC_OscConfig+0x478>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd fdf0 	bl	8000d40 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003164:	f7fd fdec 	bl	8000d40 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e045      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_OscConfig+0x470>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x444>
 8003182:	e03d      	b.n	8003200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e038      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
 8003190:	40023800 	.word	0x40023800
 8003194:	40007000 	.word	0x40007000
 8003198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800319c:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_RCC_OscConfig+0x4ec>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d028      	beq.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d121      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d11a      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031cc:	4013      	ands	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d111      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	085b      	lsrs	r3, r3, #1
 80031e4:	3b01      	subs	r3, #1
 80031e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800

08003210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0cc      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b68      	ldr	r3, [pc, #416]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d90c      	bls.n	800324c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b63      	ldr	r3, [pc, #396]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0b8      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d020      	beq.n	800329a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003264:	4b59      	ldr	r3, [pc, #356]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a58      	ldr	r2, [pc, #352]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800326e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800327c:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4a52      	ldr	r2, [pc, #328]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003288:	4b50      	ldr	r3, [pc, #320]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	494d      	ldr	r1, [pc, #308]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d044      	beq.n	8003330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d119      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e07f      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d003      	beq.n	80032ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e06f      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e067      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4934      	ldr	r1, [pc, #208]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003300:	f7fd fd1e 	bl	8000d40 <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fd fd1a 	bl	8000d40 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e04f      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 020c 	and.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	429a      	cmp	r2, r3
 800332e:	d1eb      	bne.n	8003308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d20c      	bcs.n	8003358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e032      	b.n	80033be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4916      	ldr	r1, [pc, #88]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	490e      	ldr	r1, [pc, #56]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003396:	f000 f821 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 800339a:	4602      	mov	r2, r0
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	490a      	ldr	r1, [pc, #40]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	5ccb      	ldrb	r3, [r1, r3]
 80033aa:	fa22 f303 	lsr.w	r3, r2, r3
 80033ae:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCC_ClockConfig+0x1c8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fc7e 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023c00 	.word	0x40023c00
 80033cc:	40023800 	.word	0x40023800
 80033d0:	08008660 	.word	0x08008660
 80033d4:	20000000 	.word	0x20000000
 80033d8:	20000004 	.word	0x20000004

080033dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e0:	b090      	sub	sp, #64	; 0x40
 80033e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
 80033e8:	2300      	movs	r3, #0
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ec:	2300      	movs	r3, #0
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d00d      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x40>
 8003400:	2b08      	cmp	r3, #8
 8003402:	f200 80a1 	bhi.w	8003548 <HAL_RCC_GetSysClockFreq+0x16c>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x34>
 800340a:	2b04      	cmp	r3, #4
 800340c:	d003      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0x3a>
 800340e:	e09b      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_GetSysClockFreq+0x184>)
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003414:	e09b      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003416:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_GetSysClockFreq+0x188>)
 8003418:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800341a:	e098      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800341c:	4b4f      	ldr	r3, [pc, #316]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003424:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003426:	4b4d      	ldr	r3, [pc, #308]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d028      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	099b      	lsrs	r3, r3, #6
 8003438:	2200      	movs	r2, #0
 800343a:	623b      	str	r3, [r7, #32]
 800343c:	627a      	str	r2, [r7, #36]	; 0x24
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003444:	2100      	movs	r1, #0
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_GetSysClockFreq+0x188>)
 8003448:	fb03 f201 	mul.w	r2, r3, r1
 800344c:	2300      	movs	r3, #0
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	4413      	add	r3, r2
 8003454:	4a43      	ldr	r2, [pc, #268]	; (8003564 <HAL_RCC_GetSysClockFreq+0x188>)
 8003456:	fba0 1202 	umull	r1, r2, r0, r2
 800345a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800345c:	460a      	mov	r2, r1
 800345e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003462:	4413      	add	r3, r2
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003468:	2200      	movs	r2, #0
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	61fa      	str	r2, [r7, #28]
 800346e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003472:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003476:	f7fc fea7 	bl	80001c8 <__aeabi_uldivmod>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4613      	mov	r3, r2
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003482:	e053      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003484:	4b35      	ldr	r3, [pc, #212]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	2200      	movs	r2, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	617a      	str	r2, [r7, #20]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003496:	f04f 0b00 	mov.w	fp, #0
 800349a:	4652      	mov	r2, sl
 800349c:	465b      	mov	r3, fp
 800349e:	f04f 0000 	mov.w	r0, #0
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ac:	0150      	lsls	r0, r2, #5
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	ebb2 080a 	subs.w	r8, r2, sl
 80034b6:	eb63 090b 	sbc.w	r9, r3, fp
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034ce:	ebb2 0408 	subs.w	r4, r2, r8
 80034d2:	eb63 0509 	sbc.w	r5, r3, r9
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	00eb      	lsls	r3, r5, #3
 80034e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e4:	00e2      	lsls	r2, r4, #3
 80034e6:	4614      	mov	r4, r2
 80034e8:	461d      	mov	r5, r3
 80034ea:	eb14 030a 	adds.w	r3, r4, sl
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	eb45 030b 	adc.w	r3, r5, fp
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003502:	4629      	mov	r1, r5
 8003504:	028b      	lsls	r3, r1, #10
 8003506:	4621      	mov	r1, r4
 8003508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800350c:	4621      	mov	r1, r4
 800350e:	028a      	lsls	r2, r1, #10
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	2200      	movs	r2, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	60fa      	str	r2, [r7, #12]
 800351c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003520:	f7fc fe52 	bl	80001c8 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_GetSysClockFreq+0x180>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c1b      	lsrs	r3, r3, #16
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	3301      	adds	r3, #1
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800353c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003546:	e002      	b.n	800354e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetSysClockFreq+0x184>)
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800354c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003550:	4618      	mov	r0, r3
 8003552:	3740      	adds	r7, #64	; 0x40
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	00f42400 	.word	0x00f42400
 8003564:	017d7840 	.word	0x017d7840

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000000 	.word	0x20000000

08003580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e041      	b.n	8003616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fa52 	bl	8000a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f000 fb4a 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e041      	b.n	80036b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f839 	bl	80036bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2202      	movs	r2, #2
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	4619      	mov	r1, r3
 800365c:	4610      	mov	r0, r2
 800365e:	f000 fafb 	bl	8003c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d122      	bne.n	800372c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0202 	mvn.w	r2, #2
 80036fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa81 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa73 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fa84 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b04      	cmp	r3, #4
 8003738:	d122      	bne.n	8003780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b04      	cmp	r3, #4
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0204 	mvn.w	r2, #4
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa57 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa49 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fa5a 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b08      	cmp	r3, #8
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b08      	cmp	r3, #8
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0208 	mvn.w	r2, #8
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2204      	movs	r2, #4
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa2d 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa1f 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa30 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0210 	mvn.w	r2, #16
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2208      	movs	r2, #8
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa03 	bl	8003c1a <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9f5 	bl	8003c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fa06 	bl	8003c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d10e      	bne.n	8003854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0201 	mvn.w	r2, #1
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f9cf 	bl	8003bf2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b80      	cmp	r3, #128	; 0x80
 8003860:	d10e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b80      	cmp	r3, #128	; 0x80
 800386e:	d107      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fdae 	bl	80043dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9cb 	bl	8003c42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fd78 	bl	80043c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e0ae      	b.n	8003a5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	f200 809f 	bhi.w	8003a4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800390e:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003949 	.word	0x08003949
 8003918:	08003a4d 	.word	0x08003a4d
 800391c:	08003a4d 	.word	0x08003a4d
 8003920:	08003a4d 	.word	0x08003a4d
 8003924:	08003989 	.word	0x08003989
 8003928:	08003a4d 	.word	0x08003a4d
 800392c:	08003a4d 	.word	0x08003a4d
 8003930:	08003a4d 	.word	0x08003a4d
 8003934:	080039cb 	.word	0x080039cb
 8003938:	08003a4d 	.word	0x08003a4d
 800393c:	08003a4d 	.word	0x08003a4d
 8003940:	08003a4d 	.word	0x08003a4d
 8003944:	08003a0b 	.word	0x08003a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fa22 	bl	8003d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0208 	orr.w	r2, r2, #8
 8003962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6999      	ldr	r1, [r3, #24]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	619a      	str	r2, [r3, #24]
      break;
 8003986:	e064      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fa72 	bl	8003e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6999      	ldr	r1, [r3, #24]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	021a      	lsls	r2, r3, #8
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	619a      	str	r2, [r3, #24]
      break;
 80039c8:	e043      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fac7 	bl	8003f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0208 	orr.w	r2, r2, #8
 80039e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0204 	bic.w	r2, r2, #4
 80039f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69d9      	ldr	r1, [r3, #28]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]
      break;
 8003a08:	e023      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fb1b 	bl	800404c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	021a      	lsls	r2, r3, #8
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	61da      	str	r2, [r3, #28]
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIM_ConfigClockSource+0x1c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0b4      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x186>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab8:	d03e      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0xd4>
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	f200 8087 	bhi.w	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	f000 8086 	beq.w	8003bd6 <HAL_TIM_ConfigClockSource+0x172>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	d87f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d01a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xa6>
 8003ad4:	2b70      	cmp	r3, #112	; 0x70
 8003ad6:	d87b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b60      	cmp	r3, #96	; 0x60
 8003ada:	d050      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x11a>
 8003adc:	2b60      	cmp	r3, #96	; 0x60
 8003ade:	d877      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b50      	cmp	r3, #80	; 0x50
 8003ae2:	d03c      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0xfa>
 8003ae4:	2b50      	cmp	r3, #80	; 0x50
 8003ae6:	d873      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d058      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x13a>
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d86f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b30      	cmp	r3, #48	; 0x30
 8003af2:	d064      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b30      	cmp	r3, #48	; 0x30
 8003af6:	d86b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d060      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d867      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05c      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d05a      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	e062      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f000 fb67 	bl	80041ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	609a      	str	r2, [r3, #8]
      break;
 8003b36:	e04f      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6899      	ldr	r1, [r3, #8]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f000 fb50 	bl	80041ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b5a:	609a      	str	r2, [r3, #8]
      break;
 8003b5c:	e03c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 fac4 	bl	80040f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2150      	movs	r1, #80	; 0x50
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb1d 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e02c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 fae3 	bl	8004156 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2160      	movs	r1, #96	; 0x60
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fb0d 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e01c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 faa4 	bl	80040f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fafd 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e00c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f000 faf4 	bl	80041b6 <TIM_ITRx_SetConfig>
      break;
 8003bce:	e003      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd4:	e000      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a40      	ldr	r2, [pc, #256]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c76:	d00f      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a3d      	ldr	r2, [pc, #244]	; (8003d70 <TIM_Base_SetConfig+0x118>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a3c      	ldr	r2, [pc, #240]	; (8003d74 <TIM_Base_SetConfig+0x11c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a3b      	ldr	r2, [pc, #236]	; (8003d78 <TIM_Base_SetConfig+0x120>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0x40>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <TIM_Base_SetConfig+0x124>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d108      	bne.n	8003caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a2f      	ldr	r2, [pc, #188]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb8:	d027      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <TIM_Base_SetConfig+0x118>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d023      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a2b      	ldr	r2, [pc, #172]	; (8003d74 <TIM_Base_SetConfig+0x11c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01f      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <TIM_Base_SetConfig+0x120>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <TIM_Base_SetConfig+0x124>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d017      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <TIM_Base_SetConfig+0x128>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <TIM_Base_SetConfig+0x12c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <TIM_Base_SetConfig+0x130>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a25      	ldr	r2, [pc, #148]	; (8003d8c <TIM_Base_SetConfig+0x134>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a24      	ldr	r2, [pc, #144]	; (8003d90 <TIM_Base_SetConfig+0x138>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a23      	ldr	r2, [pc, #140]	; (8003d94 <TIM_Base_SetConfig+0x13c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d108      	bne.n	8003d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <TIM_Base_SetConfig+0x114>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0xf8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <TIM_Base_SetConfig+0x124>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40000400 	.word	0x40000400
 8003d74:	40000800 	.word	0x40000800
 8003d78:	40000c00 	.word	0x40000c00
 8003d7c:	40010400 	.word	0x40010400
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800
 8003d8c:	40001800 	.word	0x40001800
 8003d90:	40001c00 	.word	0x40001c00
 8003d94:	40002000 	.word	0x40002000

08003d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 0302 	bic.w	r3, r3, #2
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <TIM_OC1_SetConfig+0xd8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC1_SetConfig+0x64>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <TIM_OC1_SetConfig+0xdc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d10c      	bne.n	8003e16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f023 0308 	bic.w	r3, r3, #8
 8003e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <TIM_OC1_SetConfig+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_OC1_SetConfig+0x8e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <TIM_OC1_SetConfig+0xdc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d111      	bne.n	8003e4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40010400 	.word	0x40010400

08003e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0210 	bic.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <TIM_OC2_SetConfig+0xe4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC2_SetConfig+0x68>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <TIM_OC2_SetConfig+0xe8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10d      	bne.n	8003efc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <TIM_OC2_SetConfig+0xe4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_OC2_SetConfig+0x94>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <TIM_OC2_SetConfig+0xe8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d113      	bne.n	8003f34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40010400 	.word	0x40010400

08003f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a21      	ldr	r2, [pc, #132]	; (8004044 <TIM_OC3_SetConfig+0xe0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_OC3_SetConfig+0x66>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a20      	ldr	r2, [pc, #128]	; (8004048 <TIM_OC3_SetConfig+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10d      	bne.n	8003fe6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a16      	ldr	r2, [pc, #88]	; (8004044 <TIM_OC3_SetConfig+0xe0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_OC3_SetConfig+0x92>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <TIM_OC3_SetConfig+0xe4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d113      	bne.n	800401e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40010000 	.word	0x40010000
 8004048:	40010400 	.word	0x40010400

0800404c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	031b      	lsls	r3, r3, #12
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a12      	ldr	r2, [pc, #72]	; (80040f0 <TIM_OC4_SetConfig+0xa4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_OC4_SetConfig+0x68>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <TIM_OC4_SetConfig+0xa8>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d109      	bne.n	80040c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40010400 	.word	0x40010400

080040f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0201 	bic.w	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 030a 	bic.w	r3, r3, #10
 8004134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0210 	bic.w	r2, r3, #16
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	031b      	lsls	r3, r3, #12
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f043 0307 	orr.w	r3, r3, #7
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	431a      	orrs	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004240:	2302      	movs	r3, #2
 8004242:	e05a      	b.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a21      	ldr	r2, [pc, #132]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d01d      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a18      	ldr	r2, [pc, #96]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d10c      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800
 8004314:	40000c00 	.word	0x40000c00
 8004318:	40010400 	.word	0x40010400
 800431c:	40014000 	.word	0x40014000
 8004320:	40001800 	.word	0x40001800

08004324 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800433c:	2302      	movs	r3, #2
 800433e:	e03d      	b.n	80043bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043f0:	b084      	sub	sp, #16
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	f107 001c 	add.w	r0, r7, #28
 80043fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	2b01      	cmp	r3, #1
 8004406:	d122      	bne.n	800444e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800441c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f001 fbee 	bl	8005c24 <USB_CoreReset>
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e01a      	b.n	8004484 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f001 fbe2 	bl	8005c24 <USB_CoreReset>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
 8004476:	e005      	b.n	8004484 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	2b01      	cmp	r3, #1
 8004488:	d10b      	bne.n	80044a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f043 0206 	orr.w	r2, r3, #6
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f043 0220 	orr.w	r2, r3, #32
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ae:	b004      	add	sp, #16
 80044b0:	4770      	bx	lr
	...

080044b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d165      	bne.n	8004594 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4a41      	ldr	r2, [pc, #260]	; (80045d0 <USB_SetTurnaroundTime+0x11c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d906      	bls.n	80044de <USB_SetTurnaroundTime+0x2a>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a40      	ldr	r2, [pc, #256]	; (80045d4 <USB_SetTurnaroundTime+0x120>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d202      	bcs.n	80044de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044d8:	230f      	movs	r3, #15
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e062      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4a3c      	ldr	r2, [pc, #240]	; (80045d4 <USB_SetTurnaroundTime+0x120>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d306      	bcc.n	80044f4 <USB_SetTurnaroundTime+0x40>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a3b      	ldr	r2, [pc, #236]	; (80045d8 <USB_SetTurnaroundTime+0x124>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d202      	bcs.n	80044f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044ee:	230e      	movs	r3, #14
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e057      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4a38      	ldr	r2, [pc, #224]	; (80045d8 <USB_SetTurnaroundTime+0x124>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d306      	bcc.n	800450a <USB_SetTurnaroundTime+0x56>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a37      	ldr	r2, [pc, #220]	; (80045dc <USB_SetTurnaroundTime+0x128>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d202      	bcs.n	800450a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004504:	230d      	movs	r3, #13
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e04c      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4a33      	ldr	r2, [pc, #204]	; (80045dc <USB_SetTurnaroundTime+0x128>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d306      	bcc.n	8004520 <USB_SetTurnaroundTime+0x6c>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4a32      	ldr	r2, [pc, #200]	; (80045e0 <USB_SetTurnaroundTime+0x12c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d802      	bhi.n	8004520 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800451a:	230c      	movs	r3, #12
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e041      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4a2f      	ldr	r2, [pc, #188]	; (80045e0 <USB_SetTurnaroundTime+0x12c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d906      	bls.n	8004536 <USB_SetTurnaroundTime+0x82>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4a2e      	ldr	r2, [pc, #184]	; (80045e4 <USB_SetTurnaroundTime+0x130>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d802      	bhi.n	8004536 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004530:	230b      	movs	r3, #11
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e036      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <USB_SetTurnaroundTime+0x130>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d906      	bls.n	800454c <USB_SetTurnaroundTime+0x98>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <USB_SetTurnaroundTime+0x134>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d802      	bhi.n	800454c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004546:	230a      	movs	r3, #10
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e02b      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4a26      	ldr	r2, [pc, #152]	; (80045e8 <USB_SetTurnaroundTime+0x134>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d906      	bls.n	8004562 <USB_SetTurnaroundTime+0xae>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4a25      	ldr	r2, [pc, #148]	; (80045ec <USB_SetTurnaroundTime+0x138>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d202      	bcs.n	8004562 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800455c:	2309      	movs	r3, #9
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e020      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4a21      	ldr	r2, [pc, #132]	; (80045ec <USB_SetTurnaroundTime+0x138>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d306      	bcc.n	8004578 <USB_SetTurnaroundTime+0xc4>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4a20      	ldr	r2, [pc, #128]	; (80045f0 <USB_SetTurnaroundTime+0x13c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d802      	bhi.n	8004578 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004572:	2308      	movs	r3, #8
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e015      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <USB_SetTurnaroundTime+0x13c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d906      	bls.n	800458e <USB_SetTurnaroundTime+0xda>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <USB_SetTurnaroundTime+0x140>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d202      	bcs.n	800458e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004588:	2307      	movs	r3, #7
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	e00a      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800458e:	2306      	movs	r3, #6
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	e007      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800459a:	2309      	movs	r3, #9
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e001      	b.n	80045a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80045a0:	2309      	movs	r3, #9
 80045a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	029b      	lsls	r3, r3, #10
 80045b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	00d8acbf 	.word	0x00d8acbf
 80045d4:	00e4e1c0 	.word	0x00e4e1c0
 80045d8:	00f42400 	.word	0x00f42400
 80045dc:	01067380 	.word	0x01067380
 80045e0:	011a499f 	.word	0x011a499f
 80045e4:	01312cff 	.word	0x01312cff
 80045e8:	014ca43f 	.word	0x014ca43f
 80045ec:	016e3600 	.word	0x016e3600
 80045f0:	01a6ab1f 	.word	0x01a6ab1f
 80045f4:	01e84800 	.word	0x01e84800

080045f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d115      	bne.n	800468a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800466a:	2001      	movs	r0, #1
 800466c:	f7fc fb74 	bl	8000d58 <HAL_Delay>
      ms++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3301      	adds	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f001 fa45 	bl	8005b06 <USB_GetMode>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d01e      	beq.n	80046c0 <USB_SetCurrentMode+0x84>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b31      	cmp	r3, #49	; 0x31
 8004686:	d9f0      	bls.n	800466a <USB_SetCurrentMode+0x2e>
 8004688:	e01a      	b.n	80046c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d115      	bne.n	80046bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800469c:	2001      	movs	r0, #1
 800469e:	f7fc fb5b 	bl	8000d58 <HAL_Delay>
      ms++;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3301      	adds	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 fa2c 	bl	8005b06 <USB_GetMode>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <USB_SetCurrentMode+0x84>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b31      	cmp	r3, #49	; 0x31
 80046b8:	d9f0      	bls.n	800469c <USB_SetCurrentMode+0x60>
 80046ba:	e001      	b.n	80046c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e005      	b.n	80046cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b32      	cmp	r3, #50	; 0x32
 80046c4:	d101      	bne.n	80046ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046d4:	b084      	sub	sp, #16
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b086      	sub	sp, #24
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	e009      	b.n	8004708 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	3340      	adds	r3, #64	; 0x40
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	2200      	movs	r2, #0
 8004700:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	3301      	adds	r3, #1
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b0e      	cmp	r3, #14
 800470c:	d9f2      	bls.n	80046f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800470e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d11c      	bne.n	800474e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38
 800474c:	e00b      	b.n	8004766 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800476c:	461a      	mov	r2, r3
 800476e:	2300      	movs	r3, #0
 8004770:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004778:	4619      	mov	r1, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004780:	461a      	mov	r2, r3
 8004782:	680b      	ldr	r3, [r1, #0]
 8004784:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10c      	bne.n	80047a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004792:	2100      	movs	r1, #0
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f965 	bl	8004a64 <USB_SetDevSpeed>
 800479a:	e008      	b.n	80047ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800479c:	2101      	movs	r1, #1
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f960 	bl	8004a64 <USB_SetDevSpeed>
 80047a4:	e003      	b.n	80047ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047a6:	2103      	movs	r1, #3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f95b 	bl	8004a64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047ae:	2110      	movs	r1, #16
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8f3 	bl	800499c <USB_FlushTxFifo>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f91f 	bl	8004a04 <USB_FlushRxFifo>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d6:	461a      	mov	r2, r3
 80047d8:	2300      	movs	r3, #0
 80047da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	461a      	mov	r2, r3
 80047e4:	2300      	movs	r3, #0
 80047e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ee:	461a      	mov	r2, r3
 80047f0:	2300      	movs	r3, #0
 80047f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	e043      	b.n	8004882 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800480c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004810:	d118      	bne.n	8004844 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	461a      	mov	r2, r3
 8004826:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e013      	b.n	8004856 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	461a      	mov	r2, r3
 800483c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e008      	b.n	8004856 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004850:	461a      	mov	r2, r3
 8004852:	2300      	movs	r3, #0
 8004854:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004862:	461a      	mov	r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004874:	461a      	mov	r2, r3
 8004876:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800487a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	3301      	adds	r3, #1
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	429a      	cmp	r2, r3
 8004888:	d3b7      	bcc.n	80047fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	e043      	b.n	8004918 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048a6:	d118      	bne.n	80048da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	461a      	mov	r2, r3
 80048bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e013      	b.n	80048ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	461a      	mov	r2, r3
 80048d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e008      	b.n	80048ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	461a      	mov	r2, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f8:	461a      	mov	r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	461a      	mov	r2, r3
 800490c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004910:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3301      	adds	r3, #1
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	429a      	cmp	r2, r3
 800491e:	d3b7      	bcc.n	8004890 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800492e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004932:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004940:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f043 0210 	orr.w	r2, r3, #16
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <USB_DevInit+0x2c4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f043 0208 	orr.w	r2, r3, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d107      	bne.n	8004988 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004980:	f043 0304 	orr.w	r3, r3, #4
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004988:	7dfb      	ldrb	r3, [r7, #23]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004994:	b004      	add	sp, #16
 8004996:	4770      	bx	lr
 8004998:	803c3800 	.word	0x803c3800

0800499c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <USB_FlushTxFifo+0x64>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d901      	bls.n	80049bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e01b      	b.n	80049f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	daf2      	bge.n	80049aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	019b      	lsls	r3, r3, #6
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <USB_FlushTxFifo+0x64>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e006      	b.n	80049f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	d0f0      	beq.n	80049d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	00030d40 	.word	0x00030d40

08004a04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a11      	ldr	r2, [pc, #68]	; (8004a60 <USB_FlushRxFifo+0x5c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e018      	b.n	8004a54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	daf2      	bge.n	8004a10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2210      	movs	r2, #16
 8004a32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	3301      	adds	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <USB_FlushRxFifo+0x5c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e006      	b.n	8004a54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d0f0      	beq.n	8004a34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	00030d40 	.word	0x00030d40

08004a64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b087      	sub	sp, #28
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0306 	and.w	r3, r3, #6
 8004aae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	75fb      	strb	r3, [r7, #23]
 8004aba:	e00a      	b.n	8004ad2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d002      	beq.n	8004ac8 <USB_GetDevSpeed+0x32>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d102      	bne.n	8004ace <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	75fb      	strb	r3, [r7, #23]
 8004acc:	e001      	b.n	8004ad2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ace:	230f      	movs	r3, #15
 8004ad0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d13a      	bne.n	8004b72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	68f9      	ldr	r1, [r7, #12]
 8004b16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d155      	bne.n	8004be0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	791b      	ldrb	r3, [r3, #4]
 8004b4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	059b      	lsls	r3, r3, #22
 8004b56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	e036      	b.n	8004be0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b78:	69da      	ldr	r2, [r3, #28]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	2101      	movs	r1, #1
 8004b84:	fa01 f303 	lsl.w	r3, r1, r3
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	68f9      	ldr	r1, [r7, #12]
 8004b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11a      	bne.n	8004be0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	791b      	ldrb	r3, [r3, #4]
 8004bc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d161      	bne.n	8004cd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c22:	d11f      	bne.n	8004c64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c84:	4013      	ands	r3, r2
 8004c86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	68f9      	ldr	r1, [r7, #12]
 8004ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	0159      	lsls	r1, r3, #5
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	440b      	add	r3, r1
 8004cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4b35      	ldr	r3, [pc, #212]	; (8004da0 <USB_DeactivateEndpoint+0x1b0>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]
 8004cce:	e060      	b.n	8004d92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ce6:	d11f      	bne.n	8004d28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	2101      	movs	r1, #1
 8004d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	43db      	mvns	r3, r3
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d48:	4013      	ands	r3, r2
 8004d4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	43db      	mvns	r3, r3
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	0159      	lsls	r1, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	440b      	add	r3, r1
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <USB_DeactivateEndpoint+0x1b4>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	ec337800 	.word	0xec337800
 8004da4:	eff37800 	.word	0xeff37800

08004da8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	f040 815c 	bne.w	8005082 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d132      	bne.n	8004e38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e30:	0cdb      	lsrs	r3, r3, #19
 8004e32:	04db      	lsls	r3, r3, #19
 8004e34:	6113      	str	r3, [r2, #16]
 8004e36:	e074      	b.n	8004f22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	0cdb      	lsrs	r3, r3, #19
 8004e54:	04db      	lsls	r3, r3, #19
 8004e56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6999      	ldr	r1, [r3, #24]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	440b      	add	r3, r1
 8004e94:	1e59      	subs	r1, r3, #1
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e9e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ea0:	4b9d      	ldr	r3, [pc, #628]	; (8005118 <USB_EPStartXfer+0x370>)
 8004ea2:	400b      	ands	r3, r1
 8004ea4:	69b9      	ldr	r1, [r7, #24]
 8004ea6:	0148      	lsls	r0, r1, #5
 8004ea8:	69f9      	ldr	r1, [r7, #28]
 8004eaa:	4401      	add	r1, r0
 8004eac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	0148      	lsls	r0, r1, #5
 8004ece:	69f9      	ldr	r1, [r7, #28]
 8004ed0:	4401      	add	r1, r0
 8004ed2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	791b      	ldrb	r3, [r3, #4]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d11f      	bne.n	8004f22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004efc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d14b      	bne.n	8004fc0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d009      	beq.n	8004f44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	791b      	ldrb	r3, [r3, #4]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d128      	bne.n	8004f9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d110      	bne.n	8004f7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	e00f      	b.n	8004f9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	e133      	b.n	8005228 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fde:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	791b      	ldrb	r3, [r3, #4]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d015      	beq.n	8005014 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 811b 	beq.w	8005228 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	2101      	movs	r1, #1
 8005004:	fa01 f303 	lsl.w	r3, r1, r3
 8005008:	69f9      	ldr	r1, [r7, #28]
 800500a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800500e:	4313      	orrs	r3, r2
 8005010:	634b      	str	r3, [r1, #52]	; 0x34
 8005012:	e109      	b.n	8005228 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d110      	bne.n	8005046 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	e00f      	b.n	8005066 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005064:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6919      	ldr	r1, [r3, #16]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	b298      	uxth	r0, r3
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	4603      	mov	r3, r0
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fade 	bl	800563c <USB_WritePacket>
 8005080:	e0d2      	b.n	8005228 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800509c:	0cdb      	lsrs	r3, r3, #19
 800509e:	04db      	lsls	r3, r3, #19
 80050a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d126      	bne.n	800511c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e4:	69b9      	ldr	r1, [r7, #24]
 80050e6:	0148      	lsls	r0, r1, #5
 80050e8:	69f9      	ldr	r1, [r7, #28]
 80050ea:	4401      	add	r1, r0
 80050ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050f0:	4313      	orrs	r3, r2
 80050f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005112:	6113      	str	r3, [r2, #16]
 8005114:	e03a      	b.n	800518c <USB_EPStartXfer+0x3e4>
 8005116:	bf00      	nop
 8005118:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4413      	add	r3, r2
 8005126:	1e5a      	subs	r2, r3, #1
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	8afa      	ldrh	r2, [r7, #22]
 8005138:	fb03 f202 	mul.w	r2, r3, r2
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	8afb      	ldrh	r3, [r7, #22]
 8005150:	04d9      	lsls	r1, r3, #19
 8005152:	4b38      	ldr	r3, [pc, #224]	; (8005234 <USB_EPStartXfer+0x48c>)
 8005154:	400b      	ands	r3, r1
 8005156:	69b9      	ldr	r1, [r7, #24]
 8005158:	0148      	lsls	r0, r1, #5
 800515a:	69f9      	ldr	r1, [r7, #28]
 800515c:	4401      	add	r1, r0
 800515e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005162:	4313      	orrs	r3, r2
 8005164:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	0148      	lsls	r0, r1, #5
 8005180:	69f9      	ldr	r1, [r7, #28]
 8005182:	4401      	add	r1, r0
 8005184:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005188:	4313      	orrs	r3, r2
 800518a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d10d      	bne.n	80051ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6919      	ldr	r1, [r3, #16]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	460a      	mov	r2, r1
 80051ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	791b      	ldrb	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d128      	bne.n	8005208 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d110      	bne.n	80051e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e00f      	b.n	8005208 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005206:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	1ff80000 	.word	0x1ff80000

08005238 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b01      	cmp	r3, #1
 8005256:	f040 80ce 	bne.w	80053f6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d132      	bne.n	80052c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005280:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005284:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c0:	0cdb      	lsrs	r3, r3, #19
 80052c2:	04db      	lsls	r3, r3, #19
 80052c4:	6113      	str	r3, [r2, #16]
 80052c6:	e04e      	b.n	8005366 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e2:	0cdb      	lsrs	r3, r3, #19
 80052e4:	04db      	lsls	r3, r3, #19
 80052e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005302:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005306:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800530a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	699a      	ldr	r2, [r3, #24]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	429a      	cmp	r2, r3
 8005316:	d903      	bls.n	8005320 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800533e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005356:	6939      	ldr	r1, [r7, #16]
 8005358:	0148      	lsls	r0, r1, #5
 800535a:	6979      	ldr	r1, [r7, #20]
 800535c:	4401      	add	r1, r0
 800535e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005362:	4313      	orrs	r3, r2
 8005364:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d11e      	bne.n	80053aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d009      	beq.n	8005388 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	461a      	mov	r2, r3
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	e097      	b.n	80054da <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8083 	beq.w	80054da <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	2101      	movs	r1, #1
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	6979      	ldr	r1, [r7, #20]
 80053ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053f0:	4313      	orrs	r3, r2
 80053f2:	634b      	str	r3, [r1, #52]	; 0x34
 80053f4:	e071      	b.n	80054da <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005410:	0cdb      	lsrs	r3, r3, #19
 8005412:	04db      	lsls	r3, r3, #19
 8005414:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005430:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005434:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005438:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	0151      	lsls	r1, r2, #5
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	440a      	add	r2, r1
 8005468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005470:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005488:	6939      	ldr	r1, [r7, #16]
 800548a:	0148      	lsls	r0, r1, #5
 800548c:	6979      	ldr	r1, [r7, #20]
 800548e:	4401      	add	r1, r0
 8005490:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005494:	4313      	orrs	r3, r2
 8005496:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d10d      	bne.n	80054ba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d009      	beq.n	80054ba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6919      	ldr	r1, [r3, #16]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	460a      	mov	r2, r1
 80054b8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d14a      	bne.n	800559c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551e:	f040 8086 	bne.w	800562e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	7812      	ldrb	r2, [r2, #0]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005540:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005544:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005568:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f242 7210 	movw	r2, #10000	; 0x2710
 8005576:	4293      	cmp	r3, r2
 8005578:	d902      	bls.n	8005580 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	75fb      	strb	r3, [r7, #23]
          break;
 800557e:	e056      	b.n	800562e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005598:	d0e7      	beq.n	800556a <USB_EPStopXfer+0x82>
 800559a:	e048      	b.n	800562e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b4:	d13b      	bne.n	800562e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	7812      	ldrb	r2, [r2, #0]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3301      	adds	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f242 7210 	movw	r2, #10000	; 0x2710
 800560a:	4293      	cmp	r3, r2
 800560c:	d902      	bls.n	8005614 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	75fb      	strb	r3, [r7, #23]
          break;
 8005612:	e00c      	b.n	800562e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800562c:	d0e7      	beq.n	80055fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800562e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005630:	4618      	mov	r0, r3
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800563c:	b480      	push	{r7}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	4611      	mov	r1, r2
 8005648:	461a      	mov	r2, r3
 800564a:	460b      	mov	r3, r1
 800564c:	71fb      	strb	r3, [r7, #7]
 800564e:	4613      	mov	r3, r2
 8005650:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800565a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d123      	bne.n	80056aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005662:	88bb      	ldrh	r3, [r7, #4]
 8005664:	3303      	adds	r3, #3
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800566a:	2300      	movs	r3, #0
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	e018      	b.n	80056a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	031a      	lsls	r2, r3, #12
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4413      	add	r3, r2
 8005678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567c:	461a      	mov	r2, r3
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	3301      	adds	r3, #1
 8005688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3301      	adds	r3, #1
 800568e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	3301      	adds	r3, #1
 8005694:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3301      	adds	r3, #1
 800569a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	3301      	adds	r3, #1
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d3e2      	bcc.n	8005670 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3724      	adds	r7, #36	; 0x24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b08b      	sub	sp, #44	; 0x2c
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056de:	2300      	movs	r3, #0
 80056e0:	623b      	str	r3, [r7, #32]
 80056e2:	e014      	b.n	800570e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	3301      	adds	r3, #1
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	3301      	adds	r3, #1
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	3301      	adds	r3, #1
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	3301      	adds	r3, #1
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	3301      	adds	r3, #1
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	6a3a      	ldr	r2, [r7, #32]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	429a      	cmp	r2, r3
 8005714:	d3e6      	bcc.n	80056e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005716:	8bfb      	ldrh	r3, [r7, #30]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01e      	beq.n	800575a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005726:	461a      	mov	r2, r3
 8005728:	f107 0310 	add.w	r3, r7, #16
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	fa22 f303 	lsr.w	r3, r2, r3
 800573c:	b2da      	uxtb	r2, r3
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	701a      	strb	r2, [r3, #0]
      i++;
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	3301      	adds	r3, #1
 8005746:	623b      	str	r3, [r7, #32]
      pDest++;
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	3301      	adds	r3, #1
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800574e:	8bfb      	ldrh	r3, [r7, #30]
 8005750:	3b01      	subs	r3, #1
 8005752:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005754:	8bfb      	ldrh	r3, [r7, #30]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ea      	bne.n	8005730 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800575c:	4618      	mov	r0, r3
 800575e:	372c      	adds	r7, #44	; 0x2c
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d12c      	bne.n	80057de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	db12      	blt.n	80057bc <USB_EPSetStall+0x54>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00f      	beq.n	80057bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e02b      	b.n	8005836 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	db12      	blt.n	8005816 <USB_EPSetStall+0xae>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00f      	beq.n	8005816 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005810:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005814:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005834:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d128      	bne.n	80058b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	0151      	lsls	r1, r2, #5
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	440a      	add	r2, r1
 8005876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800587e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	791b      	ldrb	r3, [r3, #4]
 8005884:	2b03      	cmp	r3, #3
 8005886:	d003      	beq.n	8005890 <USB_EPClearStall+0x4c>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	791b      	ldrb	r3, [r3, #4]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d138      	bne.n	8005902 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e027      	b.n	8005902 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	791b      	ldrb	r3, [r3, #4]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d003      	beq.n	80058e2 <USB_EPClearStall+0x9e>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	791b      	ldrb	r3, [r3, #4]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d10f      	bne.n	8005902 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005900:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005932:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005976:	f023 0303 	bic.w	r3, r3, #3
 800597a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800598a:	f023 0302 	bic.w	r3, r3, #2
 800598e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059b8:	f023 0303 	bic.w	r3, r3, #3
 80059bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059cc:	f043 0302 	orr.w	r3, r3, #2
 80059d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4013      	ands	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059f8:	68fb      	ldr	r3, [r7, #12]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	b29b      	uxth	r3, r3
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b087      	sub	sp, #28
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005acc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ada:	01db      	lsls	r3, r3, #7
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4013      	ands	r3, r2
 8005af6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005af8:	68bb      	ldr	r3, [r7, #8]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0301 	and.w	r3, r3, #1
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b40:	f023 0307 	bic.w	r3, r3, #7
 8005b44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	460b      	mov	r3, r1
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	333c      	adds	r3, #60	; 0x3c
 8005b7e:	3304      	adds	r3, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <USB_EP0_OutStart+0xb8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d90a      	bls.n	8005ba2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9c:	d101      	bne.n	8005ba2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e037      	b.n	8005c12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	461a      	mov	r2, r3
 8005baa:	2300      	movs	r3, #0
 8005bac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd0:	f043 0318 	orr.w	r3, r3, #24
 8005bd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005be8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d10f      	bne.n	8005c10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	4f54300a 	.word	0x4f54300a

08005c24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a13      	ldr	r2, [pc, #76]	; (8005c88 <USB_CoreReset+0x64>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e01b      	b.n	8005c7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	daf2      	bge.n	8005c30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f043 0201 	orr.w	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a09      	ldr	r2, [pc, #36]	; (8005c88 <USB_CoreReset+0x64>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d901      	bls.n	8005c6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e006      	b.n	8005c7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d0f0      	beq.n	8005c5a <USB_CoreReset+0x36>

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	00030d40 	.word	0x00030d40

08005c8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c9c:	f002 fc32 	bl	8008504 <USBD_static_malloc>
 8005ca0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	32b0      	adds	r2, #176	; 0xb0
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e0d4      	b.n	8005e66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005cbc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f002 fc94 	bl	80085f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	32b0      	adds	r2, #176	; 0xb0
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	32b0      	adds	r2, #176	; 0xb0
 8005ce2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7c1b      	ldrb	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d138      	bne.n	8005d66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005cf4:	4b5e      	ldr	r3, [pc, #376]	; (8005e70 <USBD_CDC_Init+0x1e4>)
 8005cf6:	7819      	ldrb	r1, [r3, #0]
 8005cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f002 fadd 	bl	80082be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d04:	4b5a      	ldr	r3, [pc, #360]	; (8005e70 <USBD_CDC_Init+0x1e4>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f003 020f 	and.w	r2, r3, #15
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	440b      	add	r3, r1
 8005d18:	3324      	adds	r3, #36	; 0x24
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d1e:	4b55      	ldr	r3, [pc, #340]	; (8005e74 <USBD_CDC_Init+0x1e8>)
 8005d20:	7819      	ldrb	r1, [r3, #0]
 8005d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d26:	2202      	movs	r2, #2
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f002 fac8 	bl	80082be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d2e:	4b51      	ldr	r3, [pc, #324]	; (8005e74 <USBD_CDC_Init+0x1e8>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f003 020f 	and.w	r2, r3, #15
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d46:	2201      	movs	r2, #1
 8005d48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d4a:	4b4b      	ldr	r3, [pc, #300]	; (8005e78 <USBD_CDC_Init+0x1ec>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f003 020f 	and.w	r2, r3, #15
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3326      	adds	r3, #38	; 0x26
 8005d60:	2210      	movs	r2, #16
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e035      	b.n	8005dd2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d66:	4b42      	ldr	r3, [pc, #264]	; (8005e70 <USBD_CDC_Init+0x1e4>)
 8005d68:	7819      	ldrb	r1, [r3, #0]
 8005d6a:	2340      	movs	r3, #64	; 0x40
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f002 faa5 	bl	80082be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d74:	4b3e      	ldr	r3, [pc, #248]	; (8005e70 <USBD_CDC_Init+0x1e4>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	3324      	adds	r3, #36	; 0x24
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d8e:	4b39      	ldr	r3, [pc, #228]	; (8005e74 <USBD_CDC_Init+0x1e8>)
 8005d90:	7819      	ldrb	r1, [r3, #0]
 8005d92:	2340      	movs	r3, #64	; 0x40
 8005d94:	2202      	movs	r2, #2
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f002 fa91 	bl	80082be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d9c:	4b35      	ldr	r3, [pc, #212]	; (8005e74 <USBD_CDC_Init+0x1e8>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f003 020f 	and.w	r2, r3, #15
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005db4:	2201      	movs	r2, #1
 8005db6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005db8:	4b2f      	ldr	r3, [pc, #188]	; (8005e78 <USBD_CDC_Init+0x1ec>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f003 020f 	and.w	r2, r3, #15
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	3326      	adds	r3, #38	; 0x26
 8005dce:	2210      	movs	r2, #16
 8005dd0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dd2:	4b29      	ldr	r3, [pc, #164]	; (8005e78 <USBD_CDC_Init+0x1ec>)
 8005dd4:	7819      	ldrb	r1, [r3, #0]
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	2203      	movs	r2, #3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f002 fa6f 	bl	80082be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005de0:	4b25      	ldr	r3, [pc, #148]	; (8005e78 <USBD_CDC_Init+0x1ec>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	f003 020f 	and.w	r2, r3, #15
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	3324      	adds	r3, #36	; 0x24
 8005df6:	2201      	movs	r2, #1
 8005df8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	33b0      	adds	r3, #176	; 0xb0
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e018      	b.n	8005e66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	7c1b      	ldrb	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e3c:	4b0d      	ldr	r3, [pc, #52]	; (8005e74 <USBD_CDC_Init+0x1e8>)
 8005e3e:	7819      	ldrb	r1, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f002 fb26 	bl	800849c <USBD_LL_PrepareReceive>
 8005e50:	e008      	b.n	8005e64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e52:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <USBD_CDC_Init+0x1e8>)
 8005e54:	7819      	ldrb	r1, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e5c:	2340      	movs	r3, #64	; 0x40
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f002 fb1c 	bl	800849c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000093 	.word	0x20000093
 8005e74:	20000094 	.word	0x20000094
 8005e78:	20000095 	.word	0x20000095

08005e7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e88:	4b3a      	ldr	r3, [pc, #232]	; (8005f74 <USBD_CDC_DeInit+0xf8>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f002 fa3b 	bl	800830a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e94:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <USBD_CDC_DeInit+0xf8>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f003 020f 	and.w	r2, r3, #15
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	3324      	adds	r3, #36	; 0x24
 8005eaa:	2200      	movs	r2, #0
 8005eac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005eae:	4b32      	ldr	r3, [pc, #200]	; (8005f78 <USBD_CDC_DeInit+0xfc>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f002 fa28 	bl	800830a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005eba:	4b2f      	ldr	r3, [pc, #188]	; (8005f78 <USBD_CDC_DeInit+0xfc>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ed6:	4b29      	ldr	r3, [pc, #164]	; (8005f7c <USBD_CDC_DeInit+0x100>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f002 fa14 	bl	800830a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ee2:	4b26      	ldr	r3, [pc, #152]	; (8005f7c <USBD_CDC_DeInit+0x100>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	f003 020f 	and.w	r2, r3, #15
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3324      	adds	r3, #36	; 0x24
 8005ef8:	2200      	movs	r2, #0
 8005efa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005efc:	4b1f      	ldr	r3, [pc, #124]	; (8005f7c <USBD_CDC_DeInit+0x100>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 020f 	and.w	r2, r3, #15
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	3326      	adds	r3, #38	; 0x26
 8005f12:	2200      	movs	r2, #0
 8005f14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	32b0      	adds	r2, #176	; 0xb0
 8005f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01f      	beq.n	8005f68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	33b0      	adds	r3, #176	; 0xb0
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	32b0      	adds	r2, #176	; 0xb0
 8005f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f002 fae8 	bl	8008520 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	32b0      	adds	r2, #176	; 0xb0
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000093 	.word	0x20000093
 8005f78:	20000094 	.word	0x20000094
 8005f7c:	20000095 	.word	0x20000095

08005f80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	32b0      	adds	r2, #176	; 0xb0
 8005f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e0bf      	b.n	8006130 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d050      	beq.n	800605e <USBD_CDC_Setup+0xde>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	f040 80af 	bne.w	8006120 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	88db      	ldrh	r3, [r3, #6]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d03a      	beq.n	8006040 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	da1b      	bge.n	800600c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	33b0      	adds	r3, #176	; 0xb0
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005fea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	88d2      	ldrh	r2, [r2, #6]
 8005ff0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	88db      	ldrh	r3, [r3, #6]
 8005ff6:	2b07      	cmp	r3, #7
 8005ff8:	bf28      	it	cs
 8005ffa:	2307      	movcs	r3, #7
 8005ffc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	89fa      	ldrh	r2, [r7, #14]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fd43 	bl	8007a90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800600a:	e090      	b.n	800612e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	785a      	ldrb	r2, [r3, #1]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	88db      	ldrh	r3, [r3, #6]
 800601a:	2b3f      	cmp	r3, #63	; 0x3f
 800601c:	d803      	bhi.n	8006026 <USBD_CDC_Setup+0xa6>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	88db      	ldrh	r3, [r3, #6]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	e000      	b.n	8006028 <USBD_CDC_Setup+0xa8>
 8006026:	2240      	movs	r2, #64	; 0x40
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800602e:	6939      	ldr	r1, [r7, #16]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006036:	461a      	mov	r2, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 fd55 	bl	8007ae8 <USBD_CtlPrepareRx>
      break;
 800603e:	e076      	b.n	800612e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	33b0      	adds	r3, #176	; 0xb0
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	7850      	ldrb	r0, [r2, #1]
 8006056:	2200      	movs	r2, #0
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	4798      	blx	r3
      break;
 800605c:	e067      	b.n	800612e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	2b0b      	cmp	r3, #11
 8006064:	d851      	bhi.n	800610a <USBD_CDC_Setup+0x18a>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <USBD_CDC_Setup+0xec>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	0800609d 	.word	0x0800609d
 8006070:	08006119 	.word	0x08006119
 8006074:	0800610b 	.word	0x0800610b
 8006078:	0800610b 	.word	0x0800610b
 800607c:	0800610b 	.word	0x0800610b
 8006080:	0800610b 	.word	0x0800610b
 8006084:	0800610b 	.word	0x0800610b
 8006088:	0800610b 	.word	0x0800610b
 800608c:	0800610b 	.word	0x0800610b
 8006090:	0800610b 	.word	0x0800610b
 8006094:	080060c7 	.word	0x080060c7
 8006098:	080060f1 	.word	0x080060f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d107      	bne.n	80060b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060a8:	f107 030a 	add.w	r3, r7, #10
 80060ac:	2202      	movs	r2, #2
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 fced 	bl	8007a90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060b6:	e032      	b.n	800611e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fc77 	bl	80079ae <USBD_CtlError>
            ret = USBD_FAIL;
 80060c0:	2303      	movs	r3, #3
 80060c2:	75fb      	strb	r3, [r7, #23]
          break;
 80060c4:	e02b      	b.n	800611e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d107      	bne.n	80060e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060d2:	f107 030d 	add.w	r3, r7, #13
 80060d6:	2201      	movs	r2, #1
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 fcd8 	bl	8007a90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060e0:	e01d      	b.n	800611e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fc62 	bl	80079ae <USBD_CtlError>
            ret = USBD_FAIL;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
          break;
 80060ee:	e016      	b.n	800611e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d00f      	beq.n	800611c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 fc55 	bl	80079ae <USBD_CtlError>
            ret = USBD_FAIL;
 8006104:	2303      	movs	r3, #3
 8006106:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006108:	e008      	b.n	800611c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 fc4e 	bl	80079ae <USBD_CtlError>
          ret = USBD_FAIL;
 8006112:	2303      	movs	r3, #3
 8006114:	75fb      	strb	r3, [r7, #23]
          break;
 8006116:	e002      	b.n	800611e <USBD_CDC_Setup+0x19e>
          break;
 8006118:	bf00      	nop
 800611a:	e008      	b.n	800612e <USBD_CDC_Setup+0x1ae>
          break;
 800611c:	bf00      	nop
      }
      break;
 800611e:	e006      	b.n	800612e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fc43 	bl	80079ae <USBD_CtlError>
      ret = USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	75fb      	strb	r3, [r7, #23]
      break;
 800612c:	bf00      	nop
  }

  return (uint8_t)ret;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800614a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32b0      	adds	r2, #176	; 0xb0
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800615e:	2303      	movs	r3, #3
 8006160:	e065      	b.n	800622e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	32b0      	adds	r2, #176	; 0xb0
 800616c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006170:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	f003 020f 	and.w	r2, r3, #15
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	3318      	adds	r3, #24
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d02f      	beq.n	80061ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 020f 	and.w	r2, r3, #15
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	3318      	adds	r3, #24
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 010f 	and.w	r1, r3, #15
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	460b      	mov	r3, r1
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	440b      	add	r3, r1
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4403      	add	r3, r0
 80061b4:	3348      	adds	r3, #72	; 0x48
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d112      	bne.n	80061ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	3318      	adds	r3, #24
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061de:	78f9      	ldrb	r1, [r7, #3]
 80061e0:	2300      	movs	r3, #0
 80061e2:	2200      	movs	r2, #0
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f002 f938 	bl	800845a <USBD_LL_Transmit>
 80061ea:	e01f      	b.n	800622c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	33b0      	adds	r3, #176	; 0xb0
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d010      	beq.n	800622c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	33b0      	adds	r3, #176	; 0xb0
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	32b0      	adds	r2, #176	; 0xb0
 800624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006250:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	32b0      	adds	r2, #176	; 0xb0
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006264:	2303      	movs	r3, #3
 8006266:	e01a      	b.n	800629e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f002 f936 	bl	80084de <USBD_LL_GetRxDataSize>
 8006272:	4602      	mov	r2, r0
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	33b0      	adds	r3, #176	; 0xb0
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006298:	4611      	mov	r1, r2
 800629a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	32b0      	adds	r2, #176	; 0xb0
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e025      	b.n	8006314 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	33b0      	adds	r3, #176	; 0xb0
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01a      	beq.n	8006312 <USBD_CDC_EP0_RxReady+0x6c>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062e2:	2bff      	cmp	r3, #255	; 0xff
 80062e4:	d015      	beq.n	8006312 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	33b0      	adds	r3, #176	; 0xb0
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80062fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006306:	b292      	uxth	r2, r2
 8006308:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	; 0xff
 800630e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006324:	2182      	movs	r1, #130	; 0x82
 8006326:	4818      	ldr	r0, [pc, #96]	; (8006388 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006328:	f000 fd09 	bl	8006d3e <USBD_GetEpDesc>
 800632c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800632e:	2101      	movs	r1, #1
 8006330:	4815      	ldr	r0, [pc, #84]	; (8006388 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006332:	f000 fd04 	bl	8006d3e <USBD_GetEpDesc>
 8006336:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006338:	2181      	movs	r1, #129	; 0x81
 800633a:	4813      	ldr	r0, [pc, #76]	; (8006388 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800633c:	f000 fcff 	bl	8006d3e <USBD_GetEpDesc>
 8006340:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2210      	movs	r2, #16
 800634c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d006      	beq.n	8006362 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2200      	movs	r2, #0
 8006358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800635c:	711a      	strb	r2, [r3, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d006      	beq.n	8006376 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006370:	711a      	strb	r2, [r3, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2243      	movs	r2, #67	; 0x43
 800637a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800637c:	4b02      	ldr	r3, [pc, #8]	; (8006388 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000050 	.word	0x20000050

0800638c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006394:	2182      	movs	r1, #130	; 0x82
 8006396:	4818      	ldr	r0, [pc, #96]	; (80063f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006398:	f000 fcd1 	bl	8006d3e <USBD_GetEpDesc>
 800639c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800639e:	2101      	movs	r1, #1
 80063a0:	4815      	ldr	r0, [pc, #84]	; (80063f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063a2:	f000 fccc 	bl	8006d3e <USBD_GetEpDesc>
 80063a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063a8:	2181      	movs	r1, #129	; 0x81
 80063aa:	4813      	ldr	r0, [pc, #76]	; (80063f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063ac:	f000 fcc7 	bl	8006d3e <USBD_GetEpDesc>
 80063b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2210      	movs	r2, #16
 80063bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d006      	beq.n	80063d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2200      	movs	r2, #0
 80063c8:	711a      	strb	r2, [r3, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f042 0202 	orr.w	r2, r2, #2
 80063d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d006      	beq.n	80063e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	711a      	strb	r2, [r3, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f042 0202 	orr.w	r2, r2, #2
 80063e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2243      	movs	r2, #67	; 0x43
 80063ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063ec:	4b02      	ldr	r3, [pc, #8]	; (80063f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000050 	.word	0x20000050

080063fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006404:	2182      	movs	r1, #130	; 0x82
 8006406:	4818      	ldr	r0, [pc, #96]	; (8006468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006408:	f000 fc99 	bl	8006d3e <USBD_GetEpDesc>
 800640c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800640e:	2101      	movs	r1, #1
 8006410:	4815      	ldr	r0, [pc, #84]	; (8006468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006412:	f000 fc94 	bl	8006d3e <USBD_GetEpDesc>
 8006416:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006418:	2181      	movs	r1, #129	; 0x81
 800641a:	4813      	ldr	r0, [pc, #76]	; (8006468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800641c:	f000 fc8f 	bl	8006d3e <USBD_GetEpDesc>
 8006420:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2210      	movs	r2, #16
 800642c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d006      	beq.n	8006442 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	2200      	movs	r2, #0
 8006438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800643c:	711a      	strb	r2, [r3, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d006      	beq.n	8006456 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006450:	711a      	strb	r2, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2243      	movs	r2, #67	; 0x43
 800645a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800645c:	4b02      	ldr	r3, [pc, #8]	; (8006468 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000050 	.word	0x20000050

0800646c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	220a      	movs	r2, #10
 8006478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800647a:	4b03      	ldr	r3, [pc, #12]	; (8006488 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	2000000c 	.word	0x2000000c

0800648c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800649c:	2303      	movs	r3, #3
 800649e:	e009      	b.n	80064b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	33b0      	adds	r3, #176	; 0xb0
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	32b0      	adds	r2, #176	; 0xb0
 80064d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064da:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e008      	b.n	80064f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	32b0      	adds	r2, #176	; 0xb0
 8006518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006524:	2303      	movs	r3, #3
 8006526:	e004      	b.n	8006532 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
	...

08006540 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	32b0      	adds	r2, #176	; 0xb0
 8006552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006556:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	32b0      	adds	r2, #176	; 0xb0
 8006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800656a:	2303      	movs	r3, #3
 800656c:	e018      	b.n	80065a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	7c1b      	ldrb	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <USBD_CDC_ReceivePacket+0x68>)
 8006578:	7819      	ldrb	r1, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 ff89 	bl	800849c <USBD_LL_PrepareReceive>
 800658a:	e008      	b.n	800659e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <USBD_CDC_ReceivePacket+0x68>)
 800658e:	7819      	ldrb	r1, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006596:	2340      	movs	r3, #64	; 0x40
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 ff7f 	bl	800849c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20000094 	.word	0x20000094

080065ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e01f      	b.n	8006604 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	79fa      	ldrb	r2, [r7, #7]
 80065f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f001 fdf9 	bl	80081f0 <USBD_LL_Init>
 80065fe:	4603      	mov	r3, r0
 8006600:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006602:	7dfb      	ldrb	r3, [r7, #23]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006620:	2303      	movs	r3, #3
 8006622:	e025      	b.n	8006670 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	32ae      	adds	r2, #174	; 0xae
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00f      	beq.n	8006660 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32ae      	adds	r2, #174	; 0xae
 800664a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006650:	f107 020e 	add.w	r2, r7, #14
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	4602      	mov	r2, r0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 fe01 	bl	8008288 <USBD_LL_Start>
 8006686:	4603      	mov	r3, r0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006698:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800669a:	4618      	mov	r0, r3
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d009      	beq.n	80066d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	78fa      	ldrb	r2, [r7, #3]
 80066ca:	4611      	mov	r1, r2
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
 80066d0:	4603      	mov	r3, r0
 80066d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	4611      	mov	r1, r2
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006704:	2303      	movs	r3, #3
 8006706:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	f001 f908 	bl	800793a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006738:	461a      	mov	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006746:	f003 031f 	and.w	r3, r3, #31
 800674a:	2b02      	cmp	r3, #2
 800674c:	d01a      	beq.n	8006784 <USBD_LL_SetupStage+0x72>
 800674e:	2b02      	cmp	r3, #2
 8006750:	d822      	bhi.n	8006798 <USBD_LL_SetupStage+0x86>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d002      	beq.n	800675c <USBD_LL_SetupStage+0x4a>
 8006756:	2b01      	cmp	r3, #1
 8006758:	d00a      	beq.n	8006770 <USBD_LL_SetupStage+0x5e>
 800675a:	e01d      	b.n	8006798 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fb5f 	bl	8006e28 <USBD_StdDevReq>
 800676a:	4603      	mov	r3, r0
 800676c:	73fb      	strb	r3, [r7, #15]
      break;
 800676e:	e020      	b.n	80067b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fbc7 	bl	8006f0c <USBD_StdItfReq>
 800677e:	4603      	mov	r3, r0
 8006780:	73fb      	strb	r3, [r7, #15]
      break;
 8006782:	e016      	b.n	80067b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fc29 	bl	8006fe4 <USBD_StdEPReq>
 8006792:	4603      	mov	r3, r0
 8006794:	73fb      	strb	r3, [r7, #15]
      break;
 8006796:	e00c      	b.n	80067b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800679e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fdce 	bl	8008348 <USBD_LL_StallEP>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
      break;
 80067b0:	bf00      	nop
  }

  return ret;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	460b      	mov	r3, r1
 80067c6:	607a      	str	r2, [r7, #4]
 80067c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80067ce:	7afb      	ldrb	r3, [r7, #11]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d16e      	bne.n	80068b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	f040 8098 	bne.w	8006918 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d913      	bls.n	800681c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	1ad2      	subs	r2, r2, r3
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	4293      	cmp	r3, r2
 800680c:	bf28      	it	cs
 800680e:	4613      	movcs	r3, r2
 8006810:	461a      	mov	r2, r3
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f001 f984 	bl	8007b22 <USBD_CtlContinueRx>
 800681a:	e07d      	b.n	8006918 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006822:	f003 031f 	and.w	r3, r3, #31
 8006826:	2b02      	cmp	r3, #2
 8006828:	d014      	beq.n	8006854 <USBD_LL_DataOutStage+0x98>
 800682a:	2b02      	cmp	r3, #2
 800682c:	d81d      	bhi.n	800686a <USBD_LL_DataOutStage+0xae>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <USBD_LL_DataOutStage+0x7c>
 8006832:	2b01      	cmp	r3, #1
 8006834:	d003      	beq.n	800683e <USBD_LL_DataOutStage+0x82>
 8006836:	e018      	b.n	800686a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	75bb      	strb	r3, [r7, #22]
            break;
 800683c:	e018      	b.n	8006870 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006844:	b2db      	uxtb	r3, r3
 8006846:	4619      	mov	r1, r3
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fa5e 	bl	8006d0a <USBD_CoreFindIF>
 800684e:	4603      	mov	r3, r0
 8006850:	75bb      	strb	r3, [r7, #22]
            break;
 8006852:	e00d      	b.n	8006870 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800685a:	b2db      	uxtb	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fa60 	bl	8006d24 <USBD_CoreFindEP>
 8006864:	4603      	mov	r3, r0
 8006866:	75bb      	strb	r3, [r7, #22]
            break;
 8006868:	e002      	b.n	8006870 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	75bb      	strb	r3, [r7, #22]
            break;
 800686e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006870:	7dbb      	ldrb	r3, [r7, #22]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d119      	bne.n	80068aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b03      	cmp	r3, #3
 8006880:	d113      	bne.n	80068aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006882:	7dba      	ldrb	r2, [r7, #22]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	32ae      	adds	r2, #174	; 0xae
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006892:	7dba      	ldrb	r2, [r7, #22]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800689a:	7dba      	ldrb	r2, [r7, #22]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	32ae      	adds	r2, #174	; 0xae
 80068a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f001 f94a 	bl	8007b44 <USBD_CtlSendStatus>
 80068b0:	e032      	b.n	8006918 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	4619      	mov	r1, r3
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fa31 	bl	8006d24 <USBD_CoreFindEP>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068c6:	7dbb      	ldrb	r3, [r7, #22]
 80068c8:	2bff      	cmp	r3, #255	; 0xff
 80068ca:	d025      	beq.n	8006918 <USBD_LL_DataOutStage+0x15c>
 80068cc:	7dbb      	ldrb	r3, [r7, #22]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d122      	bne.n	8006918 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d117      	bne.n	800690e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80068de:	7dba      	ldrb	r2, [r7, #22]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	32ae      	adds	r2, #174	; 0xae
 80068e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00f      	beq.n	800690e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80068ee:	7dba      	ldrb	r2, [r7, #22]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80068f6:	7dba      	ldrb	r2, [r7, #22]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	32ae      	adds	r2, #174	; 0xae
 80068fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	7afa      	ldrb	r2, [r7, #11]
 8006904:	4611      	mov	r1, r2
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	4798      	blx	r3
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	e000      	b.n	800691a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b086      	sub	sp, #24
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	460b      	mov	r3, r1
 800692c:	607a      	str	r2, [r7, #4]
 800692e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d16f      	bne.n	8006a16 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3314      	adds	r3, #20
 800693a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006942:	2b02      	cmp	r3, #2
 8006944:	d15a      	bne.n	80069fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	429a      	cmp	r2, r3
 8006950:	d914      	bls.n	800697c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	461a      	mov	r2, r3
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f001 f8ac 	bl	8007ac6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800696e:	2300      	movs	r3, #0
 8006970:	2200      	movs	r2, #0
 8006972:	2100      	movs	r1, #0
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f001 fd91 	bl	800849c <USBD_LL_PrepareReceive>
 800697a:	e03f      	b.n	80069fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	429a      	cmp	r2, r3
 8006986:	d11c      	bne.n	80069c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006990:	429a      	cmp	r2, r3
 8006992:	d316      	bcc.n	80069c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800699e:	429a      	cmp	r2, r3
 80069a0:	d20f      	bcs.n	80069c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069a2:	2200      	movs	r2, #0
 80069a4:	2100      	movs	r1, #0
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f001 f88d 	bl	8007ac6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069b4:	2300      	movs	r3, #0
 80069b6:	2200      	movs	r2, #0
 80069b8:	2100      	movs	r1, #0
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f001 fd6e 	bl	800849c <USBD_LL_PrepareReceive>
 80069c0:	e01c      	b.n	80069fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d10f      	bne.n	80069ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d009      	beq.n	80069ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ee:	2180      	movs	r1, #128	; 0x80
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 fca9 	bl	8008348 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f001 f8b7 	bl	8007b6a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d03a      	beq.n	8006a7c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fe42 	bl	8006690 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a14:	e032      	b.n	8006a7c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006a16:	7afb      	ldrb	r3, [r7, #11]
 8006a18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	4619      	mov	r1, r3
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f97f 	bl	8006d24 <USBD_CoreFindEP>
 8006a26:	4603      	mov	r3, r0
 8006a28:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	2bff      	cmp	r3, #255	; 0xff
 8006a2e:	d025      	beq.n	8006a7c <USBD_LL_DataInStage+0x15a>
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d122      	bne.n	8006a7c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d11c      	bne.n	8006a7c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006a42:	7dfa      	ldrb	r2, [r7, #23]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	32ae      	adds	r2, #174	; 0xae
 8006a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d014      	beq.n	8006a7c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006a52:	7dfa      	ldrb	r2, [r7, #23]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006a5a:	7dfa      	ldrb	r2, [r7, #23]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	32ae      	adds	r2, #174	; 0xae
 8006a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	7afa      	ldrb	r2, [r7, #11]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a72:	7dbb      	ldrb	r3, [r7, #22]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a78:	7dbb      	ldrb	r3, [r7, #22]
 8006a7a:	e000      	b.n	8006a7e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d014      	beq.n	8006aec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00e      	beq.n	8006aec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6852      	ldr	r2, [r2, #4]
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	4611      	mov	r1, r2
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aec:	2340      	movs	r3, #64	; 0x40
 8006aee:	2200      	movs	r2, #0
 8006af0:	2100      	movs	r1, #0
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fbe3 	bl	80082be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2240      	movs	r2, #64	; 0x40
 8006b04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	2180      	movs	r1, #128	; 0x80
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fbd5 	bl	80082be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2240      	movs	r2, #64	; 0x40
 8006b1e:	621a      	str	r2, [r3, #32]

  return ret;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	460b      	mov	r3, r1
 8006b34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	78fa      	ldrb	r2, [r7, #3]
 8006b3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2204      	movs	r2, #4
 8006b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d106      	bne.n	8006b98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d110      	bne.n	8006bdc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	32ae      	adds	r2, #174	; 0xae
 8006bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e01c      	b.n	8006c42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d115      	bne.n	8006c40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	32ae      	adds	r2, #174	; 0xae
 8006c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	32ae      	adds	r2, #174	; 0xae
 8006c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	32ae      	adds	r2, #174	; 0xae
 8006c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e01c      	b.n	8006ca6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d115      	bne.n	8006ca4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	32ae      	adds	r2, #174	; 0xae
 8006c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	32ae      	adds	r2, #174	; 0xae
 8006c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	78fa      	ldrb	r2, [r7, #3]
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6852      	ldr	r2, [r2, #4]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	460b      	mov	r3, r1
 8006d48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	885b      	ldrh	r3, [r3, #2]
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d920      	bls.n	8006da8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d6e:	e013      	b.n	8006d98 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d70:	f107 030a 	add.w	r3, r7, #10
 8006d74:	4619      	mov	r1, r3
 8006d76:	6978      	ldr	r0, [r7, #20]
 8006d78:	f000 f81b 	bl	8006db2 <USBD_GetNextDesc>
 8006d7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d108      	bne.n	8006d98 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	789b      	ldrb	r3, [r3, #2]
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d008      	beq.n	8006da6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	885b      	ldrh	r3, [r3, #2]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d8e5      	bhi.n	8006d70 <USBD_GetEpDesc+0x32>
 8006da4:	e000      	b.n	8006da8 <USBD_GetEpDesc+0x6a>
          break;
 8006da6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006da8:	693b      	ldr	r3, [r7, #16]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	881a      	ldrh	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	4413      	add	r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4413      	add	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	3301      	adds	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e0a:	8a3b      	ldrh	r3, [r7, #16]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	b21a      	sxth	r2, r3
 8006e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	b21b      	sxth	r3, r3
 8006e18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e1a:	89fb      	ldrh	r3, [r7, #14]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	371c      	adds	r7, #28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d005      	beq.n	8006e4e <USBD_StdDevReq+0x26>
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d857      	bhi.n	8006ef6 <USBD_StdDevReq+0xce>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00f      	beq.n	8006e6a <USBD_StdDevReq+0x42>
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d153      	bne.n	8006ef6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	32ae      	adds	r2, #174	; 0xae
 8006e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4798      	blx	r3
 8006e64:	4603      	mov	r3, r0
 8006e66:	73fb      	strb	r3, [r7, #15]
      break;
 8006e68:	e04a      	b.n	8006f00 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	2b09      	cmp	r3, #9
 8006e70:	d83b      	bhi.n	8006eea <USBD_StdDevReq+0xc2>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <USBD_StdDevReq+0x50>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006ecd 	.word	0x08006ecd
 8006e7c:	08006ee1 	.word	0x08006ee1
 8006e80:	08006eeb 	.word	0x08006eeb
 8006e84:	08006ed7 	.word	0x08006ed7
 8006e88:	08006eeb 	.word	0x08006eeb
 8006e8c:	08006eab 	.word	0x08006eab
 8006e90:	08006ea1 	.word	0x08006ea1
 8006e94:	08006eeb 	.word	0x08006eeb
 8006e98:	08006ec3 	.word	0x08006ec3
 8006e9c:	08006eb5 	.word	0x08006eb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa3c 	bl	8007320 <USBD_GetDescriptor>
          break;
 8006ea8:	e024      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fba1 	bl	80075f4 <USBD_SetAddress>
          break;
 8006eb2:	e01f      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fbe0 	bl	800767c <USBD_SetConfig>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
          break;
 8006ec0:	e018      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fc83 	bl	80077d0 <USBD_GetConfig>
          break;
 8006eca:	e013      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fcb4 	bl	800783c <USBD_GetStatus>
          break;
 8006ed4:	e00e      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fce3 	bl	80078a4 <USBD_SetFeature>
          break;
 8006ede:	e009      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fd07 	bl	80078f6 <USBD_ClrFeature>
          break;
 8006ee8:	e004      	b.n	8006ef4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fd5e 	bl	80079ae <USBD_CtlError>
          break;
 8006ef2:	bf00      	nop
      }
      break;
 8006ef4:	e004      	b.n	8006f00 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fd58 	bl	80079ae <USBD_CtlError>
      break;
 8006efe:	bf00      	nop
  }

  return ret;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop

08006f0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d005      	beq.n	8006f32 <USBD_StdItfReq+0x26>
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d852      	bhi.n	8006fd0 <USBD_StdItfReq+0xc4>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <USBD_StdItfReq+0x26>
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d14e      	bne.n	8006fd0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d840      	bhi.n	8006fc2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	889b      	ldrh	r3, [r3, #4]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d836      	bhi.n	8006fb8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	889b      	ldrh	r3, [r3, #4]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fed9 	bl	8006d0a <USBD_CoreFindIF>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	2bff      	cmp	r3, #255	; 0xff
 8006f60:	d01d      	beq.n	8006f9e <USBD_StdItfReq+0x92>
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d11a      	bne.n	8006f9e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f68:	7bba      	ldrb	r2, [r7, #14]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	32ae      	adds	r2, #174	; 0xae
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00f      	beq.n	8006f98 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f78:	7bba      	ldrb	r2, [r7, #14]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f80:	7bba      	ldrb	r2, [r7, #14]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	32ae      	adds	r2, #174	; 0xae
 8006f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f96:	e004      	b.n	8006fa2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f9c:	e001      	b.n	8006fa2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	88db      	ldrh	r3, [r3, #6]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d110      	bne.n	8006fcc <USBD_StdItfReq+0xc0>
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10d      	bne.n	8006fcc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fdc7 	bl	8007b44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fb6:	e009      	b.n	8006fcc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fcf7 	bl	80079ae <USBD_CtlError>
          break;
 8006fc0:	e004      	b.n	8006fcc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fcf2 	bl	80079ae <USBD_CtlError>
          break;
 8006fca:	e000      	b.n	8006fce <USBD_StdItfReq+0xc2>
          break;
 8006fcc:	bf00      	nop
      }
      break;
 8006fce:	e004      	b.n	8006fda <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fceb 	bl	80079ae <USBD_CtlError>
      break;
 8006fd8:	bf00      	nop
  }

  return ret;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	889b      	ldrh	r3, [r3, #4]
 8006ff6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d007      	beq.n	8007014 <USBD_StdEPReq+0x30>
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	f200 817f 	bhi.w	8007308 <USBD_StdEPReq+0x324>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d02a      	beq.n	8007064 <USBD_StdEPReq+0x80>
 800700e:	2b20      	cmp	r3, #32
 8007010:	f040 817a 	bne.w	8007308 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff fe83 	bl	8006d24 <USBD_CoreFindEP>
 800701e:	4603      	mov	r3, r0
 8007020:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007022:	7b7b      	ldrb	r3, [r7, #13]
 8007024:	2bff      	cmp	r3, #255	; 0xff
 8007026:	f000 8174 	beq.w	8007312 <USBD_StdEPReq+0x32e>
 800702a:	7b7b      	ldrb	r3, [r7, #13]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 8170 	bne.w	8007312 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007032:	7b7a      	ldrb	r2, [r7, #13]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800703a:	7b7a      	ldrb	r2, [r7, #13]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	32ae      	adds	r2, #174	; 0xae
 8007040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 8163 	beq.w	8007312 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800704c:	7b7a      	ldrb	r2, [r7, #13]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	32ae      	adds	r2, #174	; 0xae
 8007052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
 800705e:	4603      	mov	r3, r0
 8007060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007062:	e156      	b.n	8007312 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	2b03      	cmp	r3, #3
 800706a:	d008      	beq.n	800707e <USBD_StdEPReq+0x9a>
 800706c:	2b03      	cmp	r3, #3
 800706e:	f300 8145 	bgt.w	80072fc <USBD_StdEPReq+0x318>
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 809b 	beq.w	80071ae <USBD_StdEPReq+0x1ca>
 8007078:	2b01      	cmp	r3, #1
 800707a:	d03c      	beq.n	80070f6 <USBD_StdEPReq+0x112>
 800707c:	e13e      	b.n	80072fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d002      	beq.n	8007090 <USBD_StdEPReq+0xac>
 800708a:	2b03      	cmp	r3, #3
 800708c:	d016      	beq.n	80070bc <USBD_StdEPReq+0xd8>
 800708e:	e02c      	b.n	80070ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00d      	beq.n	80070b2 <USBD_StdEPReq+0xce>
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	2b80      	cmp	r3, #128	; 0x80
 800709a:	d00a      	beq.n	80070b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 f951 	bl	8008348 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070a6:	2180      	movs	r1, #128	; 0x80
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 f94d 	bl	8008348 <USBD_LL_StallEP>
 80070ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070b0:	e020      	b.n	80070f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fc7a 	bl	80079ae <USBD_CtlError>
              break;
 80070ba:	e01b      	b.n	80070f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	885b      	ldrh	r3, [r3, #2]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10e      	bne.n	80070e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <USBD_StdEPReq+0xfe>
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b80      	cmp	r3, #128	; 0x80
 80070ce:	d008      	beq.n	80070e2 <USBD_StdEPReq+0xfe>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	88db      	ldrh	r3, [r3, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f933 	bl	8008348 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fd2e 	bl	8007b44 <USBD_CtlSendStatus>

              break;
 80070e8:	e004      	b.n	80070f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fc5e 	bl	80079ae <USBD_CtlError>
              break;
 80070f2:	bf00      	nop
          }
          break;
 80070f4:	e107      	b.n	8007306 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d002      	beq.n	8007108 <USBD_StdEPReq+0x124>
 8007102:	2b03      	cmp	r3, #3
 8007104:	d016      	beq.n	8007134 <USBD_StdEPReq+0x150>
 8007106:	e04b      	b.n	80071a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <USBD_StdEPReq+0x146>
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b80      	cmp	r3, #128	; 0x80
 8007112:	d00a      	beq.n	800712a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 f915 	bl	8008348 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800711e:	2180      	movs	r1, #128	; 0x80
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f911 	bl	8008348 <USBD_LL_StallEP>
 8007126:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007128:	e040      	b.n	80071ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fc3e 	bl	80079ae <USBD_CtlError>
              break;
 8007132:	e03b      	b.n	80071ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	885b      	ldrh	r3, [r3, #2]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d136      	bne.n	80071aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007142:	2b00      	cmp	r3, #0
 8007144:	d004      	beq.n	8007150 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 f91b 	bl	8008386 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fcf7 	bl	8007b44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7ff fde2 	bl	8006d24 <USBD_CoreFindEP>
 8007160:	4603      	mov	r3, r0
 8007162:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007164:	7b7b      	ldrb	r3, [r7, #13]
 8007166:	2bff      	cmp	r3, #255	; 0xff
 8007168:	d01f      	beq.n	80071aa <USBD_StdEPReq+0x1c6>
 800716a:	7b7b      	ldrb	r3, [r7, #13]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d11c      	bne.n	80071aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007170:	7b7a      	ldrb	r2, [r7, #13]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007178:	7b7a      	ldrb	r2, [r7, #13]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	32ae      	adds	r2, #174	; 0xae
 800717e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d010      	beq.n	80071aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007188:	7b7a      	ldrb	r2, [r7, #13]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	32ae      	adds	r2, #174	; 0xae
 800718e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800719e:	e004      	b.n	80071aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fc03 	bl	80079ae <USBD_CtlError>
              break;
 80071a8:	e000      	b.n	80071ac <USBD_StdEPReq+0x1c8>
              break;
 80071aa:	bf00      	nop
          }
          break;
 80071ac:	e0ab      	b.n	8007306 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d002      	beq.n	80071c0 <USBD_StdEPReq+0x1dc>
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d032      	beq.n	8007224 <USBD_StdEPReq+0x240>
 80071be:	e097      	b.n	80072f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d007      	beq.n	80071d6 <USBD_StdEPReq+0x1f2>
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	2b80      	cmp	r3, #128	; 0x80
 80071ca:	d004      	beq.n	80071d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fbed 	bl	80079ae <USBD_CtlError>
                break;
 80071d4:	e091      	b.n	80072fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	da0b      	bge.n	80071f6 <USBD_StdEPReq+0x212>
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	3310      	adds	r3, #16
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	4413      	add	r3, r2
 80071f2:	3304      	adds	r3, #4
 80071f4:	e00b      	b.n	800720e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	4413      	add	r3, r2
 800720c:	3304      	adds	r3, #4
 800720e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2202      	movs	r2, #2
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc37 	bl	8007a90 <USBD_CtlSendData>
              break;
 8007222:	e06a      	b.n	80072fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007228:	2b00      	cmp	r3, #0
 800722a:	da11      	bge.n	8007250 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	f003 020f 	and.w	r2, r3, #15
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	440b      	add	r3, r1
 800723e:	3324      	adds	r3, #36	; 0x24
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d117      	bne.n	8007276 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fbb0 	bl	80079ae <USBD_CtlError>
                  break;
 800724e:	e054      	b.n	80072fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	f003 020f 	and.w	r2, r3, #15
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d104      	bne.n	8007276 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fb9d 	bl	80079ae <USBD_CtlError>
                  break;
 8007274:	e041      	b.n	80072fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800727a:	2b00      	cmp	r3, #0
 800727c:	da0b      	bge.n	8007296 <USBD_StdEPReq+0x2b2>
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	3310      	adds	r3, #16
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	4413      	add	r3, r2
 8007292:	3304      	adds	r3, #4
 8007294:	e00b      	b.n	80072ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	4413      	add	r3, r2
 80072ac:	3304      	adds	r3, #4
 80072ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <USBD_StdEPReq+0x2d8>
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	2b80      	cmp	r3, #128	; 0x80
 80072ba:	d103      	bne.n	80072c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	e00e      	b.n	80072e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 f87b 	bl	80083c4 <USBD_LL_IsStallEP>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2201      	movs	r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	e002      	b.n	80072e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2202      	movs	r2, #2
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fbd1 	bl	8007a90 <USBD_CtlSendData>
              break;
 80072ee:	e004      	b.n	80072fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fb5b 	bl	80079ae <USBD_CtlError>
              break;
 80072f8:	bf00      	nop
          }
          break;
 80072fa:	e004      	b.n	8007306 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fb55 	bl	80079ae <USBD_CtlError>
          break;
 8007304:	bf00      	nop
      }
      break;
 8007306:	e005      	b.n	8007314 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fb4f 	bl	80079ae <USBD_CtlError>
      break;
 8007310:	e000      	b.n	8007314 <USBD_StdEPReq+0x330>
      break;
 8007312:	bf00      	nop
  }

  return ret;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800732e:	2300      	movs	r3, #0
 8007330:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	885b      	ldrh	r3, [r3, #2]
 800733a:	0a1b      	lsrs	r3, r3, #8
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	2b06      	cmp	r3, #6
 8007342:	f200 8128 	bhi.w	8007596 <USBD_GetDescriptor+0x276>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <USBD_GetDescriptor+0x2c>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	08007369 	.word	0x08007369
 8007350:	08007381 	.word	0x08007381
 8007354:	080073c1 	.word	0x080073c1
 8007358:	08007597 	.word	0x08007597
 800735c:	08007597 	.word	0x08007597
 8007360:	08007537 	.word	0x08007537
 8007364:	08007563 	.word	0x08007563
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	7c12      	ldrb	r2, [r2, #16]
 8007374:	f107 0108 	add.w	r1, r7, #8
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
      break;
 800737e:	e112      	b.n	80075a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	7c1b      	ldrb	r3, [r3, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10d      	bne.n	80073a4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007390:	f107 0208 	add.w	r2, r7, #8
 8007394:	4610      	mov	r0, r2
 8007396:	4798      	blx	r3
 8007398:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	2202      	movs	r2, #2
 80073a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073a2:	e100      	b.n	80075a6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	f107 0208 	add.w	r2, r7, #8
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	2202      	movs	r2, #2
 80073bc:	701a      	strb	r2, [r3, #0]
      break;
 80073be:	e0f2      	b.n	80075a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	885b      	ldrh	r3, [r3, #2]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	f200 80ac 	bhi.w	8007524 <USBD_GetDescriptor+0x204>
 80073cc:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <USBD_GetDescriptor+0xb4>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	080073ed 	.word	0x080073ed
 80073d8:	08007421 	.word	0x08007421
 80073dc:	08007455 	.word	0x08007455
 80073e0:	08007489 	.word	0x08007489
 80073e4:	080074bd 	.word	0x080074bd
 80073e8:	080074f1 	.word	0x080074f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00b      	beq.n	8007410 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	7c12      	ldrb	r2, [r2, #16]
 8007404:	f107 0108 	add.w	r1, r7, #8
 8007408:	4610      	mov	r0, r2
 800740a:	4798      	blx	r3
 800740c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800740e:	e091      	b.n	8007534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 facb 	bl	80079ae <USBD_CtlError>
            err++;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	3301      	adds	r3, #1
 800741c:	72fb      	strb	r3, [r7, #11]
          break;
 800741e:	e089      	b.n	8007534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7c12      	ldrb	r2, [r2, #16]
 8007438:	f107 0108 	add.w	r1, r7, #8
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
 8007440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007442:	e077      	b.n	8007534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fab1 	bl	80079ae <USBD_CtlError>
            err++;
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	3301      	adds	r3, #1
 8007450:	72fb      	strb	r3, [r7, #11]
          break;
 8007452:	e06f      	b.n	8007534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	7c12      	ldrb	r2, [r2, #16]
 800746c:	f107 0108 	add.w	r1, r7, #8
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007476:	e05d      	b.n	8007534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fa97 	bl	80079ae <USBD_CtlError>
            err++;
 8007480:	7afb      	ldrb	r3, [r7, #11]
 8007482:	3301      	adds	r3, #1
 8007484:	72fb      	strb	r3, [r7, #11]
          break;
 8007486:	e055      	b.n	8007534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00b      	beq.n	80074ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	7c12      	ldrb	r2, [r2, #16]
 80074a0:	f107 0108 	add.w	r1, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074aa:	e043      	b.n	8007534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fa7d 	bl	80079ae <USBD_CtlError>
            err++;
 80074b4:	7afb      	ldrb	r3, [r7, #11]
 80074b6:	3301      	adds	r3, #1
 80074b8:	72fb      	strb	r3, [r7, #11]
          break;
 80074ba:	e03b      	b.n	8007534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	7c12      	ldrb	r2, [r2, #16]
 80074d4:	f107 0108 	add.w	r1, r7, #8
 80074d8:	4610      	mov	r0, r2
 80074da:	4798      	blx	r3
 80074dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074de:	e029      	b.n	8007534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa63 	bl	80079ae <USBD_CtlError>
            err++;
 80074e8:	7afb      	ldrb	r3, [r7, #11]
 80074ea:	3301      	adds	r3, #1
 80074ec:	72fb      	strb	r3, [r7, #11]
          break;
 80074ee:	e021      	b.n	8007534 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00b      	beq.n	8007514 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	7c12      	ldrb	r2, [r2, #16]
 8007508:	f107 0108 	add.w	r1, r7, #8
 800750c:	4610      	mov	r0, r2
 800750e:	4798      	blx	r3
 8007510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007512:	e00f      	b.n	8007534 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa49 	bl	80079ae <USBD_CtlError>
            err++;
 800751c:	7afb      	ldrb	r3, [r7, #11]
 800751e:	3301      	adds	r3, #1
 8007520:	72fb      	strb	r3, [r7, #11]
          break;
 8007522:	e007      	b.n	8007534 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa41 	bl	80079ae <USBD_CtlError>
          err++;
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	3301      	adds	r3, #1
 8007530:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007532:	bf00      	nop
      }
      break;
 8007534:	e037      	b.n	80075a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	7c1b      	ldrb	r3, [r3, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007546:	f107 0208 	add.w	r2, r7, #8
 800754a:	4610      	mov	r0, r2
 800754c:	4798      	blx	r3
 800754e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007550:	e029      	b.n	80075a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fa2a 	bl	80079ae <USBD_CtlError>
        err++;
 800755a:	7afb      	ldrb	r3, [r7, #11]
 800755c:	3301      	adds	r3, #1
 800755e:	72fb      	strb	r3, [r7, #11]
      break;
 8007560:	e021      	b.n	80075a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	7c1b      	ldrb	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10d      	bne.n	8007586 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007572:	f107 0208 	add.w	r2, r7, #8
 8007576:	4610      	mov	r0, r2
 8007578:	4798      	blx	r3
 800757a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3301      	adds	r3, #1
 8007580:	2207      	movs	r2, #7
 8007582:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007584:	e00f      	b.n	80075a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fa10 	bl	80079ae <USBD_CtlError>
        err++;
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	3301      	adds	r3, #1
 8007592:	72fb      	strb	r3, [r7, #11]
      break;
 8007594:	e007      	b.n	80075a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fa08 	bl	80079ae <USBD_CtlError>
      err++;
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	3301      	adds	r3, #1
 80075a2:	72fb      	strb	r3, [r7, #11]
      break;
 80075a4:	bf00      	nop
  }

  if (err != 0U)
 80075a6:	7afb      	ldrb	r3, [r7, #11]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d11e      	bne.n	80075ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	88db      	ldrh	r3, [r3, #6]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d016      	beq.n	80075e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80075b4:	893b      	ldrh	r3, [r7, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00e      	beq.n	80075d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	88da      	ldrh	r2, [r3, #6]
 80075be:	893b      	ldrh	r3, [r7, #8]
 80075c0:	4293      	cmp	r3, r2
 80075c2:	bf28      	it	cs
 80075c4:	4613      	movcs	r3, r2
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075ca:	893b      	ldrh	r3, [r7, #8]
 80075cc:	461a      	mov	r2, r3
 80075ce:	68f9      	ldr	r1, [r7, #12]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa5d 	bl	8007a90 <USBD_CtlSendData>
 80075d6:	e009      	b.n	80075ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f9e7 	bl	80079ae <USBD_CtlError>
 80075e0:	e004      	b.n	80075ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 faae 	bl	8007b44 <USBD_CtlSendStatus>
 80075e8:	e000      	b.n	80075ec <USBD_GetDescriptor+0x2cc>
    return;
 80075ea:	bf00      	nop
  }
}
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	889b      	ldrh	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d131      	bne.n	800766a <USBD_SetAddress+0x76>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	88db      	ldrh	r3, [r3, #6]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d12d      	bne.n	800766a <USBD_SetAddress+0x76>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	885b      	ldrh	r3, [r3, #2]
 8007612:	2b7f      	cmp	r3, #127	; 0x7f
 8007614:	d829      	bhi.n	800766a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	885b      	ldrh	r3, [r3, #2]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007620:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b03      	cmp	r3, #3
 800762c:	d104      	bne.n	8007638 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f9bc 	bl	80079ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007636:	e01d      	b.n	8007674 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7bfa      	ldrb	r2, [r7, #15]
 800763c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fee9 	bl	800841c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fa7a 	bl	8007b44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007650:	7bfb      	ldrb	r3, [r7, #15]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2202      	movs	r2, #2
 800765a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765e:	e009      	b.n	8007674 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007668:	e004      	b.n	8007674 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f99e 	bl	80079ae <USBD_CtlError>
  }
}
 8007672:	bf00      	nop
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	885b      	ldrh	r3, [r3, #2]
 800768e:	b2da      	uxtb	r2, r3
 8007690:	4b4e      	ldr	r3, [pc, #312]	; (80077cc <USBD_SetConfig+0x150>)
 8007692:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007694:	4b4d      	ldr	r3, [pc, #308]	; (80077cc <USBD_SetConfig+0x150>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d905      	bls.n	80076a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f985 	bl	80079ae <USBD_CtlError>
    return USBD_FAIL;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e08c      	b.n	80077c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d002      	beq.n	80076ba <USBD_SetConfig+0x3e>
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d029      	beq.n	800770c <USBD_SetConfig+0x90>
 80076b8:	e075      	b.n	80077a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80076ba:	4b44      	ldr	r3, [pc, #272]	; (80077cc <USBD_SetConfig+0x150>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d020      	beq.n	8007704 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80076c2:	4b42      	ldr	r3, [pc, #264]	; (80077cc <USBD_SetConfig+0x150>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076cc:	4b3f      	ldr	r3, [pc, #252]	; (80077cc <USBD_SetConfig+0x150>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fe ffe7 	bl	80066a6 <USBD_SetClassConfig>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d008      	beq.n	80076f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f962 	bl	80079ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076f2:	e065      	b.n	80077c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fa25 	bl	8007b44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2203      	movs	r2, #3
 80076fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007702:	e05d      	b.n	80077c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa1d 	bl	8007b44 <USBD_CtlSendStatus>
      break;
 800770a:	e059      	b.n	80077c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800770c:	4b2f      	ldr	r3, [pc, #188]	; (80077cc <USBD_SetConfig+0x150>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d112      	bne.n	800773a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800771c:	4b2b      	ldr	r3, [pc, #172]	; (80077cc <USBD_SetConfig+0x150>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007726:	4b29      	ldr	r3, [pc, #164]	; (80077cc <USBD_SetConfig+0x150>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7fe ffd6 	bl	80066de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa06 	bl	8007b44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007738:	e042      	b.n	80077c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800773a:	4b24      	ldr	r3, [pc, #144]	; (80077cc <USBD_SetConfig+0x150>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d02a      	beq.n	800779e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fe ffc4 	bl	80066de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007756:	4b1d      	ldr	r3, [pc, #116]	; (80077cc <USBD_SetConfig+0x150>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007760:	4b1a      	ldr	r3, [pc, #104]	; (80077cc <USBD_SetConfig+0x150>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fe ff9d 	bl	80066a6 <USBD_SetClassConfig>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00f      	beq.n	8007796 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f918 	bl	80079ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fe ffa9 	bl	80066de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007794:	e014      	b.n	80077c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f9d4 	bl	8007b44 <USBD_CtlSendStatus>
      break;
 800779c:	e010      	b.n	80077c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f9d0 	bl	8007b44 <USBD_CtlSendStatus>
      break;
 80077a4:	e00c      	b.n	80077c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f900 	bl	80079ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077ae:	4b07      	ldr	r3, [pc, #28]	; (80077cc <USBD_SetConfig+0x150>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7fe ff92 	bl	80066de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80077ba:	2303      	movs	r3, #3
 80077bc:	73fb      	strb	r3, [r7, #15]
      break;
 80077be:	bf00      	nop
  }

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20000234 	.word	0x20000234

080077d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	88db      	ldrh	r3, [r3, #6]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d004      	beq.n	80077ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f8e2 	bl	80079ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077ea:	e023      	b.n	8007834 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	dc02      	bgt.n	80077fe <USBD_GetConfig+0x2e>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	dc03      	bgt.n	8007804 <USBD_GetConfig+0x34>
 80077fc:	e015      	b.n	800782a <USBD_GetConfig+0x5a>
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d00b      	beq.n	800781a <USBD_GetConfig+0x4a>
 8007802:	e012      	b.n	800782a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3308      	adds	r3, #8
 800780e:	2201      	movs	r2, #1
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f93c 	bl	8007a90 <USBD_CtlSendData>
        break;
 8007818:	e00c      	b.n	8007834 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3304      	adds	r3, #4
 800781e:	2201      	movs	r2, #1
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f934 	bl	8007a90 <USBD_CtlSendData>
        break;
 8007828:	e004      	b.n	8007834 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f8be 	bl	80079ae <USBD_CtlError>
        break;
 8007832:	bf00      	nop
}
 8007834:	bf00      	nop
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784c:	b2db      	uxtb	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	2b02      	cmp	r3, #2
 8007852:	d81e      	bhi.n	8007892 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	88db      	ldrh	r3, [r3, #6]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d004      	beq.n	8007866 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f8a5 	bl	80079ae <USBD_CtlError>
        break;
 8007864:	e01a      	b.n	800789c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f043 0202 	orr.w	r2, r3, #2
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	330c      	adds	r3, #12
 8007886:	2202      	movs	r2, #2
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f900 	bl	8007a90 <USBD_CtlSendData>
      break;
 8007890:	e004      	b.n	800789c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f88a 	bl	80079ae <USBD_CtlError>
      break;
 800789a:	bf00      	nop
  }
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	885b      	ldrh	r3, [r3, #2]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d107      	bne.n	80078c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f940 	bl	8007b44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80078c4:	e013      	b.n	80078ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	885b      	ldrh	r3, [r3, #2]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d10b      	bne.n	80078e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	889b      	ldrh	r3, [r3, #4]
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f930 	bl	8007b44 <USBD_CtlSendStatus>
}
 80078e4:	e003      	b.n	80078ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f860 	bl	80079ae <USBD_CtlError>
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b082      	sub	sp, #8
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007906:	b2db      	uxtb	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	2b02      	cmp	r3, #2
 800790c:	d80b      	bhi.n	8007926 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	885b      	ldrh	r3, [r3, #2]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d10c      	bne.n	8007930 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f910 	bl	8007b44 <USBD_CtlSendStatus>
      }
      break;
 8007924:	e004      	b.n	8007930 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f840 	bl	80079ae <USBD_CtlError>
      break;
 800792e:	e000      	b.n	8007932 <USBD_ClrFeature+0x3c>
      break;
 8007930:	bf00      	nop
  }
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	781a      	ldrb	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	781a      	ldrb	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7ff fa41 	bl	8006dec <SWAPBYTE>
 800796a:	4603      	mov	r3, r0
 800796c:	461a      	mov	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3301      	adds	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7ff fa34 	bl	8006dec <SWAPBYTE>
 8007984:	4603      	mov	r3, r0
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3301      	adds	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3301      	adds	r3, #1
 8007996:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff fa27 	bl	8006dec <SWAPBYTE>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	80da      	strh	r2, [r3, #6]
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079b8:	2180      	movs	r1, #128	; 0x80
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fcc4 	bl	8008348 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079c0:	2100      	movs	r1, #0
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fcc0 	bl	8008348 <USBD_LL_StallEP>
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d036      	beq.n	8007a54 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80079ea:	6938      	ldr	r0, [r7, #16]
 80079ec:	f000 f836 	bl	8007a5c <USBD_GetLen>
 80079f0:	4603      	mov	r3, r0
 80079f2:	3301      	adds	r3, #1
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	4413      	add	r3, r2
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	4413      	add	r3, r2
 8007a16:	2203      	movs	r2, #3
 8007a18:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a20:	e013      	b.n	8007a4a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	4413      	add	r3, r2
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	7812      	ldrb	r2, [r2, #0]
 8007a2c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3301      	adds	r3, #1
 8007a32:	613b      	str	r3, [r7, #16]
    idx++;
 8007a34:	7dfb      	ldrb	r3, [r7, #23]
 8007a36:	3301      	adds	r3, #1
 8007a38:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a3a:	7dfb      	ldrb	r3, [r7, #23]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	4413      	add	r3, r2
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	3301      	adds	r3, #1
 8007a48:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e7      	bne.n	8007a22 <USBD_GetString+0x52>
 8007a52:	e000      	b.n	8007a56 <USBD_GetString+0x86>
    return;
 8007a54:	bf00      	nop
  }
}
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a6c:	e005      	b.n	8007a7a <USBD_GetLen+0x1e>
  {
    len++;
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	3301      	adds	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	3301      	adds	r3, #1
 8007a78:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1f5      	bne.n	8007a6e <USBD_GetLen+0x12>
  }

  return len;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fccf 	bl	800845a <USBD_LL_Transmit>

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 fcbe 	bl	800845a <USBD_LL_Transmit>

  return USBD_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2203      	movs	r2, #3
 8007af8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	2100      	movs	r1, #0
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fcc2 	bl	800849c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	60f8      	str	r0, [r7, #12]
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	2100      	movs	r1, #0
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fcb1 	bl	800849c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2204      	movs	r2, #4
 8007b50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b54:	2300      	movs	r3, #0
 8007b56:	2200      	movs	r2, #0
 8007b58:	2100      	movs	r1, #0
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fc7d 	bl	800845a <USBD_LL_Transmit>

  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2205      	movs	r2, #5
 8007b76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2100      	movs	r1, #0
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fc8b 	bl	800849c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b94:	2200      	movs	r2, #0
 8007b96:	4912      	ldr	r1, [pc, #72]	; (8007be0 <MX_USB_DEVICE_Init+0x50>)
 8007b98:	4812      	ldr	r0, [pc, #72]	; (8007be4 <MX_USB_DEVICE_Init+0x54>)
 8007b9a:	f7fe fd07 	bl	80065ac <USBD_Init>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ba4:	f7f8 fee2 	bl	800096c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ba8:	490f      	ldr	r1, [pc, #60]	; (8007be8 <MX_USB_DEVICE_Init+0x58>)
 8007baa:	480e      	ldr	r0, [pc, #56]	; (8007be4 <MX_USB_DEVICE_Init+0x54>)
 8007bac:	f7fe fd2e 	bl	800660c <USBD_RegisterClass>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bb6:	f7f8 fed9 	bl	800096c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007bba:	490c      	ldr	r1, [pc, #48]	; (8007bec <MX_USB_DEVICE_Init+0x5c>)
 8007bbc:	4809      	ldr	r0, [pc, #36]	; (8007be4 <MX_USB_DEVICE_Init+0x54>)
 8007bbe:	f7fe fc65 	bl	800648c <USBD_CDC_RegisterInterface>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007bc8:	f7f8 fed0 	bl	800096c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007bcc:	4805      	ldr	r0, [pc, #20]	; (8007be4 <MX_USB_DEVICE_Init+0x54>)
 8007bce:	f7fe fd53 	bl	8006678 <USBD_Start>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bd8:	f7f8 fec8 	bl	800096c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bdc:	bf00      	nop
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	200000ac 	.word	0x200000ac
 8007be4:	20000238 	.word	0x20000238
 8007be8:	20000018 	.word	0x20000018
 8007bec:	20000098 	.word	0x20000098

08007bf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4905      	ldr	r1, [pc, #20]	; (8007c0c <CDC_Init_FS+0x1c>)
 8007bf8:	4805      	ldr	r0, [pc, #20]	; (8007c10 <CDC_Init_FS+0x20>)
 8007bfa:	f7fe fc61 	bl	80064c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007bfe:	4905      	ldr	r1, [pc, #20]	; (8007c14 <CDC_Init_FS+0x24>)
 8007c00:	4803      	ldr	r0, [pc, #12]	; (8007c10 <CDC_Init_FS+0x20>)
 8007c02:	f7fe fc7f 	bl	8006504 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	20000d14 	.word	0x20000d14
 8007c10:	20000238 	.word	0x20000238
 8007c14:	20000514 	.word	0x20000514

08007c18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	6039      	str	r1, [r7, #0]
 8007c32:	71fb      	strb	r3, [r7, #7]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b23      	cmp	r3, #35	; 0x23
 8007c3c:	d84a      	bhi.n	8007cd4 <CDC_Control_FS+0xac>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <CDC_Control_FS+0x1c>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007cd5 	.word	0x08007cd5
 8007c48:	08007cd5 	.word	0x08007cd5
 8007c4c:	08007cd5 	.word	0x08007cd5
 8007c50:	08007cd5 	.word	0x08007cd5
 8007c54:	08007cd5 	.word	0x08007cd5
 8007c58:	08007cd5 	.word	0x08007cd5
 8007c5c:	08007cd5 	.word	0x08007cd5
 8007c60:	08007cd5 	.word	0x08007cd5
 8007c64:	08007cd5 	.word	0x08007cd5
 8007c68:	08007cd5 	.word	0x08007cd5
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007cd5 	.word	0x08007cd5
 8007c74:	08007cd5 	.word	0x08007cd5
 8007c78:	08007cd5 	.word	0x08007cd5
 8007c7c:	08007cd5 	.word	0x08007cd5
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007cd5 	.word	0x08007cd5
 8007c88:	08007cd5 	.word	0x08007cd5
 8007c8c:	08007cd5 	.word	0x08007cd5
 8007c90:	08007cd5 	.word	0x08007cd5
 8007c94:	08007cd5 	.word	0x08007cd5
 8007c98:	08007cd5 	.word	0x08007cd5
 8007c9c:	08007cd5 	.word	0x08007cd5
 8007ca0:	08007cd5 	.word	0x08007cd5
 8007ca4:	08007cd5 	.word	0x08007cd5
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cd5 	.word	0x08007cd5
 8007cb4:	08007cd5 	.word	0x08007cd5
 8007cb8:	08007cd5 	.word	0x08007cd5
 8007cbc:	08007cd5 	.word	0x08007cd5
 8007cc0:	08007cd5 	.word	0x08007cd5
 8007cc4:	08007cd5 	.word	0x08007cd5
 8007cc8:	08007cd5 	.word	0x08007cd5
 8007ccc:	08007cd5 	.word	0x08007cd5
 8007cd0:	08007cd5 	.word	0x08007cd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007cd4:	bf00      	nop
  }

  return (USBD_OK);
 8007cd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4809      	ldr	r0, [pc, #36]	; (8007d18 <CDC_Receive_FS+0x34>)
 8007cf2:	f7fe fc07 	bl	8006504 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007cf6:	4808      	ldr	r0, [pc, #32]	; (8007d18 <CDC_Receive_FS+0x34>)
 8007cf8:	f7fe fc22 	bl	8006540 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer,Buf,len);
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4804      	ldr	r0, [pc, #16]	; (8007d1c <CDC_Receive_FS+0x38>)
 8007d0a:	f000 fc63 	bl	80085d4 <memcpy>
  return (USBD_OK);
 8007d0e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	20000238 	.word	0x20000238
 8007d1c:	200001f0 	.word	0x200001f0

08007d20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
	...

08007d44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2212      	movs	r2, #18
 8007d54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d56:	4b03      	ldr	r3, [pc, #12]	; (8007d64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	200000c8 	.word	0x200000c8

08007d68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	6039      	str	r1, [r7, #0]
 8007d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2204      	movs	r2, #4
 8007d78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d7a:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	200000dc 	.word	0x200000dc

08007d8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	6039      	str	r1, [r7, #0]
 8007d96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d105      	bne.n	8007daa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	4907      	ldr	r1, [pc, #28]	; (8007dc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007da2:	4808      	ldr	r0, [pc, #32]	; (8007dc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007da4:	f7ff fe14 	bl	80079d0 <USBD_GetString>
 8007da8:	e004      	b.n	8007db4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	4904      	ldr	r1, [pc, #16]	; (8007dc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007dae:	4805      	ldr	r0, [pc, #20]	; (8007dc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007db0:	f7ff fe0e 	bl	80079d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007db4:	4b02      	ldr	r3, [pc, #8]	; (8007dc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20001514 	.word	0x20001514
 8007dc4:	08008618 	.word	0x08008618

08007dc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	6039      	str	r1, [r7, #0]
 8007dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	4904      	ldr	r1, [pc, #16]	; (8007de8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007dd8:	4804      	ldr	r0, [pc, #16]	; (8007dec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007dda:	f7ff fdf9 	bl	80079d0 <USBD_GetString>
  return USBD_StrDesc;
 8007dde:	4b02      	ldr	r3, [pc, #8]	; (8007de8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20001514 	.word	0x20001514
 8007dec:	08008630 	.word	0x08008630

08007df0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	221a      	movs	r2, #26
 8007e00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e02:	f000 f843 	bl	8007e8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e06:	4b02      	ldr	r3, [pc, #8]	; (8007e10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	200000e0 	.word	0x200000e0

08007e14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	6039      	str	r1, [r7, #0]
 8007e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d105      	bne.n	8007e32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	4907      	ldr	r1, [pc, #28]	; (8007e48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e2a:	4808      	ldr	r0, [pc, #32]	; (8007e4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e2c:	f7ff fdd0 	bl	80079d0 <USBD_GetString>
 8007e30:	e004      	b.n	8007e3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4904      	ldr	r1, [pc, #16]	; (8007e48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e36:	4805      	ldr	r0, [pc, #20]	; (8007e4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e38:	f7ff fdca 	bl	80079d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e3c:	4b02      	ldr	r3, [pc, #8]	; (8007e48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20001514 	.word	0x20001514
 8007e4c:	08008644 	.word	0x08008644

08007e50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	6039      	str	r1, [r7, #0]
 8007e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d105      	bne.n	8007e6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4907      	ldr	r1, [pc, #28]	; (8007e84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e66:	4808      	ldr	r0, [pc, #32]	; (8007e88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e68:	f7ff fdb2 	bl	80079d0 <USBD_GetString>
 8007e6c:	e004      	b.n	8007e78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	4904      	ldr	r1, [pc, #16]	; (8007e84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e72:	4805      	ldr	r0, [pc, #20]	; (8007e88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e74:	f7ff fdac 	bl	80079d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20001514 	.word	0x20001514
 8007e88:	08008650 	.word	0x08008650

08007e8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e92:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <Get_SerialNum+0x44>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e98:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <Get_SerialNum+0x48>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e9e:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <Get_SerialNum+0x4c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d009      	beq.n	8007ec6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007eb2:	2208      	movs	r2, #8
 8007eb4:	4909      	ldr	r1, [pc, #36]	; (8007edc <Get_SerialNum+0x50>)
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f814 	bl	8007ee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ebc:	2204      	movs	r2, #4
 8007ebe:	4908      	ldr	r1, [pc, #32]	; (8007ee0 <Get_SerialNum+0x54>)
 8007ec0:	68b8      	ldr	r0, [r7, #8]
 8007ec2:	f000 f80f 	bl	8007ee4 <IntToUnicode>
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	1fff7a10 	.word	0x1fff7a10
 8007ed4:	1fff7a14 	.word	0x1fff7a14
 8007ed8:	1fff7a18 	.word	0x1fff7a18
 8007edc:	200000e2 	.word	0x200000e2
 8007ee0:	200000f2 	.word	0x200000f2

08007ee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
 8007efa:	e027      	b.n	8007f4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	0f1b      	lsrs	r3, r3, #28
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d80b      	bhi.n	8007f1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	0f1b      	lsrs	r3, r3, #28
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	440b      	add	r3, r1
 8007f14:	3230      	adds	r2, #48	; 0x30
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	e00a      	b.n	8007f32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0f1b      	lsrs	r3, r3, #28
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	4619      	mov	r1, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3237      	adds	r2, #55	; 0x37
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	4413      	add	r3, r2
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	75fb      	strb	r3, [r7, #23]
 8007f4c:	7dfa      	ldrb	r2, [r7, #23]
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d3d3      	bcc.n	8007efc <IntToUnicode+0x18>
  }
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f6c:	f107 0314 	add.w	r3, r7, #20
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	605a      	str	r2, [r3, #4]
 8007f76:	609a      	str	r2, [r3, #8]
 8007f78:	60da      	str	r2, [r3, #12]
 8007f7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f84:	d13a      	bne.n	8007ffc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	4b1e      	ldr	r3, [pc, #120]	; (8008004 <HAL_PCD_MspInit+0xa0>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <HAL_PCD_MspInit+0xa0>)
 8007f90:	f043 0301 	orr.w	r3, r3, #1
 8007f94:	6313      	str	r3, [r2, #48]	; 0x30
 8007f96:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <HAL_PCD_MspInit+0xa0>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	613b      	str	r3, [r7, #16]
 8007fa0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007fa2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007fb4:	230a      	movs	r3, #10
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fb8:	f107 0314 	add.w	r3, r7, #20
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4812      	ldr	r0, [pc, #72]	; (8008008 <HAL_PCD_MspInit+0xa4>)
 8007fc0:	f7f9 fa62 	bl	8001488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <HAL_PCD_MspInit+0xa0>)
 8007fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc8:	4a0e      	ldr	r2, [pc, #56]	; (8008004 <HAL_PCD_MspInit+0xa0>)
 8007fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fce:	6353      	str	r3, [r2, #52]	; 0x34
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <HAL_PCD_MspInit+0xa0>)
 8007fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd8:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <HAL_PCD_MspInit+0xa0>)
 8007fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fde:	6453      	str	r3, [r2, #68]	; 0x44
 8007fe0:	4b08      	ldr	r3, [pc, #32]	; (8008004 <HAL_PCD_MspInit+0xa0>)
 8007fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fec:	2200      	movs	r2, #0
 8007fee:	2100      	movs	r1, #0
 8007ff0:	2043      	movs	r0, #67	; 0x43
 8007ff2:	f7f9 fa12 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ff6:	2043      	movs	r0, #67	; 0x43
 8007ff8:	f7f9 fa2b 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ffc:	bf00      	nop
 8007ffe:	3728      	adds	r7, #40	; 0x28
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	40023800 	.word	0x40023800
 8008008:	40020000 	.word	0x40020000

0800800c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f7fe fb75 	bl	8006712 <USBD_LL_SetupStage>
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008042:	78fa      	ldrb	r2, [r7, #3]
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	4619      	mov	r1, r3
 800805a:	f7fe fbaf 	bl	80067bc <USBD_LL_DataOutStage>
}
 800805e:	bf00      	nop
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008078:	78fa      	ldrb	r2, [r7, #3]
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	4613      	mov	r3, r2
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	440b      	add	r3, r1
 8008086:	334c      	adds	r3, #76	; 0x4c
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	4619      	mov	r1, r3
 800808e:	f7fe fc48 	bl	8006922 <USBD_LL_DataInStage>
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fd7c 	bl	8006ba6 <USBD_LL_SOF>
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080be:	2301      	movs	r3, #1
 80080c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]
 80080ce:	e008      	b.n	80080e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d102      	bne.n	80080de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80080d8:	2301      	movs	r3, #1
 80080da:	73fb      	strb	r3, [r7, #15]
 80080dc:	e001      	b.n	80080e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80080de:	f7f8 fc45 	bl	800096c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080e8:	7bfa      	ldrb	r2, [r7, #15]
 80080ea:	4611      	mov	r1, r2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe fd1c 	bl	8006b2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fe fcc4 	bl	8006a86 <USBD_LL_Reset>
}
 80080fe:	bf00      	nop
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fd17 	bl	8006b4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6812      	ldr	r2, [r2, #0]
 800812a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800812e:	f043 0301 	orr.w	r3, r3, #1
 8008132:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a1b      	ldr	r3, [r3, #32]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d005      	beq.n	8008148 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800813c:	4b04      	ldr	r3, [pc, #16]	; (8008150 <HAL_PCD_SuspendCallback+0x48>)
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	4a03      	ldr	r2, [pc, #12]	; (8008150 <HAL_PCD_SuspendCallback+0x48>)
 8008142:	f043 0306 	orr.w	r3, r3, #6
 8008146:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	e000ed00 	.word	0xe000ed00

08008154 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fd07 	bl	8006b76 <USBD_LL_Resume>
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fd5f 	bl	8006c4a <USBD_LL_IsoOUTIncomplete>
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fd1b 	bl	8006be6 <USBD_LL_IsoINIncomplete>
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fd71 	bl	8006cae <USBD_LL_DevConnected>
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fd6e 	bl	8006cc4 <USBD_LL_DevDisconnected>
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d13c      	bne.n	800827a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008200:	4a20      	ldr	r2, [pc, #128]	; (8008284 <USBD_LL_Init+0x94>)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a1e      	ldr	r2, [pc, #120]	; (8008284 <USBD_LL_Init+0x94>)
 800820c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008210:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <USBD_LL_Init+0x94>)
 8008212:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008216:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008218:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <USBD_LL_Init+0x94>)
 800821a:	2204      	movs	r2, #4
 800821c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800821e:	4b19      	ldr	r3, [pc, #100]	; (8008284 <USBD_LL_Init+0x94>)
 8008220:	2202      	movs	r2, #2
 8008222:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008224:	4b17      	ldr	r3, [pc, #92]	; (8008284 <USBD_LL_Init+0x94>)
 8008226:	2200      	movs	r2, #0
 8008228:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800822a:	4b16      	ldr	r3, [pc, #88]	; (8008284 <USBD_LL_Init+0x94>)
 800822c:	2202      	movs	r2, #2
 800822e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008230:	4b14      	ldr	r3, [pc, #80]	; (8008284 <USBD_LL_Init+0x94>)
 8008232:	2200      	movs	r2, #0
 8008234:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008236:	4b13      	ldr	r3, [pc, #76]	; (8008284 <USBD_LL_Init+0x94>)
 8008238:	2200      	movs	r2, #0
 800823a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800823c:	4b11      	ldr	r3, [pc, #68]	; (8008284 <USBD_LL_Init+0x94>)
 800823e:	2200      	movs	r2, #0
 8008240:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008242:	4b10      	ldr	r3, [pc, #64]	; (8008284 <USBD_LL_Init+0x94>)
 8008244:	2200      	movs	r2, #0
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008248:	4b0e      	ldr	r3, [pc, #56]	; (8008284 <USBD_LL_Init+0x94>)
 800824a:	2200      	movs	r2, #0
 800824c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800824e:	480d      	ldr	r0, [pc, #52]	; (8008284 <USBD_LL_Init+0x94>)
 8008250:	f7f9 fae9 	bl	8001826 <HAL_PCD_Init>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800825a:	f7f8 fb87 	bl	800096c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800825e:	2180      	movs	r1, #128	; 0x80
 8008260:	4808      	ldr	r0, [pc, #32]	; (8008284 <USBD_LL_Init+0x94>)
 8008262:	f7fa fd40 	bl	8002ce6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008266:	2240      	movs	r2, #64	; 0x40
 8008268:	2100      	movs	r1, #0
 800826a:	4806      	ldr	r0, [pc, #24]	; (8008284 <USBD_LL_Init+0x94>)
 800826c:	f7fa fcf4 	bl	8002c58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008270:	2280      	movs	r2, #128	; 0x80
 8008272:	2101      	movs	r1, #1
 8008274:	4803      	ldr	r0, [pc, #12]	; (8008284 <USBD_LL_Init+0x94>)
 8008276:	f7fa fcef 	bl	8002c58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	20001714 	.word	0x20001714

08008288 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800829e:	4618      	mov	r0, r3
 80082a0:	f7f9 fbde 	bl	8001a60 <HAL_PCD_Start>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 f942 	bl	8008534 <USBD_Get_USB_Status>
 80082b0:	4603      	mov	r3, r0
 80082b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	4608      	mov	r0, r1
 80082c8:	4611      	mov	r1, r2
 80082ca:	461a      	mov	r2, r3
 80082cc:	4603      	mov	r3, r0
 80082ce:	70fb      	strb	r3, [r7, #3]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70bb      	strb	r3, [r7, #2]
 80082d4:	4613      	mov	r3, r2
 80082d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082e6:	78bb      	ldrb	r3, [r7, #2]
 80082e8:	883a      	ldrh	r2, [r7, #0]
 80082ea:	78f9      	ldrb	r1, [r7, #3]
 80082ec:	f7fa f8af 	bl	800244e <HAL_PCD_EP_Open>
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 f91c 	bl	8008534 <USBD_Get_USB_Status>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008300:	7bbb      	ldrb	r3, [r7, #14]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f7fa f8f8 	bl	800251e <HAL_PCD_EP_Close>
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008332:	7bfb      	ldrb	r3, [r7, #15]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 f8fd 	bl	8008534 <USBD_Get_USB_Status>
 800833a:	4603      	mov	r3, r0
 800833c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800833e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008362:	78fa      	ldrb	r2, [r7, #3]
 8008364:	4611      	mov	r1, r2
 8008366:	4618      	mov	r0, r3
 8008368:	f7fa f9d0 	bl	800270c <HAL_PCD_EP_SetStall>
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f8de 	bl	8008534 <USBD_Get_USB_Status>
 8008378:	4603      	mov	r3, r0
 800837a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800837c:	7bbb      	ldrb	r3, [r7, #14]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083a0:	78fa      	ldrb	r2, [r7, #3]
 80083a2:	4611      	mov	r1, r2
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fa fa15 	bl	80027d4 <HAL_PCD_EP_ClrStall>
 80083aa:	4603      	mov	r3, r0
 80083ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 f8bf 	bl	8008534 <USBD_Get_USB_Status>
 80083b6:	4603      	mov	r3, r0
 80083b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	da0b      	bge.n	80083f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	4613      	mov	r3, r2
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	4413      	add	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	440b      	add	r3, r1
 80083f2:	333e      	adds	r3, #62	; 0x3e
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	e00b      	b.n	8008410 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083f8:	78fb      	ldrb	r3, [r7, #3]
 80083fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083fe:	68f9      	ldr	r1, [r7, #12]
 8008400:	4613      	mov	r3, r2
 8008402:	00db      	lsls	r3, r3, #3
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800840e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008436:	78fa      	ldrb	r2, [r7, #3]
 8008438:	4611      	mov	r1, r2
 800843a:	4618      	mov	r0, r3
 800843c:	f7f9 ffe2 	bl	8002404 <HAL_PCD_SetAddress>
 8008440:	4603      	mov	r3, r0
 8008442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f874 	bl	8008534 <USBD_Get_USB_Status>
 800844c:	4603      	mov	r3, r0
 800844e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008450:	7bbb      	ldrb	r3, [r7, #14]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	460b      	mov	r3, r1
 8008468:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008478:	7af9      	ldrb	r1, [r7, #11]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	f7fa f8fb 	bl	8002678 <HAL_PCD_EP_Transmit>
 8008482:	4603      	mov	r3, r0
 8008484:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	4618      	mov	r0, r3
 800848a:	f000 f853 	bl	8008534 <USBD_Get_USB_Status>
 800848e:	4603      	mov	r3, r0
 8008490:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008492:	7dbb      	ldrb	r3, [r7, #22]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	607a      	str	r2, [r7, #4]
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	460b      	mov	r3, r1
 80084aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084ba:	7af9      	ldrb	r1, [r7, #11]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	f7fa f877 	bl	80025b2 <HAL_PCD_EP_Receive>
 80084c4:	4603      	mov	r3, r0
 80084c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f832 	bl	8008534 <USBD_Get_USB_Status>
 80084d0:	4603      	mov	r3, r0
 80084d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fa f8a7 	bl	8002648 <HAL_PCD_EP_GetRxCount>
 80084fa:	4603      	mov	r3, r0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800850c:	4b03      	ldr	r3, [pc, #12]	; (800851c <USBD_static_malloc+0x18>)
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20001c20 	.word	0x20001c20

08008520 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]

}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	2b03      	cmp	r3, #3
 8008546:	d817      	bhi.n	8008578 <USBD_Get_USB_Status+0x44>
 8008548:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <USBD_Get_USB_Status+0x1c>)
 800854a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854e:	bf00      	nop
 8008550:	08008561 	.word	0x08008561
 8008554:	08008567 	.word	0x08008567
 8008558:	0800856d 	.word	0x0800856d
 800855c:	08008573 	.word	0x08008573
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
    break;
 8008564:	e00b      	b.n	800857e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008566:	2303      	movs	r3, #3
 8008568:	73fb      	strb	r3, [r7, #15]
    break;
 800856a:	e008      	b.n	800857e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800856c:	2301      	movs	r3, #1
 800856e:	73fb      	strb	r3, [r7, #15]
    break;
 8008570:	e005      	b.n	800857e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008572:	2303      	movs	r3, #3
 8008574:	73fb      	strb	r3, [r7, #15]
    break;
 8008576:	e002      	b.n	800857e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008578:	2303      	movs	r3, #3
 800857a:	73fb      	strb	r3, [r7, #15]
    break;
 800857c:	bf00      	nop
  }
  return usb_status;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <__libc_init_array>:
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	4d0d      	ldr	r5, [pc, #52]	; (80085c4 <__libc_init_array+0x38>)
 8008590:	4c0d      	ldr	r4, [pc, #52]	; (80085c8 <__libc_init_array+0x3c>)
 8008592:	1b64      	subs	r4, r4, r5
 8008594:	10a4      	asrs	r4, r4, #2
 8008596:	2600      	movs	r6, #0
 8008598:	42a6      	cmp	r6, r4
 800859a:	d109      	bne.n	80085b0 <__libc_init_array+0x24>
 800859c:	4d0b      	ldr	r5, [pc, #44]	; (80085cc <__libc_init_array+0x40>)
 800859e:	4c0c      	ldr	r4, [pc, #48]	; (80085d0 <__libc_init_array+0x44>)
 80085a0:	f000 f82e 	bl	8008600 <_init>
 80085a4:	1b64      	subs	r4, r4, r5
 80085a6:	10a4      	asrs	r4, r4, #2
 80085a8:	2600      	movs	r6, #0
 80085aa:	42a6      	cmp	r6, r4
 80085ac:	d105      	bne.n	80085ba <__libc_init_array+0x2e>
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b4:	4798      	blx	r3
 80085b6:	3601      	adds	r6, #1
 80085b8:	e7ee      	b.n	8008598 <__libc_init_array+0xc>
 80085ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80085be:	4798      	blx	r3
 80085c0:	3601      	adds	r6, #1
 80085c2:	e7f2      	b.n	80085aa <__libc_init_array+0x1e>
 80085c4:	08008678 	.word	0x08008678
 80085c8:	08008678 	.word	0x08008678
 80085cc:	08008678 	.word	0x08008678
 80085d0:	0800867c 	.word	0x0800867c

080085d4 <memcpy>:
 80085d4:	440a      	add	r2, r1
 80085d6:	4291      	cmp	r1, r2
 80085d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085dc:	d100      	bne.n	80085e0 <memcpy+0xc>
 80085de:	4770      	bx	lr
 80085e0:	b510      	push	{r4, lr}
 80085e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ea:	4291      	cmp	r1, r2
 80085ec:	d1f9      	bne.n	80085e2 <memcpy+0xe>
 80085ee:	bd10      	pop	{r4, pc}

080085f0 <memset>:
 80085f0:	4402      	add	r2, r0
 80085f2:	4603      	mov	r3, r0
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d100      	bne.n	80085fa <memset+0xa>
 80085f8:	4770      	bx	lr
 80085fa:	f803 1b01 	strb.w	r1, [r3], #1
 80085fe:	e7f9      	b.n	80085f4 <memset+0x4>

08008600 <_init>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr

0800860c <_fini>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	bf00      	nop
 8008610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008612:	bc08      	pop	{r3}
 8008614:	469e      	mov	lr, r3
 8008616:	4770      	bx	lr
