
2_3_23_VESC_Board_Test_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a170  0800a170  0001a170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a29c  0800a29c  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2a4  0800a2a4  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  0800a2ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020760  2**0
                  CONTENTS
 10 .bss          00001da0  20000760  20000760  00020760  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002500  20002500  00020760  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151e0  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326f  00000000  00000000  00035970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00038be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e0  00000000  00000000  00039e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023933  00000000  00000000  0003af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165ce  00000000  00000000  0005e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec3a  00000000  00000000  00074e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143a53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000500c  00000000  00000000  00143aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000760 	.word	0x20000760
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a158 	.word	0x0800a158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000764 	.word	0x20000764
 80001cc:	0800a158 	.word	0x0800a158

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ledBlink>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledBlink()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	for (int ledCount=0;ledCount<6;ledCount++)
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e00a      	b.n	80005a6 <ledBlink+0x22>
	{
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin);
 8000590:	2103      	movs	r1, #3
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <ledBlink+0x3c>)
 8000594:	f001 ffd1 	bl	800253a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f001 f8e2 	bl	8001764 <HAL_Delay>
	for (int ledCount=0;ledCount<6;ledCount++)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	ddf1      	ble.n	8000590 <ledBlink+0xc>
	}
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2103      	movs	r1, #3
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <ledBlink+0x3c>)
 80005b2:	f001 ffa9 	bl	8002508 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020400 	.word	0x40020400

080005c4 <USBTest>:

void USBTest()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	char *data = "Hello ST MicroController\r\n";
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <USBTest+0x2c>)
 80005cc:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS((uint8_t *)data, strlen(data));
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff fdfe 	bl	80001d0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f008 fcc0 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f001 f8be 	bl	8001764 <HAL_Delay>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	0800a170 	.word	0x0800a170

080005f4 <DRV8301_Enable>:
void DRV8301_Enable()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2120      	movs	r1, #32
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <DRV8301_Enable+0x14>)
 80005fe:	f001 ff83 	bl	8002508 <HAL_GPIO_WritePin>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020400 	.word	0x40020400

0800060c <DRV8301_Disable>:
void DRV8301_Disable()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <DRV8301_Disable+0x14>)
 8000616:	f001 ff77 	bl	8002508 <HAL_GPIO_WritePin>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020400 	.word	0x40020400

08000624 <DRV8301_NormalPWM>:
void DRV8301_NormalPWM()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 51;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 800062a:	2233      	movs	r2, #51	; 0x33
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4814      	ldr	r0, [pc, #80]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000632:	f003 ff5b 	bl	80044ec <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000636:	2100      	movs	r1, #0
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800063a:	f004 fdf3 	bl	8005224 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f001 f890 	bl	8001764 <HAL_Delay>
	TIM1->CCR2 = 51;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 8000646:	2233      	movs	r2, #51	; 0x33
 8000648:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800064a:	2104      	movs	r1, #4
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800064e:	f003 ff4d 	bl	80044ec <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000652:	2104      	movs	r1, #4
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000656:	f004 fde5 	bl	8005224 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f001 f882 	bl	8001764 <HAL_Delay>
	TIM1->CCR3 = 51;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 8000662:	2233      	movs	r2, #51	; 0x33
 8000664:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000666:	2108      	movs	r1, #8
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800066a:	f003 ff3f 	bl	80044ec <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800066e:	2108      	movs	r1, #8
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000672:	f004 fdd7 	bl	8005224 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f001 f874 	bl	8001764 <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010000 	.word	0x40010000
 8000684:	200007c8 	.word	0x200007c8

08000688 <delay_us>:
void delay_us (uint16_t us)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <delay_us+0x30>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 800069a:	bf00      	nop
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <delay_us+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3f9      	bcc.n	800069c <delay_us+0x14>
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000810 	.word	0x20000810

080006bc <DRV8301_CommutationPWM>:
void DRV8301_CommutationPWM()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	for(k=0;k<73;k++)
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
 80006c6:	e03f      	b.n	8000748 <DRV8301_CommutationPWM+0x8c>
	{
		PhaseA = PhaseA +1;
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006d2:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = PhaseA_wave[PhaseA];
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <DRV8301_CommutationPWM+0xb4>)
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <DRV8301_CommutationPWM+0xb8>)
 80006de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006e2:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006e4:	2100      	movs	r1, #0
 80006e6:	4824      	ldr	r0, [pc, #144]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 80006e8:	f003 ff00 	bl	80044ec <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006ec:	2100      	movs	r1, #0
 80006ee:	4822      	ldr	r0, [pc, #136]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 80006f0:	f004 fd98 	bl	8005224 <HAL_TIMEx_PWMN_Start>
		TIM1->CCR2 = PhaseB_wave[PhaseA];
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <DRV8301_CommutationPWM+0xb4>)
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <DRV8301_CommutationPWM+0xc0>)
 80006fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000702:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000704:	2104      	movs	r1, #4
 8000706:	481c      	ldr	r0, [pc, #112]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000708:	f003 fef0 	bl	80044ec <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000710:	f004 fd88 	bl	8005224 <HAL_TIMEx_PWMN_Start>
		TIM1->CCR3 = PhaseC_wave[PhaseA];
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	4a15      	ldr	r2, [pc, #84]	; (8000770 <DRV8301_CommutationPWM+0xb4>)
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <DRV8301_CommutationPWM+0xc4>)
 800071e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000722:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000724:	2108      	movs	r1, #8
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000728:	f003 fee0 	bl	80044ec <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800072c:	2108      	movs	r1, #8
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000730:	f004 fd78 	bl	8005224 <HAL_TIMEx_PWMN_Start>
		delay_us(330);
 8000734:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8000738:	f7ff ffa6 	bl	8000688 <delay_us>
	for(k=0;k<73;k++)
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 8000746:	801a      	strh	r2, [r3, #0]
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b48      	cmp	r3, #72	; 0x48
 800074e:	d9bb      	bls.n	80006c8 <DRV8301_CommutationPWM+0xc>
	}
	if(k>=73)
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	2b48      	cmp	r3, #72	; 0x48
 8000756:	d905      	bls.n	8000764 <DRV8301_CommutationPWM+0xa8>
	{
		PhaseA=0;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 800075a:	2200      	movs	r2, #0
 800075c:	801a      	strh	r2, [r3, #0]
		k=0;
 800075e:	4b02      	ldr	r3, [pc, #8]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
	}
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000077e 	.word	0x2000077e
 800076c:	2000077c 	.word	0x2000077c
 8000770:	40010000 	.word	0x40010000
 8000774:	20000000 	.word	0x20000000
 8000778:	200007c8 	.word	0x200007c8
 800077c:	20000200 	.word	0x20000200
 8000780:	20000400 	.word	0x20000400

08000784 <VSENS_1>:
void VSENS_1()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_0;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <VSENS_1+0x2c>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <VSENS_1+0x2c>)
 8000790:	2201      	movs	r2, #1
 8000792:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <VSENS_1+0x2c>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	4905      	ldr	r1, [pc, #20]	; (80007b0 <VSENS_1+0x2c>)
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <VSENS_1+0x30>)
 800079e:	f001 f9e7 	bl	8001b70 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <VSENS_1+0x28>
	{
	Error_Handler();
 80007a8:	f000 fd94 	bl	80012d4 <Error_Handler>
	}
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000858 	.word	0x20000858
 80007b4:	20000780 	.word	0x20000780

080007b8 <VSENS_2>:

void VSENS_2()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_1;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <VSENS_2+0x2c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <VSENS_2+0x2c>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <VSENS_2+0x2c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <VSENS_2+0x2c>)
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <VSENS_2+0x30>)
 80007d2:	f001 f9cd 	bl	8001b70 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <VSENS_2+0x28>
	{
	Error_Handler();
 80007dc:	f000 fd7a 	bl	80012d4 <Error_Handler>
	}
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000858 	.word	0x20000858
 80007e8:	20000780 	.word	0x20000780

080007ec <VSENS_3>:
void VSENS_3()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_2;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <VSENS_3+0x2c>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <VSENS_3+0x2c>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <VSENS_3+0x2c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	4905      	ldr	r1, [pc, #20]	; (8000818 <VSENS_3+0x2c>)
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <VSENS_3+0x30>)
 8000806:	f001 f9b3 	bl	8001b70 <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <VSENS_3+0x28>
	{
	Error_Handler();
 8000810:	f000 fd60 	bl	80012d4 <Error_Handler>
	}
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000858 	.word	0x20000858
 800081c:	20000780 	.word	0x20000780

08000820 <TEMP_NTC>:
void TEMP_NTC()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <TEMP_NTC+0x2c>)
 8000826:	2203      	movs	r2, #3
 8000828:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <TEMP_NTC+0x2c>)
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <TEMP_NTC+0x2c>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000836:	4905      	ldr	r1, [pc, #20]	; (800084c <TEMP_NTC+0x2c>)
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <TEMP_NTC+0x30>)
 800083a:	f001 f999 	bl	8001b70 <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <TEMP_NTC+0x28>
	{
	Error_Handler();
 8000844:	f000 fd46 	bl	80012d4 <Error_Handler>
	}
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000858 	.word	0x20000858
 8000850:	20000780 	.word	0x20000780

08000854 <ADC_EXT1>:
void ADC_EXT1()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_5;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <ADC_EXT1+0x2c>)
 800085a:	2205      	movs	r2, #5
 800085c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <ADC_EXT1+0x2c>)
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <ADC_EXT1+0x2c>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <ADC_EXT1+0x2c>)
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <ADC_EXT1+0x30>)
 800086e:	f001 f97f 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <ADC_EXT1+0x28>
	{
	Error_Handler();
 8000878:	f000 fd2c 	bl	80012d4 <Error_Handler>
	}
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000858 	.word	0x20000858
 8000884:	20000780 	.word	0x20000780

08000888 <ADC_EXT2>:
void ADC_EXT2()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_6;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <ADC_EXT2+0x2c>)
 800088e:	2206      	movs	r2, #6
 8000890:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <ADC_EXT2+0x2c>)
 8000894:	2201      	movs	r2, #1
 8000896:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <ADC_EXT2+0x2c>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089e:	4905      	ldr	r1, [pc, #20]	; (80008b4 <ADC_EXT2+0x2c>)
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <ADC_EXT2+0x30>)
 80008a2:	f001 f965 	bl	8001b70 <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <ADC_EXT2+0x28>
	{
	Error_Handler();
 80008ac:	f000 fd12 	bl	80012d4 <Error_Handler>
	}
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000858 	.word	0x20000858
 80008b8:	20000780 	.word	0x20000780

080008bc <CURREN_1>:
void CURREN_1()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_10;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <CURREN_1+0x2c>)
 80008c2:	220a      	movs	r2, #10
 80008c4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <CURREN_1+0x2c>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <CURREN_1+0x2c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	4905      	ldr	r1, [pc, #20]	; (80008e8 <CURREN_1+0x2c>)
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <CURREN_1+0x30>)
 80008d6:	f001 f94b 	bl	8001b70 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <CURREN_1+0x28>
	{
	Error_Handler();
 80008e0:	f000 fcf8 	bl	80012d4 <Error_Handler>
	}
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000858 	.word	0x20000858
 80008ec:	20000780 	.word	0x20000780

080008f0 <CURREN_2>:
void CURREN_2()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_11;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <CURREN_2+0x2c>)
 80008f6:	220b      	movs	r2, #11
 80008f8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <CURREN_2+0x2c>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <CURREN_2+0x2c>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000906:	4905      	ldr	r1, [pc, #20]	; (800091c <CURREN_2+0x2c>)
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <CURREN_2+0x30>)
 800090a:	f001 f931 	bl	8001b70 <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <CURREN_2+0x28>
	{
	Error_Handler();
 8000914:	f000 fcde 	bl	80012d4 <Error_Handler>
	}
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000858 	.word	0x20000858
 8000920:	20000780 	.word	0x20000780

08000924 <CURREN_3>:
void CURREN_3()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_12;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <CURREN_3+0x2c>)
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <CURREN_3+0x2c>)
 8000930:	2201      	movs	r2, #1
 8000932:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <CURREN_3+0x2c>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093a:	4905      	ldr	r1, [pc, #20]	; (8000950 <CURREN_3+0x2c>)
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <CURREN_3+0x30>)
 800093e:	f001 f917 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <CURREN_3+0x28>
	{
	Error_Handler();
 8000948:	f000 fcc4 	bl	80012d4 <Error_Handler>
	}
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000858 	.word	0x20000858
 8000954:	20000780 	.word	0x20000780

08000958 <TEMP_MOTOR>:
void TEMP_MOTOR()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_14;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <TEMP_MOTOR+0x2c>)
 800095e:	220e      	movs	r2, #14
 8000960:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <TEMP_MOTOR+0x2c>)
 8000964:	2201      	movs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <TEMP_MOTOR+0x2c>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	4905      	ldr	r1, [pc, #20]	; (8000984 <TEMP_MOTOR+0x2c>)
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <TEMP_MOTOR+0x30>)
 8000972:	f001 f8fd 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <TEMP_MOTOR+0x28>
	{
	Error_Handler();
 800097c:	f000 fcaa 	bl	80012d4 <Error_Handler>
	}
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000858 	.word	0x20000858
 8000988:	20000780 	.word	0x20000780

0800098c <CAAF>:
void CAAF()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	VSENS_1();
 8000990:	f7ff fef8 	bl	8000784 <VSENS_1>
	HAL_ADC_Start(&hadc1);
 8000994:	48be      	ldr	r0, [pc, #760]	; (8000c90 <CAAF+0x304>)
 8000996:	f000 ff4d 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 800099a:	21c8      	movs	r1, #200	; 0xc8
 800099c:	48bc      	ldr	r0, [pc, #752]	; (8000c90 <CAAF+0x304>)
 800099e:	f001 f84e 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 80009a2:	48bb      	ldr	r0, [pc, #748]	; (8000c90 <CAAF+0x304>)
 80009a4:	f001 f8d6 	bl	8001b54 <HAL_ADC_GetValue>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4bb9      	ldr	r3, [pc, #740]	; (8000c94 <CAAF+0x308>)
 80009ae:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80009b0:	48b7      	ldr	r0, [pc, #732]	; (8000c90 <CAAF+0x304>)
 80009b2:	f001 f811 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[0]);
 80009b6:	4bb7      	ldr	r3, [pc, #732]	; (8000c94 <CAAF+0x308>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	49b6      	ldr	r1, [pc, #728]	; (8000c98 <CAAF+0x30c>)
 80009be:	48b7      	ldr	r0, [pc, #732]	; (8000c9c <CAAF+0x310>)
 80009c0:	f008 ff6a 	bl	8009898 <siprintf>
	CDC_Transmit_FS("VSENS_1 = ", 10);
 80009c4:	210a      	movs	r1, #10
 80009c6:	48b6      	ldr	r0, [pc, #728]	; (8000ca0 <CAAF+0x314>)
 80009c8:	f008 faca 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 80009cc:	2064      	movs	r0, #100	; 0x64
 80009ce:	f000 fec9 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 80009d2:	2108      	movs	r1, #8
 80009d4:	48b1      	ldr	r0, [pc, #708]	; (8000c9c <CAAF+0x310>)
 80009d6:	f008 fac3 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 80009da:	2064      	movs	r0, #100	; 0x64
 80009dc:	f000 fec2 	bl	8001764 <HAL_Delay>


	VSENS_2();
 80009e0:	f7ff feea 	bl	80007b8 <VSENS_2>
	HAL_ADC_Start(&hadc1);
 80009e4:	48aa      	ldr	r0, [pc, #680]	; (8000c90 <CAAF+0x304>)
 80009e6:	f000 ff25 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 80009ea:	21c8      	movs	r1, #200	; 0xc8
 80009ec:	48a8      	ldr	r0, [pc, #672]	; (8000c90 <CAAF+0x304>)
 80009ee:	f001 f826 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 80009f2:	48a7      	ldr	r0, [pc, #668]	; (8000c90 <CAAF+0x304>)
 80009f4:	f001 f8ae 	bl	8001b54 <HAL_ADC_GetValue>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4ba5      	ldr	r3, [pc, #660]	; (8000c94 <CAAF+0x308>)
 80009fe:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 8000a00:	48a3      	ldr	r0, [pc, #652]	; (8000c90 <CAAF+0x304>)
 8000a02:	f000 ffe9 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[1]);
 8000a06:	4ba3      	ldr	r3, [pc, #652]	; (8000c94 <CAAF+0x308>)
 8000a08:	885b      	ldrh	r3, [r3, #2]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	49a2      	ldr	r1, [pc, #648]	; (8000c98 <CAAF+0x30c>)
 8000a0e:	48a3      	ldr	r0, [pc, #652]	; (8000c9c <CAAF+0x310>)
 8000a10:	f008 ff42 	bl	8009898 <siprintf>
	CDC_Transmit_FS("VSENS_2 = ", 10);
 8000a14:	210a      	movs	r1, #10
 8000a16:	48a3      	ldr	r0, [pc, #652]	; (8000ca4 <CAAF+0x318>)
 8000a18:	f008 faa2 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a1c:	2064      	movs	r0, #100	; 0x64
 8000a1e:	f000 fea1 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000a22:	2108      	movs	r1, #8
 8000a24:	489d      	ldr	r0, [pc, #628]	; (8000c9c <CAAF+0x310>)
 8000a26:	f008 fa9b 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f000 fe9a 	bl	8001764 <HAL_Delay>

	VSENS_3();
 8000a30:	f7ff fedc 	bl	80007ec <VSENS_3>
	HAL_ADC_Start(&hadc1);
 8000a34:	4896      	ldr	r0, [pc, #600]	; (8000c90 <CAAF+0x304>)
 8000a36:	f000 fefd 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000a3a:	21c8      	movs	r1, #200	; 0xc8
 8000a3c:	4894      	ldr	r0, [pc, #592]	; (8000c90 <CAAF+0x304>)
 8000a3e:	f000 fffe 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8000a42:	4893      	ldr	r0, [pc, #588]	; (8000c90 <CAAF+0x304>)
 8000a44:	f001 f886 	bl	8001b54 <HAL_ADC_GetValue>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4b91      	ldr	r3, [pc, #580]	; (8000c94 <CAAF+0x308>)
 8000a4e:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 8000a50:	488f      	ldr	r0, [pc, #572]	; (8000c90 <CAAF+0x304>)
 8000a52:	f000 ffc1 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[2]);
 8000a56:	4b8f      	ldr	r3, [pc, #572]	; (8000c94 <CAAF+0x308>)
 8000a58:	889b      	ldrh	r3, [r3, #4]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	498e      	ldr	r1, [pc, #568]	; (8000c98 <CAAF+0x30c>)
 8000a5e:	488f      	ldr	r0, [pc, #572]	; (8000c9c <CAAF+0x310>)
 8000a60:	f008 ff1a 	bl	8009898 <siprintf>
	CDC_Transmit_FS("VSENS_3 = ", 10);
 8000a64:	210a      	movs	r1, #10
 8000a66:	4890      	ldr	r0, [pc, #576]	; (8000ca8 <CAAF+0x31c>)
 8000a68:	f008 fa7a 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a6c:	2064      	movs	r0, #100	; 0x64
 8000a6e:	f000 fe79 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000a72:	2108      	movs	r1, #8
 8000a74:	4889      	ldr	r0, [pc, #548]	; (8000c9c <CAAF+0x310>)
 8000a76:	f008 fa73 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a7a:	2064      	movs	r0, #100	; 0x64
 8000a7c:	f000 fe72 	bl	8001764 <HAL_Delay>

	TEMP_NTC();
 8000a80:	f7ff fece 	bl	8000820 <TEMP_NTC>
	HAL_ADC_Start(&hadc1);
 8000a84:	4882      	ldr	r0, [pc, #520]	; (8000c90 <CAAF+0x304>)
 8000a86:	f000 fed5 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000a8a:	21c8      	movs	r1, #200	; 0xc8
 8000a8c:	4880      	ldr	r0, [pc, #512]	; (8000c90 <CAAF+0x304>)
 8000a8e:	f000 ffd6 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[3] = HAL_ADC_GetValue(&hadc1);
 8000a92:	487f      	ldr	r0, [pc, #508]	; (8000c90 <CAAF+0x304>)
 8000a94:	f001 f85e 	bl	8001b54 <HAL_ADC_GetValue>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b7d      	ldr	r3, [pc, #500]	; (8000c94 <CAAF+0x308>)
 8000a9e:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(&hadc1);
 8000aa0:	487b      	ldr	r0, [pc, #492]	; (8000c90 <CAAF+0x304>)
 8000aa2:	f000 ff99 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[3]);
 8000aa6:	4b7b      	ldr	r3, [pc, #492]	; (8000c94 <CAAF+0x308>)
 8000aa8:	88db      	ldrh	r3, [r3, #6]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	497a      	ldr	r1, [pc, #488]	; (8000c98 <CAAF+0x30c>)
 8000aae:	487b      	ldr	r0, [pc, #492]	; (8000c9c <CAAF+0x310>)
 8000ab0:	f008 fef2 	bl	8009898 <siprintf>
	CDC_Transmit_FS("TEMP_NTC = ",11);
 8000ab4:	210b      	movs	r1, #11
 8000ab6:	487d      	ldr	r0, [pc, #500]	; (8000cac <CAAF+0x320>)
 8000ab8:	f008 fa52 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000abc:	2064      	movs	r0, #100	; 0x64
 8000abe:	f000 fe51 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4875      	ldr	r0, [pc, #468]	; (8000c9c <CAAF+0x310>)
 8000ac6:	f008 fa4b 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000aca:	2064      	movs	r0, #100	; 0x64
 8000acc:	f000 fe4a 	bl	8001764 <HAL_Delay>

	ADC_EXT1();
 8000ad0:	f7ff fec0 	bl	8000854 <ADC_EXT1>
	HAL_ADC_Start(&hadc1);
 8000ad4:	486e      	ldr	r0, [pc, #440]	; (8000c90 <CAAF+0x304>)
 8000ad6:	f000 fead 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000ada:	21c8      	movs	r1, #200	; 0xc8
 8000adc:	486c      	ldr	r0, [pc, #432]	; (8000c90 <CAAF+0x304>)
 8000ade:	f000 ffae 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[4] = HAL_ADC_GetValue(&hadc1);
 8000ae2:	486b      	ldr	r0, [pc, #428]	; (8000c90 <CAAF+0x304>)
 8000ae4:	f001 f836 	bl	8001b54 <HAL_ADC_GetValue>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b69      	ldr	r3, [pc, #420]	; (8000c94 <CAAF+0x308>)
 8000aee:	811a      	strh	r2, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 8000af0:	4867      	ldr	r0, [pc, #412]	; (8000c90 <CAAF+0x304>)
 8000af2:	f000 ff71 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[4]);
 8000af6:	4b67      	ldr	r3, [pc, #412]	; (8000c94 <CAAF+0x308>)
 8000af8:	891b      	ldrh	r3, [r3, #8]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4966      	ldr	r1, [pc, #408]	; (8000c98 <CAAF+0x30c>)
 8000afe:	4867      	ldr	r0, [pc, #412]	; (8000c9c <CAAF+0x310>)
 8000b00:	f008 feca 	bl	8009898 <siprintf>
	CDC_Transmit_FS("ADC_EXT1 = ", 11);
 8000b04:	210b      	movs	r1, #11
 8000b06:	486a      	ldr	r0, [pc, #424]	; (8000cb0 <CAAF+0x324>)
 8000b08:	f008 fa2a 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b0c:	2064      	movs	r0, #100	; 0x64
 8000b0e:	f000 fe29 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000b12:	2108      	movs	r1, #8
 8000b14:	4861      	ldr	r0, [pc, #388]	; (8000c9c <CAAF+0x310>)
 8000b16:	f008 fa23 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f000 fe22 	bl	8001764 <HAL_Delay>

	ADC_EXT2();
 8000b20:	f7ff feb2 	bl	8000888 <ADC_EXT2>
	HAL_ADC_Start(&hadc1);
 8000b24:	485a      	ldr	r0, [pc, #360]	; (8000c90 <CAAF+0x304>)
 8000b26:	f000 fe85 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000b2a:	21c8      	movs	r1, #200	; 0xc8
 8000b2c:	4858      	ldr	r0, [pc, #352]	; (8000c90 <CAAF+0x304>)
 8000b2e:	f000 ff86 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[5] = HAL_ADC_GetValue(&hadc1);
 8000b32:	4857      	ldr	r0, [pc, #348]	; (8000c90 <CAAF+0x304>)
 8000b34:	f001 f80e 	bl	8001b54 <HAL_ADC_GetValue>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b55      	ldr	r3, [pc, #340]	; (8000c94 <CAAF+0x308>)
 8000b3e:	815a      	strh	r2, [r3, #10]
	HAL_ADC_Stop(&hadc1);
 8000b40:	4853      	ldr	r0, [pc, #332]	; (8000c90 <CAAF+0x304>)
 8000b42:	f000 ff49 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[5]);
 8000b46:	4b53      	ldr	r3, [pc, #332]	; (8000c94 <CAAF+0x308>)
 8000b48:	895b      	ldrh	r3, [r3, #10]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4952      	ldr	r1, [pc, #328]	; (8000c98 <CAAF+0x30c>)
 8000b4e:	4853      	ldr	r0, [pc, #332]	; (8000c9c <CAAF+0x310>)
 8000b50:	f008 fea2 	bl	8009898 <siprintf>
	CDC_Transmit_FS("ADC_EXT2 = ", 11);
 8000b54:	210b      	movs	r1, #11
 8000b56:	4857      	ldr	r0, [pc, #348]	; (8000cb4 <CAAF+0x328>)
 8000b58:	f008 fa02 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b5c:	2064      	movs	r0, #100	; 0x64
 8000b5e:	f000 fe01 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000b62:	2108      	movs	r1, #8
 8000b64:	484d      	ldr	r0, [pc, #308]	; (8000c9c <CAAF+0x310>)
 8000b66:	f008 f9fb 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f000 fdfa 	bl	8001764 <HAL_Delay>

	CURREN_1();
 8000b70:	f7ff fea4 	bl	80008bc <CURREN_1>
	HAL_ADC_Start(&hadc1);
 8000b74:	4846      	ldr	r0, [pc, #280]	; (8000c90 <CAAF+0x304>)
 8000b76:	f000 fe5d 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000b7a:	21c8      	movs	r1, #200	; 0xc8
 8000b7c:	4844      	ldr	r0, [pc, #272]	; (8000c90 <CAAF+0x304>)
 8000b7e:	f000 ff5e 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[6] = HAL_ADC_GetValue(&hadc1);
 8000b82:	4843      	ldr	r0, [pc, #268]	; (8000c90 <CAAF+0x304>)
 8000b84:	f000 ffe6 	bl	8001b54 <HAL_ADC_GetValue>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <CAAF+0x308>)
 8000b8e:	819a      	strh	r2, [r3, #12]
	HAL_ADC_Stop(&hadc1);
 8000b90:	483f      	ldr	r0, [pc, #252]	; (8000c90 <CAAF+0x304>)
 8000b92:	f000 ff21 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[6]);
 8000b96:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <CAAF+0x308>)
 8000b98:	899b      	ldrh	r3, [r3, #12]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	493e      	ldr	r1, [pc, #248]	; (8000c98 <CAAF+0x30c>)
 8000b9e:	483f      	ldr	r0, [pc, #252]	; (8000c9c <CAAF+0x310>)
 8000ba0:	f008 fe7a 	bl	8009898 <siprintf>
	CDC_Transmit_FS("CURREN_1 = ", 11);
 8000ba4:	210b      	movs	r1, #11
 8000ba6:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <CAAF+0x32c>)
 8000ba8:	f008 f9da 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000bac:	2064      	movs	r0, #100	; 0x64
 8000bae:	f000 fdd9 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000bb2:	2108      	movs	r1, #8
 8000bb4:	4839      	ldr	r0, [pc, #228]	; (8000c9c <CAAF+0x310>)
 8000bb6:	f008 f9d3 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000bba:	2064      	movs	r0, #100	; 0x64
 8000bbc:	f000 fdd2 	bl	8001764 <HAL_Delay>

	CURREN_2();
 8000bc0:	f7ff fe96 	bl	80008f0 <CURREN_2>
	HAL_ADC_Start(&hadc1);
 8000bc4:	4832      	ldr	r0, [pc, #200]	; (8000c90 <CAAF+0x304>)
 8000bc6:	f000 fe35 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000bca:	21c8      	movs	r1, #200	; 0xc8
 8000bcc:	4830      	ldr	r0, [pc, #192]	; (8000c90 <CAAF+0x304>)
 8000bce:	f000 ff36 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[7] = HAL_ADC_GetValue(&hadc1);
 8000bd2:	482f      	ldr	r0, [pc, #188]	; (8000c90 <CAAF+0x304>)
 8000bd4:	f000 ffbe 	bl	8001b54 <HAL_ADC_GetValue>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <CAAF+0x308>)
 8000bde:	81da      	strh	r2, [r3, #14]
	HAL_ADC_Stop(&hadc1);
 8000be0:	482b      	ldr	r0, [pc, #172]	; (8000c90 <CAAF+0x304>)
 8000be2:	f000 fef9 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[7]);
 8000be6:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <CAAF+0x308>)
 8000be8:	89db      	ldrh	r3, [r3, #14]
 8000bea:	461a      	mov	r2, r3
 8000bec:	492a      	ldr	r1, [pc, #168]	; (8000c98 <CAAF+0x30c>)
 8000bee:	482b      	ldr	r0, [pc, #172]	; (8000c9c <CAAF+0x310>)
 8000bf0:	f008 fe52 	bl	8009898 <siprintf>
	CDC_Transmit_FS("CURREN_2 = ", 11);
 8000bf4:	210b      	movs	r1, #11
 8000bf6:	4831      	ldr	r0, [pc, #196]	; (8000cbc <CAAF+0x330>)
 8000bf8:	f008 f9b2 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000bfc:	2064      	movs	r0, #100	; 0x64
 8000bfe:	f000 fdb1 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000c02:	2108      	movs	r1, #8
 8000c04:	4825      	ldr	r0, [pc, #148]	; (8000c9c <CAAF+0x310>)
 8000c06:	f008 f9ab 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c0a:	2064      	movs	r0, #100	; 0x64
 8000c0c:	f000 fdaa 	bl	8001764 <HAL_Delay>

	CURREN_3();
 8000c10:	f7ff fe88 	bl	8000924 <CURREN_3>
	HAL_ADC_Start(&hadc1);
 8000c14:	481e      	ldr	r0, [pc, #120]	; (8000c90 <CAAF+0x304>)
 8000c16:	f000 fe0d 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000c1a:	21c8      	movs	r1, #200	; 0xc8
 8000c1c:	481c      	ldr	r0, [pc, #112]	; (8000c90 <CAAF+0x304>)
 8000c1e:	f000 ff0e 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[8] = HAL_ADC_GetValue(&hadc1);
 8000c22:	481b      	ldr	r0, [pc, #108]	; (8000c90 <CAAF+0x304>)
 8000c24:	f000 ff96 	bl	8001b54 <HAL_ADC_GetValue>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <CAAF+0x308>)
 8000c2e:	821a      	strh	r2, [r3, #16]
	HAL_ADC_Stop(&hadc1);
 8000c30:	4817      	ldr	r0, [pc, #92]	; (8000c90 <CAAF+0x304>)
 8000c32:	f000 fed1 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[8]);
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <CAAF+0x308>)
 8000c38:	8a1b      	ldrh	r3, [r3, #16]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4916      	ldr	r1, [pc, #88]	; (8000c98 <CAAF+0x30c>)
 8000c3e:	4817      	ldr	r0, [pc, #92]	; (8000c9c <CAAF+0x310>)
 8000c40:	f008 fe2a 	bl	8009898 <siprintf>
	CDC_Transmit_FS("CURREN_3 = ", 11);
 8000c44:	210b      	movs	r1, #11
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <CAAF+0x334>)
 8000c48:	f008 f98a 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c4c:	2064      	movs	r0, #100	; 0x64
 8000c4e:	f000 fd89 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000c52:	2108      	movs	r1, #8
 8000c54:	4811      	ldr	r0, [pc, #68]	; (8000c9c <CAAF+0x310>)
 8000c56:	f008 f983 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c5a:	2064      	movs	r0, #100	; 0x64
 8000c5c:	f000 fd82 	bl	8001764 <HAL_Delay>

	TEMP_MOTOR();
 8000c60:	f7ff fe7a 	bl	8000958 <TEMP_MOTOR>
	HAL_ADC_Start(&hadc1);
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <CAAF+0x304>)
 8000c66:	f000 fde5 	bl	8001834 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,200);
 8000c6a:	21c8      	movs	r1, #200	; 0xc8
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <CAAF+0x304>)
 8000c6e:	f000 fee6 	bl	8001a3e <HAL_ADC_PollForConversion>
	ADC_VAL[9] = HAL_ADC_GetValue(&hadc1);
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <CAAF+0x304>)
 8000c74:	f000 ff6e 	bl	8001b54 <HAL_ADC_GetValue>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <CAAF+0x308>)
 8000c7e:	825a      	strh	r2, [r3, #18]
	HAL_ADC_Stop(&hadc1);
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <CAAF+0x304>)
 8000c82:	f000 fea9 	bl	80019d8 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[9]);
 8000c86:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <CAAF+0x308>)
 8000c88:	8a5b      	ldrh	r3, [r3, #18]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	e01a      	b.n	8000cc4 <CAAF+0x338>
 8000c8e:	bf00      	nop
 8000c90:	20000780 	.word	0x20000780
 8000c94:	200008a8 	.word	0x200008a8
 8000c98:	0800a18c 	.word	0x0800a18c
 8000c9c:	200008bc 	.word	0x200008bc
 8000ca0:	0800a194 	.word	0x0800a194
 8000ca4:	0800a1a0 	.word	0x0800a1a0
 8000ca8:	0800a1ac 	.word	0x0800a1ac
 8000cac:	0800a1b8 	.word	0x0800a1b8
 8000cb0:	0800a1c4 	.word	0x0800a1c4
 8000cb4:	0800a1d0 	.word	0x0800a1d0
 8000cb8:	0800a1dc 	.word	0x0800a1dc
 8000cbc:	0800a1e8 	.word	0x0800a1e8
 8000cc0:	0800a1f4 	.word	0x0800a1f4
 8000cc4:	4909      	ldr	r1, [pc, #36]	; (8000cec <CAAF+0x360>)
 8000cc6:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <CAAF+0x364>)
 8000cc8:	f008 fde6 	bl	8009898 <siprintf>
	CDC_Transmit_FS("TEMP_MOTOR = ", 13);
 8000ccc:	210d      	movs	r1, #13
 8000cce:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <CAAF+0x368>)
 8000cd0:	f008 f946 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000cd4:	2064      	movs	r0, #100	; 0x64
 8000cd6:	f000 fd45 	bl	8001764 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000cda:	2108      	movs	r1, #8
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <CAAF+0x364>)
 8000cde:	f008 f93f 	bl	8008f60 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000ce2:	2064      	movs	r0, #100	; 0x64
 8000ce4:	f000 fd3e 	bl	8001764 <HAL_Delay>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	0800a18c 	.word	0x0800a18c
 8000cf0:	200008bc 	.word	0x200008bc
 8000cf4:	0800a200 	.word	0x0800a200

08000cf8 <IFunction>:
void IFunction()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	if (buffer[0] == '1')
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <IFunction+0x5c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b31      	cmp	r3, #49	; 0x31
 8000d02:	d101      	bne.n	8000d08 <IFunction+0x10>
	{
		ledBlink();
 8000d04:	f7ff fc3e 	bl	8000584 <ledBlink>
	}
	if (buffer[0] == '2')
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <IFunction+0x5c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b32      	cmp	r3, #50	; 0x32
 8000d0e:	d101      	bne.n	8000d14 <IFunction+0x1c>
	{
		USBTest();
 8000d10:	f7ff fc58 	bl	80005c4 <USBTest>
	}
	if (buffer[0] == '3')
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <IFunction+0x5c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b33      	cmp	r3, #51	; 0x33
 8000d1a:	d101      	bne.n	8000d20 <IFunction+0x28>
	{
		CAAF();
 8000d1c:	f7ff fe36 	bl	800098c <CAAF>
	}
	if (buffer[0] == '4')
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <IFunction+0x5c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b34      	cmp	r3, #52	; 0x34
 8000d26:	d101      	bne.n	8000d2c <IFunction+0x34>
	{
		DRV8301_Enable();
 8000d28:	f7ff fc64 	bl	80005f4 <DRV8301_Enable>
	}
	if (buffer[0] == '5')
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <IFunction+0x5c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b35      	cmp	r3, #53	; 0x35
 8000d32:	d101      	bne.n	8000d38 <IFunction+0x40>
	{
		DRV8301_Disable();
 8000d34:	f7ff fc6a 	bl	800060c <DRV8301_Disable>
	}
	if (buffer[0] == '6')
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <IFunction+0x5c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b36      	cmp	r3, #54	; 0x36
 8000d3e:	d101      	bne.n	8000d44 <IFunction+0x4c>
	{
		DRV8301_NormalPWM();
 8000d40:	f7ff fc70 	bl	8000624 <DRV8301_NormalPWM>
	}
	if (buffer[0] == '7')
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <IFunction+0x5c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b37      	cmp	r3, #55	; 0x37
 8000d4a:	d101      	bne.n	8000d50 <IFunction+0x58>
	{
		DRV8301_CommutationPWM();
 8000d4c:	f7ff fcb6 	bl	80006bc <DRV8301_CommutationPWM>
	}
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000868 	.word	0x20000868

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f000 fc90 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f812 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 fa4c 	bl	8001200 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d68:	f000 f876 	bl	8000e58 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d6c:	f000 f944 	bl	8000ff8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d70:	f000 f9fa 	bl	8001168 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d74:	f008 f82c 	bl	8008dd0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <main+0x2c>)
 8000d7a:	f003 faf5 	bl	8004368 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  IFunction();
 8000d7e:	f7ff ffbb 	bl	8000cf8 <IFunction>
 8000d82:	e7fc      	b.n	8000d7e <main+0x26>
 8000d84:	20000810 	.word	0x20000810

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	2230      	movs	r2, #48	; 0x30
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f008 fd76 	bl	8009888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <SystemClock_Config+0xc8>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <SystemClock_Config+0xc8>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <SystemClock_Config+0xc8>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <SystemClock_Config+0xcc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a20      	ldr	r2, [pc, #128]	; (8000e54 <SystemClock_Config+0xcc>)
 8000dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <SystemClock_Config+0xcc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dec:	2310      	movs	r3, #16
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df0:	2302      	movs	r3, #2
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df4:	2300      	movs	r3, #0
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000dfc:	23c0      	movs	r3, #192	; 0xc0
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e04:	2304      	movs	r3, #4
 8000e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 fe2b 	bl	8003a68 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e18:	f000 fa5c 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f003 f88e 	bl	8003f58 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e42:	f000 fa47 	bl	80012d4 <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3750      	adds	r7, #80	; 0x50
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40007000 	.word	0x40007000

08000e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e6a:	4b60      	ldr	r3, [pc, #384]	; (8000fec <MX_ADC1_Init+0x194>)
 8000e6c:	4a60      	ldr	r2, [pc, #384]	; (8000ff0 <MX_ADC1_Init+0x198>)
 8000e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e70:	4b5e      	ldr	r3, [pc, #376]	; (8000fec <MX_ADC1_Init+0x194>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e76:	4b5d      	ldr	r3, [pc, #372]	; (8000fec <MX_ADC1_Init+0x194>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <MX_ADC1_Init+0x194>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e82:	4b5a      	ldr	r3, [pc, #360]	; (8000fec <MX_ADC1_Init+0x194>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e88:	4b58      	ldr	r3, [pc, #352]	; (8000fec <MX_ADC1_Init+0x194>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e90:	4b56      	ldr	r3, [pc, #344]	; (8000fec <MX_ADC1_Init+0x194>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e96:	4b55      	ldr	r3, [pc, #340]	; (8000fec <MX_ADC1_Init+0x194>)
 8000e98:	4a56      	ldr	r2, [pc, #344]	; (8000ff4 <MX_ADC1_Init+0x19c>)
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9c:	4b53      	ldr	r3, [pc, #332]	; (8000fec <MX_ADC1_Init+0x194>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ea2:	4b52      	ldr	r3, [pc, #328]	; (8000fec <MX_ADC1_Init+0x194>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ea8:	4b50      	ldr	r3, [pc, #320]	; (8000fec <MX_ADC1_Init+0x194>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eb0:	4b4e      	ldr	r3, [pc, #312]	; (8000fec <MX_ADC1_Init+0x194>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb6:	484d      	ldr	r0, [pc, #308]	; (8000fec <MX_ADC1_Init+0x194>)
 8000eb8:	f000 fc78 	bl	80017ac <HAL_ADC_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ec2:	f000 fa07 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4845      	ldr	r0, [pc, #276]	; (8000fec <MX_ADC1_Init+0x194>)
 8000ed8:	f000 fe4a 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ee2:	f000 f9f7 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	483e      	ldr	r0, [pc, #248]	; (8000fec <MX_ADC1_Init+0x194>)
 8000ef4:	f000 fe3c 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000efe:	f000 f9e9 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f06:	2303      	movs	r3, #3
 8000f08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4837      	ldr	r0, [pc, #220]	; (8000fec <MX_ADC1_Init+0x194>)
 8000f10:	f000 fe2e 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f1a:	f000 f9db 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4830      	ldr	r0, [pc, #192]	; (8000fec <MX_ADC1_Init+0x194>)
 8000f2c:	f000 fe20 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f36:	f000 f9cd 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	4829      	ldr	r0, [pc, #164]	; (8000fec <MX_ADC1_Init+0x194>)
 8000f48:	f000 fe12 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f52:	f000 f9bf 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f56:	2306      	movs	r3, #6
 8000f58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4822      	ldr	r0, [pc, #136]	; (8000fec <MX_ADC1_Init+0x194>)
 8000f64:	f000 fe04 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000f6e:	f000 f9b1 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f72:	230a      	movs	r3, #10
 8000f74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000f76:	2307      	movs	r3, #7
 8000f78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	481b      	ldr	r0, [pc, #108]	; (8000fec <MX_ADC1_Init+0x194>)
 8000f80:	f000 fdf6 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000f8a:	f000 f9a3 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f8e:	230b      	movs	r3, #11
 8000f90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000f92:	2308      	movs	r3, #8
 8000f94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4814      	ldr	r0, [pc, #80]	; (8000fec <MX_ADC1_Init+0x194>)
 8000f9c:	f000 fde8 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000fa6:	f000 f995 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000faa:	230c      	movs	r3, #12
 8000fac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000fae:	2309      	movs	r3, #9
 8000fb0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_ADC1_Init+0x194>)
 8000fb8:	f000 fdda 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000fc2:	f000 f987 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fc6:	230e      	movs	r3, #14
 8000fc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_ADC1_Init+0x194>)
 8000fd4:	f000 fdcc 	bl	8001b70 <HAL_ADC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000fde:	f000 f979 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000780 	.word	0x20000780
 8000ff0:	40012000 	.word	0x40012000
 8000ff4:	0f000001 	.word	0x0f000001

08000ff8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b096      	sub	sp, #88	; 0x58
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2220      	movs	r2, #32
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f008 fc29 	bl	8009888 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001036:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <MX_TIM1_Init+0x168>)
 8001038:	4a4a      	ldr	r2, [pc, #296]	; (8001164 <MX_TIM1_Init+0x16c>)
 800103a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 800103c:	4b48      	ldr	r3, [pc, #288]	; (8001160 <MX_TIM1_Init+0x168>)
 800103e:	220d      	movs	r2, #13
 8001040:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <MX_TIM1_Init+0x168>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 102;
 8001048:	4b45      	ldr	r3, [pc, #276]	; (8001160 <MX_TIM1_Init+0x168>)
 800104a:	2266      	movs	r2, #102	; 0x66
 800104c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b44      	ldr	r3, [pc, #272]	; (8001160 <MX_TIM1_Init+0x168>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001054:	4b42      	ldr	r3, [pc, #264]	; (8001160 <MX_TIM1_Init+0x168>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <MX_TIM1_Init+0x168>)
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001060:	483f      	ldr	r0, [pc, #252]	; (8001160 <MX_TIM1_Init+0x168>)
 8001062:	f003 f931 	bl	80042c8 <HAL_TIM_Base_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800106c:	f000 f932 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001074:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001076:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800107a:	4619      	mov	r1, r3
 800107c:	4838      	ldr	r0, [pc, #224]	; (8001160 <MX_TIM1_Init+0x168>)
 800107e:	f003 fcc7 	bl	8004a10 <HAL_TIM_ConfigClockSource>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001088:	f000 f924 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800108c:	4834      	ldr	r0, [pc, #208]	; (8001160 <MX_TIM1_Init+0x168>)
 800108e:	f003 f9d3 	bl	8004438 <HAL_TIM_PWM_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001098:	f000 f91c 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010a8:	4619      	mov	r1, r3
 80010aa:	482d      	ldr	r0, [pc, #180]	; (8001160 <MX_TIM1_Init+0x168>)
 80010ac:	f004 f974 	bl	8005398 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010b6:	f000 f90d 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ba:	2360      	movs	r3, #96	; 0x60
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80010d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	481f      	ldr	r0, [pc, #124]	; (8001160 <MX_TIM1_Init+0x168>)
 80010e2:	f003 fbd3 	bl	800488c <HAL_TIM_PWM_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010ec:	f000 f8f2 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	2204      	movs	r2, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4819      	ldr	r0, [pc, #100]	; (8001160 <MX_TIM1_Init+0x168>)
 80010fa:	f003 fbc7 	bl	800488c <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001104:	f000 f8e6 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	2208      	movs	r2, #8
 800110e:	4619      	mov	r1, r3
 8001110:	4813      	ldr	r0, [pc, #76]	; (8001160 <MX_TIM1_Init+0x168>)
 8001112:	f003 fbbb 	bl	800488c <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800111c:	f000 f8da 	bl	80012d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 800112c:	2314      	movs	r3, #20
 800112e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001138:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_TIM1_Init+0x168>)
 8001144:	f004 f9a4 	bl	8005490 <HAL_TIMEx_ConfigBreakDeadTime>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800114e:	f000 f8c1 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <MX_TIM1_Init+0x168>)
 8001154:	f000 f988 	bl	8001468 <HAL_TIM_MspPostInit>

}
 8001158:	bf00      	nop
 800115a:	3758      	adds	r7, #88	; 0x58
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200007c8 	.word	0x200007c8
 8001164:	40010000 	.word	0x40010000

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_TIM2_Init+0x94>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_TIM2_Init+0x94>)
 800118e:	220e      	movs	r2, #14
 8001190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_TIM2_Init+0x94>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_TIM2_Init+0x94>)
 800119a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_TIM2_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_TIM2_Init+0x94>)
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_TIM2_Init+0x94>)
 80011ae:	f003 f88b 	bl	80042c8 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b8:	f000 f88c 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_TIM2_Init+0x94>)
 80011ca:	f003 fc21 	bl	8004a10 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 f87e 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_TIM2_Init+0x94>)
 80011e6:	f004 f8d7 	bl	8005398 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f0:	f000 f870 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000810 	.word	0x20000810

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_GPIO_Init+0xcc>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a2b      	ldr	r2, [pc, #172]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <MX_GPIO_Init+0xcc>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <MX_GPIO_Init+0xcc>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_GPIO_Init+0xcc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2123      	movs	r1, #35	; 0x23
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <MX_GPIO_Init+0xd0>)
 800128c:	f001 f93c 	bl	8002508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin EN_GATE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin;
 8001290:	2323      	movs	r3, #35	; 0x23
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	480a      	ldr	r0, [pc, #40]	; (80012d0 <MX_GPIO_Init+0xd0>)
 80012a8:	f000 ff92 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_GPIO_Init+0xd0>)
 80012c0:	f000 ff86 	bl	80021d0 <HAL_GPIO_Init>

}
 80012c4:	bf00      	nop
 80012c6:	3728      	adds	r7, #40	; 0x28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020400 	.word	0x40020400

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_MspInit+0x4c>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <HAL_ADC_MspInit+0xb0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d141      	bne.n	80013d6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <HAL_ADC_MspInit+0xb4>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <HAL_ADC_MspInit+0xb4>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_ADC_MspInit+0xb4>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_ADC_MspInit+0xb4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_ADC_MspInit+0xb4>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_ADC_MspInit+0xb4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_ADC_MspInit+0xb4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <HAL_ADC_MspInit+0xb4>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_ADC_MspInit+0xb4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = CURREN_1_Pin|CURREN_2_Pin|CURREN_3_Pin|TEMP_MOTOR_Pin;
 80013a6:	2317      	movs	r3, #23
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <HAL_ADC_MspInit+0xb8>)
 80013ba:	f000 ff09 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VSENS_1_Pin|VSENS_2_Pin|VSENS_3_Pin|TEMP_NTC_Pin
 80013be:	236f      	movs	r3, #111	; 0x6f
 80013c0:	617b      	str	r3, [r7, #20]
                          |ADC_EXT1_Pin|ADC_EXT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <HAL_ADC_MspInit+0xbc>)
 80013d2:	f000 fefd 	bl	80021d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40012000 	.word	0x40012000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020000 	.word	0x40020000

080013f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_TIM_Base_MspInit+0x70>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d10e      	bne.n	8001420 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_TIM_Base_MspInit+0x74>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <HAL_TIM_Base_MspInit+0x74>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_TIM_Base_MspInit+0x74>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800141e:	e01a      	b.n	8001456 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d115      	bne.n	8001456 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_TIM_Base_MspInit+0x74>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_TIM_Base_MspInit+0x74>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_TIM_Base_MspInit+0x74>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	201c      	movs	r0, #28
 800144c:	f000 fe89 	bl	8002162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001450:	201c      	movs	r0, #28
 8001452:	f000 fea2 	bl	800219a <HAL_NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40010000 	.word	0x40010000
 8001464:	40023800 	.word	0x40023800

08001468 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_TIM_MspPostInit+0xa8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d13d      	bne.n	8001506 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a20      	ldr	r2, [pc, #128]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_TIM_MspPostInit+0xac>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 80014c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <HAL_TIM_MspPostInit+0xb0>)
 80014e0:	f000 fe76 	bl	80021d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 80014e4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <HAL_TIM_MspPostInit+0xb4>)
 8001502:	f000 fe65 	bl	80021d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40010000 	.word	0x40010000
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400
 800151c:	40020000 	.word	0x40020000

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <NMI_Handler+0x4>

08001526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 f8da 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <TIM2_IRQHandler+0x10>)
 800157a:	f003 f87f 	bl	800467c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000810 	.word	0x20000810

08001588 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <OTG_FS_IRQHandler+0x10>)
 800158e:	f001 f93e 	bl	800280e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20001dc4 	.word	0x20001dc4

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f008 f924 	bl	8009818 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20020000 	.word	0x20020000
 80015fc:	00000400 	.word	0x00000400
 8001600:	200008dc 	.word	0x200008dc
 8001604:	20002500 	.word	0x20002500

08001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001656:	f7ff ffd7 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f008 f8e3 	bl	8009824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff fb7b 	bl	8000d58 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 8001670:	0800a2ac 	.word	0x0800a2ac
  ldr r2, =_sbss
 8001674:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 8001678:	20002500 	.word	0x20002500

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_Init+0x40>)
 800168a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <HAL_Init+0x40>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x40>)
 80016a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 fd4f 	bl	800214c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fe14 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fd67 	bl	80021b6 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 fd2f 	bl	8002162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000600 	.word	0x20000600
 800171c:	20000608 	.word	0x20000608
 8001720:	20000604 	.word	0x20000604

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000608 	.word	0x20000608
 8001748:	200008e0 	.word	0x200008e0

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200008e0 	.word	0x200008e0

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000608 	.word	0x20000608

080017ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e033      	b.n	800182a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d109      	bne.n	80017de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fdb0 	bl	8001330 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d118      	bne.n	800181c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017f2:	f023 0302 	bic.w	r3, r3, #2
 80017f6:	f043 0202 	orr.w	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fad8 	bl	8001db4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f023 0303 	bic.w	r3, r3, #3
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
 800181a:	e001      	b.n	8001820 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_ADC_Start+0x1a>
 800184a:	2302      	movs	r3, #2
 800184c:	e0b2      	b.n	80019b4 <HAL_ADC_Start+0x180>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d018      	beq.n	8001896 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001874:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <HAL_ADC_Start+0x18c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_ADC_Start+0x190>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0c9a      	lsrs	r2, r3, #18
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001888:	e002      	b.n	8001890 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	3b01      	subs	r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f9      	bne.n	800188a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d17a      	bne.n	800199a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e2:	d106      	bne.n	80018f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e8:	f023 0206 	bic.w	r2, r3, #6
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	645a      	str	r2, [r3, #68]	; 0x44
 80018f0:	e002      	b.n	80018f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_ADC_Start+0x194>)
 8001902:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800190c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2b00      	cmp	r3, #0
 8001918:	d12a      	bne.n	8001970 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a2b      	ldr	r2, [pc, #172]	; (80019cc <HAL_ADC_Start+0x198>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d015      	beq.n	8001950 <HAL_ADC_Start+0x11c>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <HAL_ADC_Start+0x19c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d105      	bne.n	800193a <HAL_ADC_Start+0x106>
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_ADC_Start+0x194>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00a      	beq.n	8001950 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <HAL_ADC_Start+0x1a0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d136      	bne.n	80019b2 <HAL_ADC_Start+0x17e>
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_ADC_Start+0x194>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	d130      	bne.n	80019b2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d129      	bne.n	80019b2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	e020      	b.n	80019b2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <HAL_ADC_Start+0x198>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d11b      	bne.n	80019b2 <HAL_ADC_Start+0x17e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d114      	bne.n	80019b2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	e00b      	b.n	80019b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f043 0210 	orr.w	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20000600 	.word	0x20000600
 80019c4:	431bde83 	.word	0x431bde83
 80019c8:	40012300 	.word	0x40012300
 80019cc:	40012000 	.word	0x40012000
 80019d0:	40012100 	.word	0x40012100
 80019d4:	40012200 	.word	0x40012200

080019d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_Stop+0x16>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e021      	b.n	8001a32 <HAL_ADC_Stop+0x5a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d113      	bne.n	8001a84 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a6a:	d10b      	bne.n	8001a84 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f043 0220 	orr.w	r2, r3, #32
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e063      	b.n	8001b4c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a84:	f7ff fe62 	bl	800174c <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a8a:	e021      	b.n	8001ad0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a92:	d01d      	beq.n	8001ad0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <HAL_ADC_PollForConversion+0x6c>
 8001a9a:	f7ff fe57 	bl	800174c <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d212      	bcs.n	8001ad0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d00b      	beq.n	8001ad0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	f043 0204 	orr.w	r2, r3, #4
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e03d      	b.n	8001b4c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d1d6      	bne.n	8001a8c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f06f 0212 	mvn.w	r2, #18
 8001ae6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d123      	bne.n	8001b4a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11f      	bne.n	8001b4a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d111      	bne.n	8001b4a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1c>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e105      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x228>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	d925      	bls.n	8001be8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68d9      	ldr	r1, [r3, #12]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	3b1e      	subs	r3, #30
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68d9      	ldr	r1, [r3, #12]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4403      	add	r3, r0
 8001bda:	3b1e      	subs	r3, #30
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	e022      	b.n	8001c2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6919      	ldr	r1, [r3, #16]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	400a      	ands	r2, r1
 8001c0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6919      	ldr	r1, [r3, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	4603      	mov	r3, r0
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4403      	add	r3, r0
 8001c24:	409a      	lsls	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d824      	bhi.n	8001c80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3b05      	subs	r3, #5
 8001c48:	221f      	movs	r2, #31
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	400a      	ands	r2, r1
 8001c56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b05      	subs	r3, #5
 8001c72:	fa00 f203 	lsl.w	r2, r0, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7e:	e04c      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d824      	bhi.n	8001cd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b23      	subs	r3, #35	; 0x23
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b23      	subs	r3, #35	; 0x23
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd0:	e023      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3b41      	subs	r3, #65	; 0x41
 8001ce4:	221f      	movs	r2, #31
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b41      	subs	r3, #65	; 0x41
 8001d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_ADC_ConfigChannel+0x234>)
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <HAL_ADC_ConfigChannel+0x238>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d109      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x1cc>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b12      	cmp	r3, #18
 8001d2e:	d105      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_ADC_ConfigChannel+0x238>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d123      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x21e>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d003      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x1e6>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b11      	cmp	r3, #17
 8001d54:	d11b      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d111      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_ADC_ConfigChannel+0x23c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <HAL_ADC_ConfigChannel+0x240>)
 8001d70:	fba2 2303 	umull	r2, r3, r2, r3
 8001d74:	0c9a      	lsrs	r2, r3, #18
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d80:	e002      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f9      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40012300 	.word	0x40012300
 8001da8:	40012000 	.word	0x40012000
 8001dac:	20000600 	.word	0x20000600
 8001db0:	431bde83 	.word	0x431bde83

08001db4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dbc:	4b79      	ldr	r3, [pc, #484]	; (8001fa4 <ADC_Init+0x1f0>)
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	021a      	lsls	r2, r3, #8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6899      	ldr	r1, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <ADC_Init+0x1f4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d022      	beq.n	8001e92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6899      	ldr	r1, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e00f      	b.n	8001eb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ea0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0202 	bic.w	r2, r2, #2
 8001ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e1b      	ldrb	r3, [r3, #24]
 8001ecc:	005a      	lsls	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001efe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	035a      	lsls	r2, r3, #13
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	e007      	b.n	8001f28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	051a      	lsls	r2, r3, #20
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6899      	ldr	r1, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f6a:	025a      	lsls	r2, r3, #9
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6899      	ldr	r1, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	029a      	lsls	r2, r3, #10
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40012300 	.word	0x40012300
 8001fa8:	0f000001 	.word	0x0f000001

08001fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fde:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60d3      	str	r3, [r2, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <__NVIC_GetPriorityGrouping+0x18>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 0307 	and.w	r3, r3, #7
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db0b      	blt.n	800203a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	4907      	ldr	r1, [pc, #28]	; (8002048 <__NVIC_EnableIRQ+0x38>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2001      	movs	r0, #1
 8002032:	fa00 f202 	lsl.w	r2, r0, r2
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000e100 	.word	0xe000e100

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	; (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	; (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1c3 0307 	rsb	r3, r3, #7
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	bf28      	it	cs
 80020be:	2304      	movcs	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d902      	bls.n	80020d0 <NVIC_EncodePriority+0x30>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3b03      	subs	r3, #3
 80020ce:	e000      	b.n	80020d2 <NVIC_EncodePriority+0x32>
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	401a      	ands	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43d9      	mvns	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	4313      	orrs	r3, r2
         );
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002118:	d301      	bcc.n	800211e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800211a:	2301      	movs	r3, #1
 800211c:	e00f      	b.n	800213e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <SysTick_Config+0x40>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002126:	210f      	movs	r1, #15
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f7ff ff8e 	bl	800204c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <SysTick_Config+0x40>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SysTick_Config+0x40>)
 8002138:	2207      	movs	r2, #7
 800213a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	e000e010 	.word	0xe000e010

0800214c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff29 	bl	8001fac <__NVIC_SetPriorityGrouping>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002174:	f7ff ff3e 	bl	8001ff4 <__NVIC_GetPriorityGrouping>
 8002178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	6978      	ldr	r0, [r7, #20]
 8002180:	f7ff ff8e 	bl	80020a0 <NVIC_EncodePriority>
 8002184:	4602      	mov	r2, r0
 8002186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff5d 	bl	800204c <__NVIC_SetPriority>
}
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff31 	bl	8002010 <__NVIC_EnableIRQ>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ffa2 	bl	8002108 <SysTick_Config>
 80021c4:	4603      	mov	r3, r0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e16b      	b.n	80024c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 815a 	bne.w	80024be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d005      	beq.n	8002222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	2b02      	cmp	r3, #2
 8002220:	d130      	bne.n	8002284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 0201 	and.w	r2, r3, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b03      	cmp	r3, #3
 800228e:	d017      	beq.n	80022c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80b4 	beq.w	80024be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b60      	ldr	r3, [pc, #384]	; (80024dc <HAL_GPIO_Init+0x30c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a5f      	ldr	r2, [pc, #380]	; (80024dc <HAL_GPIO_Init+0x30c>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_GPIO_Init+0x30c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <HAL_GPIO_Init+0x310>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <HAL_GPIO_Init+0x314>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d02b      	beq.n	80023f6 <HAL_GPIO_Init+0x226>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a51      	ldr	r2, [pc, #324]	; (80024e8 <HAL_GPIO_Init+0x318>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d025      	beq.n	80023f2 <HAL_GPIO_Init+0x222>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a50      	ldr	r2, [pc, #320]	; (80024ec <HAL_GPIO_Init+0x31c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <HAL_GPIO_Init+0x21e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4f      	ldr	r2, [pc, #316]	; (80024f0 <HAL_GPIO_Init+0x320>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x21a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <HAL_GPIO_Init+0x324>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x216>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4d      	ldr	r2, [pc, #308]	; (80024f8 <HAL_GPIO_Init+0x328>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x212>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4c      	ldr	r2, [pc, #304]	; (80024fc <HAL_GPIO_Init+0x32c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x20e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4b      	ldr	r2, [pc, #300]	; (8002500 <HAL_GPIO_Init+0x330>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x20a>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00e      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023da:	2308      	movs	r3, #8
 80023dc:	e00c      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023de:	2306      	movs	r3, #6
 80023e0:	e00a      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023e2:	2305      	movs	r3, #5
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023e6:	2304      	movs	r3, #4
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x228>
 80023f6:	2300      	movs	r3, #0
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	f002 0203 	and.w	r2, r2, #3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	; (80024e0 <HAL_GPIO_Init+0x310>)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243a:	4a32      	ldr	r2, [pc, #200]	; (8002504 <HAL_GPIO_Init+0x334>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002464:	4a27      	ldr	r2, [pc, #156]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <HAL_GPIO_Init+0x334>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248e:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_GPIO_Init+0x334>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b8:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_GPIO_Init+0x334>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3301      	adds	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	f67f ae90 	bls.w	80021ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40021400 	.word	0x40021400
 80024fc:	40021800 	.word	0x40021800
 8002500:	40021c00 	.word	0x40021c00
 8002504:	40013c00 	.word	0x40013c00

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002524:	e003      	b.n	800252e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	041a      	lsls	r2, r3, #16
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	041a      	lsls	r2, r3, #16
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43d9      	mvns	r1, r3
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	400b      	ands	r3, r1
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800256e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002570:	b08f      	sub	sp, #60	; 0x3c
 8002572:	af0a      	add	r7, sp, #40	; 0x28
 8002574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e10f      	b.n	80027a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f006 fe28 	bl	80091f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2203      	movs	r2, #3
 80025a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 f905 	bl	80057ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	687e      	ldr	r6, [r7, #4]
 80025cc:	466d      	mov	r5, sp
 80025ce:	f106 0410 	add.w	r4, r6, #16
 80025d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025de:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e2:	1d33      	adds	r3, r6, #4
 80025e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	f002 ffdd 	bl	80055a6 <USB_CoreInit>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e0d0      	b.n	80027a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f003 f8f3 	bl	80057f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e04a      	b.n	80026a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	333d      	adds	r3, #61	; 0x3d
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	333c      	adds	r3, #60	; 0x3c
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	b298      	uxth	r0, r3
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3344      	adds	r3, #68	; 0x44
 800264c:	4602      	mov	r2, r0
 800264e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3340      	adds	r3, #64	; 0x40
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3348      	adds	r3, #72	; 0x48
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	334c      	adds	r3, #76	; 0x4c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3354      	adds	r3, #84	; 0x54
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	3301      	adds	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d3af      	bcc.n	8002610 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
 80026b4:	e044      	b.n	8002740 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	3301      	adds	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d3b5      	bcc.n	80026b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	687e      	ldr	r6, [r7, #4]
 8002752:	466d      	mov	r5, sp
 8002754:	f106 0410 	add.w	r4, r6, #16
 8002758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002760:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002764:	e885 0003 	stmia.w	r5, {r0, r1}
 8002768:	1d33      	adds	r3, r6, #4
 800276a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276c:	6838      	ldr	r0, [r7, #0]
 800276e:	f003 f88b 	bl	8005888 <USB_DevInit>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e00d      	b.n	80027a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f004 f9da 	bl	8006b52 <USB_DevDisconnect>

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_PCD_Start+0x1c>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e020      	b.n	8002806 <HAL_PCD_Start+0x5e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d109      	bne.n	80027e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d005      	beq.n	80027e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 ffdd 	bl	80057ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 f98a 	bl	8006b10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800280e:	b590      	push	{r4, r7, lr}
 8002810:	b08d      	sub	sp, #52	; 0x34
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f004 fa48 	bl	8006cba <USB_GetMode>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	f040 848a 	bne.w	8003146 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f004 f9ac 	bl	8006b94 <USB_ReadInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8480 	beq.w	8003144 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f004 f999 	bl	8006b94 <USB_ReadInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b02      	cmp	r3, #2
 800286a:	d107      	bne.n	800287c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f002 0202 	and.w	r2, r2, #2
 800287a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f004 f987 	bl	8006b94 <USB_ReadInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b10      	cmp	r3, #16
 800288e:	d161      	bne.n	8002954 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0210 	bic.w	r2, r2, #16
 800289e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 020f 	and.w	r2, r3, #15
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4413      	add	r3, r2
 80028bc:	3304      	adds	r3, #4
 80028be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	0c5b      	lsrs	r3, r3, #17
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d124      	bne.n	8002916 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d035      	beq.n	8002944 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	6a38      	ldr	r0, [r7, #32]
 80028ec:	f003 ffbe 	bl	800686c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028fc:	441a      	add	r2, r3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6a1a      	ldr	r2, [r3, #32]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800290e:	441a      	add	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	621a      	str	r2, [r3, #32]
 8002914:	e016      	b.n	8002944 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	0c5b      	lsrs	r3, r3, #17
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	2b06      	cmp	r3, #6
 8002920:	d110      	bne.n	8002944 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002928:	2208      	movs	r2, #8
 800292a:	4619      	mov	r1, r3
 800292c:	6a38      	ldr	r0, [r7, #32]
 800292e:	f003 ff9d 	bl	800686c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	6a1a      	ldr	r2, [r3, #32]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800293e:	441a      	add	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0210 	orr.w	r2, r2, #16
 8002952:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f004 f91b 	bl	8006b94 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002964:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002968:	f040 80a7 	bne.w	8002aba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f004 f920 	bl	8006bba <USB_ReadDevAllOutEpInterrupt>
 800297a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800297c:	e099      	b.n	8002ab2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 808e 	beq.w	8002aa6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f004 f944 	bl	8006c22 <USB_ReadDevOutEPInterrupt>
 800299a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b2:	461a      	mov	r2, r3
 80029b4:	2301      	movs	r3, #1
 80029b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fec2 	bl	8003744 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00c      	beq.n	80029e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d6:	461a      	mov	r2, r3
 80029d8:	2308      	movs	r3, #8
 80029da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 ff98 	bl	8003914 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0310 	and.w	r3, r3, #16
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fa:	461a      	mov	r2, r3
 80029fc:	2310      	movs	r3, #16
 80029fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d030      	beq.n	8002a6c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b80      	cmp	r3, #128	; 0x80
 8002a14:	d109      	bne.n	8002a2a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a28:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	78db      	ldrb	r3, [r3, #3]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d108      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f006 fcd1 	bl	80093fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a66:	461a      	mov	r2, r3
 8002a68:	2302      	movs	r3, #2
 8002a6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a82:	461a      	mov	r2, r3
 8002a84:	2320      	movs	r3, #32
 8002a86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002aa4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f47f af62 	bne.w	800297e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 f868 	bl	8006b94 <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ace:	f040 80db 	bne.w	8002c88 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f004 f889 	bl	8006bee <USB_ReadDevAllInEpInterrupt>
 8002adc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ae2:	e0cd      	b.n	8002c80 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80c2 	beq.w	8002c74 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 f8af 	bl	8006c5e <USB_ReadDevInEPInterrupt>
 8002b00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d057      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	2201      	movs	r2, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69f9      	ldr	r1, [r7, #28]
 8002b28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2301      	movs	r3, #1
 8002b40:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d132      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	334c      	adds	r3, #76	; 0x4c
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4403      	add	r3, r0
 8002b6a:	3348      	adds	r3, #72	; 0x48
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4419      	add	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4403      	add	r3, r0
 8002b7e:	334c      	adds	r3, #76	; 0x4c
 8002b80:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d113      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x3a2>
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	3354      	adds	r3, #84	; 0x54
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2101      	movs	r1, #1
 8002bac:	f004 f8b6 	bl	8006d1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f006 fb9b 	bl	80092f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2310      	movs	r3, #16
 8002bf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2340      	movs	r3, #64	; 0x40
 8002c0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d023      	beq.n	8002c62 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c1c:	6a38      	ldr	r0, [r7, #32]
 8002c1e:	f002 ff97 	bl	8005b50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	3338      	adds	r3, #56	; 0x38
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	3304      	adds	r3, #4
 8002c34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	78db      	ldrb	r3, [r3, #3]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	4619      	mov	r1, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f006 fbe8 	bl	8009420 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2302      	movs	r3, #2
 8002c60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fcdb 	bl	800362a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	3301      	adds	r3, #1
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f47f af2e 	bne.w	8002ae4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 ff81 	bl	8006b94 <USB_ReadInterrupts>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c9c:	d122      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d108      	bne.n	8002cce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fec2 	bl	8003a50 <HAL_PCDEx_LPM_Callback>
 8002ccc:	e002      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f006 fb86 	bl	80093e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ce2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 ff53 	bl	8006b94 <USB_ReadInterrupts>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf8:	d112      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d102      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f006 fb42 	bl	8009394 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d1e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 ff35 	bl	8006b94 <USB_ReadInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d34:	f040 80b7 	bne.w	8002ea6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2110      	movs	r1, #16
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 fefc 	bl	8005b50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5c:	e046      	b.n	8002dec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d82:	0151      	lsls	r1, r2, #5
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	440a      	add	r2, r1
 8002d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002da4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db6:	0151      	lsls	r1, r2, #5
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	440a      	add	r2, r1
 8002dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd6:	0151      	lsls	r1, r2, #5
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	440a      	add	r2, r1
 8002ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002de0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002de4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	3301      	adds	r3, #1
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d3b3      	bcc.n	8002d5e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d016      	beq.n	8002e40 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e22:	f043 030b 	orr.w	r3, r3, #11
 8002e26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e38:	f043 030b 	orr.w	r3, r3, #11
 8002e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3e:	e015      	b.n	8002e6c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e66:	f043 030b 	orr.w	r3, r3, #11
 8002e6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e90:	461a      	mov	r2, r3
 8002e92:	f003 ff43 	bl	8006d1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 fe72 	bl	8006b94 <USB_ReadInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	d124      	bne.n	8002f06 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 ff08 	bl	8006cd6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 febd 	bl	8005c4a <USB_GetDevSpeed>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681c      	ldr	r4, [r3, #0]
 8002edc:	f001 f9e8 	bl	80042b0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4620      	mov	r0, r4
 8002eec:	f002 fbbc 	bl	8005668 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f006 fa26 	bl	8009342 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 fe42 	bl	8006b94 <USB_ReadInterrupts>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d10a      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f006 fa03 	bl	8009326 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f002 0208 	and.w	r2, r2, #8
 8002f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f003 fe2d 	bl	8006b94 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f40:	2b80      	cmp	r3, #128	; 0x80
 8002f42:	d122      	bne.n	8002f8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f50:	2301      	movs	r3, #1
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	e014      	b.n	8002f80 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	4619      	mov	r1, r3
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fb27 	bl	80035c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d3e5      	bcc.n	8002f56 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fe00 	bl	8006b94 <USB_ReadInterrupts>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9e:	d13b      	bne.n	8003018 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa4:	e02b      	b.n	8002ffe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3340      	adds	r3, #64	; 0x40
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d115      	bne.n	8002ff8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	da12      	bge.n	8002ff8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	333f      	adds	r3, #63	; 0x3f
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fae8 	bl	80035c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	429a      	cmp	r2, r3
 8003006:	d3ce      	bcc.n	8002fa6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f003 fdb9 	bl	8006b94 <USB_ReadInterrupts>
 8003022:	4603      	mov	r3, r0
 8003024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800302c:	d155      	bne.n	80030da <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800302e:	2301      	movs	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	e045      	b.n	80030c0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d12e      	bne.n	80030ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800305c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800305e:	2b00      	cmp	r3, #0
 8003060:	da2b      	bge.n	80030ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800306e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003072:	429a      	cmp	r2, r3
 8003074:	d121      	bne.n	80030ba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10a      	bne.n	80030ba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b6:	6053      	str	r3, [r2, #4]
            break;
 80030b8:	e007      	b.n	80030ca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	3301      	adds	r3, #1
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d3b4      	bcc.n	8003034 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fd58 	bl	8006b94 <USB_ReadInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d10a      	bne.n	8003106 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f006 f9a7 	bl	8009444 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fd42 	bl	8006b94 <USB_ReadInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b04      	cmp	r3, #4
 8003118:	d115      	bne.n	8003146 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f006 f997 	bl	8009460 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	e000      	b.n	8003146 <HAL_PCD_IRQHandler+0x938>
      return;
 8003144:	bf00      	nop
    }
  }
}
 8003146:	3734      	adds	r7, #52	; 0x34
 8003148:	46bd      	mov	sp, r7
 800314a:	bd90      	pop	{r4, r7, pc}

0800314c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_PCD_SetAddress+0x1a>
 8003162:	2302      	movs	r3, #2
 8003164:	e013      	b.n	800318e <HAL_PCD_SetAddress+0x42>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f003 fca0 	bl	8006ac4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b084      	sub	sp, #16
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	4608      	mov	r0, r1
 80031a0:	4611      	mov	r1, r2
 80031a2:	461a      	mov	r2, r3
 80031a4:	4603      	mov	r3, r0
 80031a6:	70fb      	strb	r3, [r7, #3]
 80031a8:	460b      	mov	r3, r1
 80031aa:	803b      	strh	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da0f      	bge.n	80031dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 020f 	and.w	r2, r3, #15
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	3338      	adds	r3, #56	; 0x38
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	705a      	strb	r2, [r3, #1]
 80031da:	e00f      	b.n	80031fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 020f 	and.w	r2, r3, #15
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003208:	883a      	ldrh	r2, [r7, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	78ba      	ldrb	r2, [r7, #2]
 8003212:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	785b      	ldrb	r3, [r3, #1]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003226:	78bb      	ldrb	r3, [r7, #2]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d102      	bne.n	8003232 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_PCD_EP_Open+0xaa>
 800323c:	2302      	movs	r3, #2
 800323e:	e00e      	b.n	800325e <HAL_PCD_EP_Open+0xc8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68f9      	ldr	r1, [r7, #12]
 800324e:	4618      	mov	r0, r3
 8003250:	f002 fd20 	bl	8005c94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800325c:	7afb      	ldrb	r3, [r7, #11]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003276:	2b00      	cmp	r3, #0
 8003278:	da0f      	bge.n	800329a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	f003 020f 	and.w	r2, r3, #15
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	3338      	adds	r3, #56	; 0x38
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	3304      	adds	r3, #4
 8003290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	705a      	strb	r2, [r3, #1]
 8003298:	e00f      	b.n	80032ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_PCD_EP_Close+0x6e>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e00e      	b.n	80032f2 <HAL_PCD_EP_Close+0x8c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68f9      	ldr	r1, [r7, #12]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 fd5e 	bl	8005da4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	460b      	mov	r3, r1
 8003308:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800330a:	7afb      	ldrb	r3, [r7, #11]
 800330c:	f003 020f 	and.w	r2, r3, #15
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	3304      	adds	r3, #4
 8003322:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2200      	movs	r2, #0
 8003334:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2200      	movs	r2, #0
 800333a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800333c:	7afb      	ldrb	r3, [r7, #11]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	b2da      	uxtb	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003356:	7afb      	ldrb	r3, [r7, #11]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	2b00      	cmp	r3, #0
 800335e:	d109      	bne.n	8003374 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	6979      	ldr	r1, [r7, #20]
 800336e:	f003 f83d 	bl	80063ec <USB_EP0StartXfer>
 8003372:	e008      	b.n	8003386 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	6979      	ldr	r1, [r7, #20]
 8003382:	f002 fdeb 	bl	8005f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	460b      	mov	r3, r1
 80033ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	7afb      	ldrb	r3, [r7, #11]
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3338      	adds	r3, #56	; 0x38
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2200      	movs	r2, #0
 80033f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2201      	movs	r2, #1
 80033fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	b2da      	uxtb	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d102      	bne.n	800341a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800341a:	7afb      	ldrb	r3, [r7, #11]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	6979      	ldr	r1, [r7, #20]
 8003432:	f002 ffdb 	bl	80063ec <USB_EP0StartXfer>
 8003436:	e008      	b.n	800344a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	6979      	ldr	r1, [r7, #20]
 8003446:	f002 fd89 	bl	8005f5c <USB_EPStartXfer>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d901      	bls.n	8003472 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e050      	b.n	8003514 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003476:	2b00      	cmp	r3, #0
 8003478:	da0f      	bge.n	800349a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	3338      	adds	r3, #56	; 0x38
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	3304      	adds	r3, #4
 8003490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	705a      	strb	r2, [r3, #1]
 8003498:	e00d      	b.n	80034b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	3304      	adds	r3, #4
 80034ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_PCD_EP_SetStall+0x82>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e01e      	b.n	8003514 <HAL_PCD_EP_SetStall+0xc0>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 fa19 	bl	800691c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	b2d9      	uxtb	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003504:	461a      	mov	r2, r3
 8003506:	f003 fc09 	bl	8006d1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d901      	bls.n	800353a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e042      	b.n	80035c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800353a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353e:	2b00      	cmp	r3, #0
 8003540:	da0f      	bge.n	8003562 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	3338      	adds	r3, #56	; 0x38
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	3304      	adds	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	705a      	strb	r2, [r3, #1]
 8003560:	e00f      	b.n	8003582 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_PCD_EP_ClrStall+0x86>
 800359e:	2302      	movs	r3, #2
 80035a0:	e00e      	b.n	80035c0 <HAL_PCD_EP_ClrStall+0xa4>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f003 fa21 	bl	80069f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	da0c      	bge.n	80035f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	f003 020f 	and.w	r2, r3, #15
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	3338      	adds	r3, #56	; 0x38
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	3304      	adds	r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e00c      	b.n	8003610 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	f003 020f 	and.w	r2, r3, #15
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	4618      	mov	r0, r3
 8003618:	f003 f840 	bl	800669c <USB_EPStopXfer>
 800361c:	4603      	mov	r3, r0
 800361e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003620:	7afb      	ldrb	r3, [r7, #11]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b08a      	sub	sp, #40	; 0x28
 800362e:	af02      	add	r7, sp, #8
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	3338      	adds	r3, #56	; 0x38
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	3304      	adds	r3, #4
 8003650:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1a      	ldr	r2, [r3, #32]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	429a      	cmp	r2, r3
 800365c:	d901      	bls.n	8003662 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06c      	b.n	800373c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	429a      	cmp	r2, r3
 8003676:	d902      	bls.n	800367e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3303      	adds	r3, #3
 8003682:	089b      	lsrs	r3, r3, #2
 8003684:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003686:	e02b      	b.n	80036e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	429a      	cmp	r2, r3
 800369c:	d902      	bls.n	80036a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	3303      	adds	r3, #3
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6919      	ldr	r1, [r3, #16]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4603      	mov	r3, r0
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f003 f894 	bl	80067f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	441a      	add	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d809      	bhi.n	800370a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a1a      	ldr	r2, [r3, #32]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036fe:	429a      	cmp	r2, r3
 8003700:	d203      	bcs.n	800370a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1be      	bne.n	8003688 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	429a      	cmp	r2, r3
 8003714:	d811      	bhi.n	800373a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	2201      	movs	r2, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	43db      	mvns	r3, r3
 8003730:	6939      	ldr	r1, [r7, #16]
 8003732:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003736:	4013      	ands	r3, r2
 8003738:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	333c      	adds	r3, #60	; 0x3c
 800375c:	3304      	adds	r3, #4
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d17b      	bne.n	8003872 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d015      	beq.n	80037b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	4a61      	ldr	r2, [pc, #388]	; (800390c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	f240 80b9 	bls.w	8003900 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 80b3 	beq.w	8003900 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a6:	461a      	mov	r2, r3
 80037a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ac:	6093      	str	r3, [r2, #8]
 80037ae:	e0a7      	b.n	8003900 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	461a      	mov	r2, r3
 80037c8:	2320      	movs	r3, #32
 80037ca:	6093      	str	r3, [r2, #8]
 80037cc:	e098      	b.n	8003900 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f040 8093 	bne.w	8003900 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	4a4b      	ldr	r2, [pc, #300]	; (800390c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d90f      	bls.n	8003802 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f8:	461a      	mov	r2, r3
 80037fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037fe:	6093      	str	r3, [r2, #8]
 8003800:	e07e      	b.n	8003900 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	4413      	add	r3, r2
 8003814:	3304      	adds	r3, #4
 8003816:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	0159      	lsls	r1, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	440b      	add	r3, r1
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382e:	1ad2      	subs	r2, r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d114      	bne.n	8003864 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800384c:	461a      	mov	r2, r3
 800384e:	2101      	movs	r1, #1
 8003850:	f003 fa64 	bl	8006d1c <USB_EP0_OutStart>
 8003854:	e006      	b.n	8003864 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	441a      	add	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f005 fd26 	bl	80092bc <HAL_PCD_DataOutStageCallback>
 8003870:	e046      	b.n	8003900 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4a26      	ldr	r2, [pc, #152]	; (8003910 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d124      	bne.n	80038c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	461a      	mov	r2, r3
 8003892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003896:	6093      	str	r3, [r2, #8]
 8003898:	e032      	b.n	8003900 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b0:	461a      	mov	r2, r3
 80038b2:	2320      	movs	r3, #32
 80038b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f005 fcfd 	bl	80092bc <HAL_PCD_DataOutStageCallback>
 80038c2:	e01d      	b.n	8003900 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d114      	bne.n	80038f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038ec:	461a      	mov	r2, r3
 80038ee:	2100      	movs	r1, #0
 80038f0:	f003 fa14 	bl	8006d1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f005 fcde 	bl	80092bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3720      	adds	r7, #32
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	4f54300a 	.word	0x4f54300a
 8003910:	4f54310a 	.word	0x4f54310a

08003914 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	333c      	adds	r3, #60	; 0x3c
 800392c:	3304      	adds	r3, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4a15      	ldr	r2, [pc, #84]	; (800399c <PCD_EP_OutSetupPacket_int+0x88>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d90e      	bls.n	8003968 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f005 fc95 	bl	8009298 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a0a      	ldr	r2, [pc, #40]	; (800399c <PCD_EP_OutSetupPacket_int+0x88>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d90c      	bls.n	8003990 <PCD_EP_OutSetupPacket_int+0x7c>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d108      	bne.n	8003990 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003988:	461a      	mov	r2, r3
 800398a:	2101      	movs	r1, #1
 800398c:	f003 f9c6 	bl	8006d1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	4f54300a 	.word	0x4f54300a

080039a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
 80039ac:	4613      	mov	r3, r2
 80039ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d107      	bne.n	80039ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039be:	883b      	ldrh	r3, [r7, #0]
 80039c0:	0419      	lsls	r1, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
 80039cc:	e028      	b.n	8003a20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]
 80039e0:	e00d      	b.n	80039fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	3340      	adds	r3, #64	; 0x40
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4413      	add	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	3301      	adds	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
 80039fe:	7bfa      	ldrb	r2, [r7, #15]
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d3ec      	bcc.n	80039e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a08:	883b      	ldrh	r3, [r7, #0]
 8003a0a:	0418      	lsls	r0, r3, #16
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6819      	ldr	r1, [r3, #0]
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	4302      	orrs	r2, r0
 8003a18:	3340      	adds	r3, #64	; 0x40
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e267      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d075      	beq.n	8003b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a86:	4b88      	ldr	r3, [pc, #544]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d00c      	beq.n	8003aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a92:	4b85      	ldr	r3, [pc, #532]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d112      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9e:	4b82      	ldr	r3, [pc, #520]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	4b7e      	ldr	r3, [pc, #504]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05b      	beq.n	8003b70 <HAL_RCC_OscConfig+0x108>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d157      	bne.n	8003b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e242      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_OscConfig+0x74>
 8003ace:	4b76      	ldr	r3, [pc, #472]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a75      	ldr	r2, [pc, #468]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e01d      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x98>
 8003ae6:	4b70      	ldr	r3, [pc, #448]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a6f      	ldr	r2, [pc, #444]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b6d      	ldr	r3, [pc, #436]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6c      	ldr	r2, [pc, #432]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e00b      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003b00:	4b69      	ldr	r3, [pc, #420]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a68      	ldr	r2, [pc, #416]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a65      	ldr	r2, [pc, #404]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fd fe14 	bl	800174c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fd fe10 	bl	800174c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e207      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0xc0>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fd fe00 	bl	800174c <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fd fdfc 	bl	800174c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e1f3      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	4b51      	ldr	r3, [pc, #324]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0xe8>
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d063      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b8a:	4b47      	ldr	r3, [pc, #284]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d11c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d116      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e1c7      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bba:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4937      	ldr	r1, [pc, #220]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	e03a      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd8:	4b34      	ldr	r3, [pc, #208]	; (8003cac <HAL_RCC_OscConfig+0x244>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd fdb5 	bl	800174c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be6:	f7fd fdb1 	bl	800174c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e1a8      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4925      	ldr	r1, [pc, #148]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	e015      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_OscConfig+0x244>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd fd94 	bl	800174c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c28:	f7fd fd90 	bl	800174c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e187      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d036      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RCC_OscConfig+0x248>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd fd74 	bl	800174c <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c68:	f7fd fd70 	bl	800174c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e167      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x200>
 8003c86:	e01b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_OscConfig+0x248>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8e:	f7fd fd5d 	bl	800174c <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c94:	e00e      	b.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c96:	f7fd fd59 	bl	800174c <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d907      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e150      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	42470000 	.word	0x42470000
 8003cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ea      	bne.n	8003c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8097 	beq.w	8003dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd2:	4b81      	ldr	r3, [pc, #516]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	4b7d      	ldr	r3, [pc, #500]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a7c      	ldr	r2, [pc, #496]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b7a      	ldr	r3, [pc, #488]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b77      	ldr	r3, [pc, #476]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0a:	4b74      	ldr	r3, [pc, #464]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a73      	ldr	r2, [pc, #460]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fd fd19 	bl	800174c <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fd fd15 	bl	800174c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e10c      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	4b6a      	ldr	r3, [pc, #424]	; (8003edc <HAL_RCC_OscConfig+0x474>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x2ea>
 8003d44:	4b64      	ldr	r3, [pc, #400]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a63      	ldr	r2, [pc, #396]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	e01c      	b.n	8003d8c <HAL_RCC_OscConfig+0x324>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x30c>
 8003d5a:	4b5f      	ldr	r3, [pc, #380]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a5e      	ldr	r2, [pc, #376]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
 8003d66:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a5b      	ldr	r2, [pc, #364]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0x324>
 8003d74:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	4a57      	ldr	r2, [pc, #348]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d80:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a54      	ldr	r2, [pc, #336]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fd fcda 	bl	800174c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7fd fcd6 	bl	800174c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0cb      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db2:	4b49      	ldr	r3, [pc, #292]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ee      	beq.n	8003d9c <HAL_RCC_OscConfig+0x334>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fcc4 	bl	800174c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fcc0 	bl	800174c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0b5      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ee      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df0:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4a38      	ldr	r2, [pc, #224]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 80a1 	beq.w	8003f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e06:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d05c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d141      	bne.n	8003e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fd fc94 	bl	800174c <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fd fc90 	bl	800174c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e087      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69da      	ldr	r2, [r3, #28]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	019b      	lsls	r3, r3, #6
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	491b      	ldr	r1, [pc, #108]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e76:	f7fd fc69 	bl	800174c <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7e:	f7fd fc65 	bl	800174c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e05c      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x416>
 8003e9c:	e054      	b.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_RCC_OscConfig+0x478>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fc52 	bl	800174c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fd fc4e 	bl	800174c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e045      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x444>
 8003eca:	e03d      	b.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e038      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <HAL_RCC_OscConfig+0x4ec>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d028      	beq.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d121      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d11a      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d111      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d107      	bne.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d001      	beq.n	8003f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800

08003f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0cc      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b68      	ldr	r3, [pc, #416]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d90c      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b65      	ldr	r3, [pc, #404]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b63      	ldr	r3, [pc, #396]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0b8      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fac:	4b59      	ldr	r3, [pc, #356]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a58      	ldr	r2, [pc, #352]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd0:	4b50      	ldr	r3, [pc, #320]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	494d      	ldr	r1, [pc, #308]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d044      	beq.n	8004078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d119      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d003      	beq.n	8004016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004012:	2b03      	cmp	r3, #3
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004026:	4b3b      	ldr	r3, [pc, #236]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e067      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004036:	4b37      	ldr	r3, [pc, #220]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4934      	ldr	r1, [pc, #208]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004048:	f7fd fb80 	bl	800174c <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e00a      	b.n	8004066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fd fb7c 	bl	800174c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e04f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 020c 	and.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	429a      	cmp	r2, r3
 8004076:	d1eb      	bne.n	8004050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004078:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d20c      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e032      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4916      	ldr	r1, [pc, #88]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	490e      	ldr	r1, [pc, #56]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040de:	f000 f821 	bl	8004124 <HAL_RCC_GetSysClockFreq>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	490a      	ldr	r1, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	5ccb      	ldrb	r3, [r1, r3]
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a09      	ldr	r2, [pc, #36]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd fae0 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40023c00 	.word	0x40023c00
 8004114:	40023800 	.word	0x40023800
 8004118:	0800a258 	.word	0x0800a258
 800411c:	20000600 	.word	0x20000600
 8004120:	20000604 	.word	0x20000604

08004124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b090      	sub	sp, #64	; 0x40
 800412a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
 8004130:	2300      	movs	r3, #0
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004134:	2300      	movs	r3, #0
 8004136:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800413c:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b08      	cmp	r3, #8
 8004146:	d00d      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x40>
 8004148:	2b08      	cmp	r3, #8
 800414a:	f200 80a1 	bhi.w	8004290 <HAL_RCC_GetSysClockFreq+0x16c>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x34>
 8004152:	2b04      	cmp	r3, #4
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x3a>
 8004156:	e09b      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800415a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800415c:	e09b      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415e:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004162:	e098      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004164:	4b4f      	ldr	r3, [pc, #316]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416e:	4b4d      	ldr	r3, [pc, #308]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d028      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	2200      	movs	r2, #0
 8004182:	623b      	str	r3, [r7, #32]
 8004184:	627a      	str	r2, [r7, #36]	; 0x24
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800418c:	2100      	movs	r1, #0
 800418e:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004190:	fb03 f201 	mul.w	r2, r3, r1
 8004194:	2300      	movs	r3, #0
 8004196:	fb00 f303 	mul.w	r3, r0, r3
 800419a:	4413      	add	r3, r2
 800419c:	4a43      	ldr	r2, [pc, #268]	; (80042ac <HAL_RCC_GetSysClockFreq+0x188>)
 800419e:	fba0 1202 	umull	r1, r2, r0, r2
 80041a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a4:	460a      	mov	r2, r1
 80041a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80041a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041aa:	4413      	add	r3, r2
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b0:	2200      	movs	r2, #0
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	61fa      	str	r2, [r7, #28]
 80041b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041be:	f7fc f85f 	bl	8000280 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4613      	mov	r3, r2
 80041c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ca:	e053      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041cc:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	2200      	movs	r2, #0
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	617a      	str	r2, [r7, #20]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041de:	f04f 0b00 	mov.w	fp, #0
 80041e2:	4652      	mov	r2, sl
 80041e4:	465b      	mov	r3, fp
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	ebb2 080a 	subs.w	r8, r2, sl
 80041fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	f04f 0300 	mov.w	r3, #0
 800420a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800420e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004216:	ebb2 0408 	subs.w	r4, r2, r8
 800421a:	eb63 0509 	sbc.w	r5, r3, r9
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	00eb      	lsls	r3, r5, #3
 8004228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422c:	00e2      	lsls	r2, r4, #3
 800422e:	4614      	mov	r4, r2
 8004230:	461d      	mov	r5, r3
 8004232:	eb14 030a 	adds.w	r3, r4, sl
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	eb45 030b 	adc.w	r3, r5, fp
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424a:	4629      	mov	r1, r5
 800424c:	028b      	lsls	r3, r1, #10
 800424e:	4621      	mov	r1, r4
 8004250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004254:	4621      	mov	r1, r4
 8004256:	028a      	lsls	r2, r1, #10
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425e:	2200      	movs	r2, #0
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	60fa      	str	r2, [r7, #12]
 8004264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004268:	f7fc f80a 	bl	8000280 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4613      	mov	r3, r2
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	3301      	adds	r3, #1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	fbb2 f3f3 	udiv	r3, r2, r3
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800428e:	e002      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004298:	4618      	mov	r0, r3
 800429a:	3740      	adds	r7, #64	; 0x40
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00f42400 	.word	0x00f42400
 80042ac:	017d7840 	.word	0x017d7840

080042b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042b6:	681b      	ldr	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000600 	.word	0x20000600

080042c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e041      	b.n	800435e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd f87e 	bl	80013f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f000 fc7c 	bl	8004c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e046      	b.n	800440e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a23      	ldr	r2, [pc, #140]	; (800441c <HAL_TIM_Base_Start+0xb4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d022      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439a:	d01d      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_TIM_Base_Start+0xb8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d018      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <HAL_TIM_Base_Start+0xbc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d013      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_TIM_Base_Start+0xc0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_TIM_Base_Start+0xc4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_TIM_Base_Start+0xc8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_TIM_Base_Start+0x70>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_TIM_Base_Start+0xcc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d111      	bne.n	80043fc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b06      	cmp	r3, #6
 80043e8:	d010      	beq.n	800440c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fa:	e007      	b.n	800440c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40010400 	.word	0x40010400
 8004430:	40014000 	.word	0x40014000
 8004434:	40001800 	.word	0x40001800

08004438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e041      	b.n	80044ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f839 	bl	80044d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f000 fbc4 	bl	8004c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <HAL_TIM_PWM_Start+0x24>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e022      	b.n	8004556 <HAL_TIM_PWM_Start+0x6a>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b04      	cmp	r3, #4
 8004514:	d109      	bne.n	800452a <HAL_TIM_PWM_Start+0x3e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e015      	b.n	8004556 <HAL_TIM_PWM_Start+0x6a>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d109      	bne.n	8004544 <HAL_TIM_PWM_Start+0x58>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e008      	b.n	8004556 <HAL_TIM_PWM_Start+0x6a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07c      	b.n	8004658 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <HAL_TIM_PWM_Start+0x82>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456c:	e013      	b.n	8004596 <HAL_TIM_PWM_Start+0xaa>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d104      	bne.n	800457e <HAL_TIM_PWM_Start+0x92>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457c:	e00b      	b.n	8004596 <HAL_TIM_PWM_Start+0xaa>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d104      	bne.n	800458e <HAL_TIM_PWM_Start+0xa2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458c:	e003      	b.n	8004596 <HAL_TIM_PWM_Start+0xaa>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2201      	movs	r2, #1
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fe1a 	bl	80051d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2d      	ldr	r2, [pc, #180]	; (8004660 <HAL_TIM_PWM_Start+0x174>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_TIM_PWM_Start+0xcc>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2c      	ldr	r2, [pc, #176]	; (8004664 <HAL_TIM_PWM_Start+0x178>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_TIM_PWM_Start+0xd0>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <HAL_TIM_PWM_Start+0xd2>
 80045bc:	2300      	movs	r3, #0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a22      	ldr	r2, [pc, #136]	; (8004660 <HAL_TIM_PWM_Start+0x174>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d022      	beq.n	8004622 <HAL_TIM_PWM_Start+0x136>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d01d      	beq.n	8004622 <HAL_TIM_PWM_Start+0x136>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <HAL_TIM_PWM_Start+0x17c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d018      	beq.n	8004622 <HAL_TIM_PWM_Start+0x136>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_TIM_PWM_Start+0x180>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_TIM_PWM_Start+0x136>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_TIM_PWM_Start+0x184>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00e      	beq.n	8004622 <HAL_TIM_PWM_Start+0x136>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a16      	ldr	r2, [pc, #88]	; (8004664 <HAL_TIM_PWM_Start+0x178>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d009      	beq.n	8004622 <HAL_TIM_PWM_Start+0x136>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a18      	ldr	r2, [pc, #96]	; (8004674 <HAL_TIM_PWM_Start+0x188>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d004      	beq.n	8004622 <HAL_TIM_PWM_Start+0x136>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_TIM_PWM_Start+0x18c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d111      	bne.n	8004646 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b06      	cmp	r3, #6
 8004632:	d010      	beq.n	8004656 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004644:	e007      	b.n	8004656 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40010000 	.word	0x40010000
 8004664:	40010400 	.word	0x40010400
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40000c00 	.word	0x40000c00
 8004674:	40014000 	.word	0x40014000
 8004678:	40001800 	.word	0x40001800

0800467c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0202 	mvn.w	r2, #2
 80046a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fa81 	bl	8004bc6 <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa73 	bl	8004bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fa84 	bl	8004bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0204 	mvn.w	r2, #4
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fa57 	bl	8004bc6 <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fa49 	bl	8004bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fa5a 	bl	8004bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b08      	cmp	r3, #8
 8004738:	d122      	bne.n	8004780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b08      	cmp	r3, #8
 8004746:	d11b      	bne.n	8004780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0208 	mvn.w	r2, #8
 8004750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2204      	movs	r2, #4
 8004756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fa2d 	bl	8004bc6 <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa1f 	bl	8004bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fa30 	bl	8004bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b10      	cmp	r3, #16
 800478c:	d122      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d11b      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0210 	mvn.w	r2, #16
 80047a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2208      	movs	r2, #8
 80047aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa03 	bl	8004bc6 <HAL_TIM_IC_CaptureCallback>
 80047c0:	e005      	b.n	80047ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9f5 	bl	8004bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fa06 	bl	8004bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d10e      	bne.n	8004800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d107      	bne.n	8004800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0201 	mvn.w	r2, #1
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f9cf 	bl	8004b9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b80      	cmp	r3, #128	; 0x80
 800480c:	d10e      	bne.n	800482c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	d107      	bne.n	800482c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fe8e 	bl	8005548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d10e      	bne.n	8004858 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b40      	cmp	r3, #64	; 0x40
 8004846:	d107      	bne.n	8004858 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f9cb 	bl	8004bee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b20      	cmp	r3, #32
 8004864:	d10e      	bne.n	8004884 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b20      	cmp	r3, #32
 8004872:	d107      	bne.n	8004884 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0220 	mvn.w	r2, #32
 800487c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fe58 	bl	8005534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e0ae      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b0c      	cmp	r3, #12
 80048b6:	f200 809f 	bhi.w	80049f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	080049f9 	.word	0x080049f9
 80048c8:	080049f9 	.word	0x080049f9
 80048cc:	080049f9 	.word	0x080049f9
 80048d0:	08004935 	.word	0x08004935
 80048d4:	080049f9 	.word	0x080049f9
 80048d8:	080049f9 	.word	0x080049f9
 80048dc:	080049f9 	.word	0x080049f9
 80048e0:	08004977 	.word	0x08004977
 80048e4:	080049f9 	.word	0x080049f9
 80048e8:	080049f9 	.word	0x080049f9
 80048ec:	080049f9 	.word	0x080049f9
 80048f0:	080049b7 	.word	0x080049b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fa22 	bl	8004d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0208 	orr.w	r2, r2, #8
 800490e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0204 	bic.w	r2, r2, #4
 800491e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6999      	ldr	r1, [r3, #24]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	619a      	str	r2, [r3, #24]
      break;
 8004932:	e064      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fa72 	bl	8004e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6999      	ldr	r1, [r3, #24]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	021a      	lsls	r2, r3, #8
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	619a      	str	r2, [r3, #24]
      break;
 8004974:	e043      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fac7 	bl	8004f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69da      	ldr	r2, [r3, #28]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0208 	orr.w	r2, r2, #8
 8004990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0204 	bic.w	r2, r2, #4
 80049a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69d9      	ldr	r1, [r3, #28]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	61da      	str	r2, [r3, #28]
      break;
 80049b4:	e023      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fb1b 	bl	8004ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69d9      	ldr	r1, [r3, #28]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	61da      	str	r2, [r3, #28]
      break;
 80049f6:	e002      	b.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	75fb      	strb	r3, [r7, #23]
      break;
 80049fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_TIM_ConfigClockSource+0x1c>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e0b4      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x186>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a64:	d03e      	beq.n	8004ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6a:	f200 8087 	bhi.w	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	f000 8086 	beq.w	8004b82 <HAL_TIM_ConfigClockSource+0x172>
 8004a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7a:	d87f      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d01a      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8004a80:	2b70      	cmp	r3, #112	; 0x70
 8004a82:	d87b      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a84:	2b60      	cmp	r3, #96	; 0x60
 8004a86:	d050      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x11a>
 8004a88:	2b60      	cmp	r3, #96	; 0x60
 8004a8a:	d877      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a8c:	2b50      	cmp	r3, #80	; 0x50
 8004a8e:	d03c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0xfa>
 8004a90:	2b50      	cmp	r3, #80	; 0x50
 8004a92:	d873      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d058      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0x13a>
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d86f      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004a9c:	2b30      	cmp	r3, #48	; 0x30
 8004a9e:	d064      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x15a>
 8004aa0:	2b30      	cmp	r3, #48	; 0x30
 8004aa2:	d86b      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d060      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x15a>
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d867      	bhi.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d05c      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d05a      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab4:	e062      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6899      	ldr	r1, [r3, #8]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f000 fb67 	bl	8005198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	609a      	str	r2, [r3, #8]
      break;
 8004ae2:	e04f      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6899      	ldr	r1, [r3, #8]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f000 fb50 	bl	8005198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b06:	609a      	str	r2, [r3, #8]
      break;
 8004b08:	e03c      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f000 fac4 	bl	80050a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2150      	movs	r1, #80	; 0x50
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fb1d 	bl	8005162 <TIM_ITRx_SetConfig>
      break;
 8004b28:	e02c      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6859      	ldr	r1, [r3, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f000 fae3 	bl	8005102 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2160      	movs	r1, #96	; 0x60
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fb0d 	bl	8005162 <TIM_ITRx_SetConfig>
      break;
 8004b48:	e01c      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6859      	ldr	r1, [r3, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f000 faa4 	bl	80050a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2140      	movs	r1, #64	; 0x40
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fafd 	bl	8005162 <TIM_ITRx_SetConfig>
      break;
 8004b68:	e00c      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4619      	mov	r1, r3
 8004b74:	4610      	mov	r0, r2
 8004b76:	f000 faf4 	bl	8005162 <TIM_ITRx_SetConfig>
      break;
 8004b7a:	e003      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e000      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
	...

08004c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a40      	ldr	r2, [pc, #256]	; (8004d18 <TIM_Base_SetConfig+0x114>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c22:	d00f      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3d      	ldr	r2, [pc, #244]	; (8004d1c <TIM_Base_SetConfig+0x118>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3c      	ldr	r2, [pc, #240]	; (8004d20 <TIM_Base_SetConfig+0x11c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3b      	ldr	r2, [pc, #236]	; (8004d24 <TIM_Base_SetConfig+0x120>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a3a      	ldr	r2, [pc, #232]	; (8004d28 <TIM_Base_SetConfig+0x124>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d108      	bne.n	8004c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2f      	ldr	r2, [pc, #188]	; (8004d18 <TIM_Base_SetConfig+0x114>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d02b      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c64:	d027      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2c      	ldr	r2, [pc, #176]	; (8004d1c <TIM_Base_SetConfig+0x118>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d023      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2b      	ldr	r2, [pc, #172]	; (8004d20 <TIM_Base_SetConfig+0x11c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <TIM_Base_SetConfig+0x120>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01b      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a29      	ldr	r2, [pc, #164]	; (8004d28 <TIM_Base_SetConfig+0x124>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d017      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <TIM_Base_SetConfig+0x128>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a27      	ldr	r2, [pc, #156]	; (8004d30 <TIM_Base_SetConfig+0x12c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00f      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <TIM_Base_SetConfig+0x130>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <TIM_Base_SetConfig+0x134>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a24      	ldr	r2, [pc, #144]	; (8004d3c <TIM_Base_SetConfig+0x138>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a23      	ldr	r2, [pc, #140]	; (8004d40 <TIM_Base_SetConfig+0x13c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d108      	bne.n	8004cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <TIM_Base_SetConfig+0x114>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0xf8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0c      	ldr	r2, [pc, #48]	; (8004d28 <TIM_Base_SetConfig+0x124>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	615a      	str	r2, [r3, #20]
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40010400 	.word	0x40010400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40014800 	.word	0x40014800
 8004d38:	40001800 	.word	0x40001800
 8004d3c:	40001c00 	.word	0x40001c00
 8004d40:	40002000 	.word	0x40002000

08004d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f023 0201 	bic.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 0302 	bic.w	r3, r3, #2
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <TIM_OC1_SetConfig+0xd8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC1_SetConfig+0x64>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <TIM_OC1_SetConfig+0xdc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10c      	bne.n	8004dc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0308 	bic.w	r3, r3, #8
 8004dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <TIM_OC1_SetConfig+0xd8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_OC1_SetConfig+0x8e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <TIM_OC1_SetConfig+0xdc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40010400 	.word	0x40010400

08004e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0210 	bic.w	r2, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f023 0320 	bic.w	r3, r3, #32
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a22      	ldr	r2, [pc, #136]	; (8004f08 <TIM_OC2_SetConfig+0xe4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_OC2_SetConfig+0x68>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a21      	ldr	r2, [pc, #132]	; (8004f0c <TIM_OC2_SetConfig+0xe8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d10d      	bne.n	8004ea8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <TIM_OC2_SetConfig+0xe4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_OC2_SetConfig+0x94>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <TIM_OC2_SetConfig+0xe8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d113      	bne.n	8004ee0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400

08004f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a21      	ldr	r2, [pc, #132]	; (8004ff0 <TIM_OC3_SetConfig+0xe0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_OC3_SetConfig+0x66>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a20      	ldr	r2, [pc, #128]	; (8004ff4 <TIM_OC3_SetConfig+0xe4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d10d      	bne.n	8004f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <TIM_OC3_SetConfig+0xe0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC3_SetConfig+0x92>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a15      	ldr	r2, [pc, #84]	; (8004ff4 <TIM_OC3_SetConfig+0xe4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d113      	bne.n	8004fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	031b      	lsls	r3, r3, #12
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <TIM_OC4_SetConfig+0xa4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC4_SetConfig+0x68>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <TIM_OC4_SetConfig+0xa8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d109      	bne.n	8005074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40010400 	.word	0x40010400

080050a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f023 030a 	bic.w	r3, r3, #10
 80050e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005102:	b480      	push	{r7}
 8005104:	b087      	sub	sp, #28
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0210 	bic.w	r2, r3, #16
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800512c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	031b      	lsls	r3, r3, #12
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800513e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005162:	b480      	push	{r7}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	f043 0307 	orr.w	r3, r3, #7
 8005184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	609a      	str	r2, [r3, #8]
}
 800518c:	bf00      	nop
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	021a      	lsls	r2, r3, #8
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4313      	orrs	r3, r2
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	609a      	str	r2, [r3, #8]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	2201      	movs	r2, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	401a      	ands	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1a      	ldr	r2, [r3, #32]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	431a      	orrs	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_TIMEx_PWMN_Start+0x24>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	bf14      	ite	ne
 8005240:	2301      	movne	r3, #1
 8005242:	2300      	moveq	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	e022      	b.n	800528e <HAL_TIMEx_PWMN_Start+0x6a>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b04      	cmp	r3, #4
 800524c:	d109      	bne.n	8005262 <HAL_TIMEx_PWMN_Start+0x3e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b01      	cmp	r3, #1
 8005258:	bf14      	ite	ne
 800525a:	2301      	movne	r3, #1
 800525c:	2300      	moveq	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	e015      	b.n	800528e <HAL_TIMEx_PWMN_Start+0x6a>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b08      	cmp	r3, #8
 8005266:	d109      	bne.n	800527c <HAL_TIMEx_PWMN_Start+0x58>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	bf14      	ite	ne
 8005274:	2301      	movne	r3, #1
 8005276:	2300      	moveq	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	e008      	b.n	800528e <HAL_TIMEx_PWMN_Start+0x6a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e06d      	b.n	8005372 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <HAL_TIMEx_PWMN_Start+0x82>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a4:	e013      	b.n	80052ce <HAL_TIMEx_PWMN_Start+0xaa>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d104      	bne.n	80052b6 <HAL_TIMEx_PWMN_Start+0x92>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052b4:	e00b      	b.n	80052ce <HAL_TIMEx_PWMN_Start+0xaa>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d104      	bne.n	80052c6 <HAL_TIMEx_PWMN_Start+0xa2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c4:	e003      	b.n	80052ce <HAL_TIMEx_PWMN_Start+0xaa>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2204      	movs	r2, #4
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f940 	bl	800555c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a22      	ldr	r2, [pc, #136]	; (800537c <HAL_TIMEx_PWMN_Start+0x158>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d022      	beq.n	800533c <HAL_TIMEx_PWMN_Start+0x118>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d01d      	beq.n	800533c <HAL_TIMEx_PWMN_Start+0x118>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <HAL_TIMEx_PWMN_Start+0x118>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <HAL_TIMEx_PWMN_Start+0x160>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <HAL_TIMEx_PWMN_Start+0x118>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <HAL_TIMEx_PWMN_Start+0x164>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_TIMEx_PWMN_Start+0x118>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1a      	ldr	r2, [pc, #104]	; (800538c <HAL_TIMEx_PWMN_Start+0x168>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_TIMEx_PWMN_Start+0x118>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a18      	ldr	r2, [pc, #96]	; (8005390 <HAL_TIMEx_PWMN_Start+0x16c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_TIMEx_PWMN_Start+0x118>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a17      	ldr	r2, [pc, #92]	; (8005394 <HAL_TIMEx_PWMN_Start+0x170>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d111      	bne.n	8005360 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b06      	cmp	r3, #6
 800534c:	d010      	beq.n	8005370 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535e:	e007      	b.n	8005370 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800
 8005388:	40000c00 	.word	0x40000c00
 800538c:	40010400 	.word	0x40010400
 8005390:	40014000 	.word	0x40014000
 8005394:	40001800 	.word	0x40001800

08005398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e05a      	b.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a21      	ldr	r2, [pc, #132]	; (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d022      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d01d      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1d      	ldr	r2, [pc, #116]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d018      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1b      	ldr	r2, [pc, #108]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d013      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1a      	ldr	r2, [pc, #104]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00e      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a18      	ldr	r2, [pc, #96]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d009      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d004      	beq.n	800543a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a15      	ldr	r2, [pc, #84]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d10c      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	4313      	orrs	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40010000 	.word	0x40010000
 8005478:	40000400 	.word	0x40000400
 800547c:	40000800 	.word	0x40000800
 8005480:	40000c00 	.word	0x40000c00
 8005484:	40010400 	.word	0x40010400
 8005488:	40014000 	.word	0x40014000
 800548c:	40001800 	.word	0x40001800

08005490 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e03d      	b.n	8005528 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	2204      	movs	r2, #4
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	43db      	mvns	r3, r3
 800557e:	401a      	ands	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	fa01 f303 	lsl.w	r3, r1, r3
 8005594:	431a      	orrs	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055a6:	b084      	sub	sp, #16
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	f107 001c 	add.w	r0, r7, #28
 80055b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d122      	bne.n	8005604 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d105      	bne.n	80055f8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 fbed 	bl	8006dd8 <USB_CoreReset>
 80055fe:	4603      	mov	r3, r0
 8005600:	73fb      	strb	r3, [r7, #15]
 8005602:	e01a      	b.n	800563a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 fbe1 	bl	8006dd8 <USB_CoreReset>
 8005616:	4603      	mov	r3, r0
 8005618:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800561a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
 800562c:	e005      	b.n	800563a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	2b01      	cmp	r3, #1
 800563e:	d10b      	bne.n	8005658 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f043 0206 	orr.w	r2, r3, #6
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f043 0220 	orr.w	r2, r3, #32
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005664:	b004      	add	sp, #16
 8005666:	4770      	bx	lr

08005668 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d165      	bne.n	8005748 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4a41      	ldr	r2, [pc, #260]	; (8005784 <USB_SetTurnaroundTime+0x11c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d906      	bls.n	8005692 <USB_SetTurnaroundTime+0x2a>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4a40      	ldr	r2, [pc, #256]	; (8005788 <USB_SetTurnaroundTime+0x120>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d202      	bcs.n	8005692 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800568c:	230f      	movs	r3, #15
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e062      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4a3c      	ldr	r2, [pc, #240]	; (8005788 <USB_SetTurnaroundTime+0x120>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d306      	bcc.n	80056a8 <USB_SetTurnaroundTime+0x40>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4a3b      	ldr	r2, [pc, #236]	; (800578c <USB_SetTurnaroundTime+0x124>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d202      	bcs.n	80056a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056a2:	230e      	movs	r3, #14
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e057      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4a38      	ldr	r2, [pc, #224]	; (800578c <USB_SetTurnaroundTime+0x124>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d306      	bcc.n	80056be <USB_SetTurnaroundTime+0x56>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4a37      	ldr	r2, [pc, #220]	; (8005790 <USB_SetTurnaroundTime+0x128>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d202      	bcs.n	80056be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056b8:	230d      	movs	r3, #13
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e04c      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4a33      	ldr	r2, [pc, #204]	; (8005790 <USB_SetTurnaroundTime+0x128>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d306      	bcc.n	80056d4 <USB_SetTurnaroundTime+0x6c>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4a32      	ldr	r2, [pc, #200]	; (8005794 <USB_SetTurnaroundTime+0x12c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d802      	bhi.n	80056d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056ce:	230c      	movs	r3, #12
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e041      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <USB_SetTurnaroundTime+0x12c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d906      	bls.n	80056ea <USB_SetTurnaroundTime+0x82>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <USB_SetTurnaroundTime+0x130>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d802      	bhi.n	80056ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056e4:	230b      	movs	r3, #11
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e036      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4a2a      	ldr	r2, [pc, #168]	; (8005798 <USB_SetTurnaroundTime+0x130>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d906      	bls.n	8005700 <USB_SetTurnaroundTime+0x98>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4a29      	ldr	r2, [pc, #164]	; (800579c <USB_SetTurnaroundTime+0x134>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d802      	bhi.n	8005700 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80056fa:	230a      	movs	r3, #10
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	e02b      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4a26      	ldr	r2, [pc, #152]	; (800579c <USB_SetTurnaroundTime+0x134>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d906      	bls.n	8005716 <USB_SetTurnaroundTime+0xae>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a25      	ldr	r2, [pc, #148]	; (80057a0 <USB_SetTurnaroundTime+0x138>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d202      	bcs.n	8005716 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005710:	2309      	movs	r3, #9
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e020      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <USB_SetTurnaroundTime+0x138>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d306      	bcc.n	800572c <USB_SetTurnaroundTime+0xc4>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4a20      	ldr	r2, [pc, #128]	; (80057a4 <USB_SetTurnaroundTime+0x13c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d802      	bhi.n	800572c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005726:	2308      	movs	r3, #8
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e015      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <USB_SetTurnaroundTime+0x13c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d906      	bls.n	8005742 <USB_SetTurnaroundTime+0xda>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <USB_SetTurnaroundTime+0x140>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d202      	bcs.n	8005742 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800573c:	2307      	movs	r3, #7
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e00a      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005742:	2306      	movs	r3, #6
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e007      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800574e:	2309      	movs	r3, #9
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e001      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005754:	2309      	movs	r3, #9
 8005756:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	00d8acbf 	.word	0x00d8acbf
 8005788:	00e4e1c0 	.word	0x00e4e1c0
 800578c:	00f42400 	.word	0x00f42400
 8005790:	01067380 	.word	0x01067380
 8005794:	011a499f 	.word	0x011a499f
 8005798:	01312cff 	.word	0x01312cff
 800579c:	014ca43f 	.word	0x014ca43f
 80057a0:	016e3600 	.word	0x016e3600
 80057a4:	01a6ab1f 	.word	0x01a6ab1f
 80057a8:	01e84800 	.word	0x01e84800

080057ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f043 0201 	orr.w	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d115      	bne.n	800583e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800581e:	2001      	movs	r0, #1
 8005820:	f7fb ffa0 	bl	8001764 <HAL_Delay>
      ms++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 fa45 	bl	8006cba <USB_GetMode>
 8005830:	4603      	mov	r3, r0
 8005832:	2b01      	cmp	r3, #1
 8005834:	d01e      	beq.n	8005874 <USB_SetCurrentMode+0x84>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b31      	cmp	r3, #49	; 0x31
 800583a:	d9f0      	bls.n	800581e <USB_SetCurrentMode+0x2e>
 800583c:	e01a      	b.n	8005874 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800583e:	78fb      	ldrb	r3, [r7, #3]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d115      	bne.n	8005870 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005850:	2001      	movs	r0, #1
 8005852:	f7fb ff87 	bl	8001764 <HAL_Delay>
      ms++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 fa2c 	bl	8006cba <USB_GetMode>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <USB_SetCurrentMode+0x84>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b31      	cmp	r3, #49	; 0x31
 800586c:	d9f0      	bls.n	8005850 <USB_SetCurrentMode+0x60>
 800586e:	e001      	b.n	8005874 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e005      	b.n	8005880 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b32      	cmp	r3, #50	; 0x32
 8005878:	d101      	bne.n	800587e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005888:	b084      	sub	sp, #16
 800588a:	b580      	push	{r7, lr}
 800588c:	b086      	sub	sp, #24
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	e009      	b.n	80058bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	3340      	adds	r3, #64	; 0x40
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	2200      	movs	r2, #0
 80058b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	3301      	adds	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b0e      	cmp	r3, #14
 80058c0:	d9f2      	bls.n	80058a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d11c      	bne.n	8005902 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d6:	f043 0302 	orr.w	r3, r3, #2
 80058da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
 8005900:	e00b      	b.n	800591a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005920:	461a      	mov	r2, r3
 8005922:	2300      	movs	r3, #0
 8005924:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	4619      	mov	r1, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	461a      	mov	r2, r3
 8005936:	680b      	ldr	r3, [r1, #0]
 8005938:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2b01      	cmp	r3, #1
 800593e:	d10c      	bne.n	800595a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005946:	2100      	movs	r1, #0
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f965 	bl	8005c18 <USB_SetDevSpeed>
 800594e:	e008      	b.n	8005962 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005950:	2101      	movs	r1, #1
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f960 	bl	8005c18 <USB_SetDevSpeed>
 8005958:	e003      	b.n	8005962 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800595a:	2103      	movs	r1, #3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f95b 	bl	8005c18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005962:	2110      	movs	r1, #16
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f8f3 	bl	8005b50 <USB_FlushTxFifo>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f91f 	bl	8005bb8 <USB_FlushRxFifo>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	461a      	mov	r2, r3
 800598c:	2300      	movs	r3, #0
 800598e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	461a      	mov	r2, r3
 8005998:	2300      	movs	r3, #0
 800599a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	461a      	mov	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a8:	2300      	movs	r3, #0
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	e043      	b.n	8005a36 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c4:	d118      	bne.n	80059f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d8:	461a      	mov	r2, r3
 80059da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e013      	b.n	8005a0a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	461a      	mov	r2, r3
 80059f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e008      	b.n	8005a0a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	461a      	mov	r2, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	461a      	mov	r2, r3
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	3301      	adds	r3, #1
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d3b7      	bcc.n	80059ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e043      	b.n	8005acc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a5a:	d118      	bne.n	8005a8e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e013      	b.n	8005aa0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	e008      	b.n	8005aa0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3b7      	bcc.n	8005a44 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005af4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f043 0210 	orr.w	r2, r3, #16
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699a      	ldr	r2, [r3, #24]
 8005b0c:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <USB_DevInit+0x2c4>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f043 0208 	orr.w	r2, r3, #8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b34:	f043 0304 	orr.w	r3, r3, #4
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b48:	b004      	add	sp, #16
 8005b4a:	4770      	bx	lr
 8005b4c:	803c3800 	.word	0x803c3800

08005b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3301      	adds	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <USB_FlushTxFifo+0x64>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d901      	bls.n	8005b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e01b      	b.n	8005ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	daf2      	bge.n	8005b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	019b      	lsls	r3, r3, #6
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4a08      	ldr	r2, [pc, #32]	; (8005bb4 <USB_FlushTxFifo+0x64>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d901      	bls.n	8005b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e006      	b.n	8005ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d0f0      	beq.n	8005b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	00030d40 	.word	0x00030d40

08005bb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <USB_FlushRxFifo+0x5c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d901      	bls.n	8005bd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e018      	b.n	8005c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	daf2      	bge.n	8005bc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2210      	movs	r2, #16
 8005be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <USB_FlushRxFifo+0x5c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e006      	b.n	8005c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d0f0      	beq.n	8005be8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	00030d40 	.word	0x00030d40

08005c18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	68f9      	ldr	r1, [r7, #12]
 8005c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0306 	and.w	r3, r3, #6
 8005c62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	75fb      	strb	r3, [r7, #23]
 8005c6e:	e00a      	b.n	8005c86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d002      	beq.n	8005c7c <USB_GetDevSpeed+0x32>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	d102      	bne.n	8005c82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	75fb      	strb	r3, [r7, #23]
 8005c80:	e001      	b.n	8005c86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c82:	230f      	movs	r3, #15
 8005c84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	785b      	ldrb	r3, [r3, #1]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d13a      	bne.n	8005d26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	68f9      	ldr	r1, [r7, #12]
 8005cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d155      	bne.n	8005d94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	791b      	ldrb	r3, [r3, #4]
 8005d02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	059b      	lsls	r3, r3, #22
 8005d0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e036      	b.n	8005d94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2c:	69da      	ldr	r2, [r3, #28]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	2101      	movs	r1, #1
 8005d38:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	68f9      	ldr	r1, [r7, #12]
 8005d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11a      	bne.n	8005d94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	791b      	ldrb	r3, [r3, #4]
 8005d78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d161      	bne.n	8005e84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd6:	d11f      	bne.n	8005e18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005df6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	2101      	movs	r1, #1
 8005e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e38:	4013      	ands	r3, r2
 8005e3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	43db      	mvns	r3, r3
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	0159      	lsls	r1, r3, #5
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	440b      	add	r3, r1
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4b35      	ldr	r3, [pc, #212]	; (8005f54 <USB_DeactivateEndpoint+0x1b0>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	600b      	str	r3, [r1, #0]
 8005e82:	e060      	b.n	8005f46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e9a:	d11f      	bne.n	8005edc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005efc:	4013      	ands	r3, r2
 8005efe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	2101      	movs	r1, #1
 8005f12:	fa01 f303 	lsl.w	r3, r1, r3
 8005f16:	041b      	lsls	r3, r3, #16
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	68f9      	ldr	r1, [r7, #12]
 8005f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f20:	4013      	ands	r3, r2
 8005f22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	0159      	lsls	r1, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	440b      	add	r3, r1
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <USB_DeactivateEndpoint+0x1b4>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	ec337800 	.word	0xec337800
 8005f58:	eff37800 	.word	0xeff37800

08005f5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	f040 815c 	bne.w	8006236 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d132      	bne.n	8005fec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe4:	0cdb      	lsrs	r3, r3, #19
 8005fe6:	04db      	lsls	r3, r3, #19
 8005fe8:	6113      	str	r3, [r2, #16]
 8005fea:	e074      	b.n	80060d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	440a      	add	r2, r1
 8006002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006006:	0cdb      	lsrs	r3, r3, #19
 8006008:	04db      	lsls	r3, r3, #19
 800600a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006026:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800602a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800602e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	6999      	ldr	r1, [r3, #24]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	440b      	add	r3, r1
 8006048:	1e59      	subs	r1, r3, #1
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006052:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006054:	4b9d      	ldr	r3, [pc, #628]	; (80062cc <USB_EPStartXfer+0x370>)
 8006056:	400b      	ands	r3, r1
 8006058:	69b9      	ldr	r1, [r7, #24]
 800605a:	0148      	lsls	r0, r1, #5
 800605c:	69f9      	ldr	r1, [r7, #28]
 800605e:	4401      	add	r1, r0
 8006060:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006064:	4313      	orrs	r3, r2
 8006066:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800607e:	69b9      	ldr	r1, [r7, #24]
 8006080:	0148      	lsls	r0, r1, #5
 8006082:	69f9      	ldr	r1, [r7, #28]
 8006084:	4401      	add	r1, r0
 8006086:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800608a:	4313      	orrs	r3, r2
 800608c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	791b      	ldrb	r3, [r3, #4]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d11f      	bne.n	80060d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d14b      	bne.n	8006174 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	461a      	mov	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	791b      	ldrb	r3, [r3, #4]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d128      	bne.n	8006152 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d110      	bne.n	8006132 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	0151      	lsls	r1, r2, #5
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	440a      	add	r2, r1
 8006126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	e00f      	b.n	8006152 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006150:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	e133      	b.n	80063dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800618e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006192:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	791b      	ldrb	r3, [r3, #4]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d015      	beq.n	80061c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 811b 	beq.w	80063dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	2101      	movs	r1, #1
 80061b8:	fa01 f303 	lsl.w	r3, r1, r3
 80061bc:	69f9      	ldr	r1, [r7, #28]
 80061be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061c2:	4313      	orrs	r3, r2
 80061c4:	634b      	str	r3, [r1, #52]	; 0x34
 80061c6:	e109      	b.n	80063dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d110      	bne.n	80061fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	e00f      	b.n	800621a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006218:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6919      	ldr	r1, [r3, #16]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	b298      	uxth	r0, r3
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	4603      	mov	r3, r0
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fade 	bl	80067f0 <USB_WritePacket>
 8006234:	e0d2      	b.n	80063dc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	0151      	lsls	r1, r2, #5
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	440a      	add	r2, r1
 800624c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006250:	0cdb      	lsrs	r3, r3, #19
 8006252:	04db      	lsls	r3, r3, #19
 8006254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006278:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d126      	bne.n	80062d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006298:	69b9      	ldr	r1, [r7, #24]
 800629a:	0148      	lsls	r0, r1, #5
 800629c:	69f9      	ldr	r1, [r7, #28]
 800629e:	4401      	add	r1, r0
 80062a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062a4:	4313      	orrs	r3, r2
 80062a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062c6:	6113      	str	r3, [r2, #16]
 80062c8:	e03a      	b.n	8006340 <USB_EPStartXfer+0x3e4>
 80062ca:	bf00      	nop
 80062cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	1e5a      	subs	r2, r3, #1
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	8afa      	ldrh	r2, [r7, #22]
 80062ec:	fb03 f202 	mul.w	r2, r3, r2
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	8afb      	ldrh	r3, [r7, #22]
 8006304:	04d9      	lsls	r1, r3, #19
 8006306:	4b38      	ldr	r3, [pc, #224]	; (80063e8 <USB_EPStartXfer+0x48c>)
 8006308:	400b      	ands	r3, r1
 800630a:	69b9      	ldr	r1, [r7, #24]
 800630c:	0148      	lsls	r0, r1, #5
 800630e:	69f9      	ldr	r1, [r7, #28]
 8006310:	4401      	add	r1, r0
 8006312:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006316:	4313      	orrs	r3, r2
 8006318:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006330:	69b9      	ldr	r1, [r7, #24]
 8006332:	0148      	lsls	r0, r1, #5
 8006334:	69f9      	ldr	r1, [r7, #28]
 8006336:	4401      	add	r1, r0
 8006338:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800633c:	4313      	orrs	r3, r2
 800633e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d10d      	bne.n	8006362 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6919      	ldr	r1, [r3, #16]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	460a      	mov	r2, r1
 8006360:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	791b      	ldrb	r3, [r3, #4]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d128      	bne.n	80063bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d110      	bne.n	800639c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e00f      	b.n	80063bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	1ff80000 	.word	0x1ff80000

080063ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	2b01      	cmp	r3, #1
 800640a:	f040 80ce 	bne.w	80065aa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d132      	bne.n	800647c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006434:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006438:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	440a      	add	r2, r1
 8006450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006454:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006458:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	440a      	add	r2, r1
 8006470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006474:	0cdb      	lsrs	r3, r3, #19
 8006476:	04db      	lsls	r3, r3, #19
 8006478:	6113      	str	r3, [r2, #16]
 800647a:	e04e      	b.n	800651a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006496:	0cdb      	lsrs	r3, r3, #19
 8006498:	04db      	lsls	r3, r3, #19
 800649a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064be:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d903      	bls.n	80064d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800650a:	6939      	ldr	r1, [r7, #16]
 800650c:	0148      	lsls	r0, r1, #5
 800650e:	6979      	ldr	r1, [r7, #20]
 8006510:	4401      	add	r1, r0
 8006512:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006516:	4313      	orrs	r3, r2
 8006518:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d11e      	bne.n	800655e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d009      	beq.n	800653c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	461a      	mov	r2, r3
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006556:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	e097      	b.n	800668e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006578:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800657c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 8083 	beq.w	800668e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	2101      	movs	r1, #1
 800659a:	fa01 f303 	lsl.w	r3, r1, r3
 800659e:	6979      	ldr	r1, [r7, #20]
 80065a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a4:	4313      	orrs	r3, r2
 80065a6:	634b      	str	r3, [r1, #52]	; 0x34
 80065a8:	e071      	b.n	800668e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c4:	0cdb      	lsrs	r3, r3, #19
 80065c6:	04db      	lsls	r3, r3, #19
 80065c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	0151      	lsls	r1, r2, #5
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	440a      	add	r2, r1
 80065e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006624:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663c:	6939      	ldr	r1, [r7, #16]
 800663e:	0148      	lsls	r0, r1, #5
 8006640:	6979      	ldr	r1, [r7, #20]
 8006642:	4401      	add	r1, r0
 8006644:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006648:	4313      	orrs	r3, r2
 800664a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10d      	bne.n	800666e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6919      	ldr	r1, [r3, #16]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	460a      	mov	r2, r1
 800666c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	440a      	add	r2, r1
 8006684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006688:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800668c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d14a      	bne.n	8006750 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066d2:	f040 8086 	bne.w	80067e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f242 7210 	movw	r2, #10000	; 0x2710
 800672a:	4293      	cmp	r3, r2
 800672c:	d902      	bls.n	8006734 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	75fb      	strb	r3, [r7, #23]
          break;
 8006732:	e056      	b.n	80067e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800674c:	d0e7      	beq.n	800671e <USB_EPStopXfer+0x82>
 800674e:	e048      	b.n	80067e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006768:	d13b      	bne.n	80067e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800678c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3301      	adds	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80067be:	4293      	cmp	r3, r2
 80067c0:	d902      	bls.n	80067c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	75fb      	strb	r3, [r7, #23]
          break;
 80067c6:	e00c      	b.n	80067e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067e0:	d0e7      	beq.n	80067b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	; 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4611      	mov	r1, r2
 80067fc:	461a      	mov	r2, r3
 80067fe:	460b      	mov	r3, r1
 8006800:	71fb      	strb	r3, [r7, #7]
 8006802:	4613      	mov	r3, r2
 8006804:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800680e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006812:	2b00      	cmp	r3, #0
 8006814:	d123      	bne.n	800685e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006816:	88bb      	ldrh	r3, [r7, #4]
 8006818:	3303      	adds	r3, #3
 800681a:	089b      	lsrs	r3, r3, #2
 800681c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e018      	b.n	8006856 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	031a      	lsls	r2, r3, #12
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	4413      	add	r3, r2
 800682c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006830:	461a      	mov	r2, r3
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	3301      	adds	r3, #1
 800683c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	3301      	adds	r3, #1
 8006842:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	3301      	adds	r3, #1
 8006848:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	3301      	adds	r3, #1
 800684e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	3301      	adds	r3, #1
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	429a      	cmp	r2, r3
 800685c:	d3e2      	bcc.n	8006824 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3724      	adds	r7, #36	; 0x24
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800686c:	b480      	push	{r7}
 800686e:	b08b      	sub	sp, #44	; 0x2c
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	b29b      	uxth	r3, r3
 8006888:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006892:	2300      	movs	r3, #0
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	e014      	b.n	80068c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	3301      	adds	r3, #1
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	3301      	adds	r3, #1
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	3301      	adds	r3, #1
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	3301      	adds	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	3301      	adds	r3, #1
 80068c0:	623b      	str	r3, [r7, #32]
 80068c2:	6a3a      	ldr	r2, [r7, #32]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d3e6      	bcc.n	8006898 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068ca:	8bfb      	ldrh	r3, [r7, #30]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01e      	beq.n	800690e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068da:	461a      	mov	r2, r3
 80068dc:	f107 0310 	add.w	r3, r7, #16
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	701a      	strb	r2, [r3, #0]
      i++;
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	3301      	adds	r3, #1
 80068fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	3301      	adds	r3, #1
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006902:	8bfb      	ldrh	r3, [r7, #30]
 8006904:	3b01      	subs	r3, #1
 8006906:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006908:	8bfb      	ldrh	r3, [r7, #30]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1ea      	bne.n	80068e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006910:	4618      	mov	r0, r3
 8006912:	372c      	adds	r7, #44	; 0x2c
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d12c      	bne.n	8006992 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	db12      	blt.n	8006970 <USB_EPSetStall+0x54>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00f      	beq.n	8006970 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800696e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	e02b      	b.n	80069ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	db12      	blt.n	80069ca <USB_EPSetStall+0xae>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00f      	beq.n	80069ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d128      	bne.n	8006a66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	791b      	ldrb	r3, [r3, #4]
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	d003      	beq.n	8006a44 <USB_EPClearStall+0x4c>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	791b      	ldrb	r3, [r3, #4]
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d138      	bne.n	8006ab6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	e027      	b.n	8006ab6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d003      	beq.n	8006a96 <USB_EPClearStall+0x9e>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	791b      	ldrb	r3, [r3, #4]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d10f      	bne.n	8006ab6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ae2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ae6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006af8:	68f9      	ldr	r1, [r7, #12]
 8006afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b3e:	f023 0302 	bic.w	r3, r3, #2
 8006b42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b6c:	f023 0303 	bic.w	r3, r3, #3
 8006b70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bac:	68fb      	ldr	r3, [r7, #12]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	0c1b      	lsrs	r3, r3, #16
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	b29b      	uxth	r3, r3
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c50:	68bb      	ldr	r3, [r7, #8]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b087      	sub	sp, #28
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	460b      	mov	r3, r1
 8006c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8e:	01db      	lsls	r3, r3, #7
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cac:	68bb      	ldr	r3, [r7, #8]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cf4:	f023 0307 	bic.w	r3, r3, #7
 8006cf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	460b      	mov	r3, r1
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	333c      	adds	r3, #60	; 0x3c
 8006d32:	3304      	adds	r3, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4a26      	ldr	r2, [pc, #152]	; (8006dd4 <USB_EP0_OutStart+0xb8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d90a      	bls.n	8006d56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d50:	d101      	bne.n	8006d56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e037      	b.n	8006dc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d84:	f043 0318 	orr.w	r3, r3, #24
 8006d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d10f      	bne.n	8006dc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006dc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	4f54300a 	.word	0x4f54300a

08006dd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <USB_CoreReset+0x64>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d901      	bls.n	8006df6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e01b      	b.n	8006e2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	daf2      	bge.n	8006de4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f043 0201 	orr.w	r2, r3, #1
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a09      	ldr	r2, [pc, #36]	; (8006e3c <USB_CoreReset+0x64>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d901      	bls.n	8006e20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d0f0      	beq.n	8006e0e <USB_CoreReset+0x36>

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	00030d40 	.word	0x00030d40

08006e40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e50:	f002 fc9e 	bl	8009790 <USBD_static_malloc>
 8006e54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d109      	bne.n	8006e70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32b0      	adds	r2, #176	; 0xb0
 8006e66:	2100      	movs	r1, #0
 8006e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e0d4      	b.n	800701a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e70:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e74:	2100      	movs	r1, #0
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f002 fd06 	bl	8009888 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	32b0      	adds	r2, #176	; 0xb0
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	32b0      	adds	r2, #176	; 0xb0
 8006e96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	7c1b      	ldrb	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d138      	bne.n	8006f1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ea8:	4b5e      	ldr	r3, [pc, #376]	; (8007024 <USBD_CDC_Init+0x1e4>)
 8006eaa:	7819      	ldrb	r1, [r3, #0]
 8006eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f002 fb49 	bl	800954a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006eb8:	4b5a      	ldr	r3, [pc, #360]	; (8007024 <USBD_CDC_Init+0x1e4>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f003 020f 	and.w	r2, r3, #15
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	3324      	adds	r3, #36	; 0x24
 8006ece:	2201      	movs	r2, #1
 8006ed0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ed2:	4b55      	ldr	r3, [pc, #340]	; (8007028 <USBD_CDC_Init+0x1e8>)
 8006ed4:	7819      	ldrb	r1, [r3, #0]
 8006ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eda:	2202      	movs	r2, #2
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f002 fb34 	bl	800954a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ee2:	4b51      	ldr	r3, [pc, #324]	; (8007028 <USBD_CDC_Init+0x1e8>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f003 020f 	and.w	r2, r3, #15
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006efa:	2201      	movs	r2, #1
 8006efc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006efe:	4b4b      	ldr	r3, [pc, #300]	; (800702c <USBD_CDC_Init+0x1ec>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	f003 020f 	and.w	r2, r3, #15
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	3326      	adds	r3, #38	; 0x26
 8006f14:	2210      	movs	r2, #16
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	e035      	b.n	8006f86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f1a:	4b42      	ldr	r3, [pc, #264]	; (8007024 <USBD_CDC_Init+0x1e4>)
 8006f1c:	7819      	ldrb	r1, [r3, #0]
 8006f1e:	2340      	movs	r3, #64	; 0x40
 8006f20:	2202      	movs	r2, #2
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f002 fb11 	bl	800954a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f28:	4b3e      	ldr	r3, [pc, #248]	; (8007024 <USBD_CDC_Init+0x1e4>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f003 020f 	and.w	r2, r3, #15
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3324      	adds	r3, #36	; 0x24
 8006f3e:	2201      	movs	r2, #1
 8006f40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f42:	4b39      	ldr	r3, [pc, #228]	; (8007028 <USBD_CDC_Init+0x1e8>)
 8006f44:	7819      	ldrb	r1, [r3, #0]
 8006f46:	2340      	movs	r3, #64	; 0x40
 8006f48:	2202      	movs	r2, #2
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f002 fafd 	bl	800954a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f50:	4b35      	ldr	r3, [pc, #212]	; (8007028 <USBD_CDC_Init+0x1e8>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	f003 020f 	and.w	r2, r3, #15
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f68:	2201      	movs	r2, #1
 8006f6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f6c:	4b2f      	ldr	r3, [pc, #188]	; (800702c <USBD_CDC_Init+0x1ec>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f003 020f 	and.w	r2, r3, #15
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	3326      	adds	r3, #38	; 0x26
 8006f82:	2210      	movs	r2, #16
 8006f84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f86:	4b29      	ldr	r3, [pc, #164]	; (800702c <USBD_CDC_Init+0x1ec>)
 8006f88:	7819      	ldrb	r1, [r3, #0]
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f002 fadb 	bl	800954a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f94:	4b25      	ldr	r3, [pc, #148]	; (800702c <USBD_CDC_Init+0x1ec>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	f003 020f 	and.w	r2, r3, #15
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	3324      	adds	r3, #36	; 0x24
 8006faa:	2201      	movs	r2, #1
 8006fac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	33b0      	adds	r3, #176	; 0xb0
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e018      	b.n	800701a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	7c1b      	ldrb	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10a      	bne.n	8007006 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ff0:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <USBD_CDC_Init+0x1e8>)
 8006ff2:	7819      	ldrb	r1, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f002 fb92 	bl	8009728 <USBD_LL_PrepareReceive>
 8007004:	e008      	b.n	8007018 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007006:	4b08      	ldr	r3, [pc, #32]	; (8007028 <USBD_CDC_Init+0x1e8>)
 8007008:	7819      	ldrb	r1, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007010:	2340      	movs	r3, #64	; 0x40
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f002 fb88 	bl	8009728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000693 	.word	0x20000693
 8007028:	20000694 	.word	0x20000694
 800702c:	20000695 	.word	0x20000695

08007030 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800703c:	4b3a      	ldr	r3, [pc, #232]	; (8007128 <USBD_CDC_DeInit+0xf8>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f002 faa7 	bl	8009596 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007048:	4b37      	ldr	r3, [pc, #220]	; (8007128 <USBD_CDC_DeInit+0xf8>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	f003 020f 	and.w	r2, r3, #15
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	3324      	adds	r3, #36	; 0x24
 800705e:	2200      	movs	r2, #0
 8007060:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007062:	4b32      	ldr	r3, [pc, #200]	; (800712c <USBD_CDC_DeInit+0xfc>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f002 fa94 	bl	8009596 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800706e:	4b2f      	ldr	r3, [pc, #188]	; (800712c <USBD_CDC_DeInit+0xfc>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	f003 020f 	and.w	r2, r3, #15
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007086:	2200      	movs	r2, #0
 8007088:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800708a:	4b29      	ldr	r3, [pc, #164]	; (8007130 <USBD_CDC_DeInit+0x100>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f002 fa80 	bl	8009596 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007096:	4b26      	ldr	r3, [pc, #152]	; (8007130 <USBD_CDC_DeInit+0x100>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	f003 020f 	and.w	r2, r3, #15
 800709e:	6879      	ldr	r1, [r7, #4]
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	3324      	adds	r3, #36	; 0x24
 80070ac:	2200      	movs	r2, #0
 80070ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070b0:	4b1f      	ldr	r3, [pc, #124]	; (8007130 <USBD_CDC_DeInit+0x100>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	3326      	adds	r3, #38	; 0x26
 80070c6:	2200      	movs	r2, #0
 80070c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	32b0      	adds	r2, #176	; 0xb0
 80070d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01f      	beq.n	800711c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	33b0      	adds	r3, #176	; 0xb0
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	32b0      	adds	r2, #176	; 0xb0
 80070fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fe:	4618      	mov	r0, r3
 8007100:	f002 fb54 	bl	80097ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32b0      	adds	r2, #176	; 0xb0
 800710e:	2100      	movs	r1, #0
 8007110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000693 	.word	0x20000693
 800712c:	20000694 	.word	0x20000694
 8007130:	20000695 	.word	0x20000695

08007134 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	32b0      	adds	r2, #176	; 0xb0
 8007148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007152:	2300      	movs	r3, #0
 8007154:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007160:	2303      	movs	r3, #3
 8007162:	e0bf      	b.n	80072e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800716c:	2b00      	cmp	r3, #0
 800716e:	d050      	beq.n	8007212 <USBD_CDC_Setup+0xde>
 8007170:	2b20      	cmp	r3, #32
 8007172:	f040 80af 	bne.w	80072d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d03a      	beq.n	80071f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b25b      	sxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	da1b      	bge.n	80071c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	33b0      	adds	r3, #176	; 0xb0
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800719e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	88d2      	ldrh	r2, [r2, #6]
 80071a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	88db      	ldrh	r3, [r3, #6]
 80071aa:	2b07      	cmp	r3, #7
 80071ac:	bf28      	it	cs
 80071ae:	2307      	movcs	r3, #7
 80071b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	89fa      	ldrh	r2, [r7, #14]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fd89 	bl	8008cd0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071be:	e090      	b.n	80072e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	785a      	ldrb	r2, [r3, #1]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	88db      	ldrh	r3, [r3, #6]
 80071ce:	2b3f      	cmp	r3, #63	; 0x3f
 80071d0:	d803      	bhi.n	80071da <USBD_CDC_Setup+0xa6>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	88db      	ldrh	r3, [r3, #6]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	e000      	b.n	80071dc <USBD_CDC_Setup+0xa8>
 80071da:	2240      	movs	r2, #64	; 0x40
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071e2:	6939      	ldr	r1, [r7, #16]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80071ea:	461a      	mov	r2, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 fd9b 	bl	8008d28 <USBD_CtlPrepareRx>
      break;
 80071f2:	e076      	b.n	80072e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	33b0      	adds	r3, #176	; 0xb0
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	7850      	ldrb	r0, [r2, #1]
 800720a:	2200      	movs	r2, #0
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	4798      	blx	r3
      break;
 8007210:	e067      	b.n	80072e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	785b      	ldrb	r3, [r3, #1]
 8007216:	2b0b      	cmp	r3, #11
 8007218:	d851      	bhi.n	80072be <USBD_CDC_Setup+0x18a>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <USBD_CDC_Setup+0xec>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	08007251 	.word	0x08007251
 8007224:	080072cd 	.word	0x080072cd
 8007228:	080072bf 	.word	0x080072bf
 800722c:	080072bf 	.word	0x080072bf
 8007230:	080072bf 	.word	0x080072bf
 8007234:	080072bf 	.word	0x080072bf
 8007238:	080072bf 	.word	0x080072bf
 800723c:	080072bf 	.word	0x080072bf
 8007240:	080072bf 	.word	0x080072bf
 8007244:	080072bf 	.word	0x080072bf
 8007248:	0800727b 	.word	0x0800727b
 800724c:	080072a5 	.word	0x080072a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b03      	cmp	r3, #3
 800725a:	d107      	bne.n	800726c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800725c:	f107 030a 	add.w	r3, r7, #10
 8007260:	2202      	movs	r2, #2
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 fd33 	bl	8008cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800726a:	e032      	b.n	80072d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fcbd 	bl	8008bee <USBD_CtlError>
            ret = USBD_FAIL;
 8007274:	2303      	movs	r3, #3
 8007276:	75fb      	strb	r3, [r7, #23]
          break;
 8007278:	e02b      	b.n	80072d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b03      	cmp	r3, #3
 8007284:	d107      	bne.n	8007296 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007286:	f107 030d 	add.w	r3, r7, #13
 800728a:	2201      	movs	r2, #1
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fd1e 	bl	8008cd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007294:	e01d      	b.n	80072d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 fca8 	bl	8008bee <USBD_CtlError>
            ret = USBD_FAIL;
 800729e:	2303      	movs	r3, #3
 80072a0:	75fb      	strb	r3, [r7, #23]
          break;
 80072a2:	e016      	b.n	80072d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d00f      	beq.n	80072d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fc9b 	bl	8008bee <USBD_CtlError>
            ret = USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072bc:	e008      	b.n	80072d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 fc94 	bl	8008bee <USBD_CtlError>
          ret = USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ca:	e002      	b.n	80072d2 <USBD_CDC_Setup+0x19e>
          break;
 80072cc:	bf00      	nop
 80072ce:	e008      	b.n	80072e2 <USBD_CDC_Setup+0x1ae>
          break;
 80072d0:	bf00      	nop
      }
      break;
 80072d2:	e006      	b.n	80072e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fc89 	bl	8008bee <USBD_CtlError>
      ret = USBD_FAIL;
 80072dc:	2303      	movs	r3, #3
 80072de:	75fb      	strb	r3, [r7, #23]
      break;
 80072e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	32b0      	adds	r2, #176	; 0xb0
 800730a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	e065      	b.n	80073e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	32b0      	adds	r2, #176	; 0xb0
 8007320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007324:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	f003 020f 	and.w	r2, r3, #15
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	3318      	adds	r3, #24
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d02f      	beq.n	80073a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	f003 020f 	and.w	r2, r3, #15
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	3318      	adds	r3, #24
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	f003 010f 	and.w	r1, r3, #15
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	460b      	mov	r3, r1
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	440b      	add	r3, r1
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4403      	add	r3, r0
 8007368:	3348      	adds	r3, #72	; 0x48
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007370:	fb01 f303 	mul.w	r3, r1, r3
 8007374:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007376:	2b00      	cmp	r3, #0
 8007378:	d112      	bne.n	80073a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	f003 020f 	and.w	r2, r3, #15
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	3318      	adds	r3, #24
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007392:	78f9      	ldrb	r1, [r7, #3]
 8007394:	2300      	movs	r3, #0
 8007396:	2200      	movs	r2, #0
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f002 f9a4 	bl	80096e6 <USBD_LL_Transmit>
 800739e:	e01f      	b.n	80073e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	33b0      	adds	r3, #176	; 0xb0
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d010      	beq.n	80073e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	33b0      	adds	r3, #176	; 0xb0
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073dc:	78fa      	ldrb	r2, [r7, #3]
 80073de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	32b0      	adds	r2, #176	; 0xb0
 8007400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007404:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	32b0      	adds	r2, #176	; 0xb0
 8007410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007418:	2303      	movs	r3, #3
 800741a:	e01a      	b.n	8007452 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f002 f9a2 	bl	800976a <USBD_LL_GetRxDataSize>
 8007426:	4602      	mov	r2, r0
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	33b0      	adds	r3, #176	; 0xb0
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800744c:	4611      	mov	r1, r2
 800744e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	32b0      	adds	r2, #176	; 0xb0
 800746c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007470:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007478:	2303      	movs	r3, #3
 800747a:	e025      	b.n	80074c8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	33b0      	adds	r3, #176	; 0xb0
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01a      	beq.n	80074c6 <USBD_CDC_EP0_RxReady+0x6c>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007496:	2bff      	cmp	r3, #255	; 0xff
 8007498:	d015      	beq.n	80074c6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	33b0      	adds	r3, #176	; 0xb0
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80074b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074ba:	b292      	uxth	r2, r2
 80074bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	22ff      	movs	r2, #255	; 0xff
 80074c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074d8:	2182      	movs	r1, #130	; 0x82
 80074da:	4818      	ldr	r0, [pc, #96]	; (800753c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074dc:	f000 fd4f 	bl	8007f7e <USBD_GetEpDesc>
 80074e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074e2:	2101      	movs	r1, #1
 80074e4:	4815      	ldr	r0, [pc, #84]	; (800753c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074e6:	f000 fd4a 	bl	8007f7e <USBD_GetEpDesc>
 80074ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074ec:	2181      	movs	r1, #129	; 0x81
 80074ee:	4813      	ldr	r0, [pc, #76]	; (800753c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074f0:	f000 fd45 	bl	8007f7e <USBD_GetEpDesc>
 80074f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2210      	movs	r2, #16
 8007500:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d006      	beq.n	8007516 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2200      	movs	r2, #0
 800750c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007510:	711a      	strb	r2, [r3, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d006      	beq.n	800752a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007524:	711a      	strb	r2, [r3, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2243      	movs	r2, #67	; 0x43
 800752e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007530:	4b02      	ldr	r3, [pc, #8]	; (800753c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000650 	.word	0x20000650

08007540 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007548:	2182      	movs	r1, #130	; 0x82
 800754a:	4818      	ldr	r0, [pc, #96]	; (80075ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800754c:	f000 fd17 	bl	8007f7e <USBD_GetEpDesc>
 8007550:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007552:	2101      	movs	r1, #1
 8007554:	4815      	ldr	r0, [pc, #84]	; (80075ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007556:	f000 fd12 	bl	8007f7e <USBD_GetEpDesc>
 800755a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800755c:	2181      	movs	r1, #129	; 0x81
 800755e:	4813      	ldr	r0, [pc, #76]	; (80075ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007560:	f000 fd0d 	bl	8007f7e <USBD_GetEpDesc>
 8007564:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2210      	movs	r2, #16
 8007570:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d006      	beq.n	8007586 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2200      	movs	r2, #0
 800757c:	711a      	strb	r2, [r3, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f042 0202 	orr.w	r2, r2, #2
 8007584:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d006      	beq.n	800759a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	711a      	strb	r2, [r3, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f042 0202 	orr.w	r2, r2, #2
 8007598:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2243      	movs	r2, #67	; 0x43
 800759e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075a0:	4b02      	ldr	r3, [pc, #8]	; (80075ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000650 	.word	0x20000650

080075b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075b8:	2182      	movs	r1, #130	; 0x82
 80075ba:	4818      	ldr	r0, [pc, #96]	; (800761c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075bc:	f000 fcdf 	bl	8007f7e <USBD_GetEpDesc>
 80075c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075c2:	2101      	movs	r1, #1
 80075c4:	4815      	ldr	r0, [pc, #84]	; (800761c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075c6:	f000 fcda 	bl	8007f7e <USBD_GetEpDesc>
 80075ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075cc:	2181      	movs	r1, #129	; 0x81
 80075ce:	4813      	ldr	r0, [pc, #76]	; (800761c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075d0:	f000 fcd5 	bl	8007f7e <USBD_GetEpDesc>
 80075d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2210      	movs	r2, #16
 80075e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d006      	beq.n	80075f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075f0:	711a      	strb	r2, [r3, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007604:	711a      	strb	r2, [r3, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2243      	movs	r2, #67	; 0x43
 800760e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007610:	4b02      	ldr	r3, [pc, #8]	; (800761c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000650 	.word	0x20000650

08007620 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	220a      	movs	r2, #10
 800762c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800762e:	4b03      	ldr	r3, [pc, #12]	; (800763c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	2000060c 	.word	0x2000060c

08007640 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007650:	2303      	movs	r3, #3
 8007652:	e009      	b.n	8007668 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	33b0      	adds	r3, #176	; 0xb0
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	32b0      	adds	r2, #176	; 0xb0
 800768a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007696:	2303      	movs	r3, #3
 8007698:	e008      	b.n	80076ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	32b0      	adds	r2, #176	; 0xb0
 80076cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e004      	b.n	80076e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
	...

080076f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	32b0      	adds	r2, #176	; 0xb0
 8007706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	32b0      	adds	r2, #176	; 0xb0
 800771a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007722:	2303      	movs	r3, #3
 8007724:	e025      	b.n	8007772 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800772c:	2b00      	cmp	r3, #0
 800772e:	d11f      	bne.n	8007770 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2201      	movs	r2, #1
 8007734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007738:	4b10      	ldr	r3, [pc, #64]	; (800777c <USBD_CDC_TransmitPacket+0x88>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	f003 020f 	and.w	r2, r3, #15
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4403      	add	r3, r0
 8007752:	3318      	adds	r3, #24
 8007754:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <USBD_CDC_TransmitPacket+0x88>)
 8007758:	7819      	ldrb	r1, [r3, #0]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 ffbd 	bl	80096e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20000693 	.word	0x20000693

08007780 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	32b0      	adds	r2, #176	; 0xb0
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	32b0      	adds	r2, #176	; 0xb0
 80077a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e018      	b.n	80077e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7c1b      	ldrb	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077b6:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <USBD_CDC_ReceivePacket+0x68>)
 80077b8:	7819      	ldrb	r1, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 ffaf 	bl	8009728 <USBD_LL_PrepareReceive>
 80077ca:	e008      	b.n	80077de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077cc:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <USBD_CDC_ReceivePacket+0x68>)
 80077ce:	7819      	ldrb	r1, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077d6:	2340      	movs	r3, #64	; 0x40
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f001 ffa5 	bl	8009728 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000694 	.word	0x20000694

080077ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007800:	2303      	movs	r3, #3
 8007802:	e01f      	b.n	8007844 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	79fa      	ldrb	r2, [r7, #7]
 8007836:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f001 fe1f 	bl	800947c <USBD_LL_Init>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007860:	2303      	movs	r3, #3
 8007862:	e025      	b.n	80078b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	32ae      	adds	r2, #174	; 0xae
 8007876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00f      	beq.n	80078a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	32ae      	adds	r2, #174	; 0xae
 800788a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	f107 020e 	add.w	r2, r7, #14
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	4602      	mov	r2, r0
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 fe27 	bl	8009514 <USBD_LL_Start>
 80078c6:	4603      	mov	r3, r0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	460b      	mov	r3, r1
 80078f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d009      	beq.n	8007914 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	4611      	mov	r1, r2
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	4798      	blx	r3
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	78fa      	ldrb	r2, [r7, #3]
 8007938:	4611      	mov	r1, r2
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007944:	2303      	movs	r3, #3
 8007946:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	4618      	mov	r0, r3
 8007966:	f001 f908 	bl	8008b7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007978:	461a      	mov	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2b02      	cmp	r3, #2
 800798c:	d01a      	beq.n	80079c4 <USBD_LL_SetupStage+0x72>
 800798e:	2b02      	cmp	r3, #2
 8007990:	d822      	bhi.n	80079d8 <USBD_LL_SetupStage+0x86>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <USBD_LL_SetupStage+0x4a>
 8007996:	2b01      	cmp	r3, #1
 8007998:	d00a      	beq.n	80079b0 <USBD_LL_SetupStage+0x5e>
 800799a:	e01d      	b.n	80079d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fb5f 	bl	8008068 <USBD_StdDevReq>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73fb      	strb	r3, [r7, #15]
      break;
 80079ae:	e020      	b.n	80079f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fbc7 	bl	800814c <USBD_StdItfReq>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]
      break;
 80079c2:	e016      	b.n	80079f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc29 	bl	8008224 <USBD_StdEPReq>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
      break;
 80079d6:	e00c      	b.n	80079f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 fdf4 	bl	80095d4 <USBD_LL_StallEP>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
      break;
 80079f0:	bf00      	nop
  }

  return ret;
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	460b      	mov	r3, r1
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d16e      	bne.n	8007af2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	f040 8098 	bne.w	8007b58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d913      	bls.n	8007a5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	1ad2      	subs	r2, r2, r3
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	bf28      	it	cs
 8007a4e:	4613      	movcs	r3, r2
 8007a50:	461a      	mov	r2, r3
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f001 f984 	bl	8008d62 <USBD_CtlContinueRx>
 8007a5a:	e07d      	b.n	8007b58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a62:	f003 031f 	and.w	r3, r3, #31
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d014      	beq.n	8007a94 <USBD_LL_DataOutStage+0x98>
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d81d      	bhi.n	8007aaa <USBD_LL_DataOutStage+0xae>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <USBD_LL_DataOutStage+0x7c>
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d003      	beq.n	8007a7e <USBD_LL_DataOutStage+0x82>
 8007a76:	e018      	b.n	8007aaa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a7c:	e018      	b.n	8007ab0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	4619      	mov	r1, r3
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fa5e 	bl	8007f4a <USBD_CoreFindIF>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75bb      	strb	r3, [r7, #22]
            break;
 8007a92:	e00d      	b.n	8007ab0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fa60 	bl	8007f64 <USBD_CoreFindEP>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	75bb      	strb	r3, [r7, #22]
            break;
 8007aa8:	e002      	b.n	8007ab0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75bb      	strb	r3, [r7, #22]
            break;
 8007aae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007ab0:	7dbb      	ldrb	r3, [r7, #22]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d119      	bne.n	8007aea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d113      	bne.n	8007aea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007ac2:	7dba      	ldrb	r2, [r7, #22]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	32ae      	adds	r2, #174	; 0xae
 8007ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00b      	beq.n	8007aea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007ad2:	7dba      	ldrb	r2, [r7, #22]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ada:	7dba      	ldrb	r2, [r7, #22]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	32ae      	adds	r2, #174	; 0xae
 8007ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f001 f94a 	bl	8008d84 <USBD_CtlSendStatus>
 8007af0:	e032      	b.n	8007b58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	4619      	mov	r1, r3
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fa31 	bl	8007f64 <USBD_CoreFindEP>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b06:	7dbb      	ldrb	r3, [r7, #22]
 8007b08:	2bff      	cmp	r3, #255	; 0xff
 8007b0a:	d025      	beq.n	8007b58 <USBD_LL_DataOutStage+0x15c>
 8007b0c:	7dbb      	ldrb	r3, [r7, #22]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d122      	bne.n	8007b58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d117      	bne.n	8007b4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b1e:	7dba      	ldrb	r2, [r7, #22]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	32ae      	adds	r2, #174	; 0xae
 8007b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00f      	beq.n	8007b4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b2e:	7dba      	ldrb	r2, [r7, #22]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b36:	7dba      	ldrb	r2, [r7, #22]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	32ae      	adds	r2, #174	; 0xae
 8007b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	7afa      	ldrb	r2, [r7, #11]
 8007b44:	4611      	mov	r1, r2
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	4798      	blx	r3
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	e000      	b.n	8007b5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b086      	sub	sp, #24
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	607a      	str	r2, [r7, #4]
 8007b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d16f      	bne.n	8007c56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3314      	adds	r3, #20
 8007b7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d15a      	bne.n	8007c3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d914      	bls.n	8007bbc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	1ad2      	subs	r2, r2, r3
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f001 f8ac 	bl	8008d06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bae:	2300      	movs	r3, #0
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f001 fdb7 	bl	8009728 <USBD_LL_PrepareReceive>
 8007bba:	e03f      	b.n	8007c3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d11c      	bne.n	8007c02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d316      	bcc.n	8007c02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d20f      	bcs.n	8007c02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007be2:	2200      	movs	r2, #0
 8007be4:	2100      	movs	r1, #0
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f001 f88d 	bl	8008d06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f001 fd94 	bl	8009728 <USBD_LL_PrepareReceive>
 8007c00:	e01c      	b.n	8007c3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d10f      	bne.n	8007c2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c2e:	2180      	movs	r1, #128	; 0x80
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f001 fccf 	bl	80095d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f001 f8b7 	bl	8008daa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d03a      	beq.n	8007cbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f7ff fe42 	bl	80078d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c54:	e032      	b.n	8007cbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c56:	7afb      	ldrb	r3, [r7, #11]
 8007c58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	4619      	mov	r1, r3
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 f97f 	bl	8007f64 <USBD_CoreFindEP>
 8007c66:	4603      	mov	r3, r0
 8007c68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	2bff      	cmp	r3, #255	; 0xff
 8007c6e:	d025      	beq.n	8007cbc <USBD_LL_DataInStage+0x15a>
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d122      	bne.n	8007cbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d11c      	bne.n	8007cbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c82:	7dfa      	ldrb	r2, [r7, #23]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	32ae      	adds	r2, #174	; 0xae
 8007c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d014      	beq.n	8007cbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c92:	7dfa      	ldrb	r2, [r7, #23]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c9a:	7dfa      	ldrb	r2, [r7, #23]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	32ae      	adds	r2, #174	; 0xae
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	7afa      	ldrb	r2, [r7, #11]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	4798      	blx	r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007cb2:	7dbb      	ldrb	r3, [r7, #22]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007cb8:	7dbb      	ldrb	r3, [r7, #22]
 8007cba:	e000      	b.n	8007cbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d014      	beq.n	8007d2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00e      	beq.n	8007d2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6852      	ldr	r2, [r2, #4]
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	4798      	blx	r3
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d2c:	2340      	movs	r3, #64	; 0x40
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2100      	movs	r1, #0
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 fc09 	bl	800954a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2240      	movs	r2, #64	; 0x40
 8007d44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2180      	movs	r1, #128	; 0x80
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 fbfb 	bl	800954a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2240      	movs	r2, #64	; 0x40
 8007d5e:	621a      	str	r2, [r3, #32]

  return ret;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	78fa      	ldrb	r2, [r7, #3]
 8007d7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2204      	movs	r2, #4
 8007da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d106      	bne.n	8007dd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d110      	bne.n	8007e1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	32ae      	adds	r2, #174	; 0xae
 8007e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e01c      	b.n	8007e82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d115      	bne.n	8007e80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32ae      	adds	r2, #174	; 0xae
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	32ae      	adds	r2, #174	; 0xae
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	32ae      	adds	r2, #174	; 0xae
 8007ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e01c      	b.n	8007ee6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d115      	bne.n	8007ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	32ae      	adds	r2, #174	; 0xae
 8007ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	32ae      	adds	r2, #174	; 0xae
 8007ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00e      	beq.n	8007f40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6852      	ldr	r2, [r2, #4]
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	4611      	mov	r1, r2
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	460b      	mov	r3, r1
 8007f54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b086      	sub	sp, #24
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	885b      	ldrh	r3, [r3, #2]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d920      	bls.n	8007fe8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fae:	e013      	b.n	8007fd8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007fb0:	f107 030a 	add.w	r3, r7, #10
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6978      	ldr	r0, [r7, #20]
 8007fb8:	f000 f81b 	bl	8007ff2 <USBD_GetNextDesc>
 8007fbc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	d108      	bne.n	8007fd8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	789b      	ldrb	r3, [r3, #2]
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d008      	beq.n	8007fe6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	885b      	ldrh	r3, [r3, #2]
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	897b      	ldrh	r3, [r7, #10]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d8e5      	bhi.n	8007fb0 <USBD_GetEpDesc+0x32>
 8007fe4:	e000      	b.n	8007fe8 <USBD_GetEpDesc+0x6a>
          break;
 8007fe6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007fe8:	693b      	ldr	r3, [r7, #16]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b085      	sub	sp, #20
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	4413      	add	r3, r2
 800800c:	b29a      	uxth	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4413      	add	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800801e:	68fb      	ldr	r3, [r7, #12]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	3301      	adds	r3, #1
 8008042:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800804a:	8a3b      	ldrh	r3, [r7, #16]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	b21a      	sxth	r2, r3
 8008050:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008054:	4313      	orrs	r3, r2
 8008056:	b21b      	sxth	r3, r3
 8008058:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800805a:	89fb      	ldrh	r3, [r7, #14]
}
 800805c:	4618      	mov	r0, r3
 800805e:	371c      	adds	r7, #28
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	d005      	beq.n	800808e <USBD_StdDevReq+0x26>
 8008082:	2b40      	cmp	r3, #64	; 0x40
 8008084:	d857      	bhi.n	8008136 <USBD_StdDevReq+0xce>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00f      	beq.n	80080aa <USBD_StdDevReq+0x42>
 800808a:	2b20      	cmp	r3, #32
 800808c:	d153      	bne.n	8008136 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	32ae      	adds	r2, #174	; 0xae
 8008098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
 80080a4:	4603      	mov	r3, r0
 80080a6:	73fb      	strb	r3, [r7, #15]
      break;
 80080a8:	e04a      	b.n	8008140 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	2b09      	cmp	r3, #9
 80080b0:	d83b      	bhi.n	800812a <USBD_StdDevReq+0xc2>
 80080b2:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <USBD_StdDevReq+0x50>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	0800810d 	.word	0x0800810d
 80080bc:	08008121 	.word	0x08008121
 80080c0:	0800812b 	.word	0x0800812b
 80080c4:	08008117 	.word	0x08008117
 80080c8:	0800812b 	.word	0x0800812b
 80080cc:	080080eb 	.word	0x080080eb
 80080d0:	080080e1 	.word	0x080080e1
 80080d4:	0800812b 	.word	0x0800812b
 80080d8:	08008103 	.word	0x08008103
 80080dc:	080080f5 	.word	0x080080f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fa3c 	bl	8008560 <USBD_GetDescriptor>
          break;
 80080e8:	e024      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fba1 	bl	8008834 <USBD_SetAddress>
          break;
 80080f2:	e01f      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fbe0 	bl	80088bc <USBD_SetConfig>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
          break;
 8008100:	e018      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fc83 	bl	8008a10 <USBD_GetConfig>
          break;
 800810a:	e013      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fcb4 	bl	8008a7c <USBD_GetStatus>
          break;
 8008114:	e00e      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fce3 	bl	8008ae4 <USBD_SetFeature>
          break;
 800811e:	e009      	b.n	8008134 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fd07 	bl	8008b36 <USBD_ClrFeature>
          break;
 8008128:	e004      	b.n	8008134 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fd5e 	bl	8008bee <USBD_CtlError>
          break;
 8008132:	bf00      	nop
      }
      break;
 8008134:	e004      	b.n	8008140 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fd58 	bl	8008bee <USBD_CtlError>
      break;
 800813e:	bf00      	nop
  }

  return ret;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop

0800814c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	d005      	beq.n	8008172 <USBD_StdItfReq+0x26>
 8008166:	2b40      	cmp	r3, #64	; 0x40
 8008168:	d852      	bhi.n	8008210 <USBD_StdItfReq+0xc4>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <USBD_StdItfReq+0x26>
 800816e:	2b20      	cmp	r3, #32
 8008170:	d14e      	bne.n	8008210 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008178:	b2db      	uxtb	r3, r3
 800817a:	3b01      	subs	r3, #1
 800817c:	2b02      	cmp	r3, #2
 800817e:	d840      	bhi.n	8008202 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	889b      	ldrh	r3, [r3, #4]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b01      	cmp	r3, #1
 8008188:	d836      	bhi.n	80081f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	889b      	ldrh	r3, [r3, #4]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff fed9 	bl	8007f4a <USBD_CoreFindIF>
 8008198:	4603      	mov	r3, r0
 800819a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	2bff      	cmp	r3, #255	; 0xff
 80081a0:	d01d      	beq.n	80081de <USBD_StdItfReq+0x92>
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d11a      	bne.n	80081de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081a8:	7bba      	ldrb	r2, [r7, #14]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	32ae      	adds	r2, #174	; 0xae
 80081ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00f      	beq.n	80081d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081b8:	7bba      	ldrb	r2, [r7, #14]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081c0:	7bba      	ldrb	r2, [r7, #14]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	32ae      	adds	r2, #174	; 0xae
 80081c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081d6:	e004      	b.n	80081e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081dc:	e001      	b.n	80081e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80081de:	2303      	movs	r3, #3
 80081e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	88db      	ldrh	r3, [r3, #6]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d110      	bne.n	800820c <USBD_StdItfReq+0xc0>
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10d      	bne.n	800820c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fdc7 	bl	8008d84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081f6:	e009      	b.n	800820c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 fcf7 	bl	8008bee <USBD_CtlError>
          break;
 8008200:	e004      	b.n	800820c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fcf2 	bl	8008bee <USBD_CtlError>
          break;
 800820a:	e000      	b.n	800820e <USBD_StdItfReq+0xc2>
          break;
 800820c:	bf00      	nop
      }
      break;
 800820e:	e004      	b.n	800821a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fceb 	bl	8008bee <USBD_CtlError>
      break;
 8008218:	bf00      	nop
  }

  return ret;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	889b      	ldrh	r3, [r3, #4]
 8008236:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008240:	2b40      	cmp	r3, #64	; 0x40
 8008242:	d007      	beq.n	8008254 <USBD_StdEPReq+0x30>
 8008244:	2b40      	cmp	r3, #64	; 0x40
 8008246:	f200 817f 	bhi.w	8008548 <USBD_StdEPReq+0x324>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d02a      	beq.n	80082a4 <USBD_StdEPReq+0x80>
 800824e:	2b20      	cmp	r3, #32
 8008250:	f040 817a 	bne.w	8008548 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff fe83 	bl	8007f64 <USBD_CoreFindEP>
 800825e:	4603      	mov	r3, r0
 8008260:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008262:	7b7b      	ldrb	r3, [r7, #13]
 8008264:	2bff      	cmp	r3, #255	; 0xff
 8008266:	f000 8174 	beq.w	8008552 <USBD_StdEPReq+0x32e>
 800826a:	7b7b      	ldrb	r3, [r7, #13]
 800826c:	2b00      	cmp	r3, #0
 800826e:	f040 8170 	bne.w	8008552 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008272:	7b7a      	ldrb	r2, [r7, #13]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800827a:	7b7a      	ldrb	r2, [r7, #13]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	32ae      	adds	r2, #174	; 0xae
 8008280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8163 	beq.w	8008552 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800828c:	7b7a      	ldrb	r2, [r7, #13]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	32ae      	adds	r2, #174	; 0xae
 8008292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082a2:	e156      	b.n	8008552 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b03      	cmp	r3, #3
 80082aa:	d008      	beq.n	80082be <USBD_StdEPReq+0x9a>
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	f300 8145 	bgt.w	800853c <USBD_StdEPReq+0x318>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 809b 	beq.w	80083ee <USBD_StdEPReq+0x1ca>
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d03c      	beq.n	8008336 <USBD_StdEPReq+0x112>
 80082bc:	e13e      	b.n	800853c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d002      	beq.n	80082d0 <USBD_StdEPReq+0xac>
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d016      	beq.n	80082fc <USBD_StdEPReq+0xd8>
 80082ce:	e02c      	b.n	800832a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00d      	beq.n	80082f2 <USBD_StdEPReq+0xce>
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d00a      	beq.n	80082f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 f977 	bl	80095d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082e6:	2180      	movs	r1, #128	; 0x80
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f973 	bl	80095d4 <USBD_LL_StallEP>
 80082ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082f0:	e020      	b.n	8008334 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fc7a 	bl	8008bee <USBD_CtlError>
              break;
 80082fa:	e01b      	b.n	8008334 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	885b      	ldrh	r3, [r3, #2]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10e      	bne.n	8008322 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <USBD_StdEPReq+0xfe>
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b80      	cmp	r3, #128	; 0x80
 800830e:	d008      	beq.n	8008322 <USBD_StdEPReq+0xfe>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	88db      	ldrh	r3, [r3, #6]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d104      	bne.n	8008322 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 f959 	bl	80095d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fd2e 	bl	8008d84 <USBD_CtlSendStatus>

              break;
 8008328:	e004      	b.n	8008334 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fc5e 	bl	8008bee <USBD_CtlError>
              break;
 8008332:	bf00      	nop
          }
          break;
 8008334:	e107      	b.n	8008546 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b02      	cmp	r3, #2
 8008340:	d002      	beq.n	8008348 <USBD_StdEPReq+0x124>
 8008342:	2b03      	cmp	r3, #3
 8008344:	d016      	beq.n	8008374 <USBD_StdEPReq+0x150>
 8008346:	e04b      	b.n	80083e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00d      	beq.n	800836a <USBD_StdEPReq+0x146>
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d00a      	beq.n	800836a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 f93b 	bl	80095d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800835e:	2180      	movs	r1, #128	; 0x80
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f937 	bl	80095d4 <USBD_LL_StallEP>
 8008366:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008368:	e040      	b.n	80083ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fc3e 	bl	8008bee <USBD_CtlError>
              break;
 8008372:	e03b      	b.n	80083ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d136      	bne.n	80083ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008382:	2b00      	cmp	r3, #0
 8008384:	d004      	beq.n	8008390 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 f941 	bl	8009612 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fcf7 	bl	8008d84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff fde2 	bl	8007f64 <USBD_CoreFindEP>
 80083a0:	4603      	mov	r3, r0
 80083a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083a4:	7b7b      	ldrb	r3, [r7, #13]
 80083a6:	2bff      	cmp	r3, #255	; 0xff
 80083a8:	d01f      	beq.n	80083ea <USBD_StdEPReq+0x1c6>
 80083aa:	7b7b      	ldrb	r3, [r7, #13]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11c      	bne.n	80083ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083b0:	7b7a      	ldrb	r2, [r7, #13]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083b8:	7b7a      	ldrb	r2, [r7, #13]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	32ae      	adds	r2, #174	; 0xae
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d010      	beq.n	80083ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083c8:	7b7a      	ldrb	r2, [r7, #13]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	32ae      	adds	r2, #174	; 0xae
 80083ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80083de:	e004      	b.n	80083ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fc03 	bl	8008bee <USBD_CtlError>
              break;
 80083e8:	e000      	b.n	80083ec <USBD_StdEPReq+0x1c8>
              break;
 80083ea:	bf00      	nop
          }
          break;
 80083ec:	e0ab      	b.n	8008546 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d002      	beq.n	8008400 <USBD_StdEPReq+0x1dc>
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d032      	beq.n	8008464 <USBD_StdEPReq+0x240>
 80083fe:	e097      	b.n	8008530 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d007      	beq.n	8008416 <USBD_StdEPReq+0x1f2>
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b80      	cmp	r3, #128	; 0x80
 800840a:	d004      	beq.n	8008416 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fbed 	bl	8008bee <USBD_CtlError>
                break;
 8008414:	e091      	b.n	800853a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800841a:	2b00      	cmp	r3, #0
 800841c:	da0b      	bge.n	8008436 <USBD_StdEPReq+0x212>
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	3310      	adds	r3, #16
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	4413      	add	r3, r2
 8008432:	3304      	adds	r3, #4
 8008434:	e00b      	b.n	800844e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800843c:	4613      	mov	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	4413      	add	r3, r2
 800844c:	3304      	adds	r3, #4
 800844e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2202      	movs	r2, #2
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fc37 	bl	8008cd0 <USBD_CtlSendData>
              break;
 8008462:	e06a      	b.n	800853a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	da11      	bge.n	8008490 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	f003 020f 	and.w	r2, r3, #15
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	3324      	adds	r3, #36	; 0x24
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d117      	bne.n	80084b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fbb0 	bl	8008bee <USBD_CtlError>
                  break;
 800848e:	e054      	b.n	800853a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	f003 020f 	and.w	r2, r3, #15
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fb9d 	bl	8008bee <USBD_CtlError>
                  break;
 80084b4:	e041      	b.n	800853a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	da0b      	bge.n	80084d6 <USBD_StdEPReq+0x2b2>
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	3310      	adds	r3, #16
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4413      	add	r3, r2
 80084d2:	3304      	adds	r3, #4
 80084d4:	e00b      	b.n	80084ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084dc:	4613      	mov	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	4413      	add	r3, r2
 80084ec:	3304      	adds	r3, #4
 80084ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <USBD_StdEPReq+0x2d8>
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b80      	cmp	r3, #128	; 0x80
 80084fa:	d103      	bne.n	8008504 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	e00e      	b.n	8008522 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 f8a1 	bl	8009650 <USBD_LL_IsStallEP>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2201      	movs	r2, #1
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	e002      	b.n	8008522 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2202      	movs	r2, #2
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fbd1 	bl	8008cd0 <USBD_CtlSendData>
              break;
 800852e:	e004      	b.n	800853a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fb5b 	bl	8008bee <USBD_CtlError>
              break;
 8008538:	bf00      	nop
          }
          break;
 800853a:	e004      	b.n	8008546 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fb55 	bl	8008bee <USBD_CtlError>
          break;
 8008544:	bf00      	nop
      }
      break;
 8008546:	e005      	b.n	8008554 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fb4f 	bl	8008bee <USBD_CtlError>
      break;
 8008550:	e000      	b.n	8008554 <USBD_StdEPReq+0x330>
      break;
 8008552:	bf00      	nop
  }

  return ret;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	885b      	ldrh	r3, [r3, #2]
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	2b06      	cmp	r3, #6
 8008582:	f200 8128 	bhi.w	80087d6 <USBD_GetDescriptor+0x276>
 8008586:	a201      	add	r2, pc, #4	; (adr r2, 800858c <USBD_GetDescriptor+0x2c>)
 8008588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858c:	080085a9 	.word	0x080085a9
 8008590:	080085c1 	.word	0x080085c1
 8008594:	08008601 	.word	0x08008601
 8008598:	080087d7 	.word	0x080087d7
 800859c:	080087d7 	.word	0x080087d7
 80085a0:	08008777 	.word	0x08008777
 80085a4:	080087a3 	.word	0x080087a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	7c12      	ldrb	r2, [r2, #16]
 80085b4:	f107 0108 	add.w	r1, r7, #8
 80085b8:	4610      	mov	r0, r2
 80085ba:	4798      	blx	r3
 80085bc:	60f8      	str	r0, [r7, #12]
      break;
 80085be:	e112      	b.n	80087e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	7c1b      	ldrb	r3, [r3, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10d      	bne.n	80085e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	f107 0208 	add.w	r2, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3301      	adds	r3, #1
 80085de:	2202      	movs	r2, #2
 80085e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085e2:	e100      	b.n	80087e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	f107 0208 	add.w	r2, r7, #8
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	2202      	movs	r2, #2
 80085fc:	701a      	strb	r2, [r3, #0]
      break;
 80085fe:	e0f2      	b.n	80087e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	885b      	ldrh	r3, [r3, #2]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b05      	cmp	r3, #5
 8008608:	f200 80ac 	bhi.w	8008764 <USBD_GetDescriptor+0x204>
 800860c:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <USBD_GetDescriptor+0xb4>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	0800862d 	.word	0x0800862d
 8008618:	08008661 	.word	0x08008661
 800861c:	08008695 	.word	0x08008695
 8008620:	080086c9 	.word	0x080086c9
 8008624:	080086fd 	.word	0x080086fd
 8008628:	08008731 	.word	0x08008731
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00b      	beq.n	8008650 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	7c12      	ldrb	r2, [r2, #16]
 8008644:	f107 0108 	add.w	r1, r7, #8
 8008648:	4610      	mov	r0, r2
 800864a:	4798      	blx	r3
 800864c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800864e:	e091      	b.n	8008774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 facb 	bl	8008bee <USBD_CtlError>
            err++;
 8008658:	7afb      	ldrb	r3, [r7, #11]
 800865a:	3301      	adds	r3, #1
 800865c:	72fb      	strb	r3, [r7, #11]
          break;
 800865e:	e089      	b.n	8008774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	7c12      	ldrb	r2, [r2, #16]
 8008678:	f107 0108 	add.w	r1, r7, #8
 800867c:	4610      	mov	r0, r2
 800867e:	4798      	blx	r3
 8008680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008682:	e077      	b.n	8008774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fab1 	bl	8008bee <USBD_CtlError>
            err++;
 800868c:	7afb      	ldrb	r3, [r7, #11]
 800868e:	3301      	adds	r3, #1
 8008690:	72fb      	strb	r3, [r7, #11]
          break;
 8008692:	e06f      	b.n	8008774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00b      	beq.n	80086b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	7c12      	ldrb	r2, [r2, #16]
 80086ac:	f107 0108 	add.w	r1, r7, #8
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086b6:	e05d      	b.n	8008774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fa97 	bl	8008bee <USBD_CtlError>
            err++;
 80086c0:	7afb      	ldrb	r3, [r7, #11]
 80086c2:	3301      	adds	r3, #1
 80086c4:	72fb      	strb	r3, [r7, #11]
          break;
 80086c6:	e055      	b.n	8008774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	7c12      	ldrb	r2, [r2, #16]
 80086e0:	f107 0108 	add.w	r1, r7, #8
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ea:	e043      	b.n	8008774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa7d 	bl	8008bee <USBD_CtlError>
            err++;
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	3301      	adds	r3, #1
 80086f8:	72fb      	strb	r3, [r7, #11]
          break;
 80086fa:	e03b      	b.n	8008774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	7c12      	ldrb	r2, [r2, #16]
 8008714:	f107 0108 	add.w	r1, r7, #8
 8008718:	4610      	mov	r0, r2
 800871a:	4798      	blx	r3
 800871c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800871e:	e029      	b.n	8008774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fa63 	bl	8008bee <USBD_CtlError>
            err++;
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	3301      	adds	r3, #1
 800872c:	72fb      	strb	r3, [r7, #11]
          break;
 800872e:	e021      	b.n	8008774 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00b      	beq.n	8008754 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	7c12      	ldrb	r2, [r2, #16]
 8008748:	f107 0108 	add.w	r1, r7, #8
 800874c:	4610      	mov	r0, r2
 800874e:	4798      	blx	r3
 8008750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008752:	e00f      	b.n	8008774 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fa49 	bl	8008bee <USBD_CtlError>
            err++;
 800875c:	7afb      	ldrb	r3, [r7, #11]
 800875e:	3301      	adds	r3, #1
 8008760:	72fb      	strb	r3, [r7, #11]
          break;
 8008762:	e007      	b.n	8008774 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa41 	bl	8008bee <USBD_CtlError>
          err++;
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	3301      	adds	r3, #1
 8008770:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008772:	bf00      	nop
      }
      break;
 8008774:	e037      	b.n	80087e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7c1b      	ldrb	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d109      	bne.n	8008792 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	f107 0208 	add.w	r2, r7, #8
 800878a:	4610      	mov	r0, r2
 800878c:	4798      	blx	r3
 800878e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008790:	e029      	b.n	80087e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fa2a 	bl	8008bee <USBD_CtlError>
        err++;
 800879a:	7afb      	ldrb	r3, [r7, #11]
 800879c:	3301      	adds	r3, #1
 800879e:	72fb      	strb	r3, [r7, #11]
      break;
 80087a0:	e021      	b.n	80087e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7c1b      	ldrb	r3, [r3, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10d      	bne.n	80087c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	f107 0208 	add.w	r2, r7, #8
 80087b6:	4610      	mov	r0, r2
 80087b8:	4798      	blx	r3
 80087ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3301      	adds	r3, #1
 80087c0:	2207      	movs	r2, #7
 80087c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087c4:	e00f      	b.n	80087e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fa10 	bl	8008bee <USBD_CtlError>
        err++;
 80087ce:	7afb      	ldrb	r3, [r7, #11]
 80087d0:	3301      	adds	r3, #1
 80087d2:	72fb      	strb	r3, [r7, #11]
      break;
 80087d4:	e007      	b.n	80087e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fa08 	bl	8008bee <USBD_CtlError>
      err++;
 80087de:	7afb      	ldrb	r3, [r7, #11]
 80087e0:	3301      	adds	r3, #1
 80087e2:	72fb      	strb	r3, [r7, #11]
      break;
 80087e4:	bf00      	nop
  }

  if (err != 0U)
 80087e6:	7afb      	ldrb	r3, [r7, #11]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d11e      	bne.n	800882a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	88db      	ldrh	r3, [r3, #6]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d016      	beq.n	8008822 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80087f4:	893b      	ldrh	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00e      	beq.n	8008818 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	88da      	ldrh	r2, [r3, #6]
 80087fe:	893b      	ldrh	r3, [r7, #8]
 8008800:	4293      	cmp	r3, r2
 8008802:	bf28      	it	cs
 8008804:	4613      	movcs	r3, r2
 8008806:	b29b      	uxth	r3, r3
 8008808:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800880a:	893b      	ldrh	r3, [r7, #8]
 800880c:	461a      	mov	r2, r3
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fa5d 	bl	8008cd0 <USBD_CtlSendData>
 8008816:	e009      	b.n	800882c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f9e7 	bl	8008bee <USBD_CtlError>
 8008820:	e004      	b.n	800882c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 faae 	bl	8008d84 <USBD_CtlSendStatus>
 8008828:	e000      	b.n	800882c <USBD_GetDescriptor+0x2cc>
    return;
 800882a:	bf00      	nop
  }
}
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop

08008834 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	889b      	ldrh	r3, [r3, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d131      	bne.n	80088aa <USBD_SetAddress+0x76>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	88db      	ldrh	r3, [r3, #6]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d12d      	bne.n	80088aa <USBD_SetAddress+0x76>
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	885b      	ldrh	r3, [r3, #2]
 8008852:	2b7f      	cmp	r3, #127	; 0x7f
 8008854:	d829      	bhi.n	80088aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	885b      	ldrh	r3, [r3, #2]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008860:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b03      	cmp	r3, #3
 800886c:	d104      	bne.n	8008878 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800886e:	6839      	ldr	r1, [r7, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f9bc 	bl	8008bee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008876:	e01d      	b.n	80088b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	7bfa      	ldrb	r2, [r7, #15]
 800887c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 ff0f 	bl	80096a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa7a 	bl	8008d84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d004      	beq.n	80088a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2202      	movs	r2, #2
 800889a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889e:	e009      	b.n	80088b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a8:	e004      	b.n	80088b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f99e 	bl	8008bee <USBD_CtlError>
  }
}
 80088b2:	bf00      	nop
 80088b4:	bf00      	nop
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	885b      	ldrh	r3, [r3, #2]
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	4b4e      	ldr	r3, [pc, #312]	; (8008a0c <USBD_SetConfig+0x150>)
 80088d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088d4:	4b4d      	ldr	r3, [pc, #308]	; (8008a0c <USBD_SetConfig+0x150>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d905      	bls.n	80088e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f985 	bl	8008bee <USBD_CtlError>
    return USBD_FAIL;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e08c      	b.n	8008a02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d002      	beq.n	80088fa <USBD_SetConfig+0x3e>
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d029      	beq.n	800894c <USBD_SetConfig+0x90>
 80088f8:	e075      	b.n	80089e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088fa:	4b44      	ldr	r3, [pc, #272]	; (8008a0c <USBD_SetConfig+0x150>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d020      	beq.n	8008944 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008902:	4b42      	ldr	r3, [pc, #264]	; (8008a0c <USBD_SetConfig+0x150>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800890c:	4b3f      	ldr	r3, [pc, #252]	; (8008a0c <USBD_SetConfig+0x150>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7fe ffe7 	bl	80078e6 <USBD_SetClassConfig>
 8008918:	4603      	mov	r3, r0
 800891a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d008      	beq.n	8008934 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f962 	bl	8008bee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2202      	movs	r2, #2
 800892e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008932:	e065      	b.n	8008a00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fa25 	bl	8008d84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2203      	movs	r2, #3
 800893e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008942:	e05d      	b.n	8008a00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fa1d 	bl	8008d84 <USBD_CtlSendStatus>
      break;
 800894a:	e059      	b.n	8008a00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800894c:	4b2f      	ldr	r3, [pc, #188]	; (8008a0c <USBD_SetConfig+0x150>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d112      	bne.n	800897a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800895c:	4b2b      	ldr	r3, [pc, #172]	; (8008a0c <USBD_SetConfig+0x150>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008966:	4b29      	ldr	r3, [pc, #164]	; (8008a0c <USBD_SetConfig+0x150>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7fe ffd6 	bl	800791e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa06 	bl	8008d84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008978:	e042      	b.n	8008a00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800897a:	4b24      	ldr	r3, [pc, #144]	; (8008a0c <USBD_SetConfig+0x150>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	429a      	cmp	r2, r3
 8008986:	d02a      	beq.n	80089de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	b2db      	uxtb	r3, r3
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7fe ffc4 	bl	800791e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008996:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <USBD_SetConfig+0x150>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089a0:	4b1a      	ldr	r3, [pc, #104]	; (8008a0c <USBD_SetConfig+0x150>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fe ff9d 	bl	80078e6 <USBD_SetClassConfig>
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00f      	beq.n	80089d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f918 	bl	8008bee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7fe ffa9 	bl	800791e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089d4:	e014      	b.n	8008a00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f9d4 	bl	8008d84 <USBD_CtlSendStatus>
      break;
 80089dc:	e010      	b.n	8008a00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f9d0 	bl	8008d84 <USBD_CtlSendStatus>
      break;
 80089e4:	e00c      	b.n	8008a00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f900 	bl	8008bee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089ee:	4b07      	ldr	r3, [pc, #28]	; (8008a0c <USBD_SetConfig+0x150>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7fe ff92 	bl	800791e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089fa:	2303      	movs	r3, #3
 80089fc:	73fb      	strb	r3, [r7, #15]
      break;
 80089fe:	bf00      	nop
  }

  return ret;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	200008e4 	.word	0x200008e4

08008a10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	88db      	ldrh	r3, [r3, #6]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d004      	beq.n	8008a2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f8e2 	bl	8008bee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a2a:	e023      	b.n	8008a74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	dc02      	bgt.n	8008a3e <USBD_GetConfig+0x2e>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	dc03      	bgt.n	8008a44 <USBD_GetConfig+0x34>
 8008a3c:	e015      	b.n	8008a6a <USBD_GetConfig+0x5a>
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d00b      	beq.n	8008a5a <USBD_GetConfig+0x4a>
 8008a42:	e012      	b.n	8008a6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3308      	adds	r3, #8
 8008a4e:	2201      	movs	r2, #1
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f93c 	bl	8008cd0 <USBD_CtlSendData>
        break;
 8008a58:	e00c      	b.n	8008a74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f934 	bl	8008cd0 <USBD_CtlSendData>
        break;
 8008a68:	e004      	b.n	8008a74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f8be 	bl	8008bee <USBD_CtlError>
        break;
 8008a72:	bf00      	nop
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d81e      	bhi.n	8008ad2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	88db      	ldrh	r3, [r3, #6]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d004      	beq.n	8008aa6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f8a5 	bl	8008bee <USBD_CtlError>
        break;
 8008aa4:	e01a      	b.n	8008adc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f043 0202 	orr.w	r2, r3, #2
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f900 	bl	8008cd0 <USBD_CtlSendData>
      break;
 8008ad0:	e004      	b.n	8008adc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f88a 	bl	8008bee <USBD_CtlError>
      break;
 8008ada:	bf00      	nop
  }
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d107      	bne.n	8008b06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f940 	bl	8008d84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b04:	e013      	b.n	8008b2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	885b      	ldrh	r3, [r3, #2]
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d10b      	bne.n	8008b26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	889b      	ldrh	r3, [r3, #4]
 8008b12:	0a1b      	lsrs	r3, r3, #8
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f930 	bl	8008d84 <USBD_CtlSendStatus>
}
 8008b24:	e003      	b.n	8008b2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f860 	bl	8008bee <USBD_CtlError>
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b082      	sub	sp, #8
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d80b      	bhi.n	8008b66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d10c      	bne.n	8008b70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f910 	bl	8008d84 <USBD_CtlSendStatus>
      }
      break;
 8008b64:	e004      	b.n	8008b70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f840 	bl	8008bee <USBD_CtlError>
      break;
 8008b6e:	e000      	b.n	8008b72 <USBD_ClrFeature+0x3c>
      break;
 8008b70:	bf00      	nop
  }
}
 8008b72:	bf00      	nop
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3301      	adds	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	781a      	ldrb	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff fa41 	bl	800802c <SWAPBYTE>
 8008baa:	4603      	mov	r3, r0
 8008bac:	461a      	mov	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7ff fa34 	bl	800802c <SWAPBYTE>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7ff fa27 	bl	800802c <SWAPBYTE>
 8008bde:	4603      	mov	r3, r0
 8008be0:	461a      	mov	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	80da      	strh	r2, [r3, #6]
}
 8008be6:	bf00      	nop
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bf8:	2180      	movs	r1, #128	; 0x80
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fcea 	bl	80095d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c00:	2100      	movs	r1, #0
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fce6 	bl	80095d4 <USBD_LL_StallEP>
}
 8008c08:	bf00      	nop
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d036      	beq.n	8008c94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c2a:	6938      	ldr	r0, [r7, #16]
 8008c2c:	f000 f836 	bl	8008c9c <USBD_GetLen>
 8008c30:	4603      	mov	r3, r0
 8008c32:	3301      	adds	r3, #1
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	4413      	add	r3, r2
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	4413      	add	r3, r2
 8008c56:	2203      	movs	r2, #3
 8008c58:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c60:	e013      	b.n	8008c8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	4413      	add	r3, r2
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	7812      	ldrb	r2, [r2, #0]
 8008c6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	3301      	adds	r3, #1
 8008c72:	613b      	str	r3, [r7, #16]
    idx++;
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
 8008c76:	3301      	adds	r3, #1
 8008c78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	4413      	add	r3, r2
 8008c80:	2200      	movs	r2, #0
 8008c82:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	3301      	adds	r3, #1
 8008c88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e7      	bne.n	8008c62 <USBD_GetString+0x52>
 8008c92:	e000      	b.n	8008c96 <USBD_GetString+0x86>
    return;
 8008c94:	bf00      	nop
  }
}
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008cac:	e005      	b.n	8008cba <USBD_GetLen+0x1e>
  {
    len++;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1f5      	bne.n	8008cae <USBD_GetLen+0x12>
  }

  return len;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 fcf5 	bl	80096e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	2100      	movs	r1, #0
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 fce4 	bl	80096e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2203      	movs	r2, #3
 8008d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	2100      	movs	r1, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 fce8 	bl	8009728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	2100      	movs	r1, #0
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 fcd7 	bl	8009728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2204      	movs	r2, #4
 8008d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d94:	2300      	movs	r3, #0
 8008d96:	2200      	movs	r2, #0
 8008d98:	2100      	movs	r1, #0
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fca3 	bl	80096e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2205      	movs	r2, #5
 8008db6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fcb1 	bl	8009728 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4912      	ldr	r1, [pc, #72]	; (8008e20 <MX_USB_DEVICE_Init+0x50>)
 8008dd8:	4812      	ldr	r0, [pc, #72]	; (8008e24 <MX_USB_DEVICE_Init+0x54>)
 8008dda:	f7fe fd07 	bl	80077ec <USBD_Init>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008de4:	f7f8 fa76 	bl	80012d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008de8:	490f      	ldr	r1, [pc, #60]	; (8008e28 <MX_USB_DEVICE_Init+0x58>)
 8008dea:	480e      	ldr	r0, [pc, #56]	; (8008e24 <MX_USB_DEVICE_Init+0x54>)
 8008dec:	f7fe fd2e 	bl	800784c <USBD_RegisterClass>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008df6:	f7f8 fa6d 	bl	80012d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008dfa:	490c      	ldr	r1, [pc, #48]	; (8008e2c <MX_USB_DEVICE_Init+0x5c>)
 8008dfc:	4809      	ldr	r0, [pc, #36]	; (8008e24 <MX_USB_DEVICE_Init+0x54>)
 8008dfe:	f7fe fc1f 	bl	8007640 <USBD_CDC_RegisterInterface>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e08:	f7f8 fa64 	bl	80012d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e0c:	4805      	ldr	r0, [pc, #20]	; (8008e24 <MX_USB_DEVICE_Init+0x54>)
 8008e0e:	f7fe fd53 	bl	80078b8 <USBD_Start>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e18:	f7f8 fa5c 	bl	80012d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e1c:	bf00      	nop
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	200006ac 	.word	0x200006ac
 8008e24:	200008e8 	.word	0x200008e8
 8008e28:	20000618 	.word	0x20000618
 8008e2c:	20000698 	.word	0x20000698

08008e30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e34:	2200      	movs	r2, #0
 8008e36:	4905      	ldr	r1, [pc, #20]	; (8008e4c <CDC_Init_FS+0x1c>)
 8008e38:	4805      	ldr	r0, [pc, #20]	; (8008e50 <CDC_Init_FS+0x20>)
 8008e3a:	f7fe fc1b 	bl	8007674 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e3e:	4905      	ldr	r1, [pc, #20]	; (8008e54 <CDC_Init_FS+0x24>)
 8008e40:	4803      	ldr	r0, [pc, #12]	; (8008e50 <CDC_Init_FS+0x20>)
 8008e42:	f7fe fc39 	bl	80076b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	200013c4 	.word	0x200013c4
 8008e50:	200008e8 	.word	0x200008e8
 8008e54:	20000bc4 	.word	0x20000bc4

08008e58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4603      	mov	r3, r0
 8008e70:	6039      	str	r1, [r7, #0]
 8008e72:	71fb      	strb	r3, [r7, #7]
 8008e74:	4613      	mov	r3, r2
 8008e76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	2b23      	cmp	r3, #35	; 0x23
 8008e7c:	d84a      	bhi.n	8008f14 <CDC_Control_FS+0xac>
 8008e7e:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <CDC_Control_FS+0x1c>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008f15 	.word	0x08008f15
 8008e88:	08008f15 	.word	0x08008f15
 8008e8c:	08008f15 	.word	0x08008f15
 8008e90:	08008f15 	.word	0x08008f15
 8008e94:	08008f15 	.word	0x08008f15
 8008e98:	08008f15 	.word	0x08008f15
 8008e9c:	08008f15 	.word	0x08008f15
 8008ea0:	08008f15 	.word	0x08008f15
 8008ea4:	08008f15 	.word	0x08008f15
 8008ea8:	08008f15 	.word	0x08008f15
 8008eac:	08008f15 	.word	0x08008f15
 8008eb0:	08008f15 	.word	0x08008f15
 8008eb4:	08008f15 	.word	0x08008f15
 8008eb8:	08008f15 	.word	0x08008f15
 8008ebc:	08008f15 	.word	0x08008f15
 8008ec0:	08008f15 	.word	0x08008f15
 8008ec4:	08008f15 	.word	0x08008f15
 8008ec8:	08008f15 	.word	0x08008f15
 8008ecc:	08008f15 	.word	0x08008f15
 8008ed0:	08008f15 	.word	0x08008f15
 8008ed4:	08008f15 	.word	0x08008f15
 8008ed8:	08008f15 	.word	0x08008f15
 8008edc:	08008f15 	.word	0x08008f15
 8008ee0:	08008f15 	.word	0x08008f15
 8008ee4:	08008f15 	.word	0x08008f15
 8008ee8:	08008f15 	.word	0x08008f15
 8008eec:	08008f15 	.word	0x08008f15
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f15 	.word	0x08008f15
 8008ef8:	08008f15 	.word	0x08008f15
 8008efc:	08008f15 	.word	0x08008f15
 8008f00:	08008f15 	.word	0x08008f15
 8008f04:	08008f15 	.word	0x08008f15
 8008f08:	08008f15 	.word	0x08008f15
 8008f0c:	08008f15 	.word	0x08008f15
 8008f10:	08008f15 	.word	0x08008f15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f14:	bf00      	nop
  }

  return (USBD_OK);
 8008f16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f2e:	6879      	ldr	r1, [r7, #4]
 8008f30:	4809      	ldr	r0, [pc, #36]	; (8008f58 <CDC_Receive_FS+0x34>)
 8008f32:	f7fe fbc1 	bl	80076b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f36:	4808      	ldr	r0, [pc, #32]	; (8008f58 <CDC_Receive_FS+0x34>)
 8008f38:	f7fe fc22 	bl	8007780 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer,Buf,len);
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	4804      	ldr	r0, [pc, #16]	; (8008f5c <CDC_Receive_FS+0x38>)
 8008f4a:	f000 fc8f 	bl	800986c <memcpy>
  return (USBD_OK);
 8008f4e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	200008e8 	.word	0x200008e8
 8008f5c:	20000868 	.word	0x20000868

08008f60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f70:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <CDC_Transmit_FS+0x48>)
 8008f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e00b      	b.n	8008f9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f86:	887b      	ldrh	r3, [r7, #2]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	4806      	ldr	r0, [pc, #24]	; (8008fa8 <CDC_Transmit_FS+0x48>)
 8008f8e:	f7fe fb71 	bl	8007674 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f92:	4805      	ldr	r0, [pc, #20]	; (8008fa8 <CDC_Transmit_FS+0x48>)
 8008f94:	f7fe fbae 	bl	80076f4 <USBD_CDC_TransmitPacket>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	200008e8 	.word	0x200008e8

08008fac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
	...

08008fd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	6039      	str	r1, [r7, #0]
 8008fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	2212      	movs	r2, #18
 8008fe0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fe2:	4b03      	ldr	r3, [pc, #12]	; (8008ff0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	200006c8 	.word	0x200006c8

08008ff4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2204      	movs	r2, #4
 8009004:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009006:	4b03      	ldr	r3, [pc, #12]	; (8009014 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	200006dc 	.word	0x200006dc

08009018 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d105      	bne.n	8009036 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	4907      	ldr	r1, [pc, #28]	; (800904c <USBD_FS_ProductStrDescriptor+0x34>)
 800902e:	4808      	ldr	r0, [pc, #32]	; (8009050 <USBD_FS_ProductStrDescriptor+0x38>)
 8009030:	f7ff fdee 	bl	8008c10 <USBD_GetString>
 8009034:	e004      	b.n	8009040 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	4904      	ldr	r1, [pc, #16]	; (800904c <USBD_FS_ProductStrDescriptor+0x34>)
 800903a:	4805      	ldr	r0, [pc, #20]	; (8009050 <USBD_FS_ProductStrDescriptor+0x38>)
 800903c:	f7ff fde8 	bl	8008c10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009040:	4b02      	ldr	r3, [pc, #8]	; (800904c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20001bc4 	.word	0x20001bc4
 8009050:	0800a210 	.word	0x0800a210

08009054 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	6039      	str	r1, [r7, #0]
 800905e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	4904      	ldr	r1, [pc, #16]	; (8009074 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009064:	4804      	ldr	r0, [pc, #16]	; (8009078 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009066:	f7ff fdd3 	bl	8008c10 <USBD_GetString>
  return USBD_StrDesc;
 800906a:	4b02      	ldr	r3, [pc, #8]	; (8009074 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20001bc4 	.word	0x20001bc4
 8009078:	0800a228 	.word	0x0800a228

0800907c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	221a      	movs	r2, #26
 800908c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800908e:	f000 f843 	bl	8009118 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009092:	4b02      	ldr	r3, [pc, #8]	; (800909c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	200006e0 	.word	0x200006e0

080090a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	6039      	str	r1, [r7, #0]
 80090aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d105      	bne.n	80090be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090b2:	683a      	ldr	r2, [r7, #0]
 80090b4:	4907      	ldr	r1, [pc, #28]	; (80090d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090b6:	4808      	ldr	r0, [pc, #32]	; (80090d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090b8:	f7ff fdaa 	bl	8008c10 <USBD_GetString>
 80090bc:	e004      	b.n	80090c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	4904      	ldr	r1, [pc, #16]	; (80090d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090c2:	4805      	ldr	r0, [pc, #20]	; (80090d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090c4:	f7ff fda4 	bl	8008c10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090c8:	4b02      	ldr	r3, [pc, #8]	; (80090d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20001bc4 	.word	0x20001bc4
 80090d8:	0800a23c 	.word	0x0800a23c

080090dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	6039      	str	r1, [r7, #0]
 80090e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090e8:	79fb      	ldrb	r3, [r7, #7]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d105      	bne.n	80090fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	4907      	ldr	r1, [pc, #28]	; (8009110 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090f2:	4808      	ldr	r0, [pc, #32]	; (8009114 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090f4:	f7ff fd8c 	bl	8008c10 <USBD_GetString>
 80090f8:	e004      	b.n	8009104 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	4904      	ldr	r1, [pc, #16]	; (8009110 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090fe:	4805      	ldr	r0, [pc, #20]	; (8009114 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009100:	f7ff fd86 	bl	8008c10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009104:	4b02      	ldr	r3, [pc, #8]	; (8009110 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20001bc4 	.word	0x20001bc4
 8009114:	0800a248 	.word	0x0800a248

08009118 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800911e:	4b0f      	ldr	r3, [pc, #60]	; (800915c <Get_SerialNum+0x44>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <Get_SerialNum+0x48>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800912a:	4b0e      	ldr	r3, [pc, #56]	; (8009164 <Get_SerialNum+0x4c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4413      	add	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d009      	beq.n	8009152 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800913e:	2208      	movs	r2, #8
 8009140:	4909      	ldr	r1, [pc, #36]	; (8009168 <Get_SerialNum+0x50>)
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 f814 	bl	8009170 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009148:	2204      	movs	r2, #4
 800914a:	4908      	ldr	r1, [pc, #32]	; (800916c <Get_SerialNum+0x54>)
 800914c:	68b8      	ldr	r0, [r7, #8]
 800914e:	f000 f80f 	bl	8009170 <IntToUnicode>
  }
}
 8009152:	bf00      	nop
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	1fff7a10 	.word	0x1fff7a10
 8009160:	1fff7a14 	.word	0x1fff7a14
 8009164:	1fff7a18 	.word	0x1fff7a18
 8009168:	200006e2 	.word	0x200006e2
 800916c:	200006f2 	.word	0x200006f2

08009170 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009182:	2300      	movs	r3, #0
 8009184:	75fb      	strb	r3, [r7, #23]
 8009186:	e027      	b.n	80091d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	0f1b      	lsrs	r3, r3, #28
 800918c:	2b09      	cmp	r3, #9
 800918e:	d80b      	bhi.n	80091a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	0f1b      	lsrs	r3, r3, #28
 8009194:	b2da      	uxtb	r2, r3
 8009196:	7dfb      	ldrb	r3, [r7, #23]
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4619      	mov	r1, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	440b      	add	r3, r1
 80091a0:	3230      	adds	r2, #48	; 0x30
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	701a      	strb	r2, [r3, #0]
 80091a6:	e00a      	b.n	80091be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	0f1b      	lsrs	r3, r3, #28
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	4619      	mov	r1, r3
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	440b      	add	r3, r1
 80091b8:	3237      	adds	r2, #55	; 0x37
 80091ba:	b2d2      	uxtb	r2, r2
 80091bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	011b      	lsls	r3, r3, #4
 80091c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	3301      	adds	r3, #1
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	4413      	add	r3, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	3301      	adds	r3, #1
 80091d6:	75fb      	strb	r3, [r7, #23]
 80091d8:	7dfa      	ldrb	r2, [r7, #23]
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d3d3      	bcc.n	8009188 <IntToUnicode+0x18>
  }
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
	...

080091f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08a      	sub	sp, #40	; 0x28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091f8:	f107 0314 	add.w	r3, r7, #20
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	605a      	str	r2, [r3, #4]
 8009202:	609a      	str	r2, [r3, #8]
 8009204:	60da      	str	r2, [r3, #12]
 8009206:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009210:	d13a      	bne.n	8009288 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009212:	2300      	movs	r3, #0
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	4b1e      	ldr	r3, [pc, #120]	; (8009290 <HAL_PCD_MspInit+0xa0>)
 8009218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921a:	4a1d      	ldr	r2, [pc, #116]	; (8009290 <HAL_PCD_MspInit+0xa0>)
 800921c:	f043 0301 	orr.w	r3, r3, #1
 8009220:	6313      	str	r3, [r2, #48]	; 0x30
 8009222:	4b1b      	ldr	r3, [pc, #108]	; (8009290 <HAL_PCD_MspInit+0xa0>)
 8009224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800922e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009234:	2302      	movs	r3, #2
 8009236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009238:	2300      	movs	r3, #0
 800923a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800923c:	2303      	movs	r3, #3
 800923e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009240:	230a      	movs	r3, #10
 8009242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009244:	f107 0314 	add.w	r3, r7, #20
 8009248:	4619      	mov	r1, r3
 800924a:	4812      	ldr	r0, [pc, #72]	; (8009294 <HAL_PCD_MspInit+0xa4>)
 800924c:	f7f8 ffc0 	bl	80021d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009250:	4b0f      	ldr	r3, [pc, #60]	; (8009290 <HAL_PCD_MspInit+0xa0>)
 8009252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009254:	4a0e      	ldr	r2, [pc, #56]	; (8009290 <HAL_PCD_MspInit+0xa0>)
 8009256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925a:	6353      	str	r3, [r2, #52]	; 0x34
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <HAL_PCD_MspInit+0xa0>)
 8009262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009264:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <HAL_PCD_MspInit+0xa0>)
 8009266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800926a:	6453      	str	r3, [r2, #68]	; 0x44
 800926c:	4b08      	ldr	r3, [pc, #32]	; (8009290 <HAL_PCD_MspInit+0xa0>)
 800926e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009278:	2200      	movs	r2, #0
 800927a:	2100      	movs	r1, #0
 800927c:	2043      	movs	r0, #67	; 0x43
 800927e:	f7f8 ff70 	bl	8002162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009282:	2043      	movs	r0, #67	; 0x43
 8009284:	f7f8 ff89 	bl	800219a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009288:	bf00      	nop
 800928a:	3728      	adds	r7, #40	; 0x28
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	40023800 	.word	0x40023800
 8009294:	40020000 	.word	0x40020000

08009298 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092ac:	4619      	mov	r1, r3
 80092ae:	4610      	mov	r0, r2
 80092b0:	f7fe fb4f 	bl	8007952 <USBD_LL_SetupStage>
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	4613      	mov	r3, r2
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	440b      	add	r3, r1
 80092dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	4619      	mov	r1, r3
 80092e6:	f7fe fb89 	bl	80079fc <USBD_LL_DataOutStage>
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b082      	sub	sp, #8
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009304:	78fa      	ldrb	r2, [r7, #3]
 8009306:	6879      	ldr	r1, [r7, #4]
 8009308:	4613      	mov	r3, r2
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	4413      	add	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	440b      	add	r3, r1
 8009312:	334c      	adds	r3, #76	; 0x4c
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	4619      	mov	r1, r3
 800931a:	f7fe fc22 	bl	8007b62 <USBD_LL_DataInStage>
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fd56 	bl	8007de6 <USBD_LL_SOF>
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800934a:	2301      	movs	r3, #1
 800934c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
 800935a:	e008      	b.n	800936e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	2b02      	cmp	r3, #2
 8009362:	d102      	bne.n	800936a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009364:	2301      	movs	r3, #1
 8009366:	73fb      	strb	r3, [r7, #15]
 8009368:	e001      	b.n	800936e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800936a:	f7f7 ffb3 	bl	80012d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009374:	7bfa      	ldrb	r2, [r7, #15]
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe fcf6 	bl	8007d6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009384:	4618      	mov	r0, r3
 8009386:	f7fe fc9e 	bl	8007cc6 <USBD_LL_Reset>
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fcf1 	bl	8007d8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6812      	ldr	r2, [r2, #0]
 80093b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d005      	beq.n	80093d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093c8:	4b04      	ldr	r3, [pc, #16]	; (80093dc <HAL_PCD_SuspendCallback+0x48>)
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	4a03      	ldr	r2, [pc, #12]	; (80093dc <HAL_PCD_SuspendCallback+0x48>)
 80093ce:	f043 0306 	orr.w	r3, r3, #6
 80093d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	e000ed00 	.word	0xe000ed00

080093e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fce1 	bl	8007db6 <USBD_LL_Resume>
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe fd39 	bl	8007e8a <USBD_LL_IsoOUTIncomplete>
}
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009432:	78fa      	ldrb	r2, [r7, #3]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f7fe fcf5 	bl	8007e26 <USBD_LL_IsoINIncomplete>
}
 800943c:	bf00      	nop
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fd4b 	bl	8007eee <USBD_LL_DevConnected>
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fd48 	bl	8007f04 <USBD_LL_DevDisconnected>
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d13c      	bne.n	8009506 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800948c:	4a20      	ldr	r2, [pc, #128]	; (8009510 <USBD_LL_Init+0x94>)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a1e      	ldr	r2, [pc, #120]	; (8009510 <USBD_LL_Init+0x94>)
 8009498:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800949c:	4b1c      	ldr	r3, [pc, #112]	; (8009510 <USBD_LL_Init+0x94>)
 800949e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80094a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094a4:	4b1a      	ldr	r3, [pc, #104]	; (8009510 <USBD_LL_Init+0x94>)
 80094a6:	2204      	movs	r2, #4
 80094a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094aa:	4b19      	ldr	r3, [pc, #100]	; (8009510 <USBD_LL_Init+0x94>)
 80094ac:	2202      	movs	r2, #2
 80094ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094b0:	4b17      	ldr	r3, [pc, #92]	; (8009510 <USBD_LL_Init+0x94>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094b6:	4b16      	ldr	r3, [pc, #88]	; (8009510 <USBD_LL_Init+0x94>)
 80094b8:	2202      	movs	r2, #2
 80094ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094bc:	4b14      	ldr	r3, [pc, #80]	; (8009510 <USBD_LL_Init+0x94>)
 80094be:	2200      	movs	r2, #0
 80094c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094c2:	4b13      	ldr	r3, [pc, #76]	; (8009510 <USBD_LL_Init+0x94>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094c8:	4b11      	ldr	r3, [pc, #68]	; (8009510 <USBD_LL_Init+0x94>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094ce:	4b10      	ldr	r3, [pc, #64]	; (8009510 <USBD_LL_Init+0x94>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094d4:	4b0e      	ldr	r3, [pc, #56]	; (8009510 <USBD_LL_Init+0x94>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094da:	480d      	ldr	r0, [pc, #52]	; (8009510 <USBD_LL_Init+0x94>)
 80094dc:	f7f9 f847 	bl	800256e <HAL_PCD_Init>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094e6:	f7f7 fef5 	bl	80012d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094ea:	2180      	movs	r1, #128	; 0x80
 80094ec:	4808      	ldr	r0, [pc, #32]	; (8009510 <USBD_LL_Init+0x94>)
 80094ee:	f7fa fa9e 	bl	8003a2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094f2:	2240      	movs	r2, #64	; 0x40
 80094f4:	2100      	movs	r1, #0
 80094f6:	4806      	ldr	r0, [pc, #24]	; (8009510 <USBD_LL_Init+0x94>)
 80094f8:	f7fa fa52 	bl	80039a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094fc:	2280      	movs	r2, #128	; 0x80
 80094fe:	2101      	movs	r1, #1
 8009500:	4803      	ldr	r0, [pc, #12]	; (8009510 <USBD_LL_Init+0x94>)
 8009502:	f7fa fa4d 	bl	80039a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20001dc4 	.word	0x20001dc4

08009514 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800952a:	4618      	mov	r0, r3
 800952c:	f7f9 f93c 	bl	80027a8 <HAL_PCD_Start>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f942 	bl	80097c0 <USBD_Get_USB_Status>
 800953c:	4603      	mov	r3, r0
 800953e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009540:	7bbb      	ldrb	r3, [r7, #14]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	4608      	mov	r0, r1
 8009554:	4611      	mov	r1, r2
 8009556:	461a      	mov	r2, r3
 8009558:	4603      	mov	r3, r0
 800955a:	70fb      	strb	r3, [r7, #3]
 800955c:	460b      	mov	r3, r1
 800955e:	70bb      	strb	r3, [r7, #2]
 8009560:	4613      	mov	r3, r2
 8009562:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009572:	78bb      	ldrb	r3, [r7, #2]
 8009574:	883a      	ldrh	r2, [r7, #0]
 8009576:	78f9      	ldrb	r1, [r7, #3]
 8009578:	f7f9 fe0d 	bl	8003196 <HAL_PCD_EP_Open>
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 f91c 	bl	80097c0 <USBD_Get_USB_Status>
 8009588:	4603      	mov	r3, r0
 800958a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800958c:	7bbb      	ldrb	r3, [r7, #14]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7f9 fe56 	bl	8003266 <HAL_PCD_EP_Close>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 f8fd 	bl	80097c0 <USBD_Get_USB_Status>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7f9 ff2e 	bl	8003454 <HAL_PCD_EP_SetStall>
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f8de 	bl	80097c0 <USBD_Get_USB_Status>
 8009604:	4603      	mov	r3, r0
 8009606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009608:	7bbb      	ldrb	r3, [r7, #14]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800962c:	78fa      	ldrb	r2, [r7, #3]
 800962e:	4611      	mov	r1, r2
 8009630:	4618      	mov	r0, r3
 8009632:	f7f9 ff73 	bl	800351c <HAL_PCD_EP_ClrStall>
 8009636:	4603      	mov	r3, r0
 8009638:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	4618      	mov	r0, r3
 800963e:	f000 f8bf 	bl	80097c0 <USBD_Get_USB_Status>
 8009642:	4603      	mov	r3, r0
 8009644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009646:	7bbb      	ldrb	r3, [r7, #14]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009662:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009668:	2b00      	cmp	r3, #0
 800966a:	da0b      	bge.n	8009684 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009672:	68f9      	ldr	r1, [r7, #12]
 8009674:	4613      	mov	r3, r2
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	440b      	add	r3, r1
 800967e:	333e      	adds	r3, #62	; 0x3e
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	e00b      	b.n	800969c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	4613      	mov	r3, r2
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	4413      	add	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	440b      	add	r3, r1
 8009696:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800969a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096c2:	78fa      	ldrb	r2, [r7, #3]
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7f9 fd40 	bl	800314c <HAL_PCD_SetAddress>
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 f874 	bl	80097c0 <USBD_Get_USB_Status>
 80096d8:	4603      	mov	r3, r0
 80096da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b086      	sub	sp, #24
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	603b      	str	r3, [r7, #0]
 80096f2:	460b      	mov	r3, r1
 80096f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009704:	7af9      	ldrb	r1, [r7, #11]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	f7f9 fe59 	bl	80033c0 <HAL_PCD_EP_Transmit>
 800970e:	4603      	mov	r3, r0
 8009710:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009712:	7dfb      	ldrb	r3, [r7, #23]
 8009714:	4618      	mov	r0, r3
 8009716:	f000 f853 	bl	80097c0 <USBD_Get_USB_Status>
 800971a:	4603      	mov	r3, r0
 800971c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800971e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	460b      	mov	r3, r1
 8009736:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009746:	7af9      	ldrb	r1, [r7, #11]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	f7f9 fdd5 	bl	80032fa <HAL_PCD_EP_Receive>
 8009750:	4603      	mov	r3, r0
 8009752:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009754:	7dfb      	ldrb	r3, [r7, #23]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f832 	bl	80097c0 <USBD_Get_USB_Status>
 800975c:	4603      	mov	r3, r0
 800975e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009760:	7dbb      	ldrb	r3, [r7, #22]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800977c:	78fa      	ldrb	r2, [r7, #3]
 800977e:	4611      	mov	r1, r2
 8009780:	4618      	mov	r0, r3
 8009782:	f7f9 fe05 	bl	8003390 <HAL_PCD_EP_GetRxCount>
 8009786:	4603      	mov	r3, r0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009798:	4b03      	ldr	r3, [pc, #12]	; (80097a8 <USBD_static_malloc+0x18>)
}
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	200022d0 	.word	0x200022d0

080097ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]

}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	2b03      	cmp	r3, #3
 80097d2:	d817      	bhi.n	8009804 <USBD_Get_USB_Status+0x44>
 80097d4:	a201      	add	r2, pc, #4	; (adr r2, 80097dc <USBD_Get_USB_Status+0x1c>)
 80097d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097da:	bf00      	nop
 80097dc:	080097ed 	.word	0x080097ed
 80097e0:	080097f3 	.word	0x080097f3
 80097e4:	080097f9 	.word	0x080097f9
 80097e8:	080097ff 	.word	0x080097ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
    break;
 80097f0:	e00b      	b.n	800980a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097f2:	2303      	movs	r3, #3
 80097f4:	73fb      	strb	r3, [r7, #15]
    break;
 80097f6:	e008      	b.n	800980a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097f8:	2301      	movs	r3, #1
 80097fa:	73fb      	strb	r3, [r7, #15]
    break;
 80097fc:	e005      	b.n	800980a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097fe:	2303      	movs	r3, #3
 8009800:	73fb      	strb	r3, [r7, #15]
    break;
 8009802:	e002      	b.n	800980a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009804:	2303      	movs	r3, #3
 8009806:	73fb      	strb	r3, [r7, #15]
    break;
 8009808:	bf00      	nop
  }
  return usb_status;
 800980a:	7bfb      	ldrb	r3, [r7, #15]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <__errno>:
 8009818:	4b01      	ldr	r3, [pc, #4]	; (8009820 <__errno+0x8>)
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	200006fc 	.word	0x200006fc

08009824 <__libc_init_array>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4d0d      	ldr	r5, [pc, #52]	; (800985c <__libc_init_array+0x38>)
 8009828:	4c0d      	ldr	r4, [pc, #52]	; (8009860 <__libc_init_array+0x3c>)
 800982a:	1b64      	subs	r4, r4, r5
 800982c:	10a4      	asrs	r4, r4, #2
 800982e:	2600      	movs	r6, #0
 8009830:	42a6      	cmp	r6, r4
 8009832:	d109      	bne.n	8009848 <__libc_init_array+0x24>
 8009834:	4d0b      	ldr	r5, [pc, #44]	; (8009864 <__libc_init_array+0x40>)
 8009836:	4c0c      	ldr	r4, [pc, #48]	; (8009868 <__libc_init_array+0x44>)
 8009838:	f000 fc8e 	bl	800a158 <_init>
 800983c:	1b64      	subs	r4, r4, r5
 800983e:	10a4      	asrs	r4, r4, #2
 8009840:	2600      	movs	r6, #0
 8009842:	42a6      	cmp	r6, r4
 8009844:	d105      	bne.n	8009852 <__libc_init_array+0x2e>
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	f855 3b04 	ldr.w	r3, [r5], #4
 800984c:	4798      	blx	r3
 800984e:	3601      	adds	r6, #1
 8009850:	e7ee      	b.n	8009830 <__libc_init_array+0xc>
 8009852:	f855 3b04 	ldr.w	r3, [r5], #4
 8009856:	4798      	blx	r3
 8009858:	3601      	adds	r6, #1
 800985a:	e7f2      	b.n	8009842 <__libc_init_array+0x1e>
 800985c:	0800a2a4 	.word	0x0800a2a4
 8009860:	0800a2a4 	.word	0x0800a2a4
 8009864:	0800a2a4 	.word	0x0800a2a4
 8009868:	0800a2a8 	.word	0x0800a2a8

0800986c <memcpy>:
 800986c:	440a      	add	r2, r1
 800986e:	4291      	cmp	r1, r2
 8009870:	f100 33ff 	add.w	r3, r0, #4294967295
 8009874:	d100      	bne.n	8009878 <memcpy+0xc>
 8009876:	4770      	bx	lr
 8009878:	b510      	push	{r4, lr}
 800987a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800987e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009882:	4291      	cmp	r1, r2
 8009884:	d1f9      	bne.n	800987a <memcpy+0xe>
 8009886:	bd10      	pop	{r4, pc}

08009888 <memset>:
 8009888:	4402      	add	r2, r0
 800988a:	4603      	mov	r3, r0
 800988c:	4293      	cmp	r3, r2
 800988e:	d100      	bne.n	8009892 <memset+0xa>
 8009890:	4770      	bx	lr
 8009892:	f803 1b01 	strb.w	r1, [r3], #1
 8009896:	e7f9      	b.n	800988c <memset+0x4>

08009898 <siprintf>:
 8009898:	b40e      	push	{r1, r2, r3}
 800989a:	b500      	push	{lr}
 800989c:	b09c      	sub	sp, #112	; 0x70
 800989e:	ab1d      	add	r3, sp, #116	; 0x74
 80098a0:	9002      	str	r0, [sp, #8]
 80098a2:	9006      	str	r0, [sp, #24]
 80098a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098a8:	4809      	ldr	r0, [pc, #36]	; (80098d0 <siprintf+0x38>)
 80098aa:	9107      	str	r1, [sp, #28]
 80098ac:	9104      	str	r1, [sp, #16]
 80098ae:	4909      	ldr	r1, [pc, #36]	; (80098d4 <siprintf+0x3c>)
 80098b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b4:	9105      	str	r1, [sp, #20]
 80098b6:	6800      	ldr	r0, [r0, #0]
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	a902      	add	r1, sp, #8
 80098bc:	f000 f868 	bl	8009990 <_svfiprintf_r>
 80098c0:	9b02      	ldr	r3, [sp, #8]
 80098c2:	2200      	movs	r2, #0
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	b01c      	add	sp, #112	; 0x70
 80098c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098cc:	b003      	add	sp, #12
 80098ce:	4770      	bx	lr
 80098d0:	200006fc 	.word	0x200006fc
 80098d4:	ffff0208 	.word	0xffff0208

080098d8 <__ssputs_r>:
 80098d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098dc:	688e      	ldr	r6, [r1, #8]
 80098de:	429e      	cmp	r6, r3
 80098e0:	4682      	mov	sl, r0
 80098e2:	460c      	mov	r4, r1
 80098e4:	4690      	mov	r8, r2
 80098e6:	461f      	mov	r7, r3
 80098e8:	d838      	bhi.n	800995c <__ssputs_r+0x84>
 80098ea:	898a      	ldrh	r2, [r1, #12]
 80098ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098f0:	d032      	beq.n	8009958 <__ssputs_r+0x80>
 80098f2:	6825      	ldr	r5, [r4, #0]
 80098f4:	6909      	ldr	r1, [r1, #16]
 80098f6:	eba5 0901 	sub.w	r9, r5, r1
 80098fa:	6965      	ldr	r5, [r4, #20]
 80098fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009904:	3301      	adds	r3, #1
 8009906:	444b      	add	r3, r9
 8009908:	106d      	asrs	r5, r5, #1
 800990a:	429d      	cmp	r5, r3
 800990c:	bf38      	it	cc
 800990e:	461d      	movcc	r5, r3
 8009910:	0553      	lsls	r3, r2, #21
 8009912:	d531      	bpl.n	8009978 <__ssputs_r+0xa0>
 8009914:	4629      	mov	r1, r5
 8009916:	f000 fb55 	bl	8009fc4 <_malloc_r>
 800991a:	4606      	mov	r6, r0
 800991c:	b950      	cbnz	r0, 8009934 <__ssputs_r+0x5c>
 800991e:	230c      	movs	r3, #12
 8009920:	f8ca 3000 	str.w	r3, [sl]
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992a:	81a3      	strh	r3, [r4, #12]
 800992c:	f04f 30ff 	mov.w	r0, #4294967295
 8009930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009934:	6921      	ldr	r1, [r4, #16]
 8009936:	464a      	mov	r2, r9
 8009938:	f7ff ff98 	bl	800986c <memcpy>
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009946:	81a3      	strh	r3, [r4, #12]
 8009948:	6126      	str	r6, [r4, #16]
 800994a:	6165      	str	r5, [r4, #20]
 800994c:	444e      	add	r6, r9
 800994e:	eba5 0509 	sub.w	r5, r5, r9
 8009952:	6026      	str	r6, [r4, #0]
 8009954:	60a5      	str	r5, [r4, #8]
 8009956:	463e      	mov	r6, r7
 8009958:	42be      	cmp	r6, r7
 800995a:	d900      	bls.n	800995e <__ssputs_r+0x86>
 800995c:	463e      	mov	r6, r7
 800995e:	6820      	ldr	r0, [r4, #0]
 8009960:	4632      	mov	r2, r6
 8009962:	4641      	mov	r1, r8
 8009964:	f000 faa8 	bl	8009eb8 <memmove>
 8009968:	68a3      	ldr	r3, [r4, #8]
 800996a:	1b9b      	subs	r3, r3, r6
 800996c:	60a3      	str	r3, [r4, #8]
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	4433      	add	r3, r6
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	2000      	movs	r0, #0
 8009976:	e7db      	b.n	8009930 <__ssputs_r+0x58>
 8009978:	462a      	mov	r2, r5
 800997a:	f000 fb97 	bl	800a0ac <_realloc_r>
 800997e:	4606      	mov	r6, r0
 8009980:	2800      	cmp	r0, #0
 8009982:	d1e1      	bne.n	8009948 <__ssputs_r+0x70>
 8009984:	6921      	ldr	r1, [r4, #16]
 8009986:	4650      	mov	r0, sl
 8009988:	f000 fab0 	bl	8009eec <_free_r>
 800998c:	e7c7      	b.n	800991e <__ssputs_r+0x46>
	...

08009990 <_svfiprintf_r>:
 8009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	4698      	mov	r8, r3
 8009996:	898b      	ldrh	r3, [r1, #12]
 8009998:	061b      	lsls	r3, r3, #24
 800999a:	b09d      	sub	sp, #116	; 0x74
 800999c:	4607      	mov	r7, r0
 800999e:	460d      	mov	r5, r1
 80099a0:	4614      	mov	r4, r2
 80099a2:	d50e      	bpl.n	80099c2 <_svfiprintf_r+0x32>
 80099a4:	690b      	ldr	r3, [r1, #16]
 80099a6:	b963      	cbnz	r3, 80099c2 <_svfiprintf_r+0x32>
 80099a8:	2140      	movs	r1, #64	; 0x40
 80099aa:	f000 fb0b 	bl	8009fc4 <_malloc_r>
 80099ae:	6028      	str	r0, [r5, #0]
 80099b0:	6128      	str	r0, [r5, #16]
 80099b2:	b920      	cbnz	r0, 80099be <_svfiprintf_r+0x2e>
 80099b4:	230c      	movs	r3, #12
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	f04f 30ff 	mov.w	r0, #4294967295
 80099bc:	e0d1      	b.n	8009b62 <_svfiprintf_r+0x1d2>
 80099be:	2340      	movs	r3, #64	; 0x40
 80099c0:	616b      	str	r3, [r5, #20]
 80099c2:	2300      	movs	r3, #0
 80099c4:	9309      	str	r3, [sp, #36]	; 0x24
 80099c6:	2320      	movs	r3, #32
 80099c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80099d0:	2330      	movs	r3, #48	; 0x30
 80099d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b7c <_svfiprintf_r+0x1ec>
 80099d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099da:	f04f 0901 	mov.w	r9, #1
 80099de:	4623      	mov	r3, r4
 80099e0:	469a      	mov	sl, r3
 80099e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e6:	b10a      	cbz	r2, 80099ec <_svfiprintf_r+0x5c>
 80099e8:	2a25      	cmp	r2, #37	; 0x25
 80099ea:	d1f9      	bne.n	80099e0 <_svfiprintf_r+0x50>
 80099ec:	ebba 0b04 	subs.w	fp, sl, r4
 80099f0:	d00b      	beq.n	8009a0a <_svfiprintf_r+0x7a>
 80099f2:	465b      	mov	r3, fp
 80099f4:	4622      	mov	r2, r4
 80099f6:	4629      	mov	r1, r5
 80099f8:	4638      	mov	r0, r7
 80099fa:	f7ff ff6d 	bl	80098d8 <__ssputs_r>
 80099fe:	3001      	adds	r0, #1
 8009a00:	f000 80aa 	beq.w	8009b58 <_svfiprintf_r+0x1c8>
 8009a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a06:	445a      	add	r2, fp
 8009a08:	9209      	str	r2, [sp, #36]	; 0x24
 8009a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 80a2 	beq.w	8009b58 <_svfiprintf_r+0x1c8>
 8009a14:	2300      	movs	r3, #0
 8009a16:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a1e:	f10a 0a01 	add.w	sl, sl, #1
 8009a22:	9304      	str	r3, [sp, #16]
 8009a24:	9307      	str	r3, [sp, #28]
 8009a26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8009a2c:	4654      	mov	r4, sl
 8009a2e:	2205      	movs	r2, #5
 8009a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a34:	4851      	ldr	r0, [pc, #324]	; (8009b7c <_svfiprintf_r+0x1ec>)
 8009a36:	f7f6 fbd3 	bl	80001e0 <memchr>
 8009a3a:	9a04      	ldr	r2, [sp, #16]
 8009a3c:	b9d8      	cbnz	r0, 8009a76 <_svfiprintf_r+0xe6>
 8009a3e:	06d0      	lsls	r0, r2, #27
 8009a40:	bf44      	itt	mi
 8009a42:	2320      	movmi	r3, #32
 8009a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a48:	0711      	lsls	r1, r2, #28
 8009a4a:	bf44      	itt	mi
 8009a4c:	232b      	movmi	r3, #43	; 0x2b
 8009a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a52:	f89a 3000 	ldrb.w	r3, [sl]
 8009a56:	2b2a      	cmp	r3, #42	; 0x2a
 8009a58:	d015      	beq.n	8009a86 <_svfiprintf_r+0xf6>
 8009a5a:	9a07      	ldr	r2, [sp, #28]
 8009a5c:	4654      	mov	r4, sl
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f04f 0c0a 	mov.w	ip, #10
 8009a64:	4621      	mov	r1, r4
 8009a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a6a:	3b30      	subs	r3, #48	; 0x30
 8009a6c:	2b09      	cmp	r3, #9
 8009a6e:	d94e      	bls.n	8009b0e <_svfiprintf_r+0x17e>
 8009a70:	b1b0      	cbz	r0, 8009aa0 <_svfiprintf_r+0x110>
 8009a72:	9207      	str	r2, [sp, #28]
 8009a74:	e014      	b.n	8009aa0 <_svfiprintf_r+0x110>
 8009a76:	eba0 0308 	sub.w	r3, r0, r8
 8009a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	46a2      	mov	sl, r4
 8009a84:	e7d2      	b.n	8009a2c <_svfiprintf_r+0x9c>
 8009a86:	9b03      	ldr	r3, [sp, #12]
 8009a88:	1d19      	adds	r1, r3, #4
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	9103      	str	r1, [sp, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	bfbb      	ittet	lt
 8009a92:	425b      	neglt	r3, r3
 8009a94:	f042 0202 	orrlt.w	r2, r2, #2
 8009a98:	9307      	strge	r3, [sp, #28]
 8009a9a:	9307      	strlt	r3, [sp, #28]
 8009a9c:	bfb8      	it	lt
 8009a9e:	9204      	strlt	r2, [sp, #16]
 8009aa0:	7823      	ldrb	r3, [r4, #0]
 8009aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8009aa4:	d10c      	bne.n	8009ac0 <_svfiprintf_r+0x130>
 8009aa6:	7863      	ldrb	r3, [r4, #1]
 8009aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aaa:	d135      	bne.n	8009b18 <_svfiprintf_r+0x188>
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	1d1a      	adds	r2, r3, #4
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	9203      	str	r2, [sp, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	bfb8      	it	lt
 8009ab8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009abc:	3402      	adds	r4, #2
 8009abe:	9305      	str	r3, [sp, #20]
 8009ac0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b8c <_svfiprintf_r+0x1fc>
 8009ac4:	7821      	ldrb	r1, [r4, #0]
 8009ac6:	2203      	movs	r2, #3
 8009ac8:	4650      	mov	r0, sl
 8009aca:	f7f6 fb89 	bl	80001e0 <memchr>
 8009ace:	b140      	cbz	r0, 8009ae2 <_svfiprintf_r+0x152>
 8009ad0:	2340      	movs	r3, #64	; 0x40
 8009ad2:	eba0 000a 	sub.w	r0, r0, sl
 8009ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	4303      	orrs	r3, r0
 8009ade:	3401      	adds	r4, #1
 8009ae0:	9304      	str	r3, [sp, #16]
 8009ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae6:	4826      	ldr	r0, [pc, #152]	; (8009b80 <_svfiprintf_r+0x1f0>)
 8009ae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009aec:	2206      	movs	r2, #6
 8009aee:	f7f6 fb77 	bl	80001e0 <memchr>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d038      	beq.n	8009b68 <_svfiprintf_r+0x1d8>
 8009af6:	4b23      	ldr	r3, [pc, #140]	; (8009b84 <_svfiprintf_r+0x1f4>)
 8009af8:	bb1b      	cbnz	r3, 8009b42 <_svfiprintf_r+0x1b2>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	3307      	adds	r3, #7
 8009afe:	f023 0307 	bic.w	r3, r3, #7
 8009b02:	3308      	adds	r3, #8
 8009b04:	9303      	str	r3, [sp, #12]
 8009b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b08:	4433      	add	r3, r6
 8009b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b0c:	e767      	b.n	80099de <_svfiprintf_r+0x4e>
 8009b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b12:	460c      	mov	r4, r1
 8009b14:	2001      	movs	r0, #1
 8009b16:	e7a5      	b.n	8009a64 <_svfiprintf_r+0xd4>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	3401      	adds	r4, #1
 8009b1c:	9305      	str	r3, [sp, #20]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	f04f 0c0a 	mov.w	ip, #10
 8009b24:	4620      	mov	r0, r4
 8009b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b2a:	3a30      	subs	r2, #48	; 0x30
 8009b2c:	2a09      	cmp	r2, #9
 8009b2e:	d903      	bls.n	8009b38 <_svfiprintf_r+0x1a8>
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0c5      	beq.n	8009ac0 <_svfiprintf_r+0x130>
 8009b34:	9105      	str	r1, [sp, #20]
 8009b36:	e7c3      	b.n	8009ac0 <_svfiprintf_r+0x130>
 8009b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e7f0      	b.n	8009b24 <_svfiprintf_r+0x194>
 8009b42:	ab03      	add	r3, sp, #12
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	462a      	mov	r2, r5
 8009b48:	4b0f      	ldr	r3, [pc, #60]	; (8009b88 <_svfiprintf_r+0x1f8>)
 8009b4a:	a904      	add	r1, sp, #16
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f3af 8000 	nop.w
 8009b52:	1c42      	adds	r2, r0, #1
 8009b54:	4606      	mov	r6, r0
 8009b56:	d1d6      	bne.n	8009b06 <_svfiprintf_r+0x176>
 8009b58:	89ab      	ldrh	r3, [r5, #12]
 8009b5a:	065b      	lsls	r3, r3, #25
 8009b5c:	f53f af2c 	bmi.w	80099b8 <_svfiprintf_r+0x28>
 8009b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b62:	b01d      	add	sp, #116	; 0x74
 8009b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b68:	ab03      	add	r3, sp, #12
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	462a      	mov	r2, r5
 8009b6e:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <_svfiprintf_r+0x1f8>)
 8009b70:	a904      	add	r1, sp, #16
 8009b72:	4638      	mov	r0, r7
 8009b74:	f000 f87a 	bl	8009c6c <_printf_i>
 8009b78:	e7eb      	b.n	8009b52 <_svfiprintf_r+0x1c2>
 8009b7a:	bf00      	nop
 8009b7c:	0800a268 	.word	0x0800a268
 8009b80:	0800a272 	.word	0x0800a272
 8009b84:	00000000 	.word	0x00000000
 8009b88:	080098d9 	.word	0x080098d9
 8009b8c:	0800a26e 	.word	0x0800a26e

08009b90 <_printf_common>:
 8009b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b94:	4616      	mov	r6, r2
 8009b96:	4699      	mov	r9, r3
 8009b98:	688a      	ldr	r2, [r1, #8]
 8009b9a:	690b      	ldr	r3, [r1, #16]
 8009b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	bfb8      	it	lt
 8009ba4:	4613      	movlt	r3, r2
 8009ba6:	6033      	str	r3, [r6, #0]
 8009ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bac:	4607      	mov	r7, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	b10a      	cbz	r2, 8009bb6 <_printf_common+0x26>
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	6033      	str	r3, [r6, #0]
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	0699      	lsls	r1, r3, #26
 8009bba:	bf42      	ittt	mi
 8009bbc:	6833      	ldrmi	r3, [r6, #0]
 8009bbe:	3302      	addmi	r3, #2
 8009bc0:	6033      	strmi	r3, [r6, #0]
 8009bc2:	6825      	ldr	r5, [r4, #0]
 8009bc4:	f015 0506 	ands.w	r5, r5, #6
 8009bc8:	d106      	bne.n	8009bd8 <_printf_common+0x48>
 8009bca:	f104 0a19 	add.w	sl, r4, #25
 8009bce:	68e3      	ldr	r3, [r4, #12]
 8009bd0:	6832      	ldr	r2, [r6, #0]
 8009bd2:	1a9b      	subs	r3, r3, r2
 8009bd4:	42ab      	cmp	r3, r5
 8009bd6:	dc26      	bgt.n	8009c26 <_printf_common+0x96>
 8009bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bdc:	1e13      	subs	r3, r2, #0
 8009bde:	6822      	ldr	r2, [r4, #0]
 8009be0:	bf18      	it	ne
 8009be2:	2301      	movne	r3, #1
 8009be4:	0692      	lsls	r2, r2, #26
 8009be6:	d42b      	bmi.n	8009c40 <_printf_common+0xb0>
 8009be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bec:	4649      	mov	r1, r9
 8009bee:	4638      	mov	r0, r7
 8009bf0:	47c0      	blx	r8
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d01e      	beq.n	8009c34 <_printf_common+0xa4>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	68e5      	ldr	r5, [r4, #12]
 8009bfa:	6832      	ldr	r2, [r6, #0]
 8009bfc:	f003 0306 	and.w	r3, r3, #6
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	bf08      	it	eq
 8009c04:	1aad      	subeq	r5, r5, r2
 8009c06:	68a3      	ldr	r3, [r4, #8]
 8009c08:	6922      	ldr	r2, [r4, #16]
 8009c0a:	bf0c      	ite	eq
 8009c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c10:	2500      	movne	r5, #0
 8009c12:	4293      	cmp	r3, r2
 8009c14:	bfc4      	itt	gt
 8009c16:	1a9b      	subgt	r3, r3, r2
 8009c18:	18ed      	addgt	r5, r5, r3
 8009c1a:	2600      	movs	r6, #0
 8009c1c:	341a      	adds	r4, #26
 8009c1e:	42b5      	cmp	r5, r6
 8009c20:	d11a      	bne.n	8009c58 <_printf_common+0xc8>
 8009c22:	2000      	movs	r0, #0
 8009c24:	e008      	b.n	8009c38 <_printf_common+0xa8>
 8009c26:	2301      	movs	r3, #1
 8009c28:	4652      	mov	r2, sl
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	47c0      	blx	r8
 8009c30:	3001      	adds	r0, #1
 8009c32:	d103      	bne.n	8009c3c <_printf_common+0xac>
 8009c34:	f04f 30ff 	mov.w	r0, #4294967295
 8009c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3c:	3501      	adds	r5, #1
 8009c3e:	e7c6      	b.n	8009bce <_printf_common+0x3e>
 8009c40:	18e1      	adds	r1, r4, r3
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	2030      	movs	r0, #48	; 0x30
 8009c46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c4a:	4422      	add	r2, r4
 8009c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c54:	3302      	adds	r3, #2
 8009c56:	e7c7      	b.n	8009be8 <_printf_common+0x58>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4638      	mov	r0, r7
 8009c60:	47c0      	blx	r8
 8009c62:	3001      	adds	r0, #1
 8009c64:	d0e6      	beq.n	8009c34 <_printf_common+0xa4>
 8009c66:	3601      	adds	r6, #1
 8009c68:	e7d9      	b.n	8009c1e <_printf_common+0x8e>
	...

08009c6c <_printf_i>:
 8009c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	7e0f      	ldrb	r7, [r1, #24]
 8009c72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c74:	2f78      	cmp	r7, #120	; 0x78
 8009c76:	4691      	mov	r9, r2
 8009c78:	4680      	mov	r8, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	469a      	mov	sl, r3
 8009c7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c82:	d807      	bhi.n	8009c94 <_printf_i+0x28>
 8009c84:	2f62      	cmp	r7, #98	; 0x62
 8009c86:	d80a      	bhi.n	8009c9e <_printf_i+0x32>
 8009c88:	2f00      	cmp	r7, #0
 8009c8a:	f000 80d8 	beq.w	8009e3e <_printf_i+0x1d2>
 8009c8e:	2f58      	cmp	r7, #88	; 0x58
 8009c90:	f000 80a3 	beq.w	8009dda <_printf_i+0x16e>
 8009c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c9c:	e03a      	b.n	8009d14 <_printf_i+0xa8>
 8009c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ca2:	2b15      	cmp	r3, #21
 8009ca4:	d8f6      	bhi.n	8009c94 <_printf_i+0x28>
 8009ca6:	a101      	add	r1, pc, #4	; (adr r1, 8009cac <_printf_i+0x40>)
 8009ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cac:	08009d05 	.word	0x08009d05
 8009cb0:	08009d19 	.word	0x08009d19
 8009cb4:	08009c95 	.word	0x08009c95
 8009cb8:	08009c95 	.word	0x08009c95
 8009cbc:	08009c95 	.word	0x08009c95
 8009cc0:	08009c95 	.word	0x08009c95
 8009cc4:	08009d19 	.word	0x08009d19
 8009cc8:	08009c95 	.word	0x08009c95
 8009ccc:	08009c95 	.word	0x08009c95
 8009cd0:	08009c95 	.word	0x08009c95
 8009cd4:	08009c95 	.word	0x08009c95
 8009cd8:	08009e25 	.word	0x08009e25
 8009cdc:	08009d49 	.word	0x08009d49
 8009ce0:	08009e07 	.word	0x08009e07
 8009ce4:	08009c95 	.word	0x08009c95
 8009ce8:	08009c95 	.word	0x08009c95
 8009cec:	08009e47 	.word	0x08009e47
 8009cf0:	08009c95 	.word	0x08009c95
 8009cf4:	08009d49 	.word	0x08009d49
 8009cf8:	08009c95 	.word	0x08009c95
 8009cfc:	08009c95 	.word	0x08009c95
 8009d00:	08009e0f 	.word	0x08009e0f
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	1d1a      	adds	r2, r3, #4
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	602a      	str	r2, [r5, #0]
 8009d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d14:	2301      	movs	r3, #1
 8009d16:	e0a3      	b.n	8009e60 <_printf_i+0x1f4>
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	6829      	ldr	r1, [r5, #0]
 8009d1c:	0606      	lsls	r6, r0, #24
 8009d1e:	f101 0304 	add.w	r3, r1, #4
 8009d22:	d50a      	bpl.n	8009d3a <_printf_i+0xce>
 8009d24:	680e      	ldr	r6, [r1, #0]
 8009d26:	602b      	str	r3, [r5, #0]
 8009d28:	2e00      	cmp	r6, #0
 8009d2a:	da03      	bge.n	8009d34 <_printf_i+0xc8>
 8009d2c:	232d      	movs	r3, #45	; 0x2d
 8009d2e:	4276      	negs	r6, r6
 8009d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d34:	485e      	ldr	r0, [pc, #376]	; (8009eb0 <_printf_i+0x244>)
 8009d36:	230a      	movs	r3, #10
 8009d38:	e019      	b.n	8009d6e <_printf_i+0x102>
 8009d3a:	680e      	ldr	r6, [r1, #0]
 8009d3c:	602b      	str	r3, [r5, #0]
 8009d3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d42:	bf18      	it	ne
 8009d44:	b236      	sxthne	r6, r6
 8009d46:	e7ef      	b.n	8009d28 <_printf_i+0xbc>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	6820      	ldr	r0, [r4, #0]
 8009d4c:	1d19      	adds	r1, r3, #4
 8009d4e:	6029      	str	r1, [r5, #0]
 8009d50:	0601      	lsls	r1, r0, #24
 8009d52:	d501      	bpl.n	8009d58 <_printf_i+0xec>
 8009d54:	681e      	ldr	r6, [r3, #0]
 8009d56:	e002      	b.n	8009d5e <_printf_i+0xf2>
 8009d58:	0646      	lsls	r6, r0, #25
 8009d5a:	d5fb      	bpl.n	8009d54 <_printf_i+0xe8>
 8009d5c:	881e      	ldrh	r6, [r3, #0]
 8009d5e:	4854      	ldr	r0, [pc, #336]	; (8009eb0 <_printf_i+0x244>)
 8009d60:	2f6f      	cmp	r7, #111	; 0x6f
 8009d62:	bf0c      	ite	eq
 8009d64:	2308      	moveq	r3, #8
 8009d66:	230a      	movne	r3, #10
 8009d68:	2100      	movs	r1, #0
 8009d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d6e:	6865      	ldr	r5, [r4, #4]
 8009d70:	60a5      	str	r5, [r4, #8]
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	bfa2      	ittt	ge
 8009d76:	6821      	ldrge	r1, [r4, #0]
 8009d78:	f021 0104 	bicge.w	r1, r1, #4
 8009d7c:	6021      	strge	r1, [r4, #0]
 8009d7e:	b90e      	cbnz	r6, 8009d84 <_printf_i+0x118>
 8009d80:	2d00      	cmp	r5, #0
 8009d82:	d04d      	beq.n	8009e20 <_printf_i+0x1b4>
 8009d84:	4615      	mov	r5, r2
 8009d86:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d8a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d8e:	5dc7      	ldrb	r7, [r0, r7]
 8009d90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d94:	4637      	mov	r7, r6
 8009d96:	42bb      	cmp	r3, r7
 8009d98:	460e      	mov	r6, r1
 8009d9a:	d9f4      	bls.n	8009d86 <_printf_i+0x11a>
 8009d9c:	2b08      	cmp	r3, #8
 8009d9e:	d10b      	bne.n	8009db8 <_printf_i+0x14c>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	07de      	lsls	r6, r3, #31
 8009da4:	d508      	bpl.n	8009db8 <_printf_i+0x14c>
 8009da6:	6923      	ldr	r3, [r4, #16]
 8009da8:	6861      	ldr	r1, [r4, #4]
 8009daa:	4299      	cmp	r1, r3
 8009dac:	bfde      	ittt	le
 8009dae:	2330      	movle	r3, #48	; 0x30
 8009db0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009db4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009db8:	1b52      	subs	r2, r2, r5
 8009dba:	6122      	str	r2, [r4, #16]
 8009dbc:	f8cd a000 	str.w	sl, [sp]
 8009dc0:	464b      	mov	r3, r9
 8009dc2:	aa03      	add	r2, sp, #12
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	f7ff fee2 	bl	8009b90 <_printf_common>
 8009dcc:	3001      	adds	r0, #1
 8009dce:	d14c      	bne.n	8009e6a <_printf_i+0x1fe>
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	b004      	add	sp, #16
 8009dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dda:	4835      	ldr	r0, [pc, #212]	; (8009eb0 <_printf_i+0x244>)
 8009ddc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009de0:	6829      	ldr	r1, [r5, #0]
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009de8:	6029      	str	r1, [r5, #0]
 8009dea:	061d      	lsls	r5, r3, #24
 8009dec:	d514      	bpl.n	8009e18 <_printf_i+0x1ac>
 8009dee:	07df      	lsls	r7, r3, #31
 8009df0:	bf44      	itt	mi
 8009df2:	f043 0320 	orrmi.w	r3, r3, #32
 8009df6:	6023      	strmi	r3, [r4, #0]
 8009df8:	b91e      	cbnz	r6, 8009e02 <_printf_i+0x196>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	f023 0320 	bic.w	r3, r3, #32
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	2310      	movs	r3, #16
 8009e04:	e7b0      	b.n	8009d68 <_printf_i+0xfc>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	f043 0320 	orr.w	r3, r3, #32
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	2378      	movs	r3, #120	; 0x78
 8009e10:	4828      	ldr	r0, [pc, #160]	; (8009eb4 <_printf_i+0x248>)
 8009e12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e16:	e7e3      	b.n	8009de0 <_printf_i+0x174>
 8009e18:	0659      	lsls	r1, r3, #25
 8009e1a:	bf48      	it	mi
 8009e1c:	b2b6      	uxthmi	r6, r6
 8009e1e:	e7e6      	b.n	8009dee <_printf_i+0x182>
 8009e20:	4615      	mov	r5, r2
 8009e22:	e7bb      	b.n	8009d9c <_printf_i+0x130>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	6826      	ldr	r6, [r4, #0]
 8009e28:	6961      	ldr	r1, [r4, #20]
 8009e2a:	1d18      	adds	r0, r3, #4
 8009e2c:	6028      	str	r0, [r5, #0]
 8009e2e:	0635      	lsls	r5, r6, #24
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	d501      	bpl.n	8009e38 <_printf_i+0x1cc>
 8009e34:	6019      	str	r1, [r3, #0]
 8009e36:	e002      	b.n	8009e3e <_printf_i+0x1d2>
 8009e38:	0670      	lsls	r0, r6, #25
 8009e3a:	d5fb      	bpl.n	8009e34 <_printf_i+0x1c8>
 8009e3c:	8019      	strh	r1, [r3, #0]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	6123      	str	r3, [r4, #16]
 8009e42:	4615      	mov	r5, r2
 8009e44:	e7ba      	b.n	8009dbc <_printf_i+0x150>
 8009e46:	682b      	ldr	r3, [r5, #0]
 8009e48:	1d1a      	adds	r2, r3, #4
 8009e4a:	602a      	str	r2, [r5, #0]
 8009e4c:	681d      	ldr	r5, [r3, #0]
 8009e4e:	6862      	ldr	r2, [r4, #4]
 8009e50:	2100      	movs	r1, #0
 8009e52:	4628      	mov	r0, r5
 8009e54:	f7f6 f9c4 	bl	80001e0 <memchr>
 8009e58:	b108      	cbz	r0, 8009e5e <_printf_i+0x1f2>
 8009e5a:	1b40      	subs	r0, r0, r5
 8009e5c:	6060      	str	r0, [r4, #4]
 8009e5e:	6863      	ldr	r3, [r4, #4]
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	2300      	movs	r3, #0
 8009e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e68:	e7a8      	b.n	8009dbc <_printf_i+0x150>
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	462a      	mov	r2, r5
 8009e6e:	4649      	mov	r1, r9
 8009e70:	4640      	mov	r0, r8
 8009e72:	47d0      	blx	sl
 8009e74:	3001      	adds	r0, #1
 8009e76:	d0ab      	beq.n	8009dd0 <_printf_i+0x164>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	079b      	lsls	r3, r3, #30
 8009e7c:	d413      	bmi.n	8009ea6 <_printf_i+0x23a>
 8009e7e:	68e0      	ldr	r0, [r4, #12]
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	4298      	cmp	r0, r3
 8009e84:	bfb8      	it	lt
 8009e86:	4618      	movlt	r0, r3
 8009e88:	e7a4      	b.n	8009dd4 <_printf_i+0x168>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	4649      	mov	r1, r9
 8009e90:	4640      	mov	r0, r8
 8009e92:	47d0      	blx	sl
 8009e94:	3001      	adds	r0, #1
 8009e96:	d09b      	beq.n	8009dd0 <_printf_i+0x164>
 8009e98:	3501      	adds	r5, #1
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	9903      	ldr	r1, [sp, #12]
 8009e9e:	1a5b      	subs	r3, r3, r1
 8009ea0:	42ab      	cmp	r3, r5
 8009ea2:	dcf2      	bgt.n	8009e8a <_printf_i+0x21e>
 8009ea4:	e7eb      	b.n	8009e7e <_printf_i+0x212>
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	f104 0619 	add.w	r6, r4, #25
 8009eac:	e7f5      	b.n	8009e9a <_printf_i+0x22e>
 8009eae:	bf00      	nop
 8009eb0:	0800a279 	.word	0x0800a279
 8009eb4:	0800a28a 	.word	0x0800a28a

08009eb8 <memmove>:
 8009eb8:	4288      	cmp	r0, r1
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	eb01 0402 	add.w	r4, r1, r2
 8009ec0:	d902      	bls.n	8009ec8 <memmove+0x10>
 8009ec2:	4284      	cmp	r4, r0
 8009ec4:	4623      	mov	r3, r4
 8009ec6:	d807      	bhi.n	8009ed8 <memmove+0x20>
 8009ec8:	1e43      	subs	r3, r0, #1
 8009eca:	42a1      	cmp	r1, r4
 8009ecc:	d008      	beq.n	8009ee0 <memmove+0x28>
 8009ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ed6:	e7f8      	b.n	8009eca <memmove+0x12>
 8009ed8:	4402      	add	r2, r0
 8009eda:	4601      	mov	r1, r0
 8009edc:	428a      	cmp	r2, r1
 8009ede:	d100      	bne.n	8009ee2 <memmove+0x2a>
 8009ee0:	bd10      	pop	{r4, pc}
 8009ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eea:	e7f7      	b.n	8009edc <memmove+0x24>

08009eec <_free_r>:
 8009eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eee:	2900      	cmp	r1, #0
 8009ef0:	d044      	beq.n	8009f7c <_free_r+0x90>
 8009ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef6:	9001      	str	r0, [sp, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f1a1 0404 	sub.w	r4, r1, #4
 8009efe:	bfb8      	it	lt
 8009f00:	18e4      	addlt	r4, r4, r3
 8009f02:	f000 f913 	bl	800a12c <__malloc_lock>
 8009f06:	4a1e      	ldr	r2, [pc, #120]	; (8009f80 <_free_r+0x94>)
 8009f08:	9801      	ldr	r0, [sp, #4]
 8009f0a:	6813      	ldr	r3, [r2, #0]
 8009f0c:	b933      	cbnz	r3, 8009f1c <_free_r+0x30>
 8009f0e:	6063      	str	r3, [r4, #4]
 8009f10:	6014      	str	r4, [r2, #0]
 8009f12:	b003      	add	sp, #12
 8009f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f18:	f000 b90e 	b.w	800a138 <__malloc_unlock>
 8009f1c:	42a3      	cmp	r3, r4
 8009f1e:	d908      	bls.n	8009f32 <_free_r+0x46>
 8009f20:	6825      	ldr	r5, [r4, #0]
 8009f22:	1961      	adds	r1, r4, r5
 8009f24:	428b      	cmp	r3, r1
 8009f26:	bf01      	itttt	eq
 8009f28:	6819      	ldreq	r1, [r3, #0]
 8009f2a:	685b      	ldreq	r3, [r3, #4]
 8009f2c:	1949      	addeq	r1, r1, r5
 8009f2e:	6021      	streq	r1, [r4, #0]
 8009f30:	e7ed      	b.n	8009f0e <_free_r+0x22>
 8009f32:	461a      	mov	r2, r3
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	b10b      	cbz	r3, 8009f3c <_free_r+0x50>
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d9fa      	bls.n	8009f32 <_free_r+0x46>
 8009f3c:	6811      	ldr	r1, [r2, #0]
 8009f3e:	1855      	adds	r5, r2, r1
 8009f40:	42a5      	cmp	r5, r4
 8009f42:	d10b      	bne.n	8009f5c <_free_r+0x70>
 8009f44:	6824      	ldr	r4, [r4, #0]
 8009f46:	4421      	add	r1, r4
 8009f48:	1854      	adds	r4, r2, r1
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	6011      	str	r1, [r2, #0]
 8009f4e:	d1e0      	bne.n	8009f12 <_free_r+0x26>
 8009f50:	681c      	ldr	r4, [r3, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	6053      	str	r3, [r2, #4]
 8009f56:	4421      	add	r1, r4
 8009f58:	6011      	str	r1, [r2, #0]
 8009f5a:	e7da      	b.n	8009f12 <_free_r+0x26>
 8009f5c:	d902      	bls.n	8009f64 <_free_r+0x78>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	6003      	str	r3, [r0, #0]
 8009f62:	e7d6      	b.n	8009f12 <_free_r+0x26>
 8009f64:	6825      	ldr	r5, [r4, #0]
 8009f66:	1961      	adds	r1, r4, r5
 8009f68:	428b      	cmp	r3, r1
 8009f6a:	bf04      	itt	eq
 8009f6c:	6819      	ldreq	r1, [r3, #0]
 8009f6e:	685b      	ldreq	r3, [r3, #4]
 8009f70:	6063      	str	r3, [r4, #4]
 8009f72:	bf04      	itt	eq
 8009f74:	1949      	addeq	r1, r1, r5
 8009f76:	6021      	streq	r1, [r4, #0]
 8009f78:	6054      	str	r4, [r2, #4]
 8009f7a:	e7ca      	b.n	8009f12 <_free_r+0x26>
 8009f7c:	b003      	add	sp, #12
 8009f7e:	bd30      	pop	{r4, r5, pc}
 8009f80:	200024f0 	.word	0x200024f0

08009f84 <sbrk_aligned>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	4e0e      	ldr	r6, [pc, #56]	; (8009fc0 <sbrk_aligned+0x3c>)
 8009f88:	460c      	mov	r4, r1
 8009f8a:	6831      	ldr	r1, [r6, #0]
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	b911      	cbnz	r1, 8009f96 <sbrk_aligned+0x12>
 8009f90:	f000 f8bc 	bl	800a10c <_sbrk_r>
 8009f94:	6030      	str	r0, [r6, #0]
 8009f96:	4621      	mov	r1, r4
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f000 f8b7 	bl	800a10c <_sbrk_r>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	d00a      	beq.n	8009fb8 <sbrk_aligned+0x34>
 8009fa2:	1cc4      	adds	r4, r0, #3
 8009fa4:	f024 0403 	bic.w	r4, r4, #3
 8009fa8:	42a0      	cmp	r0, r4
 8009faa:	d007      	beq.n	8009fbc <sbrk_aligned+0x38>
 8009fac:	1a21      	subs	r1, r4, r0
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f000 f8ac 	bl	800a10c <_sbrk_r>
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	d101      	bne.n	8009fbc <sbrk_aligned+0x38>
 8009fb8:	f04f 34ff 	mov.w	r4, #4294967295
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	200024f4 	.word	0x200024f4

08009fc4 <_malloc_r>:
 8009fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc8:	1ccd      	adds	r5, r1, #3
 8009fca:	f025 0503 	bic.w	r5, r5, #3
 8009fce:	3508      	adds	r5, #8
 8009fd0:	2d0c      	cmp	r5, #12
 8009fd2:	bf38      	it	cc
 8009fd4:	250c      	movcc	r5, #12
 8009fd6:	2d00      	cmp	r5, #0
 8009fd8:	4607      	mov	r7, r0
 8009fda:	db01      	blt.n	8009fe0 <_malloc_r+0x1c>
 8009fdc:	42a9      	cmp	r1, r5
 8009fde:	d905      	bls.n	8009fec <_malloc_r+0x28>
 8009fe0:	230c      	movs	r3, #12
 8009fe2:	603b      	str	r3, [r7, #0]
 8009fe4:	2600      	movs	r6, #0
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fec:	4e2e      	ldr	r6, [pc, #184]	; (800a0a8 <_malloc_r+0xe4>)
 8009fee:	f000 f89d 	bl	800a12c <__malloc_lock>
 8009ff2:	6833      	ldr	r3, [r6, #0]
 8009ff4:	461c      	mov	r4, r3
 8009ff6:	bb34      	cbnz	r4, 800a046 <_malloc_r+0x82>
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	f7ff ffc2 	bl	8009f84 <sbrk_aligned>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	4604      	mov	r4, r0
 800a004:	d14d      	bne.n	800a0a2 <_malloc_r+0xde>
 800a006:	6834      	ldr	r4, [r6, #0]
 800a008:	4626      	mov	r6, r4
 800a00a:	2e00      	cmp	r6, #0
 800a00c:	d140      	bne.n	800a090 <_malloc_r+0xcc>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	4631      	mov	r1, r6
 800a012:	4638      	mov	r0, r7
 800a014:	eb04 0803 	add.w	r8, r4, r3
 800a018:	f000 f878 	bl	800a10c <_sbrk_r>
 800a01c:	4580      	cmp	r8, r0
 800a01e:	d13a      	bne.n	800a096 <_malloc_r+0xd2>
 800a020:	6821      	ldr	r1, [r4, #0]
 800a022:	3503      	adds	r5, #3
 800a024:	1a6d      	subs	r5, r5, r1
 800a026:	f025 0503 	bic.w	r5, r5, #3
 800a02a:	3508      	adds	r5, #8
 800a02c:	2d0c      	cmp	r5, #12
 800a02e:	bf38      	it	cc
 800a030:	250c      	movcc	r5, #12
 800a032:	4629      	mov	r1, r5
 800a034:	4638      	mov	r0, r7
 800a036:	f7ff ffa5 	bl	8009f84 <sbrk_aligned>
 800a03a:	3001      	adds	r0, #1
 800a03c:	d02b      	beq.n	800a096 <_malloc_r+0xd2>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	442b      	add	r3, r5
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	e00e      	b.n	800a064 <_malloc_r+0xa0>
 800a046:	6822      	ldr	r2, [r4, #0]
 800a048:	1b52      	subs	r2, r2, r5
 800a04a:	d41e      	bmi.n	800a08a <_malloc_r+0xc6>
 800a04c:	2a0b      	cmp	r2, #11
 800a04e:	d916      	bls.n	800a07e <_malloc_r+0xba>
 800a050:	1961      	adds	r1, r4, r5
 800a052:	42a3      	cmp	r3, r4
 800a054:	6025      	str	r5, [r4, #0]
 800a056:	bf18      	it	ne
 800a058:	6059      	strne	r1, [r3, #4]
 800a05a:	6863      	ldr	r3, [r4, #4]
 800a05c:	bf08      	it	eq
 800a05e:	6031      	streq	r1, [r6, #0]
 800a060:	5162      	str	r2, [r4, r5]
 800a062:	604b      	str	r3, [r1, #4]
 800a064:	4638      	mov	r0, r7
 800a066:	f104 060b 	add.w	r6, r4, #11
 800a06a:	f000 f865 	bl	800a138 <__malloc_unlock>
 800a06e:	f026 0607 	bic.w	r6, r6, #7
 800a072:	1d23      	adds	r3, r4, #4
 800a074:	1af2      	subs	r2, r6, r3
 800a076:	d0b6      	beq.n	8009fe6 <_malloc_r+0x22>
 800a078:	1b9b      	subs	r3, r3, r6
 800a07a:	50a3      	str	r3, [r4, r2]
 800a07c:	e7b3      	b.n	8009fe6 <_malloc_r+0x22>
 800a07e:	6862      	ldr	r2, [r4, #4]
 800a080:	42a3      	cmp	r3, r4
 800a082:	bf0c      	ite	eq
 800a084:	6032      	streq	r2, [r6, #0]
 800a086:	605a      	strne	r2, [r3, #4]
 800a088:	e7ec      	b.n	800a064 <_malloc_r+0xa0>
 800a08a:	4623      	mov	r3, r4
 800a08c:	6864      	ldr	r4, [r4, #4]
 800a08e:	e7b2      	b.n	8009ff6 <_malloc_r+0x32>
 800a090:	4634      	mov	r4, r6
 800a092:	6876      	ldr	r6, [r6, #4]
 800a094:	e7b9      	b.n	800a00a <_malloc_r+0x46>
 800a096:	230c      	movs	r3, #12
 800a098:	603b      	str	r3, [r7, #0]
 800a09a:	4638      	mov	r0, r7
 800a09c:	f000 f84c 	bl	800a138 <__malloc_unlock>
 800a0a0:	e7a1      	b.n	8009fe6 <_malloc_r+0x22>
 800a0a2:	6025      	str	r5, [r4, #0]
 800a0a4:	e7de      	b.n	800a064 <_malloc_r+0xa0>
 800a0a6:	bf00      	nop
 800a0a8:	200024f0 	.word	0x200024f0

0800a0ac <_realloc_r>:
 800a0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b0:	4680      	mov	r8, r0
 800a0b2:	4614      	mov	r4, r2
 800a0b4:	460e      	mov	r6, r1
 800a0b6:	b921      	cbnz	r1, 800a0c2 <_realloc_r+0x16>
 800a0b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0bc:	4611      	mov	r1, r2
 800a0be:	f7ff bf81 	b.w	8009fc4 <_malloc_r>
 800a0c2:	b92a      	cbnz	r2, 800a0d0 <_realloc_r+0x24>
 800a0c4:	f7ff ff12 	bl	8009eec <_free_r>
 800a0c8:	4625      	mov	r5, r4
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0d0:	f000 f838 	bl	800a144 <_malloc_usable_size_r>
 800a0d4:	4284      	cmp	r4, r0
 800a0d6:	4607      	mov	r7, r0
 800a0d8:	d802      	bhi.n	800a0e0 <_realloc_r+0x34>
 800a0da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0de:	d812      	bhi.n	800a106 <_realloc_r+0x5a>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	f7ff ff6e 	bl	8009fc4 <_malloc_r>
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d0ed      	beq.n	800a0ca <_realloc_r+0x1e>
 800a0ee:	42bc      	cmp	r4, r7
 800a0f0:	4622      	mov	r2, r4
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	bf28      	it	cs
 800a0f6:	463a      	movcs	r2, r7
 800a0f8:	f7ff fbb8 	bl	800986c <memcpy>
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4640      	mov	r0, r8
 800a100:	f7ff fef4 	bl	8009eec <_free_r>
 800a104:	e7e1      	b.n	800a0ca <_realloc_r+0x1e>
 800a106:	4635      	mov	r5, r6
 800a108:	e7df      	b.n	800a0ca <_realloc_r+0x1e>
	...

0800a10c <_sbrk_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4d06      	ldr	r5, [pc, #24]	; (800a128 <_sbrk_r+0x1c>)
 800a110:	2300      	movs	r3, #0
 800a112:	4604      	mov	r4, r0
 800a114:	4608      	mov	r0, r1
 800a116:	602b      	str	r3, [r5, #0]
 800a118:	f7f7 fa40 	bl	800159c <_sbrk>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	d102      	bne.n	800a126 <_sbrk_r+0x1a>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	b103      	cbz	r3, 800a126 <_sbrk_r+0x1a>
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	200024f8 	.word	0x200024f8

0800a12c <__malloc_lock>:
 800a12c:	4801      	ldr	r0, [pc, #4]	; (800a134 <__malloc_lock+0x8>)
 800a12e:	f000 b811 	b.w	800a154 <__retarget_lock_acquire_recursive>
 800a132:	bf00      	nop
 800a134:	200024fc 	.word	0x200024fc

0800a138 <__malloc_unlock>:
 800a138:	4801      	ldr	r0, [pc, #4]	; (800a140 <__malloc_unlock+0x8>)
 800a13a:	f000 b80c 	b.w	800a156 <__retarget_lock_release_recursive>
 800a13e:	bf00      	nop
 800a140:	200024fc 	.word	0x200024fc

0800a144 <_malloc_usable_size_r>:
 800a144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a148:	1f18      	subs	r0, r3, #4
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bfbc      	itt	lt
 800a14e:	580b      	ldrlt	r3, [r1, r0]
 800a150:	18c0      	addlt	r0, r0, r3
 800a152:	4770      	bx	lr

0800a154 <__retarget_lock_acquire_recursive>:
 800a154:	4770      	bx	lr

0800a156 <__retarget_lock_release_recursive>:
 800a156:	4770      	bx	lr

0800a158 <_init>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	bf00      	nop
 800a15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15e:	bc08      	pop	{r3}
 800a160:	469e      	mov	lr, r3
 800a162:	4770      	bx	lr

0800a164 <_fini>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	bf00      	nop
 800a168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16a:	bc08      	pop	{r3}
 800a16c:	469e      	mov	lr, r3
 800a16e:	4770      	bx	lr
