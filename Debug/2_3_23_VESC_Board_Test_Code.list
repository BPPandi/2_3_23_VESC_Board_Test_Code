
2_3_23_VESC_Board_Test_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ffc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a18c  0800a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2b8  0800a2b8  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2b8  0800a2b8  0001a2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2c0  0800a2c0  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2c0  0800a2c0  0001a2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2c4  0800a2c4  0001a2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  0800a2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020760  2**0
                  CONTENTS
 10 .bss          00001da0  20000760  20000760  00020760  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002500  20002500  00020760  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151e0  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000326f  00000000  00000000  00035970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00038be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e0  00000000  00000000  00039e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023933  00000000  00000000  0003af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165ce  00000000  00000000  0005e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cec3a  00000000  00000000  00074e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143a53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000500c  00000000  00000000  00143aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000760 	.word	0x20000760
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a174 	.word	0x0800a174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000764 	.word	0x20000764
 80001cc:	0800a174 	.word	0x0800a174

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ledBlink>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ledBlink()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	for (int ledCount=0;ledCount<6;ledCount++)
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	e00a      	b.n	80005a6 <ledBlink+0x22>
	{
		HAL_GPIO_TogglePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin);
 8000590:	2103      	movs	r1, #3
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <ledBlink+0x3c>)
 8000594:	f001 ffdf 	bl	8002556 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f001 f8f0 	bl	8001780 <HAL_Delay>
	for (int ledCount=0;ledCount<6;ledCount++)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3301      	adds	r3, #1
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	ddf1      	ble.n	8000590 <ledBlink+0xc>
	}
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2103      	movs	r1, #3
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <ledBlink+0x3c>)
 80005b2:	f001 ffb7 	bl	8002524 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020400 	.word	0x40020400

080005c4 <USBTest>:

void USBTest()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
	char *data = "Hello ST MicroController\r\n";
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <USBTest+0x2c>)
 80005cc:	607b      	str	r3, [r7, #4]
	CDC_Transmit_FS((uint8_t *)data, strlen(data));
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff fdfe 	bl	80001d0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f008 fcce 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f001 f8cc 	bl	8001780 <HAL_Delay>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	0800a18c 	.word	0x0800a18c

080005f4 <DRV8301_Enable>:
void DRV8301_Enable()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2120      	movs	r1, #32
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <DRV8301_Enable+0x14>)
 80005fe:	f001 ff91 	bl	8002524 <HAL_GPIO_WritePin>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020400 	.word	0x40020400

0800060c <DRV8301_Disable>:
void DRV8301_Disable()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, EN_GATE_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2120      	movs	r1, #32
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <DRV8301_Disable+0x14>)
 8000616:	f001 ff85 	bl	8002524 <HAL_GPIO_WritePin>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40020400 	.word	0x40020400

08000624 <DRV8301_NormalPWM>:
void DRV8301_NormalPWM()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 51;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 800062a:	2233      	movs	r2, #51	; 0x33
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4814      	ldr	r0, [pc, #80]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000632:	f003 ff69 	bl	8004508 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000636:	2100      	movs	r1, #0
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800063a:	f004 fe01 	bl	8005240 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f001 f89e 	bl	8001780 <HAL_Delay>
	TIM1->CCR2 = 51;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 8000646:	2233      	movs	r2, #51	; 0x33
 8000648:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800064a:	2104      	movs	r1, #4
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800064e:	f003 ff5b 	bl	8004508 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000652:	2104      	movs	r1, #4
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000656:	f004 fdf3 	bl	8005240 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f001 f890 	bl	8001780 <HAL_Delay>
	TIM1->CCR3 = 51;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <DRV8301_NormalPWM+0x5c>)
 8000662:	2233      	movs	r2, #51	; 0x33
 8000664:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000666:	2108      	movs	r1, #8
 8000668:	4806      	ldr	r0, [pc, #24]	; (8000684 <DRV8301_NormalPWM+0x60>)
 800066a:	f003 ff4d 	bl	8004508 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800066e:	2108      	movs	r1, #8
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <DRV8301_NormalPWM+0x60>)
 8000672:	f004 fde5 	bl	8005240 <HAL_TIMEx_PWMN_Start>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f001 f882 	bl	8001780 <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010000 	.word	0x40010000
 8000684:	200007c8 	.word	0x200007c8

08000688 <delay_us>:
void delay_us (uint16_t us)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <delay_us+0x30>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 800069a:	bf00      	nop
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <delay_us+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d3f9      	bcc.n	800069c <delay_us+0x14>
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000810 	.word	0x20000810

080006bc <DRV8301_CommutationPWM>:
void DRV8301_CommutationPWM()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	for(k=0;k<73;k++)
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
 80006c6:	e03f      	b.n	8000748 <DRV8301_CommutationPWM+0x8c>
	{
		PhaseA = PhaseA +1;
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006d2:	801a      	strh	r2, [r3, #0]
		TIM1->CCR1 = PhaseA_wave[PhaseA];
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <DRV8301_CommutationPWM+0xb4>)
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <DRV8301_CommutationPWM+0xb8>)
 80006de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006e2:	6353      	str	r3, [r2, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006e4:	2100      	movs	r1, #0
 80006e6:	4824      	ldr	r0, [pc, #144]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 80006e8:	f003 ff0e 	bl	8004508 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80006ec:	2100      	movs	r1, #0
 80006ee:	4822      	ldr	r0, [pc, #136]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 80006f0:	f004 fda6 	bl	8005240 <HAL_TIMEx_PWMN_Start>
		TIM1->CCR2 = PhaseB_wave[PhaseA];
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <DRV8301_CommutationPWM+0xb4>)
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <DRV8301_CommutationPWM+0xc0>)
 80006fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000702:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000704:	2104      	movs	r1, #4
 8000706:	481c      	ldr	r0, [pc, #112]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000708:	f003 fefe 	bl	8004508 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000710:	f004 fd96 	bl	8005240 <HAL_TIMEx_PWMN_Start>
		TIM1->CCR3 = PhaseC_wave[PhaseA];
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	4a15      	ldr	r2, [pc, #84]	; (8000770 <DRV8301_CommutationPWM+0xb4>)
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <DRV8301_CommutationPWM+0xc4>)
 800071e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000722:	63d3      	str	r3, [r2, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000724:	2108      	movs	r1, #8
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000728:	f003 feee 	bl	8004508 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800072c:	2108      	movs	r1, #8
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <DRV8301_CommutationPWM+0xbc>)
 8000730:	f004 fd86 	bl	8005240 <HAL_TIMEx_PWMN_Start>
		delay_us(330);
 8000734:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8000738:	f7ff ffa6 	bl	8000688 <delay_us>
	for(k=0;k<73;k++)
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 8000746:	801a      	strh	r2, [r3, #0]
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	2b48      	cmp	r3, #72	; 0x48
 800074e:	d9bb      	bls.n	80006c8 <DRV8301_CommutationPWM+0xc>
	}
	if(k>=73)
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	2b48      	cmp	r3, #72	; 0x48
 8000756:	d905      	bls.n	8000764 <DRV8301_CommutationPWM+0xa8>
	{
		PhaseA=0;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <DRV8301_CommutationPWM+0xb0>)
 800075a:	2200      	movs	r2, #0
 800075c:	801a      	strh	r2, [r3, #0]
		k=0;
 800075e:	4b02      	ldr	r3, [pc, #8]	; (8000768 <DRV8301_CommutationPWM+0xac>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
	}
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000077e 	.word	0x2000077e
 800076c:	2000077c 	.word	0x2000077c
 8000770:	40010000 	.word	0x40010000
 8000774:	20000000 	.word	0x20000000
 8000778:	200007c8 	.word	0x200007c8
 800077c:	20000200 	.word	0x20000200
 8000780:	20000400 	.word	0x20000400

08000784 <VSENS_1>:
void VSENS_1()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_0;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <VSENS_1+0x2c>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <VSENS_1+0x2c>)
 8000790:	2201      	movs	r2, #1
 8000792:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <VSENS_1+0x2c>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	4905      	ldr	r1, [pc, #20]	; (80007b0 <VSENS_1+0x2c>)
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <VSENS_1+0x30>)
 800079e:	f001 f9f5 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <VSENS_1+0x28>
	{
	Error_Handler();
 80007a8:	f000 fda2 	bl	80012f0 <Error_Handler>
	}
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000858 	.word	0x20000858
 80007b4:	20000780 	.word	0x20000780

080007b8 <VSENS_2>:

void VSENS_2()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_1;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <VSENS_2+0x2c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <VSENS_2+0x2c>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <VSENS_2+0x2c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <VSENS_2+0x2c>)
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <VSENS_2+0x30>)
 80007d2:	f001 f9db 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <VSENS_2+0x28>
	{
	Error_Handler();
 80007dc:	f000 fd88 	bl	80012f0 <Error_Handler>
	}
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000858 	.word	0x20000858
 80007e8:	20000780 	.word	0x20000780

080007ec <VSENS_3>:
void VSENS_3()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_2;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <VSENS_3+0x2c>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <VSENS_3+0x2c>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <VSENS_3+0x2c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	4905      	ldr	r1, [pc, #20]	; (8000818 <VSENS_3+0x2c>)
 8000804:	4805      	ldr	r0, [pc, #20]	; (800081c <VSENS_3+0x30>)
 8000806:	f001 f9c1 	bl	8001b8c <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <VSENS_3+0x28>
	{
	Error_Handler();
 8000810:	f000 fd6e 	bl	80012f0 <Error_Handler>
	}
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000858 	.word	0x20000858
 800081c:	20000780 	.word	0x20000780

08000820 <TEMP_NTC>:
void TEMP_NTC()
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <TEMP_NTC+0x2c>)
 8000826:	2203      	movs	r2, #3
 8000828:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <TEMP_NTC+0x2c>)
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <TEMP_NTC+0x2c>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000836:	4905      	ldr	r1, [pc, #20]	; (800084c <TEMP_NTC+0x2c>)
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <TEMP_NTC+0x30>)
 800083a:	f001 f9a7 	bl	8001b8c <HAL_ADC_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <TEMP_NTC+0x28>
	{
	Error_Handler();
 8000844:	f000 fd54 	bl	80012f0 <Error_Handler>
	}
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000858 	.word	0x20000858
 8000850:	20000780 	.word	0x20000780

08000854 <ADC_EXT1>:
void ADC_EXT1()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_5;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <ADC_EXT1+0x2c>)
 800085a:	2205      	movs	r2, #5
 800085c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <ADC_EXT1+0x2c>)
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <ADC_EXT1+0x2c>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <ADC_EXT1+0x2c>)
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <ADC_EXT1+0x30>)
 800086e:	f001 f98d 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <ADC_EXT1+0x28>
	{
	Error_Handler();
 8000878:	f000 fd3a 	bl	80012f0 <Error_Handler>
	}
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000858 	.word	0x20000858
 8000884:	20000780 	.word	0x20000780

08000888 <ADC_EXT2>:
void ADC_EXT2()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_6;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <ADC_EXT2+0x2c>)
 800088e:	2206      	movs	r2, #6
 8000890:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <ADC_EXT2+0x2c>)
 8000894:	2201      	movs	r2, #1
 8000896:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <ADC_EXT2+0x2c>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089e:	4905      	ldr	r1, [pc, #20]	; (80008b4 <ADC_EXT2+0x2c>)
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <ADC_EXT2+0x30>)
 80008a2:	f001 f973 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <ADC_EXT2+0x28>
	{
	Error_Handler();
 80008ac:	f000 fd20 	bl	80012f0 <Error_Handler>
	}
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000858 	.word	0x20000858
 80008b8:	20000780 	.word	0x20000780

080008bc <CURREN_1>:
void CURREN_1()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_10;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <CURREN_1+0x2c>)
 80008c2:	220a      	movs	r2, #10
 80008c4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <CURREN_1+0x2c>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <CURREN_1+0x2c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	4905      	ldr	r1, [pc, #20]	; (80008e8 <CURREN_1+0x2c>)
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <CURREN_1+0x30>)
 80008d6:	f001 f959 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <CURREN_1+0x28>
	{
	Error_Handler();
 80008e0:	f000 fd06 	bl	80012f0 <Error_Handler>
	}
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000858 	.word	0x20000858
 80008ec:	20000780 	.word	0x20000780

080008f0 <CURREN_2>:
void CURREN_2()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_11;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <CURREN_2+0x2c>)
 80008f6:	220b      	movs	r2, #11
 80008f8:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <CURREN_2+0x2c>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <CURREN_2+0x2c>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000906:	4905      	ldr	r1, [pc, #20]	; (800091c <CURREN_2+0x2c>)
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <CURREN_2+0x30>)
 800090a:	f001 f93f 	bl	8001b8c <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <CURREN_2+0x28>
	{
	Error_Handler();
 8000914:	f000 fcec 	bl	80012f0 <Error_Handler>
	}
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000858 	.word	0x20000858
 8000920:	20000780 	.word	0x20000780

08000924 <CURREN_3>:
void CURREN_3()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_12;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <CURREN_3+0x2c>)
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <CURREN_3+0x2c>)
 8000930:	2201      	movs	r2, #1
 8000932:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <CURREN_3+0x2c>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093a:	4905      	ldr	r1, [pc, #20]	; (8000950 <CURREN_3+0x2c>)
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <CURREN_3+0x30>)
 800093e:	f001 f925 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <CURREN_3+0x28>
	{
	Error_Handler();
 8000948:	f000 fcd2 	bl	80012f0 <Error_Handler>
	}
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000858 	.word	0x20000858
 8000954:	20000780 	.word	0x20000780

08000958 <TEMP_MOTOR>:
void TEMP_MOTOR()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_14;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <TEMP_MOTOR+0x2c>)
 800095e:	220e      	movs	r2, #14
 8000960:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <TEMP_MOTOR+0x2c>)
 8000964:	2201      	movs	r2, #1
 8000966:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <TEMP_MOTOR+0x2c>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	4905      	ldr	r1, [pc, #20]	; (8000984 <TEMP_MOTOR+0x2c>)
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <TEMP_MOTOR+0x30>)
 8000972:	f001 f90b 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <TEMP_MOTOR+0x28>
	{
	Error_Handler();
 800097c:	f000 fcb8 	bl	80012f0 <Error_Handler>
	}
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000858 	.word	0x20000858
 8000988:	20000780 	.word	0x20000780

0800098c <CAAF>:
void CAAF()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	VSENS_1();
 8000990:	f7ff fef8 	bl	8000784 <VSENS_1>
	HAL_ADC_Start(&hadc1);
 8000994:	48c0      	ldr	r0, [pc, #768]	; (8000c98 <CAAF+0x30c>)
 8000996:	f000 ff5b 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 800099a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800099e:	48be      	ldr	r0, [pc, #760]	; (8000c98 <CAAF+0x30c>)
 80009a0:	f001 f85b 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 80009a4:	48bc      	ldr	r0, [pc, #752]	; (8000c98 <CAAF+0x30c>)
 80009a6:	f001 f8e3 	bl	8001b70 <HAL_ADC_GetValue>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	4bbb      	ldr	r3, [pc, #748]	; (8000c9c <CAAF+0x310>)
 80009b0:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80009b2:	48b9      	ldr	r0, [pc, #740]	; (8000c98 <CAAF+0x30c>)
 80009b4:	f001 f81e 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[0]);
 80009b8:	4bb8      	ldr	r3, [pc, #736]	; (8000c9c <CAAF+0x310>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	49b8      	ldr	r1, [pc, #736]	; (8000ca0 <CAAF+0x314>)
 80009c0:	48b8      	ldr	r0, [pc, #736]	; (8000ca4 <CAAF+0x318>)
 80009c2:	f008 ff77 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("VSENS_1 = ", 10);
 80009c6:	210a      	movs	r1, #10
 80009c8:	48b7      	ldr	r0, [pc, #732]	; (8000ca8 <CAAF+0x31c>)
 80009ca:	f008 fad7 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 80009ce:	2064      	movs	r0, #100	; 0x64
 80009d0:	f000 fed6 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 80009d4:	2108      	movs	r1, #8
 80009d6:	48b3      	ldr	r0, [pc, #716]	; (8000ca4 <CAAF+0x318>)
 80009d8:	f008 fad0 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 80009dc:	2064      	movs	r0, #100	; 0x64
 80009de:	f000 fecf 	bl	8001780 <HAL_Delay>


	VSENS_2();
 80009e2:	f7ff fee9 	bl	80007b8 <VSENS_2>
	HAL_ADC_Start(&hadc1);
 80009e6:	48ac      	ldr	r0, [pc, #688]	; (8000c98 <CAAF+0x30c>)
 80009e8:	f000 ff32 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 80009ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f0:	48a9      	ldr	r0, [pc, #676]	; (8000c98 <CAAF+0x30c>)
 80009f2:	f001 f832 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 80009f6:	48a8      	ldr	r0, [pc, #672]	; (8000c98 <CAAF+0x30c>)
 80009f8:	f001 f8ba 	bl	8001b70 <HAL_ADC_GetValue>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4ba6      	ldr	r3, [pc, #664]	; (8000c9c <CAAF+0x310>)
 8000a02:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 8000a04:	48a4      	ldr	r0, [pc, #656]	; (8000c98 <CAAF+0x30c>)
 8000a06:	f000 fff5 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[1]);
 8000a0a:	4ba4      	ldr	r3, [pc, #656]	; (8000c9c <CAAF+0x310>)
 8000a0c:	885b      	ldrh	r3, [r3, #2]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	49a3      	ldr	r1, [pc, #652]	; (8000ca0 <CAAF+0x314>)
 8000a12:	48a4      	ldr	r0, [pc, #656]	; (8000ca4 <CAAF+0x318>)
 8000a14:	f008 ff4e 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("VSENS_2 = ", 10);
 8000a18:	210a      	movs	r1, #10
 8000a1a:	48a4      	ldr	r0, [pc, #656]	; (8000cac <CAAF+0x320>)
 8000a1c:	f008 faae 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a20:	2064      	movs	r0, #100	; 0x64
 8000a22:	f000 fead 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000a26:	2108      	movs	r1, #8
 8000a28:	489e      	ldr	r0, [pc, #632]	; (8000ca4 <CAAF+0x318>)
 8000a2a:	f008 faa7 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a2e:	2064      	movs	r0, #100	; 0x64
 8000a30:	f000 fea6 	bl	8001780 <HAL_Delay>

	VSENS_3();
 8000a34:	f7ff feda 	bl	80007ec <VSENS_3>
	HAL_ADC_Start(&hadc1);
 8000a38:	4897      	ldr	r0, [pc, #604]	; (8000c98 <CAAF+0x30c>)
 8000a3a:	f000 ff09 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000a3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a42:	4895      	ldr	r0, [pc, #596]	; (8000c98 <CAAF+0x30c>)
 8000a44:	f001 f809 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8000a48:	4893      	ldr	r0, [pc, #588]	; (8000c98 <CAAF+0x30c>)
 8000a4a:	f001 f891 	bl	8001b70 <HAL_ADC_GetValue>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b92      	ldr	r3, [pc, #584]	; (8000c9c <CAAF+0x310>)
 8000a54:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 8000a56:	4890      	ldr	r0, [pc, #576]	; (8000c98 <CAAF+0x30c>)
 8000a58:	f000 ffcc 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[2]);
 8000a5c:	4b8f      	ldr	r3, [pc, #572]	; (8000c9c <CAAF+0x310>)
 8000a5e:	889b      	ldrh	r3, [r3, #4]
 8000a60:	461a      	mov	r2, r3
 8000a62:	498f      	ldr	r1, [pc, #572]	; (8000ca0 <CAAF+0x314>)
 8000a64:	488f      	ldr	r0, [pc, #572]	; (8000ca4 <CAAF+0x318>)
 8000a66:	f008 ff25 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("VSENS_3 = ", 10);
 8000a6a:	210a      	movs	r1, #10
 8000a6c:	4890      	ldr	r0, [pc, #576]	; (8000cb0 <CAAF+0x324>)
 8000a6e:	f008 fa85 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a72:	2064      	movs	r0, #100	; 0x64
 8000a74:	f000 fe84 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000a78:	2108      	movs	r1, #8
 8000a7a:	488a      	ldr	r0, [pc, #552]	; (8000ca4 <CAAF+0x318>)
 8000a7c:	f008 fa7e 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f000 fe7d 	bl	8001780 <HAL_Delay>

	TEMP_NTC();
 8000a86:	f7ff fecb 	bl	8000820 <TEMP_NTC>
	HAL_ADC_Start(&hadc1);
 8000a8a:	4883      	ldr	r0, [pc, #524]	; (8000c98 <CAAF+0x30c>)
 8000a8c:	f000 fee0 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a94:	4880      	ldr	r0, [pc, #512]	; (8000c98 <CAAF+0x30c>)
 8000a96:	f000 ffe0 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[3] = HAL_ADC_GetValue(&hadc1);
 8000a9a:	487f      	ldr	r0, [pc, #508]	; (8000c98 <CAAF+0x30c>)
 8000a9c:	f001 f868 	bl	8001b70 <HAL_ADC_GetValue>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4b7d      	ldr	r3, [pc, #500]	; (8000c9c <CAAF+0x310>)
 8000aa6:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(&hadc1);
 8000aa8:	487b      	ldr	r0, [pc, #492]	; (8000c98 <CAAF+0x30c>)
 8000aaa:	f000 ffa3 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[3]);
 8000aae:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <CAAF+0x310>)
 8000ab0:	88db      	ldrh	r3, [r3, #6]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	497a      	ldr	r1, [pc, #488]	; (8000ca0 <CAAF+0x314>)
 8000ab6:	487b      	ldr	r0, [pc, #492]	; (8000ca4 <CAAF+0x318>)
 8000ab8:	f008 fefc 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("TEMP_NTC = ",11);
 8000abc:	210b      	movs	r1, #11
 8000abe:	487d      	ldr	r0, [pc, #500]	; (8000cb4 <CAAF+0x328>)
 8000ac0:	f008 fa5c 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000ac4:	2064      	movs	r0, #100	; 0x64
 8000ac6:	f000 fe5b 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000aca:	2108      	movs	r1, #8
 8000acc:	4875      	ldr	r0, [pc, #468]	; (8000ca4 <CAAF+0x318>)
 8000ace:	f008 fa55 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000ad2:	2064      	movs	r0, #100	; 0x64
 8000ad4:	f000 fe54 	bl	8001780 <HAL_Delay>

	ADC_EXT1();
 8000ad8:	f7ff febc 	bl	8000854 <ADC_EXT1>
	HAL_ADC_Start(&hadc1);
 8000adc:	486e      	ldr	r0, [pc, #440]	; (8000c98 <CAAF+0x30c>)
 8000ade:	f000 feb7 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000ae2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ae6:	486c      	ldr	r0, [pc, #432]	; (8000c98 <CAAF+0x30c>)
 8000ae8:	f000 ffb7 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[4] = HAL_ADC_GetValue(&hadc1);
 8000aec:	486a      	ldr	r0, [pc, #424]	; (8000c98 <CAAF+0x30c>)
 8000aee:	f001 f83f 	bl	8001b70 <HAL_ADC_GetValue>
 8000af2:	4603      	mov	r3, r0
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b69      	ldr	r3, [pc, #420]	; (8000c9c <CAAF+0x310>)
 8000af8:	811a      	strh	r2, [r3, #8]
	HAL_ADC_Stop(&hadc1);
 8000afa:	4867      	ldr	r0, [pc, #412]	; (8000c98 <CAAF+0x30c>)
 8000afc:	f000 ff7a 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[4]);
 8000b00:	4b66      	ldr	r3, [pc, #408]	; (8000c9c <CAAF+0x310>)
 8000b02:	891b      	ldrh	r3, [r3, #8]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4966      	ldr	r1, [pc, #408]	; (8000ca0 <CAAF+0x314>)
 8000b08:	4866      	ldr	r0, [pc, #408]	; (8000ca4 <CAAF+0x318>)
 8000b0a:	f008 fed3 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("ADC_EXT1 = ", 11);
 8000b0e:	210b      	movs	r1, #11
 8000b10:	4869      	ldr	r0, [pc, #420]	; (8000cb8 <CAAF+0x32c>)
 8000b12:	f008 fa33 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f000 fe32 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	4861      	ldr	r0, [pc, #388]	; (8000ca4 <CAAF+0x318>)
 8000b20:	f008 fa2c 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b24:	2064      	movs	r0, #100	; 0x64
 8000b26:	f000 fe2b 	bl	8001780 <HAL_Delay>

	ADC_EXT2();
 8000b2a:	f7ff fead 	bl	8000888 <ADC_EXT2>
	HAL_ADC_Start(&hadc1);
 8000b2e:	485a      	ldr	r0, [pc, #360]	; (8000c98 <CAAF+0x30c>)
 8000b30:	f000 fe8e 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b38:	4857      	ldr	r0, [pc, #348]	; (8000c98 <CAAF+0x30c>)
 8000b3a:	f000 ff8e 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[5] = HAL_ADC_GetValue(&hadc1);
 8000b3e:	4856      	ldr	r0, [pc, #344]	; (8000c98 <CAAF+0x30c>)
 8000b40:	f001 f816 	bl	8001b70 <HAL_ADC_GetValue>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <CAAF+0x310>)
 8000b4a:	815a      	strh	r2, [r3, #10]
	HAL_ADC_Stop(&hadc1);
 8000b4c:	4852      	ldr	r0, [pc, #328]	; (8000c98 <CAAF+0x30c>)
 8000b4e:	f000 ff51 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[5]);
 8000b52:	4b52      	ldr	r3, [pc, #328]	; (8000c9c <CAAF+0x310>)
 8000b54:	895b      	ldrh	r3, [r3, #10]
 8000b56:	461a      	mov	r2, r3
 8000b58:	4951      	ldr	r1, [pc, #324]	; (8000ca0 <CAAF+0x314>)
 8000b5a:	4852      	ldr	r0, [pc, #328]	; (8000ca4 <CAAF+0x318>)
 8000b5c:	f008 feaa 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("ADC_EXT2 = ", 11);
 8000b60:	210b      	movs	r1, #11
 8000b62:	4856      	ldr	r0, [pc, #344]	; (8000cbc <CAAF+0x330>)
 8000b64:	f008 fa0a 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b68:	2064      	movs	r0, #100	; 0x64
 8000b6a:	f000 fe09 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000b6e:	2108      	movs	r1, #8
 8000b70:	484c      	ldr	r0, [pc, #304]	; (8000ca4 <CAAF+0x318>)
 8000b72:	f008 fa03 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000b76:	2064      	movs	r0, #100	; 0x64
 8000b78:	f000 fe02 	bl	8001780 <HAL_Delay>

	CURREN_1();
 8000b7c:	f7ff fe9e 	bl	80008bc <CURREN_1>
	HAL_ADC_Start(&hadc1);
 8000b80:	4845      	ldr	r0, [pc, #276]	; (8000c98 <CAAF+0x30c>)
 8000b82:	f000 fe65 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000b86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b8a:	4843      	ldr	r0, [pc, #268]	; (8000c98 <CAAF+0x30c>)
 8000b8c:	f000 ff65 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[6] = HAL_ADC_GetValue(&hadc1);
 8000b90:	4841      	ldr	r0, [pc, #260]	; (8000c98 <CAAF+0x30c>)
 8000b92:	f000 ffed 	bl	8001b70 <HAL_ADC_GetValue>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <CAAF+0x310>)
 8000b9c:	819a      	strh	r2, [r3, #12]
	HAL_ADC_Stop(&hadc1);
 8000b9e:	483e      	ldr	r0, [pc, #248]	; (8000c98 <CAAF+0x30c>)
 8000ba0:	f000 ff28 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[6]);
 8000ba4:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <CAAF+0x310>)
 8000ba6:	899b      	ldrh	r3, [r3, #12]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	493d      	ldr	r1, [pc, #244]	; (8000ca0 <CAAF+0x314>)
 8000bac:	483d      	ldr	r0, [pc, #244]	; (8000ca4 <CAAF+0x318>)
 8000bae:	f008 fe81 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("CURREN_1 = ", 11);
 8000bb2:	210b      	movs	r1, #11
 8000bb4:	4842      	ldr	r0, [pc, #264]	; (8000cc0 <CAAF+0x334>)
 8000bb6:	f008 f9e1 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000bba:	2064      	movs	r0, #100	; 0x64
 8000bbc:	f000 fde0 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	4838      	ldr	r0, [pc, #224]	; (8000ca4 <CAAF+0x318>)
 8000bc4:	f008 f9da 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000bc8:	2064      	movs	r0, #100	; 0x64
 8000bca:	f000 fdd9 	bl	8001780 <HAL_Delay>

	CURREN_2();
 8000bce:	f7ff fe8f 	bl	80008f0 <CURREN_2>
	HAL_ADC_Start(&hadc1);
 8000bd2:	4831      	ldr	r0, [pc, #196]	; (8000c98 <CAAF+0x30c>)
 8000bd4:	f000 fe3c 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bdc:	482e      	ldr	r0, [pc, #184]	; (8000c98 <CAAF+0x30c>)
 8000bde:	f000 ff3c 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[7] = HAL_ADC_GetValue(&hadc1);
 8000be2:	482d      	ldr	r0, [pc, #180]	; (8000c98 <CAAF+0x30c>)
 8000be4:	f000 ffc4 	bl	8001b70 <HAL_ADC_GetValue>
 8000be8:	4603      	mov	r3, r0
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <CAAF+0x310>)
 8000bee:	81da      	strh	r2, [r3, #14]
	HAL_ADC_Stop(&hadc1);
 8000bf0:	4829      	ldr	r0, [pc, #164]	; (8000c98 <CAAF+0x30c>)
 8000bf2:	f000 feff 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[7]);
 8000bf6:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <CAAF+0x310>)
 8000bf8:	89db      	ldrh	r3, [r3, #14]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4928      	ldr	r1, [pc, #160]	; (8000ca0 <CAAF+0x314>)
 8000bfe:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <CAAF+0x318>)
 8000c00:	f008 fe58 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("CURREN_2 = ", 11);
 8000c04:	210b      	movs	r1, #11
 8000c06:	482f      	ldr	r0, [pc, #188]	; (8000cc4 <CAAF+0x338>)
 8000c08:	f008 f9b8 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c0c:	2064      	movs	r0, #100	; 0x64
 8000c0e:	f000 fdb7 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000c12:	2108      	movs	r1, #8
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <CAAF+0x318>)
 8000c16:	f008 f9b1 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c1a:	2064      	movs	r0, #100	; 0x64
 8000c1c:	f000 fdb0 	bl	8001780 <HAL_Delay>

	CURREN_3();
 8000c20:	f7ff fe80 	bl	8000924 <CURREN_3>
	HAL_ADC_Start(&hadc1);
 8000c24:	481c      	ldr	r0, [pc, #112]	; (8000c98 <CAAF+0x30c>)
 8000c26:	f000 fe13 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000c2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c2e:	481a      	ldr	r0, [pc, #104]	; (8000c98 <CAAF+0x30c>)
 8000c30:	f000 ff13 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[8] = HAL_ADC_GetValue(&hadc1);
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <CAAF+0x30c>)
 8000c36:	f000 ff9b 	bl	8001b70 <HAL_ADC_GetValue>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <CAAF+0x310>)
 8000c40:	821a      	strh	r2, [r3, #16]
	HAL_ADC_Stop(&hadc1);
 8000c42:	4815      	ldr	r0, [pc, #84]	; (8000c98 <CAAF+0x30c>)
 8000c44:	f000 fed6 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[8]);
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <CAAF+0x310>)
 8000c4a:	8a1b      	ldrh	r3, [r3, #16]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4914      	ldr	r1, [pc, #80]	; (8000ca0 <CAAF+0x314>)
 8000c50:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <CAAF+0x318>)
 8000c52:	f008 fe2f 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("CURREN_3 = ", 11);
 8000c56:	210b      	movs	r1, #11
 8000c58:	481b      	ldr	r0, [pc, #108]	; (8000cc8 <CAAF+0x33c>)
 8000c5a:	f008 f98f 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c5e:	2064      	movs	r0, #100	; 0x64
 8000c60:	f000 fd8e 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000c64:	2108      	movs	r1, #8
 8000c66:	480f      	ldr	r0, [pc, #60]	; (8000ca4 <CAAF+0x318>)
 8000c68:	f008 f988 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000c6c:	2064      	movs	r0, #100	; 0x64
 8000c6e:	f000 fd87 	bl	8001780 <HAL_Delay>

	TEMP_MOTOR();
 8000c72:	f7ff fe71 	bl	8000958 <TEMP_MOTOR>
	HAL_ADC_Start(&hadc1);
 8000c76:	4808      	ldr	r0, [pc, #32]	; (8000c98 <CAAF+0x30c>)
 8000c78:	f000 fdea 	bl	8001850 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8000c7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <CAAF+0x30c>)
 8000c82:	f000 feea 	bl	8001a5a <HAL_ADC_PollForConversion>
	ADC_VAL[9] = HAL_ADC_GetValue(&hadc1);
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <CAAF+0x30c>)
 8000c88:	f000 ff72 	bl	8001b70 <HAL_ADC_GetValue>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <CAAF+0x310>)
 8000c92:	825a      	strh	r2, [r3, #18]
 8000c94:	e01a      	b.n	8000ccc <CAAF+0x340>
 8000c96:	bf00      	nop
 8000c98:	20000780 	.word	0x20000780
 8000c9c:	200008a8 	.word	0x200008a8
 8000ca0:	0800a1a8 	.word	0x0800a1a8
 8000ca4:	200008bc 	.word	0x200008bc
 8000ca8:	0800a1b0 	.word	0x0800a1b0
 8000cac:	0800a1bc 	.word	0x0800a1bc
 8000cb0:	0800a1c8 	.word	0x0800a1c8
 8000cb4:	0800a1d4 	.word	0x0800a1d4
 8000cb8:	0800a1e0 	.word	0x0800a1e0
 8000cbc:	0800a1ec 	.word	0x0800a1ec
 8000cc0:	0800a1f8 	.word	0x0800a1f8
 8000cc4:	0800a204 	.word	0x0800a204
 8000cc8:	0800a210 	.word	0x0800a210
	HAL_ADC_Stop(&hadc1);
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <CAAF+0x374>)
 8000cce:	f000 fe91 	bl	80019f4 <HAL_ADC_Stop>
	sprintf(strVal,"%hu\r\n",ADC_VAL[9]);
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <CAAF+0x378>)
 8000cd4:	8a5b      	ldrh	r3, [r3, #18]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	490b      	ldr	r1, [pc, #44]	; (8000d08 <CAAF+0x37c>)
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <CAAF+0x380>)
 8000cdc:	f008 fdea 	bl	80098b4 <siprintf>
	CDC_Transmit_FS("TEMP_MOTOR = ", 13);
 8000ce0:	210d      	movs	r1, #13
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <CAAF+0x384>)
 8000ce4:	f008 f94a 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000ce8:	2064      	movs	r0, #100	; 0x64
 8000cea:	f000 fd49 	bl	8001780 <HAL_Delay>
	CDC_Transmit_FS(strVal, 8);
 8000cee:	2108      	movs	r1, #8
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <CAAF+0x380>)
 8000cf2:	f008 f943 	bl	8008f7c <CDC_Transmit_FS>
	HAL_Delay(100);
 8000cf6:	2064      	movs	r0, #100	; 0x64
 8000cf8:	f000 fd42 	bl	8001780 <HAL_Delay>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000780 	.word	0x20000780
 8000d04:	200008a8 	.word	0x200008a8
 8000d08:	0800a1a8 	.word	0x0800a1a8
 8000d0c:	200008bc 	.word	0x200008bc
 8000d10:	0800a21c 	.word	0x0800a21c

08000d14 <IFunction>:
void IFunction()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	if (buffer[0] == '1')
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <IFunction+0x5c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b31      	cmp	r3, #49	; 0x31
 8000d1e:	d101      	bne.n	8000d24 <IFunction+0x10>
	{
		ledBlink();
 8000d20:	f7ff fc30 	bl	8000584 <ledBlink>
	}
	if (buffer[0] == '2')
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <IFunction+0x5c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b32      	cmp	r3, #50	; 0x32
 8000d2a:	d101      	bne.n	8000d30 <IFunction+0x1c>
	{
		USBTest();
 8000d2c:	f7ff fc4a 	bl	80005c4 <USBTest>
	}
	if (buffer[0] == '3')
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <IFunction+0x5c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b33      	cmp	r3, #51	; 0x33
 8000d36:	d101      	bne.n	8000d3c <IFunction+0x28>
	{
		CAAF();
 8000d38:	f7ff fe28 	bl	800098c <CAAF>
	}
	if (buffer[0] == '4')
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <IFunction+0x5c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b34      	cmp	r3, #52	; 0x34
 8000d42:	d101      	bne.n	8000d48 <IFunction+0x34>
	{
		DRV8301_Enable();
 8000d44:	f7ff fc56 	bl	80005f4 <DRV8301_Enable>
	}
	if (buffer[0] == '5')
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <IFunction+0x5c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b35      	cmp	r3, #53	; 0x35
 8000d4e:	d101      	bne.n	8000d54 <IFunction+0x40>
	{
		DRV8301_Disable();
 8000d50:	f7ff fc5c 	bl	800060c <DRV8301_Disable>
	}
	if (buffer[0] == '6')
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <IFunction+0x5c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b36      	cmp	r3, #54	; 0x36
 8000d5a:	d101      	bne.n	8000d60 <IFunction+0x4c>
	{
		DRV8301_NormalPWM();
 8000d5c:	f7ff fc62 	bl	8000624 <DRV8301_NormalPWM>
	}
	if (buffer[0] == '7')
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <IFunction+0x5c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b37      	cmp	r3, #55	; 0x37
 8000d66:	d101      	bne.n	8000d6c <IFunction+0x58>
	{
		DRV8301_CommutationPWM();
 8000d68:	f7ff fca8 	bl	80006bc <DRV8301_CommutationPWM>
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000868 	.word	0x20000868

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d78:	f000 fc90 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7c:	f000 f812 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 fa4c 	bl	800121c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d84:	f000 f876 	bl	8000e74 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d88:	f000 f944 	bl	8001014 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d8c:	f000 f9fa 	bl	8001184 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d90:	f008 f82c 	bl	8008dec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <main+0x2c>)
 8000d96:	f003 faf5 	bl	8004384 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  IFunction();
 8000d9a:	f7ff ffbb 	bl	8000d14 <IFunction>
 8000d9e:	e7fc      	b.n	8000d9a <main+0x26>
 8000da0:	20000810 	.word	0x20000810

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	; 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2230      	movs	r2, #48	; 0x30
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f008 fd76 	bl	80098a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <SystemClock_Config+0xc8>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	4a26      	ldr	r2, [pc, #152]	; (8000e6c <SystemClock_Config+0xc8>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <SystemClock_Config+0xc8>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <SystemClock_Config+0xcc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <SystemClock_Config+0xcc>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <SystemClock_Config+0xcc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e14:	2310      	movs	r3, #16
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e18:	23c0      	movs	r3, #192	; 0xc0
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fe2b 	bl	8003a84 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e34:	f000 fa5c 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 f88e 	bl	8003f74 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e5e:	f000 fa47 	bl	80012f0 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3750      	adds	r7, #80	; 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e86:	4b60      	ldr	r3, [pc, #384]	; (8001008 <MX_ADC1_Init+0x194>)
 8000e88:	4a60      	ldr	r2, [pc, #384]	; (800100c <MX_ADC1_Init+0x198>)
 8000e8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e8c:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <MX_ADC1_Init+0x194>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e92:	4b5d      	ldr	r3, [pc, #372]	; (8001008 <MX_ADC1_Init+0x194>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e98:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <MX_ADC1_Init+0x194>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e9e:	4b5a      	ldr	r3, [pc, #360]	; (8001008 <MX_ADC1_Init+0x194>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea4:	4b58      	ldr	r3, [pc, #352]	; (8001008 <MX_ADC1_Init+0x194>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eac:	4b56      	ldr	r3, [pc, #344]	; (8001008 <MX_ADC1_Init+0x194>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb2:	4b55      	ldr	r3, [pc, #340]	; (8001008 <MX_ADC1_Init+0x194>)
 8000eb4:	4a56      	ldr	r2, [pc, #344]	; (8001010 <MX_ADC1_Init+0x19c>)
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb8:	4b53      	ldr	r3, [pc, #332]	; (8001008 <MX_ADC1_Init+0x194>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ebe:	4b52      	ldr	r3, [pc, #328]	; (8001008 <MX_ADC1_Init+0x194>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec4:	4b50      	ldr	r3, [pc, #320]	; (8001008 <MX_ADC1_Init+0x194>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <MX_ADC1_Init+0x194>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed2:	484d      	ldr	r0, [pc, #308]	; (8001008 <MX_ADC1_Init+0x194>)
 8000ed4:	f000 fc78 	bl	80017c8 <HAL_ADC_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ede:	f000 fa07 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4845      	ldr	r0, [pc, #276]	; (8001008 <MX_ADC1_Init+0x194>)
 8000ef4:	f000 fe4a 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000efe:	f000 f9f7 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	483e      	ldr	r0, [pc, #248]	; (8001008 <MX_ADC1_Init+0x194>)
 8000f10:	f000 fe3c 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f1a:	f000 f9e9 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f22:	2303      	movs	r3, #3
 8000f24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4837      	ldr	r0, [pc, #220]	; (8001008 <MX_ADC1_Init+0x194>)
 8000f2c:	f000 fe2e 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f36:	f000 f9db 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f3e:	2304      	movs	r3, #4
 8000f40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	4830      	ldr	r0, [pc, #192]	; (8001008 <MX_ADC1_Init+0x194>)
 8000f48:	f000 fe20 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f52:	f000 f9cd 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f56:	2305      	movs	r3, #5
 8000f58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f5a:	2305      	movs	r3, #5
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4829      	ldr	r0, [pc, #164]	; (8001008 <MX_ADC1_Init+0x194>)
 8000f64:	f000 fe12 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f6e:	f000 f9bf 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f72:	2306      	movs	r3, #6
 8000f74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000f76:	2306      	movs	r3, #6
 8000f78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4822      	ldr	r0, [pc, #136]	; (8001008 <MX_ADC1_Init+0x194>)
 8000f80:	f000 fe04 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000f8a:	f000 f9b1 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f8e:	230a      	movs	r3, #10
 8000f90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000f92:	2307      	movs	r3, #7
 8000f94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <MX_ADC1_Init+0x194>)
 8000f9c:	f000 fdf6 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000fa6:	f000 f9a3 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000faa:	230b      	movs	r3, #11
 8000fac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <MX_ADC1_Init+0x194>)
 8000fb8:	f000 fde8 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000fc2:	f000 f995 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000fca:	2309      	movs	r3, #9
 8000fcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_ADC1_Init+0x194>)
 8000fd4:	f000 fdda 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000fde:	f000 f987 	bl	80012f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fe2:	230e      	movs	r3, #14
 8000fe4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <MX_ADC1_Init+0x194>)
 8000ff0:	f000 fdcc 	bl	8001b8c <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8000ffa:	f000 f979 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000780 	.word	0x20000780
 800100c:	40012000 	.word	0x40012000
 8001010:	0f000001 	.word	0x0f000001

08001014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b096      	sub	sp, #88	; 0x58
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f008 fc29 	bl	80098a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001052:	4b4a      	ldr	r3, [pc, #296]	; (800117c <MX_TIM1_Init+0x168>)
 8001054:	4a4a      	ldr	r2, [pc, #296]	; (8001180 <MX_TIM1_Init+0x16c>)
 8001056:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <MX_TIM1_Init+0x168>)
 800105a:	220d      	movs	r2, #13
 800105c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b47      	ldr	r3, [pc, #284]	; (800117c <MX_TIM1_Init+0x168>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 102;
 8001064:	4b45      	ldr	r3, [pc, #276]	; (800117c <MX_TIM1_Init+0x168>)
 8001066:	2266      	movs	r2, #102	; 0x66
 8001068:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b44      	ldr	r3, [pc, #272]	; (800117c <MX_TIM1_Init+0x168>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001070:	4b42      	ldr	r3, [pc, #264]	; (800117c <MX_TIM1_Init+0x168>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001076:	4b41      	ldr	r3, [pc, #260]	; (800117c <MX_TIM1_Init+0x168>)
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800107c:	483f      	ldr	r0, [pc, #252]	; (800117c <MX_TIM1_Init+0x168>)
 800107e:	f003 f931 	bl	80042e4 <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001088:	f000 f932 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001096:	4619      	mov	r1, r3
 8001098:	4838      	ldr	r0, [pc, #224]	; (800117c <MX_TIM1_Init+0x168>)
 800109a:	f003 fcc7 	bl	8004a2c <HAL_TIM_ConfigClockSource>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80010a4:	f000 f924 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010a8:	4834      	ldr	r0, [pc, #208]	; (800117c <MX_TIM1_Init+0x168>)
 80010aa:	f003 f9d3 	bl	8004454 <HAL_TIM_PWM_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80010b4:	f000 f91c 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c4:	4619      	mov	r1, r3
 80010c6:	482d      	ldr	r0, [pc, #180]	; (800117c <MX_TIM1_Init+0x168>)
 80010c8:	f004 f974 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010d2:	f000 f90d 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d6:	2360      	movs	r3, #96	; 0x60
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80010ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	2200      	movs	r2, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	481f      	ldr	r0, [pc, #124]	; (800117c <MX_TIM1_Init+0x168>)
 80010fe:	f003 fbd3 	bl	80048a8 <HAL_TIM_PWM_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001108:	f000 f8f2 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800110c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001110:	2204      	movs	r2, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4819      	ldr	r0, [pc, #100]	; (800117c <MX_TIM1_Init+0x168>)
 8001116:	f003 fbc7 	bl	80048a8 <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001120:	f000 f8e6 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	2208      	movs	r2, #8
 800112a:	4619      	mov	r1, r3
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <MX_TIM1_Init+0x168>)
 800112e:	f003 fbbb 	bl	80048a8 <HAL_TIM_PWM_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001138:	f000 f8da 	bl	80012f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8001148:	2314      	movs	r3, #20
 800114a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001154:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4619      	mov	r1, r3
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_TIM1_Init+0x168>)
 8001160:	f004 f9a4 	bl	80054ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800116a:	f000 f8c1 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <MX_TIM1_Init+0x168>)
 8001170:	f000 f988 	bl	8001484 <HAL_TIM_MspPostInit>

}
 8001174:	bf00      	nop
 8001176:	3758      	adds	r7, #88	; 0x58
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200007c8 	.word	0x200007c8
 8001180:	40010000 	.word	0x40010000

08001184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_TIM2_Init+0x94>)
 80011a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <MX_TIM2_Init+0x94>)
 80011aa:	220e      	movs	r2, #14
 80011ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_TIM2_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <MX_TIM2_Init+0x94>)
 80011b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80011ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_TIM2_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_TIM2_Init+0x94>)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <MX_TIM2_Init+0x94>)
 80011ca:	f003 f88b 	bl	80042e4 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011d4:	f000 f88c 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_TIM2_Init+0x94>)
 80011e6:	f003 fc21 	bl	8004a2c <HAL_TIM_ConfigClockSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011f0:	f000 f87e 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_TIM2_Init+0x94>)
 8001202:	f004 f8d7 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800120c:	f000 f870 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000810 	.word	0x20000810

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a2b      	ldr	r2, [pc, #172]	; (80012e8 <MX_GPIO_Init+0xcc>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_GPIO_Init+0xcc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_GPIO_Init+0xcc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2123      	movs	r1, #35	; 0x23
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <MX_GPIO_Init+0xd0>)
 80012a8:	f001 f93c 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin EN_GATE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin;
 80012ac:	2323      	movs	r3, #35	; 0x23
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <MX_GPIO_Init+0xd0>)
 80012c4:	f000 ff92 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_GPIO_Init+0xd0>)
 80012dc:	f000 ff86 	bl	80021ec <HAL_GPIO_Init>

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <HAL_MspInit+0x4c>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x4c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a24      	ldr	r2, [pc, #144]	; (80013fc <HAL_ADC_MspInit+0xb0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d141      	bne.n	80013f2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_ADC_MspInit+0xb4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = CURREN_1_Pin|CURREN_2_Pin|CURREN_3_Pin|TEMP_MOTOR_Pin;
 80013c2:	2317      	movs	r3, #23
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <HAL_ADC_MspInit+0xb8>)
 80013d6:	f000 ff09 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VSENS_1_Pin|VSENS_2_Pin|VSENS_3_Pin|TEMP_NTC_Pin
 80013da:	236f      	movs	r3, #111	; 0x6f
 80013dc:	617b      	str	r3, [r7, #20]
                          |ADC_EXT1_Pin|ADC_EXT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <HAL_ADC_MspInit+0xbc>)
 80013ee:	f000 fefd 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40012000 	.word	0x40012000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a18      	ldr	r2, [pc, #96]	; (800147c <HAL_TIM_Base_MspInit+0x70>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10e      	bne.n	800143c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_TIM_Base_MspInit+0x74>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <HAL_TIM_Base_MspInit+0x74>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <HAL_TIM_Base_MspInit+0x74>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800143a:	e01a      	b.n	8001472 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001444:	d115      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_TIM_Base_MspInit+0x74>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <HAL_TIM_Base_MspInit+0x74>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_TIM_Base_MspInit+0x74>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	201c      	movs	r0, #28
 8001468:	f000 fe89 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800146c:	201c      	movs	r0, #28
 800146e:	f000 fea2 	bl	80021b6 <HAL_NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40010000 	.word	0x40010000
 8001480:	40023800 	.word	0x40023800

08001484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <HAL_TIM_MspPostInit+0xa8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d13d      	bne.n	8001522 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_TIM_MspPostInit+0xac>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a20      	ldr	r2, [pc, #128]	; (8001530 <HAL_TIM_MspPostInit+0xac>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_TIM_MspPostInit+0xac>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_TIM_MspPostInit+0xac>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a19      	ldr	r2, [pc, #100]	; (8001530 <HAL_TIM_MspPostInit+0xac>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_TIM_MspPostInit+0xac>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 80014de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	480e      	ldr	r0, [pc, #56]	; (8001534 <HAL_TIM_MspPostInit+0xb0>)
 80014fc:	f000 fe76 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 8001500:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001512:	2301      	movs	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4806      	ldr	r0, [pc, #24]	; (8001538 <HAL_TIM_MspPostInit+0xb4>)
 800151e:	f000 fe65 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40010000 	.word	0x40010000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400
 8001538:	40020000 	.word	0x40020000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f8da 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM2_IRQHandler+0x10>)
 8001596:	f003 f87f 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000810 	.word	0x20000810

080015a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <OTG_FS_IRQHandler+0x10>)
 80015aa:	f001 f93e 	bl	800282a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20001dc4 	.word	0x20001dc4

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f008 f924 	bl	8009834 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20020000 	.word	0x20020000
 8001618:	00000400 	.word	0x00000400
 800161c:	200008dc 	.word	0x200008dc
 8001620:	20002500 	.word	0x20002500

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001672:	f7ff ffd7 	bl	8001624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f008 f8e3 	bl	8009840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fb7b 	bl	8000d74 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 800168c:	0800a2c8 	.word	0x0800a2c8
  ldr r2, =_sbss
 8001690:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 8001694:	20002500 	.word	0x20002500

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 fd4f 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fe14 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fd67 	bl	80021d2 <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 fd2f 	bl	800217e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000600 	.word	0x20000600
 8001738:	20000608 	.word	0x20000608
 800173c:	20000604 	.word	0x20000604

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	; (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000608 	.word	0x20000608
 8001764:	200008e0 	.word	0x200008e0

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200008e0 	.word	0x200008e0

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000608 	.word	0x20000608

080017c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e033      	b.n	8001846 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fdb0 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	f043 0202 	orr.w	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fad8 	bl	8001dd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
 8001836:	e001      	b.n	800183c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_ADC_Start+0x1a>
 8001866:	2302      	movs	r3, #2
 8001868:	e0b2      	b.n	80019d0 <HAL_ADC_Start+0x180>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d018      	beq.n	80018b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001890:	4b52      	ldr	r3, [pc, #328]	; (80019dc <HAL_ADC_Start+0x18c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_ADC_Start+0x190>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0c9a      	lsrs	r2, r3, #18
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018a4:	e002      	b.n	80018ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d17a      	bne.n	80019b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018fe:	d106      	bne.n	800190e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	f023 0206 	bic.w	r2, r3, #6
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
 800190c:	e002      	b.n	8001914 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800191c:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <HAL_ADC_Start+0x194>)
 800191e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001928:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	2b00      	cmp	r3, #0
 8001934:	d12a      	bne.n	800198c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2b      	ldr	r2, [pc, #172]	; (80019e8 <HAL_ADC_Start+0x198>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d015      	beq.n	800196c <HAL_ADC_Start+0x11c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a29      	ldr	r2, [pc, #164]	; (80019ec <HAL_ADC_Start+0x19c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d105      	bne.n	8001956 <HAL_ADC_Start+0x106>
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_ADC_Start+0x194>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00a      	beq.n	800196c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a25      	ldr	r2, [pc, #148]	; (80019f0 <HAL_ADC_Start+0x1a0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d136      	bne.n	80019ce <HAL_ADC_Start+0x17e>
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_ADC_Start+0x194>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	2b00      	cmp	r3, #0
 800196a:	d130      	bne.n	80019ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d129      	bne.n	80019ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	e020      	b.n	80019ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <HAL_ADC_Start+0x198>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d11b      	bne.n	80019ce <HAL_ADC_Start+0x17e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d114      	bne.n	80019ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	e00b      	b.n	80019ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f043 0210 	orr.w	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	20000600 	.word	0x20000600
 80019e0:	431bde83 	.word	0x431bde83
 80019e4:	40012300 	.word	0x40012300
 80019e8:	40012000 	.word	0x40012000
 80019ec:	40012100 	.word	0x40012100
 80019f0:	40012200 	.word	0x40012200

080019f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Stop+0x16>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e021      	b.n	8001a4e <HAL_ADC_Stop+0x5a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	f043 0201 	orr.w	r2, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d113      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a86:	d10b      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e063      	b.n	8001b68 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001aa0:	f7ff fe62 	bl	8001768 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aa6:	e021      	b.n	8001aec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aae:	d01d      	beq.n	8001aec <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_ADC_PollForConversion+0x6c>
 8001ab6:	f7ff fe57 	bl	8001768 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d212      	bcs.n	8001aec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d00b      	beq.n	8001aec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f043 0204 	orr.w	r2, r3, #4
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e03d      	b.n	8001b68 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d1d6      	bne.n	8001aa8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f06f 0212 	mvn.w	r2, #18
 8001b02:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d123      	bne.n	8001b66 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d11f      	bne.n	8001b66 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d111      	bne.n	8001b66 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1c>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e105      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x228>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	d925      	bls.n	8001c04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68d9      	ldr	r1, [r3, #12]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b1e      	subs	r3, #30
 8001bce:	2207      	movs	r2, #7
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	400a      	ands	r2, r1
 8001bdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4403      	add	r3, r0
 8001bf6:	3b1e      	subs	r3, #30
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	e022      	b.n	8001c4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	2207      	movs	r2, #7
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	400a      	ands	r2, r1
 8001c26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6919      	ldr	r1, [r3, #16]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4403      	add	r3, r0
 8001c40:	409a      	lsls	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d824      	bhi.n	8001c9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	3b05      	subs	r3, #5
 8001c64:	221f      	movs	r2, #31
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	400a      	ands	r2, r1
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3b05      	subs	r3, #5
 8001c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
 8001c9a:	e04c      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d824      	bhi.n	8001cee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b23      	subs	r3, #35	; 0x23
 8001cb6:	221f      	movs	r2, #31
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b23      	subs	r3, #35	; 0x23
 8001ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
 8001cec:	e023      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b41      	subs	r3, #65	; 0x41
 8001d00:	221f      	movs	r2, #31
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	3b41      	subs	r3, #65	; 0x41
 8001d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_ADC_ConfigChannel+0x234>)
 8001d38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <HAL_ADC_ConfigChannel+0x238>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d109      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1cc>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b12      	cmp	r3, #18
 8001d4a:	d105      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_ADC_ConfigChannel+0x238>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d123      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x21e>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d003      	beq.n	8001d72 <HAL_ADC_ConfigChannel+0x1e6>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b11      	cmp	r3, #17
 8001d70:	d11b      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d111      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_ADC_ConfigChannel+0x23c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_ADC_ConfigChannel+0x240>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9a      	lsrs	r2, r3, #18
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d9c:	e002      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f9      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40012300 	.word	0x40012300
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	20000600 	.word	0x20000600
 8001dcc:	431bde83 	.word	0x431bde83

08001dd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd8:	4b79      	ldr	r3, [pc, #484]	; (8001fc0 <ADC_Init+0x1f0>)
 8001dda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	021a      	lsls	r2, r3, #8
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6899      	ldr	r1, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <ADC_Init+0x1f4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d022      	beq.n	8001eae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6899      	ldr	r1, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e00f      	b.n	8001ece <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ebc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ecc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0202 	bic.w	r2, r2, #2
 8001edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6899      	ldr	r1, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7e1b      	ldrb	r3, [r3, #24]
 8001ee8:	005a      	lsls	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	3b01      	subs	r3, #1
 8001f28:	035a      	lsls	r2, r3, #13
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	e007      	b.n	8001f44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	051a      	lsls	r2, r3, #20
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f86:	025a      	lsls	r2, r3, #9
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6899      	ldr	r1, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	029a      	lsls	r2, r3, #10
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	609a      	str	r2, [r3, #8]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40012300 	.word	0x40012300
 8001fc4:	0f000001 	.word	0x0f000001

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4907      	ldr	r1, [pc, #28]	; (8002064 <__NVIC_EnableIRQ+0x38>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f7ff ff8e 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff29 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002190:	f7ff ff3e 	bl	8002010 <__NVIC_GetPriorityGrouping>
 8002194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff8e 	bl	80020bc <NVIC_EncodePriority>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff5d 	bl	8002068 <__NVIC_SetPriority>
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff31 	bl	800202c <__NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffa2 	bl	8002124 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e16b      	b.n	80024e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 815a 	bne.w	80024da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	2b02      	cmp	r3, #2
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80b4 	beq.w	80024da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b60      	ldr	r3, [pc, #384]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a5f      	ldr	r2, [pc, #380]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238e:	4a5b      	ldr	r2, [pc, #364]	; (80024fc <HAL_GPIO_Init+0x310>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_GPIO_Init+0x314>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <HAL_GPIO_Init+0x226>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a51      	ldr	r2, [pc, #324]	; (8002504 <HAL_GPIO_Init+0x318>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x222>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a50      	ldr	r2, [pc, #320]	; (8002508 <HAL_GPIO_Init+0x31c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x21e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4f      	ldr	r2, [pc, #316]	; (800250c <HAL_GPIO_Init+0x320>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x21a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4e      	ldr	r2, [pc, #312]	; (8002510 <HAL_GPIO_Init+0x324>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x216>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4d      	ldr	r2, [pc, #308]	; (8002514 <HAL_GPIO_Init+0x328>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x212>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4c      	ldr	r2, [pc, #304]	; (8002518 <HAL_GPIO_Init+0x32c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x20e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_GPIO_Init+0x330>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x20a>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00e      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <HAL_GPIO_Init+0x310>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a32      	ldr	r2, [pc, #200]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_GPIO_Init+0x334>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f ae90 	bls.w	8002208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002540:	e003      	b.n	800254a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	041a      	lsls	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	619a      	str	r2, [r3, #24]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002568:	887a      	ldrh	r2, [r7, #2]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4013      	ands	r3, r2
 800256e:	041a      	lsls	r2, r3, #16
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43d9      	mvns	r1, r3
 8002574:	887b      	ldrh	r3, [r7, #2]
 8002576:	400b      	ands	r3, r1
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	619a      	str	r2, [r3, #24]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800258a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258c:	b08f      	sub	sp, #60	; 0x3c
 800258e:	af0a      	add	r7, sp, #40	; 0x28
 8002590:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e10f      	b.n	80027bc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f006 fe28 	bl	800920c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2203      	movs	r2, #3
 80025c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 f905 	bl	80057ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	687e      	ldr	r6, [r7, #4]
 80025e8:	466d      	mov	r5, sp
 80025ea:	f106 0410 	add.w	r4, r6, #16
 80025ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80025fe:	1d33      	adds	r3, r6, #4
 8002600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002602:	6838      	ldr	r0, [r7, #0]
 8002604:	f002 ffdd 	bl	80055c2 <USB_CoreInit>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0d0      	b.n	80027bc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f003 f8f3 	bl	800580c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e04a      	b.n	80026c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	333d      	adds	r3, #61	; 0x3d
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	333c      	adds	r3, #60	; 0x3c
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	b298      	uxth	r0, r3
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	3344      	adds	r3, #68	; 0x44
 8002668:	4602      	mov	r2, r0
 800266a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3340      	adds	r3, #64	; 0x40
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3348      	adds	r3, #72	; 0x48
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	334c      	adds	r3, #76	; 0x4c
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3354      	adds	r3, #84	; 0x54
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3af      	bcc.n	800262c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e044      	b.n	800275c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3301      	adds	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	d3b5      	bcc.n	80026d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	687e      	ldr	r6, [r7, #4]
 800276e:	466d      	mov	r5, sp
 8002770:	f106 0410 	add.w	r4, r6, #16
 8002774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800277c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002780:	e885 0003 	stmia.w	r5, {r0, r1}
 8002784:	1d33      	adds	r3, r6, #4
 8002786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002788:	6838      	ldr	r0, [r7, #0]
 800278a:	f003 f88b 	bl	80058a4 <USB_DevInit>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e00d      	b.n	80027bc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f004 f9da 	bl	8006b6e <USB_DevDisconnect>

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_PCD_Start+0x1c>
 80027dc:	2302      	movs	r3, #2
 80027de:	e020      	b.n	8002822 <HAL_PCD_Start+0x5e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d109      	bne.n	8002804 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d005      	beq.n	8002804 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f002 ffdd 	bl	80057c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f004 f98a 	bl	8006b2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800282a:	b590      	push	{r4, r7, lr}
 800282c:	b08d      	sub	sp, #52	; 0x34
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f004 fa48 	bl	8006cd6 <USB_GetMode>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	f040 848a 	bne.w	8003162 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f004 f9ac 	bl	8006bb0 <USB_ReadInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8480 	beq.w	8003160 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f004 f999 	bl	8006bb0 <USB_ReadInterrupts>
 800287e:	4603      	mov	r3, r0
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d107      	bne.n	8002898 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f002 0202 	and.w	r2, r2, #2
 8002896:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f004 f987 	bl	8006bb0 <USB_ReadInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d161      	bne.n	8002970 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0210 	bic.w	r2, r2, #16
 80028ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	3304      	adds	r3, #4
 80028da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	0c5b      	lsrs	r3, r3, #17
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d124      	bne.n	8002932 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d035      	beq.n	8002960 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	6a38      	ldr	r0, [r7, #32]
 8002908:	f003 ffbe 	bl	8006888 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002918:	441a      	add	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800292a:	441a      	add	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	621a      	str	r2, [r3, #32]
 8002930:	e016      	b.n	8002960 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	0c5b      	lsrs	r3, r3, #17
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	2b06      	cmp	r3, #6
 800293c:	d110      	bne.n	8002960 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002944:	2208      	movs	r2, #8
 8002946:	4619      	mov	r1, r3
 8002948:	6a38      	ldr	r0, [r7, #32]
 800294a:	f003 ff9d 	bl	8006888 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800295a:	441a      	add	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0210 	orr.w	r2, r2, #16
 800296e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f004 f91b 	bl	8006bb0 <USB_ReadInterrupts>
 800297a:	4603      	mov	r3, r0
 800297c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002980:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002984:	f040 80a7 	bne.w	8002ad6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f004 f920 	bl	8006bd6 <USB_ReadDevAllOutEpInterrupt>
 8002996:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002998:	e099      	b.n	8002ace <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 808e 	beq.w	8002ac2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 f944 	bl	8006c3e <USB_ReadDevOutEPInterrupt>
 80029b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00c      	beq.n	80029dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ce:	461a      	mov	r2, r3
 80029d0:	2301      	movs	r3, #1
 80029d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fec2 	bl	8003760 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f2:	461a      	mov	r2, r3
 80029f4:	2308      	movs	r3, #8
 80029f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 ff98 	bl	8003930 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a16:	461a      	mov	r2, r3
 8002a18:	2310      	movs	r3, #16
 8002a1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d030      	beq.n	8002a88 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b80      	cmp	r3, #128	; 0x80
 8002a30:	d109      	bne.n	8002a46 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a44:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	78db      	ldrb	r3, [r3, #3]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d108      	bne.n	8002a76 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2200      	movs	r2, #0
 8002a68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f006 fcd1 	bl	8009418 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a82:	461a      	mov	r2, r3
 8002a84:	2302      	movs	r3, #2
 8002a86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aba:	461a      	mov	r2, r3
 8002abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f af62 	bne.w	800299a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 f868 	bl	8006bb0 <USB_ReadInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002aea:	f040 80db 	bne.w	8002ca4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 f889 	bl	8006c0a <USB_ReadDevAllInEpInterrupt>
 8002af8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002afe:	e0cd      	b.n	8002c9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80c2 	beq.w	8002c90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 f8af 	bl	8006c7a <USB_ReadDevInEPInterrupt>
 8002b1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d057      	beq.n	8002bd8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	2201      	movs	r2, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69f9      	ldr	r1, [r7, #28]
 8002b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b48:	4013      	ands	r3, r2
 8002b4a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d132      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	334c      	adds	r3, #76	; 0x4c
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4403      	add	r3, r0
 8002b86:	3348      	adds	r3, #72	; 0x48
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4419      	add	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4403      	add	r3, r0
 8002b9a:	334c      	adds	r3, #76	; 0x4c
 8002b9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d113      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x3a2>
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3354      	adds	r3, #84	; 0x54
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d108      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	f004 f8b6 	bl	8006d38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f006 fb9b 	bl	800930e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c26:	461a      	mov	r2, r3
 8002c28:	2340      	movs	r3, #64	; 0x40
 8002c2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d023      	beq.n	8002c7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c38:	6a38      	ldr	r0, [r7, #32]
 8002c3a:	f002 ff97 	bl	8005b6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	3338      	adds	r3, #56	; 0x38
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3304      	adds	r3, #4
 8002c50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	78db      	ldrb	r3, [r3, #3]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d108      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f006 fbe8 	bl	800943c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fcdb 	bl	8003646 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	3301      	adds	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f47f af2e 	bne.w	8002b00 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 ff81 	bl	8006bb0 <USB_ReadInterrupts>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cb8:	d122      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d108      	bne.n	8002cea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fec2 	bl	8003a6c <HAL_PCDEx_LPM_Callback>
 8002ce8:	e002      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f006 fb86 	bl	80093fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 ff53 	bl	8006bb0 <USB_ReadInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d14:	d112      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d102      	bne.n	8002d2c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f006 fb42 	bl	80093b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d3a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 ff35 	bl	8006bb0 <USB_ReadInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d50:	f040 80b7 	bne.w	8002ec2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2110      	movs	r1, #16
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f002 fefc 	bl	8005b6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d78:	e046      	b.n	8002e08 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d86:	461a      	mov	r2, r3
 8002d88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9e:	0151      	lsls	r1, r2, #5
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	440a      	add	r2, r1
 8002da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002da8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd2:	0151      	lsls	r1, r2, #5
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002de0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	0151      	lsls	r1, r2, #5
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	440a      	add	r2, r1
 8002df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	3301      	adds	r3, #1
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d3b3      	bcc.n	8002d7a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e20:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e3e:	f043 030b 	orr.w	r3, r3, #11
 8002e42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e54:	f043 030b 	orr.w	r3, r3, #11
 8002e58:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5a:	e015      	b.n	8002e88 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e6e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e82:	f043 030b 	orr.w	r3, r3, #11
 8002e86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eac:	461a      	mov	r2, r3
 8002eae:	f003 ff43 	bl	8006d38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fe72 	bl	8006bb0 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed6:	d124      	bne.n	8002f22 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f003 ff08 	bl	8006cf2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 febd 	bl	8005c66 <USB_GetDevSpeed>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681c      	ldr	r4, [r3, #0]
 8002ef8:	f001 f9e8 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 8002efc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	4620      	mov	r0, r4
 8002f08:	f002 fbbc 	bl	8005684 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f006 fa26 	bl	800935e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 fe42 	bl	8006bb0 <USB_ReadInterrupts>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d10a      	bne.n	8002f4c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f006 fa03 	bl	8009342 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f002 0208 	and.w	r2, r2, #8
 8002f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 fe2d 	bl	8006bb0 <USB_ReadInterrupts>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5c:	2b80      	cmp	r3, #128	; 0x80
 8002f5e:	d122      	bne.n	8002fa6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f70:	e014      	b.n	8002f9c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb27 	bl	80035e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	3301      	adds	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d3e5      	bcc.n	8002f72 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 fe00 	bl	8006bb0 <USB_ReadInterrupts>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fba:	d13b      	bne.n	8003034 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	e02b      	b.n	800301a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4413      	add	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3340      	adds	r3, #64	; 0x40
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d115      	bne.n	8003014 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fe8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da12      	bge.n	8003014 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	333f      	adds	r3, #63	; 0x3f
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800300a:	b2db      	uxtb	r3, r3
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fae8 	bl	80035e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	3301      	adds	r3, #1
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	429a      	cmp	r2, r3
 8003022:	d3ce      	bcc.n	8002fc2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003032:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f003 fdb9 	bl	8006bb0 <USB_ReadInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003048:	d155      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800304a:	2301      	movs	r3, #1
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
 800304e:	e045      	b.n	80030dc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d12e      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003078:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800307a:	2b00      	cmp	r3, #0
 800307c:	da2b      	bge.n	80030d6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800308a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800308e:	429a      	cmp	r2, r3
 8003090:	d121      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030d2:	6053      	str	r3, [r2, #4]
            break;
 80030d4:	e007      	b.n	80030e6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	3301      	adds	r3, #1
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d3b4      	bcc.n	8003050 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fd58 	bl	8006bb0 <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310a:	d10a      	bne.n	8003122 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f006 f9a7 	bl	8009460 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fd42 	bl	8006bb0 <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b04      	cmp	r3, #4
 8003134:	d115      	bne.n	8003162 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f006 f997 	bl	800947c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	e000      	b.n	8003162 <HAL_PCD_IRQHandler+0x938>
      return;
 8003160:	bf00      	nop
    }
  }
}
 8003162:	3734      	adds	r7, #52	; 0x34
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}

08003168 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_PCD_SetAddress+0x1a>
 800317e:	2302      	movs	r3, #2
 8003180:	e013      	b.n	80031aa <HAL_PCD_SetAddress+0x42>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f003 fca0 	bl	8006ae0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	4608      	mov	r0, r1
 80031bc:	4611      	mov	r1, r2
 80031be:	461a      	mov	r2, r3
 80031c0:	4603      	mov	r3, r0
 80031c2:	70fb      	strb	r3, [r7, #3]
 80031c4:	460b      	mov	r3, r1
 80031c6:	803b      	strh	r3, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da0f      	bge.n	80031f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 020f 	and.w	r2, r3, #15
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	3338      	adds	r3, #56	; 0x38
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	705a      	strb	r2, [r3, #1]
 80031f6:	e00f      	b.n	8003218 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 020f 	and.w	r2, r3, #15
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	3304      	adds	r3, #4
 8003210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003224:	883a      	ldrh	r2, [r7, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	78ba      	ldrb	r2, [r7, #2]
 800322e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	785b      	ldrb	r3, [r3, #1]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003242:	78bb      	ldrb	r3, [r7, #2]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d102      	bne.n	800324e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_PCD_EP_Open+0xaa>
 8003258:	2302      	movs	r3, #2
 800325a:	e00e      	b.n	800327a <HAL_PCD_EP_Open+0xc8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68f9      	ldr	r1, [r7, #12]
 800326a:	4618      	mov	r0, r3
 800326c:	f002 fd20 	bl	8005cb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003278:	7afb      	ldrb	r3, [r7, #11]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800328e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003292:	2b00      	cmp	r3, #0
 8003294:	da0f      	bge.n	80032b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 020f 	and.w	r2, r3, #15
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	3338      	adds	r3, #56	; 0x38
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	3304      	adds	r3, #4
 80032ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	705a      	strb	r2, [r3, #1]
 80032b4:	e00f      	b.n	80032d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4413      	add	r3, r2
 80032cc:	3304      	adds	r3, #4
 80032ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_PCD_EP_Close+0x6e>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e00e      	b.n	800330e <HAL_PCD_EP_Close+0x8c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68f9      	ldr	r1, [r7, #12]
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 fd5e 	bl	8005dc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	460b      	mov	r3, r1
 8003324:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003326:	7afb      	ldrb	r3, [r7, #11]
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	3304      	adds	r3, #4
 800333e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2200      	movs	r2, #0
 8003350:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003358:	7afb      	ldrb	r3, [r7, #11]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	b2da      	uxtb	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d102      	bne.n	8003372 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003372:	7afb      	ldrb	r3, [r7, #11]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	6979      	ldr	r1, [r7, #20]
 800338a:	f003 f83d 	bl	8006408 <USB_EP0StartXfer>
 800338e:	e008      	b.n	80033a2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	6979      	ldr	r1, [r7, #20]
 800339e:	f002 fdeb 	bl	8005f78 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 020f 	and.w	r2, r3, #15
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	460b      	mov	r3, r1
 80033ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	f003 020f 	and.w	r2, r3, #15
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	3338      	adds	r3, #56	; 0x38
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2201      	movs	r2, #1
 800341a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800341c:	7afb      	ldrb	r3, [r7, #11]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	b2da      	uxtb	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d102      	bne.n	8003436 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	6979      	ldr	r1, [r7, #20]
 800344e:	f002 ffdb 	bl	8006408 <USB_EP0StartXfer>
 8003452:	e008      	b.n	8003466 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	6979      	ldr	r1, [r7, #20]
 8003462:	f002 fd89 	bl	8005f78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	d901      	bls.n	800348e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e050      	b.n	8003530 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800348e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003492:	2b00      	cmp	r3, #0
 8003494:	da0f      	bge.n	80034b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	f003 020f 	and.w	r2, r3, #15
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	3338      	adds	r3, #56	; 0x38
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	705a      	strb	r2, [r3, #1]
 80034b4:	e00d      	b.n	80034d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4413      	add	r3, r2
 80034c8:	3304      	adds	r3, #4
 80034ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_PCD_EP_SetStall+0x82>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e01e      	b.n	8003530 <HAL_PCD_EP_SetStall+0xc0>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 fa19 	bl	8006938 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	b2d9      	uxtb	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003520:	461a      	mov	r2, r3
 8003522:	f003 fc09 	bl	8006d38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	f003 020f 	and.w	r2, r3, #15
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	429a      	cmp	r2, r3
 8003550:	d901      	bls.n	8003556 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e042      	b.n	80035dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800355a:	2b00      	cmp	r3, #0
 800355c:	da0f      	bge.n	800357e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	f003 020f 	and.w	r2, r3, #15
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	3338      	adds	r3, #56	; 0x38
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	3304      	adds	r3, #4
 8003574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	705a      	strb	r2, [r3, #1]
 800357c:	e00f      	b.n	800359e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 020f 	and.w	r2, r3, #15
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	3304      	adds	r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_PCD_EP_ClrStall+0x86>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e00e      	b.n	80035dc <HAL_PCD_EP_ClrStall+0xa4>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 fa21 	bl	8006a14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	da0c      	bge.n	8003612 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 020f 	and.w	r2, r3, #15
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	3338      	adds	r3, #56	; 0x38
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e00c      	b.n	800362c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 020f 	and.w	r2, r3, #15
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	4618      	mov	r0, r3
 8003634:	f003 f840 	bl	80066b8 <USB_EPStopXfer>
 8003638:	4603      	mov	r3, r0
 800363a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800363c:	7afb      	ldrb	r3, [r7, #11]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b08a      	sub	sp, #40	; 0x28
 800364a:	af02      	add	r7, sp, #8
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3338      	adds	r3, #56	; 0x38
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	3304      	adds	r3, #4
 800366c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1a      	ldr	r2, [r3, #32]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	429a      	cmp	r2, r3
 8003678:	d901      	bls.n	800367e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e06c      	b.n	8003758 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	429a      	cmp	r2, r3
 8003692:	d902      	bls.n	800369a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3303      	adds	r3, #3
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036a2:	e02b      	b.n	80036fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d902      	bls.n	80036c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	3303      	adds	r3, #3
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6919      	ldr	r1, [r3, #16]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	4603      	mov	r3, r0
 80036de:	6978      	ldr	r0, [r7, #20]
 80036e0:	f003 f894 	bl	800680c <USB_WritePacket>

    ep->xfer_buff  += len;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	441a      	add	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a1a      	ldr	r2, [r3, #32]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	441a      	add	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	b29b      	uxth	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	429a      	cmp	r2, r3
 8003710:	d809      	bhi.n	8003726 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1a      	ldr	r2, [r3, #32]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800371a:	429a      	cmp	r2, r3
 800371c:	d203      	bcs.n	8003726 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1be      	bne.n	80036a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	429a      	cmp	r2, r3
 8003730:	d811      	bhi.n	8003756 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	2201      	movs	r2, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	43db      	mvns	r3, r3
 800374c:	6939      	ldr	r1, [r7, #16]
 800374e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003752:	4013      	ands	r3, r2
 8003754:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	333c      	adds	r3, #60	; 0x3c
 8003778:	3304      	adds	r3, #4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d17b      	bne.n	800388e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4a61      	ldr	r2, [pc, #388]	; (8003928 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	f240 80b9 	bls.w	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80b3 	beq.w	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c2:	461a      	mov	r2, r3
 80037c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c8:	6093      	str	r3, [r2, #8]
 80037ca:	e0a7      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	461a      	mov	r2, r3
 80037e4:	2320      	movs	r3, #32
 80037e6:	6093      	str	r3, [r2, #8]
 80037e8:	e098      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f040 8093 	bne.w	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4a4b      	ldr	r2, [pc, #300]	; (8003928 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d90f      	bls.n	800381e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003814:	461a      	mov	r2, r3
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	e07e      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	0159      	lsls	r1, r3, #5
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	440b      	add	r3, r1
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384a:	1ad2      	subs	r2, r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d114      	bne.n	8003880 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003868:	461a      	mov	r2, r3
 800386a:	2101      	movs	r1, #1
 800386c:	f003 fa64 	bl	8006d38 <USB_EP0_OutStart>
 8003870:	e006      	b.n	8003880 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	441a      	add	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	4619      	mov	r1, r3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f005 fd26 	bl	80092d8 <HAL_PCD_DataOutStageCallback>
 800388c:	e046      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	4a26      	ldr	r2, [pc, #152]	; (800392c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d124      	bne.n	80038e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b2:	6093      	str	r3, [r2, #8]
 80038b4:	e032      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	2320      	movs	r3, #32
 80038d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f005 fcfd 	bl	80092d8 <HAL_PCD_DataOutStageCallback>
 80038de:	e01d      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d114      	bne.n	8003910 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003908:	461a      	mov	r2, r3
 800390a:	2100      	movs	r1, #0
 800390c:	f003 fa14 	bl	8006d38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f005 fcde 	bl	80092d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	4f54300a 	.word	0x4f54300a
 800392c:	4f54310a 	.word	0x4f54310a

08003930 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	333c      	adds	r3, #60	; 0x3c
 8003948:	3304      	adds	r3, #4
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d90e      	bls.n	8003984 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397c:	461a      	mov	r2, r3
 800397e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003982:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f005 fc95 	bl	80092b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d90c      	bls.n	80039ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d108      	bne.n	80039ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a4:	461a      	mov	r2, r3
 80039a6:	2101      	movs	r1, #1
 80039a8:	f003 f9c6 	bl	8006d38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	4f54300a 	.word	0x4f54300a

080039bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
 80039c8:	4613      	mov	r3, r2
 80039ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039da:	883b      	ldrh	r3, [r7, #0]
 80039dc:	0419      	lsls	r1, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
 80039e8:	e028      	b.n	8003a3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4413      	add	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e00d      	b.n	8003a1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	3340      	adds	r3, #64	; 0x40
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4413      	add	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	3301      	adds	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d3ec      	bcc.n	80039fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a24:	883b      	ldrh	r3, [r7, #0]
 8003a26:	0418      	lsls	r0, r3, #16
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	4302      	orrs	r2, r0
 8003a34:	3340      	adds	r3, #64	; 0x40
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e267      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d075      	beq.n	8003b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa2:	4b88      	ldr	r3, [pc, #544]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d00c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aae:	4b85      	ldr	r3, [pc, #532]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d112      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aba:	4b82      	ldr	r3, [pc, #520]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	4b7e      	ldr	r3, [pc, #504]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05b      	beq.n	8003b8c <HAL_RCC_OscConfig+0x108>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d157      	bne.n	8003b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e242      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d106      	bne.n	8003af8 <HAL_RCC_OscConfig+0x74>
 8003aea:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a75      	ldr	r2, [pc, #468]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e01d      	b.n	8003b34 <HAL_RCC_OscConfig+0xb0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x98>
 8003b02:	4b70      	ldr	r3, [pc, #448]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6f      	ldr	r2, [pc, #444]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4b6d      	ldr	r3, [pc, #436]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6c      	ldr	r2, [pc, #432]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0xb0>
 8003b1c:	4b69      	ldr	r3, [pc, #420]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a68      	ldr	r2, [pc, #416]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b66      	ldr	r3, [pc, #408]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a65      	ldr	r2, [pc, #404]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d013      	beq.n	8003b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fe14 	bl	8001768 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b44:	f7fd fe10 	bl	8001768 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e207      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	4b5b      	ldr	r3, [pc, #364]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0xc0>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd fe00 	bl	8001768 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6c:	f7fd fdfc 	bl	8001768 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b64      	cmp	r3, #100	; 0x64
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e1f3      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	4b51      	ldr	r3, [pc, #324]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0xe8>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d063      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba6:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d11c      	bne.n	8003bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb2:	4b44      	ldr	r3, [pc, #272]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d116      	bne.n	8003bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bbe:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x152>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e1c7      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd6:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4937      	ldr	r1, [pc, #220]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	e03a      	b.n	8003c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf4:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <HAL_RCC_OscConfig+0x244>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fd fdb5 	bl	8001768 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fd fdb1 	bl	8001768 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e1a8      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	4b2b      	ldr	r3, [pc, #172]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c20:	4b28      	ldr	r3, [pc, #160]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4925      	ldr	r1, [pc, #148]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
 8003c34:	e015      	b.n	8003c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <HAL_RCC_OscConfig+0x244>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fd94 	bl	8001768 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fd fd90 	bl	8001768 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e187      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d036      	beq.n	8003cdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_RCC_OscConfig+0x248>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fd fd74 	bl	8001768 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fd fd70 	bl	8001768 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e167      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_RCC_OscConfig+0x240>)
 8003c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x200>
 8003ca2:	e01b      	b.n	8003cdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCC_OscConfig+0x248>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003caa:	f7fd fd5d 	bl	8001768 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb0:	e00e      	b.n	8003cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb2:	f7fd fd59 	bl	8001768 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d907      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e150      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	42470000 	.word	0x42470000
 8003ccc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	4b88      	ldr	r3, [pc, #544]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ea      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8097 	beq.w	8003e18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cee:	4b81      	ldr	r3, [pc, #516]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	4b7d      	ldr	r3, [pc, #500]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	4a7c      	ldr	r2, [pc, #496]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d08:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0a:	4b7a      	ldr	r3, [pc, #488]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d16:	2301      	movs	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1a:	4b77      	ldr	r3, [pc, #476]	; (8003ef8 <HAL_RCC_OscConfig+0x474>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d118      	bne.n	8003d58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d26:	4b74      	ldr	r3, [pc, #464]	; (8003ef8 <HAL_RCC_OscConfig+0x474>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a73      	ldr	r2, [pc, #460]	; (8003ef8 <HAL_RCC_OscConfig+0x474>)
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d32:	f7fd fd19 	bl	8001768 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3a:	f7fd fd15 	bl	8001768 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e10c      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <HAL_RCC_OscConfig+0x474>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d106      	bne.n	8003d6e <HAL_RCC_OscConfig+0x2ea>
 8003d60:	4b64      	ldr	r3, [pc, #400]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	4a63      	ldr	r2, [pc, #396]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6c:	e01c      	b.n	8003da8 <HAL_RCC_OscConfig+0x324>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x30c>
 8003d76:	4b5f      	ldr	r3, [pc, #380]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a5e      	ldr	r2, [pc, #376]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
 8003d82:	4b5c      	ldr	r3, [pc, #368]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a5b      	ldr	r2, [pc, #364]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCC_OscConfig+0x324>
 8003d90:	4b58      	ldr	r3, [pc, #352]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a57      	ldr	r2, [pc, #348]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9c:	4b55      	ldr	r3, [pc, #340]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a54      	ldr	r2, [pc, #336]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003da2:	f023 0304 	bic.w	r3, r3, #4
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d015      	beq.n	8003ddc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd fcda 	bl	8001768 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db8:	f7fd fcd6 	bl	8001768 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e0cb      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dce:	4b49      	ldr	r3, [pc, #292]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0ee      	beq.n	8003db8 <HAL_RCC_OscConfig+0x334>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ddc:	f7fd fcc4 	bl	8001768 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de4:	f7fd fcc0 	bl	8001768 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e0b5      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1ee      	bne.n	8003de4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0c:	4b39      	ldr	r3, [pc, #228]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	4a38      	ldr	r2, [pc, #224]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a1 	beq.w	8003f64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e22:	4b34      	ldr	r3, [pc, #208]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d05c      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d141      	bne.n	8003eba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e36:	4b31      	ldr	r3, [pc, #196]	; (8003efc <HAL_RCC_OscConfig+0x478>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fc94 	bl	8001768 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd fc90 	bl	8001768 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e087      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e56:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	041b      	lsls	r3, r3, #16
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	491b      	ldr	r1, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e8c:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x478>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e92:	f7fd fc69 	bl	8001768 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fd fc65 	bl	8001768 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e05c      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x416>
 8003eb8:	e054      	b.n	8003f64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <HAL_RCC_OscConfig+0x478>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fc52 	bl	8001768 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec8:	f7fd fc4e 	bl	8001768 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e045      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_RCC_OscConfig+0x470>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x444>
 8003ee6:	e03d      	b.n	8003f64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e038      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	40007000 	.word	0x40007000
 8003efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_RCC_OscConfig+0x4ec>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d028      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d121      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d11a      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f30:	4013      	ands	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d111      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023800 	.word	0x40023800

08003f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0cc      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f88:	4b68      	ldr	r3, [pc, #416]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d90c      	bls.n	8003fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b63      	ldr	r3, [pc, #396]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0b8      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d020      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc8:	4b59      	ldr	r3, [pc, #356]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4a58      	ldr	r2, [pc, #352]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe0:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a52      	ldr	r2, [pc, #328]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fec:	4b50      	ldr	r3, [pc, #320]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	494d      	ldr	r1, [pc, #308]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d044      	beq.n	8004094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	4b47      	ldr	r3, [pc, #284]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d119      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07f      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d003      	beq.n	8004032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402e:	2b03      	cmp	r3, #3
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004032:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e06f      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004042:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e067      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004052:	4b37      	ldr	r3, [pc, #220]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f023 0203 	bic.w	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4934      	ldr	r1, [pc, #208]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004064:	f7fd fb80 	bl	8001768 <HAL_GetTick>
 8004068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	e00a      	b.n	8004082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406c:	f7fd fb7c 	bl	8001768 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e04f      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	4b2b      	ldr	r3, [pc, #172]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 020c 	and.w	r2, r3, #12
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	429a      	cmp	r2, r3
 8004092:	d1eb      	bne.n	800406c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004094:	4b25      	ldr	r3, [pc, #148]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d20c      	bcs.n	80040bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e032      	b.n	8004122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c8:	4b19      	ldr	r3, [pc, #100]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4916      	ldr	r1, [pc, #88]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	490e      	ldr	r1, [pc, #56]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040fa:	f000 f821 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80040fe:	4602      	mov	r2, r0
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	490a      	ldr	r1, [pc, #40]	; (8004134 <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	5ccb      	ldrb	r3, [r1, r3]
 800410e:	fa22 f303 	lsr.w	r3, r2, r3
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd fae0 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023c00 	.word	0x40023c00
 8004130:	40023800 	.word	0x40023800
 8004134:	0800a274 	.word	0x0800a274
 8004138:	20000600 	.word	0x20000600
 800413c:	20000604 	.word	0x20000604

08004140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004144:	b090      	sub	sp, #64	; 0x40
 8004146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	637b      	str	r3, [r7, #52]	; 0x34
 800414c:	2300      	movs	r3, #0
 800414e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004150:	2300      	movs	r3, #0
 8004152:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004158:	4b59      	ldr	r3, [pc, #356]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b08      	cmp	r3, #8
 8004162:	d00d      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x40>
 8004164:	2b08      	cmp	r3, #8
 8004166:	f200 80a1 	bhi.w	80042ac <HAL_RCC_GetSysClockFreq+0x16c>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x34>
 800416e:	2b04      	cmp	r3, #4
 8004170:	d003      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0x3a>
 8004172:	e09b      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004176:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004178:	e09b      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800417a:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800417e:	e098      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004180:	4b4f      	ldr	r3, [pc, #316]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800418a:	4b4d      	ldr	r3, [pc, #308]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d028      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	099b      	lsrs	r3, r3, #6
 800419c:	2200      	movs	r2, #0
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	627a      	str	r2, [r7, #36]	; 0x24
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041a8:	2100      	movs	r1, #0
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041ac:	fb03 f201 	mul.w	r2, r3, r1
 80041b0:	2300      	movs	r3, #0
 80041b2:	fb00 f303 	mul.w	r3, r0, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	4a43      	ldr	r2, [pc, #268]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041ba:	fba0 1202 	umull	r1, r2, r0, r2
 80041be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c0:	460a      	mov	r2, r1
 80041c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80041c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c6:	4413      	add	r3, r2
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041cc:	2200      	movs	r2, #0
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	61fa      	str	r2, [r7, #28]
 80041d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041da:	f7fc f851 	bl	8000280 <__aeabi_uldivmod>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4613      	mov	r3, r2
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e6:	e053      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041e8:	4b35      	ldr	r3, [pc, #212]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	099b      	lsrs	r3, r3, #6
 80041ee:	2200      	movs	r2, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	617a      	str	r2, [r7, #20]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041fa:	f04f 0b00 	mov.w	fp, #0
 80041fe:	4652      	mov	r2, sl
 8004200:	465b      	mov	r3, fp
 8004202:	f04f 0000 	mov.w	r0, #0
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	0159      	lsls	r1, r3, #5
 800420c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004210:	0150      	lsls	r0, r2, #5
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	ebb2 080a 	subs.w	r8, r2, sl
 800421a:	eb63 090b 	sbc.w	r9, r3, fp
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800422a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800422e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004232:	ebb2 0408 	subs.w	r4, r2, r8
 8004236:	eb63 0509 	sbc.w	r5, r3, r9
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	00eb      	lsls	r3, r5, #3
 8004244:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004248:	00e2      	lsls	r2, r4, #3
 800424a:	4614      	mov	r4, r2
 800424c:	461d      	mov	r5, r3
 800424e:	eb14 030a 	adds.w	r3, r4, sl
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	eb45 030b 	adc.w	r3, r5, fp
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004266:	4629      	mov	r1, r5
 8004268:	028b      	lsls	r3, r1, #10
 800426a:	4621      	mov	r1, r4
 800426c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004270:	4621      	mov	r1, r4
 8004272:	028a      	lsls	r2, r1, #10
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	2200      	movs	r2, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	60fa      	str	r2, [r7, #12]
 8004280:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004284:	f7fb fffc 	bl	8000280 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4613      	mov	r3, r2
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	0c1b      	lsrs	r3, r3, #16
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	3301      	adds	r3, #1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042aa:	e002      	b.n	80042b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3740      	adds	r7, #64	; 0x40
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800
 80042c4:	00f42400 	.word	0x00f42400
 80042c8:	017d7840 	.word	0x017d7840

080042cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d2:	681b      	ldr	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000600 	.word	0x20000600

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e041      	b.n	800437a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd f87e 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fc7c 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e046      	b.n	800442a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <HAL_TIM_Base_Start+0xb4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d022      	beq.n	80043f4 <HAL_TIM_Base_Start+0x70>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b6:	d01d      	beq.n	80043f4 <HAL_TIM_Base_Start+0x70>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <HAL_TIM_Base_Start+0xb8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d018      	beq.n	80043f4 <HAL_TIM_Base_Start+0x70>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <HAL_TIM_Base_Start+0xbc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <HAL_TIM_Base_Start+0x70>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_TIM_Base_Start+0xc0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <HAL_TIM_Base_Start+0x70>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <HAL_TIM_Base_Start+0xc4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_TIM_Base_Start+0x70>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <HAL_TIM_Base_Start+0xc8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_TIM_Base_Start+0x70>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a18      	ldr	r2, [pc, #96]	; (8004450 <HAL_TIM_Base_Start+0xcc>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d111      	bne.n	8004418 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b06      	cmp	r3, #6
 8004404:	d010      	beq.n	8004428 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004416:	e007      	b.n	8004428 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40000c00 	.word	0x40000c00
 8004448:	40010400 	.word	0x40010400
 800444c:	40014000 	.word	0x40014000
 8004450:	40001800 	.word	0x40001800

08004454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e041      	b.n	80044ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f839 	bl	80044f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fbc4 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d109      	bne.n	800452c <HAL_TIM_PWM_Start+0x24>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e022      	b.n	8004572 <HAL_TIM_PWM_Start+0x6a>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d109      	bne.n	8004546 <HAL_TIM_PWM_Start+0x3e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	bf14      	ite	ne
 800453e:	2301      	movne	r3, #1
 8004540:	2300      	moveq	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e015      	b.n	8004572 <HAL_TIM_PWM_Start+0x6a>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d109      	bne.n	8004560 <HAL_TIM_PWM_Start+0x58>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e008      	b.n	8004572 <HAL_TIM_PWM_Start+0x6a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e07c      	b.n	8004674 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <HAL_TIM_PWM_Start+0x82>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004588:	e013      	b.n	80045b2 <HAL_TIM_PWM_Start+0xaa>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d104      	bne.n	800459a <HAL_TIM_PWM_Start+0x92>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004598:	e00b      	b.n	80045b2 <HAL_TIM_PWM_Start+0xaa>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d104      	bne.n	80045aa <HAL_TIM_PWM_Start+0xa2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a8:	e003      	b.n	80045b2 <HAL_TIM_PWM_Start+0xaa>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2201      	movs	r2, #1
 80045b8:	6839      	ldr	r1, [r7, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fe1a 	bl	80051f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2d      	ldr	r2, [pc, #180]	; (800467c <HAL_TIM_PWM_Start+0x174>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_TIM_PWM_Start+0xcc>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2c      	ldr	r2, [pc, #176]	; (8004680 <HAL_TIM_PWM_Start+0x178>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_TIM_PWM_Start+0xd0>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <HAL_TIM_PWM_Start+0xd2>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a22      	ldr	r2, [pc, #136]	; (800467c <HAL_TIM_PWM_Start+0x174>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <HAL_TIM_PWM_Start+0x136>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004600:	d01d      	beq.n	800463e <HAL_TIM_PWM_Start+0x136>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <HAL_TIM_PWM_Start+0x17c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d018      	beq.n	800463e <HAL_TIM_PWM_Start+0x136>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <HAL_TIM_PWM_Start+0x180>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d013      	beq.n	800463e <HAL_TIM_PWM_Start+0x136>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1c      	ldr	r2, [pc, #112]	; (800468c <HAL_TIM_PWM_Start+0x184>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_TIM_PWM_Start+0x136>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a16      	ldr	r2, [pc, #88]	; (8004680 <HAL_TIM_PWM_Start+0x178>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_TIM_PWM_Start+0x136>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_TIM_PWM_Start+0x188>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_TIM_PWM_Start+0x136>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_TIM_PWM_Start+0x18c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d111      	bne.n	8004662 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b06      	cmp	r3, #6
 800464e:	d010      	beq.n	8004672 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004660:	e007      	b.n	8004672 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40010000 	.word	0x40010000
 8004680:	40010400 	.word	0x40010400
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40000c00 	.word	0x40000c00
 8004690:	40014000 	.word	0x40014000
 8004694:	40001800 	.word	0x40001800

08004698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0202 	mvn.w	r2, #2
 80046c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fa81 	bl	8004be2 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa73 	bl	8004bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fa84 	bl	8004bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b04      	cmp	r3, #4
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0204 	mvn.w	r2, #4
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fa57 	bl	8004be2 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa49 	bl	8004bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fa5a 	bl	8004bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b08      	cmp	r3, #8
 8004754:	d122      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0208 	mvn.w	r2, #8
 800476c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2204      	movs	r2, #4
 8004772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa2d 	bl	8004be2 <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa1f 	bl	8004bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fa30 	bl	8004bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d122      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d11b      	bne.n	80047f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0210 	mvn.w	r2, #16
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2208      	movs	r2, #8
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa03 	bl	8004be2 <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f9f5 	bl	8004bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fa06 	bl	8004bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10e      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d107      	bne.n	800481c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0201 	mvn.w	r2, #1
 8004814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f9cf 	bl	8004bba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b80      	cmp	r3, #128	; 0x80
 8004828:	d10e      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b80      	cmp	r3, #128	; 0x80
 8004836:	d107      	bne.n	8004848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fe8e 	bl	8005564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d10e      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d107      	bne.n	8004874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800486c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f9cb 	bl	8004c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b20      	cmp	r3, #32
 8004880:	d10e      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d107      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0220 	mvn.w	r2, #32
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fe58 	bl	8005550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e0ae      	b.n	8004a24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b0c      	cmp	r3, #12
 80048d2:	f200 809f 	bhi.w	8004a14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004a15 	.word	0x08004a15
 80048e4:	08004a15 	.word	0x08004a15
 80048e8:	08004a15 	.word	0x08004a15
 80048ec:	08004951 	.word	0x08004951
 80048f0:	08004a15 	.word	0x08004a15
 80048f4:	08004a15 	.word	0x08004a15
 80048f8:	08004a15 	.word	0x08004a15
 80048fc:	08004993 	.word	0x08004993
 8004900:	08004a15 	.word	0x08004a15
 8004904:	08004a15 	.word	0x08004a15
 8004908:	08004a15 	.word	0x08004a15
 800490c:	080049d3 	.word	0x080049d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fa22 	bl	8004d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0208 	orr.w	r2, r2, #8
 800492a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0204 	bic.w	r2, r2, #4
 800493a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6999      	ldr	r1, [r3, #24]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	619a      	str	r2, [r3, #24]
      break;
 800494e:	e064      	b.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fa72 	bl	8004e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800496a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6999      	ldr	r1, [r3, #24]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	021a      	lsls	r2, r3, #8
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	619a      	str	r2, [r3, #24]
      break;
 8004990:	e043      	b.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fac7 	bl	8004f2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0208 	orr.w	r2, r2, #8
 80049ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69da      	ldr	r2, [r3, #28]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0204 	bic.w	r2, r2, #4
 80049bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69d9      	ldr	r1, [r3, #28]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	61da      	str	r2, [r3, #28]
      break;
 80049d0:	e023      	b.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fb1b 	bl	8005014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69d9      	ldr	r1, [r3, #28]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	021a      	lsls	r2, r3, #8
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	61da      	str	r2, [r3, #28]
      break;
 8004a12:	e002      	b.n	8004a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
      break;
 8004a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIM_ConfigClockSource+0x1c>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e0b4      	b.n	8004bb2 <HAL_TIM_ConfigClockSource+0x186>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a80:	d03e      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0xd4>
 8004a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a86:	f200 8087 	bhi.w	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8e:	f000 8086 	beq.w	8004b9e <HAL_TIM_ConfigClockSource+0x172>
 8004a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a96:	d87f      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b70      	cmp	r3, #112	; 0x70
 8004a9a:	d01a      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0xa6>
 8004a9c:	2b70      	cmp	r3, #112	; 0x70
 8004a9e:	d87b      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b60      	cmp	r3, #96	; 0x60
 8004aa2:	d050      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x11a>
 8004aa4:	2b60      	cmp	r3, #96	; 0x60
 8004aa6:	d877      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b50      	cmp	r3, #80	; 0x50
 8004aaa:	d03c      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0xfa>
 8004aac:	2b50      	cmp	r3, #80	; 0x50
 8004aae:	d873      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab0:	2b40      	cmp	r3, #64	; 0x40
 8004ab2:	d058      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x13a>
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d86f      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b30      	cmp	r3, #48	; 0x30
 8004aba:	d064      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x15a>
 8004abc:	2b30      	cmp	r3, #48	; 0x30
 8004abe:	d86b      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d060      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d867      	bhi.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d05c      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x15a>
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d05a      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0x15a>
 8004ad0:	e062      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6899      	ldr	r1, [r3, #8]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f000 fb67 	bl	80051b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004af4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	609a      	str	r2, [r3, #8]
      break;
 8004afe:	e04f      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6899      	ldr	r1, [r3, #8]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f000 fb50 	bl	80051b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b22:	609a      	str	r2, [r3, #8]
      break;
 8004b24:	e03c      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 fac4 	bl	80050c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2150      	movs	r1, #80	; 0x50
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fb1d 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004b44:	e02c      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fae3 	bl	800511e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2160      	movs	r1, #96	; 0x60
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fb0d 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004b64:	e01c      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f000 faa4 	bl	80050c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2140      	movs	r1, #64	; 0x40
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fafd 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004b84:	e00c      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f000 faf4 	bl	800517e <TIM_ITRx_SetConfig>
      break;
 8004b96:	e003      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b9c:	e000      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b083      	sub	sp, #12
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a40      	ldr	r2, [pc, #256]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d00f      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3d      	ldr	r2, [pc, #244]	; (8004d38 <TIM_Base_SetConfig+0x118>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <TIM_Base_SetConfig+0x11c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <TIM_Base_SetConfig+0x120>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d108      	bne.n	8004c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d02b      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d027      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <TIM_Base_SetConfig+0x118>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d023      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2b      	ldr	r2, [pc, #172]	; (8004d3c <TIM_Base_SetConfig+0x11c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01f      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <TIM_Base_SetConfig+0x120>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01b      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a29      	ldr	r2, [pc, #164]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d017      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a28      	ldr	r2, [pc, #160]	; (8004d48 <TIM_Base_SetConfig+0x128>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <TIM_Base_SetConfig+0x12c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <TIM_Base_SetConfig+0x130>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a25      	ldr	r2, [pc, #148]	; (8004d54 <TIM_Base_SetConfig+0x134>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a24      	ldr	r2, [pc, #144]	; (8004d58 <TIM_Base_SetConfig+0x138>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a23      	ldr	r2, [pc, #140]	; (8004d5c <TIM_Base_SetConfig+0x13c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d108      	bne.n	8004ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_Base_SetConfig+0xf8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0c      	ldr	r2, [pc, #48]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d103      	bne.n	8004d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	615a      	str	r2, [r3, #20]
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40010400 	.word	0x40010400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800
 8004d54:	40001800 	.word	0x40001800
 8004d58:	40001c00 	.word	0x40001c00
 8004d5c:	40002000 	.word	0x40002000

08004d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0201 	bic.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 0302 	bic.w	r3, r3, #2
 8004da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a20      	ldr	r2, [pc, #128]	; (8004e38 <TIM_OC1_SetConfig+0xd8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_OC1_SetConfig+0x64>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <TIM_OC1_SetConfig+0xdc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10c      	bne.n	8004dde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0308 	bic.w	r3, r3, #8
 8004dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <TIM_OC1_SetConfig+0xd8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_OC1_SetConfig+0x8e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <TIM_OC1_SetConfig+0xdc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d111      	bne.n	8004e12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	621a      	str	r2, [r3, #32]
}
 8004e2c:	bf00      	nop
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40010400 	.word	0x40010400

08004e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f023 0210 	bic.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0320 	bic.w	r3, r3, #32
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <TIM_OC2_SetConfig+0xe4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_OC2_SetConfig+0x68>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a21      	ldr	r2, [pc, #132]	; (8004f28 <TIM_OC2_SetConfig+0xe8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10d      	bne.n	8004ec4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <TIM_OC2_SetConfig+0xe4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_OC2_SetConfig+0x94>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a16      	ldr	r2, [pc, #88]	; (8004f28 <TIM_OC2_SetConfig+0xe8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d113      	bne.n	8004efc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	621a      	str	r2, [r3, #32]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40010000 	.word	0x40010000
 8004f28:	40010400 	.word	0x40010400

08004f2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a21      	ldr	r2, [pc, #132]	; (800500c <TIM_OC3_SetConfig+0xe0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_OC3_SetConfig+0x66>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a20      	ldr	r2, [pc, #128]	; (8005010 <TIM_OC3_SetConfig+0xe4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d10d      	bne.n	8004fae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a16      	ldr	r2, [pc, #88]	; (800500c <TIM_OC3_SetConfig+0xe0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_OC3_SetConfig+0x92>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a15      	ldr	r2, [pc, #84]	; (8005010 <TIM_OC3_SetConfig+0xe4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d113      	bne.n	8004fe6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	621a      	str	r2, [r3, #32]
}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	40010000 	.word	0x40010000
 8005010:	40010400 	.word	0x40010400

08005014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800505e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	031b      	lsls	r3, r3, #12
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a12      	ldr	r2, [pc, #72]	; (80050b8 <TIM_OC4_SetConfig+0xa4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_OC4_SetConfig+0x68>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a11      	ldr	r2, [pc, #68]	; (80050bc <TIM_OC4_SetConfig+0xa8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d109      	bne.n	8005090 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	019b      	lsls	r3, r3, #6
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40010400 	.word	0x40010400

080050c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0201 	bic.w	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 030a 	bic.w	r3, r3, #10
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0210 	bic.w	r2, r3, #16
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800515a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	f043 0307 	orr.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	609a      	str	r2, [r3, #8]
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2201      	movs	r2, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1a      	ldr	r2, [r3, #32]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	43db      	mvns	r3, r3
 8005216:	401a      	ands	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	fa01 f303 	lsl.w	r3, r1, r3
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <HAL_TIMEx_PWMN_Start+0x24>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e022      	b.n	80052aa <HAL_TIMEx_PWMN_Start+0x6a>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b04      	cmp	r3, #4
 8005268:	d109      	bne.n	800527e <HAL_TIMEx_PWMN_Start+0x3e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b01      	cmp	r3, #1
 8005274:	bf14      	ite	ne
 8005276:	2301      	movne	r3, #1
 8005278:	2300      	moveq	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	e015      	b.n	80052aa <HAL_TIMEx_PWMN_Start+0x6a>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d109      	bne.n	8005298 <HAL_TIMEx_PWMN_Start+0x58>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	bf14      	ite	ne
 8005290:	2301      	movne	r3, #1
 8005292:	2300      	moveq	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e008      	b.n	80052aa <HAL_TIMEx_PWMN_Start+0x6a>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	bf14      	ite	ne
 80052a4:	2301      	movne	r3, #1
 80052a6:	2300      	moveq	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e06d      	b.n	800538e <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <HAL_TIMEx_PWMN_Start+0x82>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c0:	e013      	b.n	80052ea <HAL_TIMEx_PWMN_Start+0xaa>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d104      	bne.n	80052d2 <HAL_TIMEx_PWMN_Start+0x92>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052d0:	e00b      	b.n	80052ea <HAL_TIMEx_PWMN_Start+0xaa>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d104      	bne.n	80052e2 <HAL_TIMEx_PWMN_Start+0xa2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e0:	e003      	b.n	80052ea <HAL_TIMEx_PWMN_Start+0xaa>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2204      	movs	r2, #4
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f940 	bl	8005578 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005306:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a22      	ldr	r2, [pc, #136]	; (8005398 <HAL_TIMEx_PWMN_Start+0x158>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d022      	beq.n	8005358 <HAL_TIMEx_PWMN_Start+0x118>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d01d      	beq.n	8005358 <HAL_TIMEx_PWMN_Start+0x118>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1e      	ldr	r2, [pc, #120]	; (800539c <HAL_TIMEx_PWMN_Start+0x15c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d018      	beq.n	8005358 <HAL_TIMEx_PWMN_Start+0x118>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_TIMEx_PWMN_Start+0x160>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d013      	beq.n	8005358 <HAL_TIMEx_PWMN_Start+0x118>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <HAL_TIMEx_PWMN_Start+0x164>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00e      	beq.n	8005358 <HAL_TIMEx_PWMN_Start+0x118>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <HAL_TIMEx_PWMN_Start+0x168>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_TIMEx_PWMN_Start+0x118>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a18      	ldr	r2, [pc, #96]	; (80053ac <HAL_TIMEx_PWMN_Start+0x16c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d004      	beq.n	8005358 <HAL_TIMEx_PWMN_Start+0x118>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <HAL_TIMEx_PWMN_Start+0x170>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d111      	bne.n	800537c <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d010      	beq.n	800538c <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	e007      	b.n	800538c <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40010000 	.word	0x40010000
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40010400 	.word	0x40010400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40001800 	.word	0x40001800

080053b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e05a      	b.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a21      	ldr	r2, [pc, #132]	; (8005490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d022      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005418:	d01d      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d018      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1b      	ldr	r2, [pc, #108]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1a      	ldr	r2, [pc, #104]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10c      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800545c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4313      	orrs	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40010000 	.word	0x40010000
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40010400 	.word	0x40010400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40001800 	.word	0x40001800

080054ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e03d      	b.n	8005544 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2204      	movs	r2, #4
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1a      	ldr	r2, [r3, #32]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	43db      	mvns	r3, r3
 800559a:	401a      	ands	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055c2:	b084      	sub	sp, #16
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	f107 001c 	add.w	r0, r7, #28
 80055d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d122      	bne.n	8005620 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d105      	bne.n	8005614 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f001 fbed 	bl	8006df4 <USB_CoreReset>
 800561a:	4603      	mov	r3, r0
 800561c:	73fb      	strb	r3, [r7, #15]
 800561e:	e01a      	b.n	8005656 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f001 fbe1 	bl	8006df4 <USB_CoreReset>
 8005632:	4603      	mov	r3, r0
 8005634:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d106      	bne.n	800564a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
 8005648:	e005      	b.n	8005656 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	2b01      	cmp	r3, #1
 800565a:	d10b      	bne.n	8005674 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f043 0206 	orr.w	r2, r3, #6
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f043 0220 	orr.w	r2, r3, #32
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005680:	b004      	add	sp, #16
 8005682:	4770      	bx	lr

08005684 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d165      	bne.n	8005764 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4a41      	ldr	r2, [pc, #260]	; (80057a0 <USB_SetTurnaroundTime+0x11c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d906      	bls.n	80056ae <USB_SetTurnaroundTime+0x2a>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4a40      	ldr	r2, [pc, #256]	; (80057a4 <USB_SetTurnaroundTime+0x120>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d202      	bcs.n	80056ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056a8:	230f      	movs	r3, #15
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e062      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <USB_SetTurnaroundTime+0x120>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d306      	bcc.n	80056c4 <USB_SetTurnaroundTime+0x40>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4a3b      	ldr	r2, [pc, #236]	; (80057a8 <USB_SetTurnaroundTime+0x124>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d202      	bcs.n	80056c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056be:	230e      	movs	r3, #14
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	e057      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4a38      	ldr	r2, [pc, #224]	; (80057a8 <USB_SetTurnaroundTime+0x124>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d306      	bcc.n	80056da <USB_SetTurnaroundTime+0x56>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4a37      	ldr	r2, [pc, #220]	; (80057ac <USB_SetTurnaroundTime+0x128>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d202      	bcs.n	80056da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056d4:	230d      	movs	r3, #13
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e04c      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a33      	ldr	r2, [pc, #204]	; (80057ac <USB_SetTurnaroundTime+0x128>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d306      	bcc.n	80056f0 <USB_SetTurnaroundTime+0x6c>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4a32      	ldr	r2, [pc, #200]	; (80057b0 <USB_SetTurnaroundTime+0x12c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d802      	bhi.n	80056f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056ea:	230c      	movs	r3, #12
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	e041      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a2f      	ldr	r2, [pc, #188]	; (80057b0 <USB_SetTurnaroundTime+0x12c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d906      	bls.n	8005706 <USB_SetTurnaroundTime+0x82>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4a2e      	ldr	r2, [pc, #184]	; (80057b4 <USB_SetTurnaroundTime+0x130>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d802      	bhi.n	8005706 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005700:	230b      	movs	r3, #11
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e036      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4a2a      	ldr	r2, [pc, #168]	; (80057b4 <USB_SetTurnaroundTime+0x130>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d906      	bls.n	800571c <USB_SetTurnaroundTime+0x98>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4a29      	ldr	r2, [pc, #164]	; (80057b8 <USB_SetTurnaroundTime+0x134>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d802      	bhi.n	800571c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005716:	230a      	movs	r3, #10
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	e02b      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <USB_SetTurnaroundTime+0x134>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d906      	bls.n	8005732 <USB_SetTurnaroundTime+0xae>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a25      	ldr	r2, [pc, #148]	; (80057bc <USB_SetTurnaroundTime+0x138>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d202      	bcs.n	8005732 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800572c:	2309      	movs	r3, #9
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e020      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a21      	ldr	r2, [pc, #132]	; (80057bc <USB_SetTurnaroundTime+0x138>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d306      	bcc.n	8005748 <USB_SetTurnaroundTime+0xc4>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <USB_SetTurnaroundTime+0x13c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d802      	bhi.n	8005748 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005742:	2308      	movs	r3, #8
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e015      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <USB_SetTurnaroundTime+0x13c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d906      	bls.n	800575e <USB_SetTurnaroundTime+0xda>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <USB_SetTurnaroundTime+0x140>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d202      	bcs.n	800575e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005758:	2307      	movs	r3, #7
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	e00a      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800575e:	2306      	movs	r3, #6
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e007      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800576a:	2309      	movs	r3, #9
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e001      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005770:	2309      	movs	r3, #9
 8005772:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	029b      	lsls	r3, r3, #10
 8005788:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	00d8acbf 	.word	0x00d8acbf
 80057a4:	00e4e1c0 	.word	0x00e4e1c0
 80057a8:	00f42400 	.word	0x00f42400
 80057ac:	01067380 	.word	0x01067380
 80057b0:	011a499f 	.word	0x011a499f
 80057b4:	01312cff 	.word	0x01312cff
 80057b8:	014ca43f 	.word	0x014ca43f
 80057bc:	016e3600 	.word	0x016e3600
 80057c0:	01a6ab1f 	.word	0x01a6ab1f
 80057c4:	01e84800 	.word	0x01e84800

080057c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d115      	bne.n	800585a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800583a:	2001      	movs	r0, #1
 800583c:	f7fb ffa0 	bl	8001780 <HAL_Delay>
      ms++;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fa45 	bl	8006cd6 <USB_GetMode>
 800584c:	4603      	mov	r3, r0
 800584e:	2b01      	cmp	r3, #1
 8005850:	d01e      	beq.n	8005890 <USB_SetCurrentMode+0x84>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b31      	cmp	r3, #49	; 0x31
 8005856:	d9f0      	bls.n	800583a <USB_SetCurrentMode+0x2e>
 8005858:	e01a      	b.n	8005890 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d115      	bne.n	800588c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800586c:	2001      	movs	r0, #1
 800586e:	f7fb ff87 	bl	8001780 <HAL_Delay>
      ms++;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3301      	adds	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fa2c 	bl	8006cd6 <USB_GetMode>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <USB_SetCurrentMode+0x84>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b31      	cmp	r3, #49	; 0x31
 8005888:	d9f0      	bls.n	800586c <USB_SetCurrentMode+0x60>
 800588a:	e001      	b.n	8005890 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e005      	b.n	800589c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2b32      	cmp	r3, #50	; 0x32
 8005894:	d101      	bne.n	800589a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058a4:	b084      	sub	sp, #16
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	e009      	b.n	80058d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3340      	adds	r3, #64	; 0x40
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	2200      	movs	r2, #0
 80058d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	3301      	adds	r3, #1
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b0e      	cmp	r3, #14
 80058dc:	d9f2      	bls.n	80058c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11c      	bne.n	800591e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f2:	f043 0302 	orr.w	r3, r3, #2
 80058f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
 800591c:	e00b      	b.n	8005936 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800593c:	461a      	mov	r2, r3
 800593e:	2300      	movs	r3, #0
 8005940:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	4619      	mov	r1, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	461a      	mov	r2, r3
 8005952:	680b      	ldr	r3, [r1, #0]
 8005954:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	2b01      	cmp	r3, #1
 800595a:	d10c      	bne.n	8005976 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005962:	2100      	movs	r1, #0
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f965 	bl	8005c34 <USB_SetDevSpeed>
 800596a:	e008      	b.n	800597e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800596c:	2101      	movs	r1, #1
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f960 	bl	8005c34 <USB_SetDevSpeed>
 8005974:	e003      	b.n	800597e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005976:	2103      	movs	r1, #3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f95b 	bl	8005c34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800597e:	2110      	movs	r1, #16
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8f3 	bl	8005b6c <USB_FlushTxFifo>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f91f 	bl	8005bd4 <USB_FlushRxFifo>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	461a      	mov	r2, r3
 80059a8:	2300      	movs	r3, #0
 80059aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	461a      	mov	r2, r3
 80059b4:	2300      	movs	r3, #0
 80059b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	461a      	mov	r2, r3
 80059c0:	2300      	movs	r3, #0
 80059c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	e043      	b.n	8005a52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e0:	d118      	bne.n	8005a14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f4:	461a      	mov	r2, r3
 80059f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e013      	b.n	8005a26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e008      	b.n	8005a26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	461a      	mov	r2, r3
 8005a22:	2300      	movs	r3, #0
 8005a24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a32:	461a      	mov	r2, r3
 8005a34:	2300      	movs	r3, #0
 8005a36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	461a      	mov	r2, r3
 8005a46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d3b7      	bcc.n	80059ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	e043      	b.n	8005ae8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a76:	d118      	bne.n	8005aaa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e013      	b.n	8005abc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e008      	b.n	8005abc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	2300      	movs	r3, #0
 8005aba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	461a      	mov	r2, r3
 8005adc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ae0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d3b7      	bcc.n	8005a60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f043 0210 	orr.w	r2, r3, #16
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699a      	ldr	r2, [r3, #24]
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <USB_DevInit+0x2c4>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f043 0208 	orr.w	r2, r3, #8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d107      	bne.n	8005b58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b50:	f043 0304 	orr.w	r3, r3, #4
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b64:	b004      	add	sp, #16
 8005b66:	4770      	bx	lr
 8005b68:	803c3800 	.word	0x803c3800

08005b6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <USB_FlushTxFifo+0x64>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e01b      	b.n	8005bc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	daf2      	bge.n	8005b7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	019b      	lsls	r3, r3, #6
 8005b9c:	f043 0220 	orr.w	r2, r3, #32
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <USB_FlushTxFifo+0x64>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e006      	b.n	8005bc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d0f0      	beq.n	8005ba4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	00030d40 	.word	0x00030d40

08005bd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a11      	ldr	r2, [pc, #68]	; (8005c30 <USB_FlushRxFifo+0x5c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e018      	b.n	8005c24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	daf2      	bge.n	8005be0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2210      	movs	r2, #16
 8005c02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a08      	ldr	r2, [pc, #32]	; (8005c30 <USB_FlushRxFifo+0x5c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d901      	bls.n	8005c16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e006      	b.n	8005c24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d0f0      	beq.n	8005c04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	00030d40 	.word	0x00030d40

08005c34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c54:	4313      	orrs	r3, r2
 8005c56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b087      	sub	sp, #28
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0306 	and.w	r3, r3, #6
 8005c7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
 8005c8a:	e00a      	b.n	8005ca2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d002      	beq.n	8005c98 <USB_GetDevSpeed+0x32>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b06      	cmp	r3, #6
 8005c96:	d102      	bne.n	8005c9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	75fb      	strb	r3, [r7, #23]
 8005c9c:	e001      	b.n	8005ca2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c9e:	230f      	movs	r3, #15
 8005ca0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d13a      	bne.n	8005d42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	2101      	movs	r1, #1
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	68f9      	ldr	r1, [r7, #12]
 8005ce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d155      	bne.n	8005db0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	791b      	ldrb	r3, [r3, #4]
 8005d1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	059b      	lsls	r3, r3, #22
 8005d26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	e036      	b.n	8005db0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d48:	69da      	ldr	r2, [r3, #28]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	2101      	movs	r1, #1
 8005d54:	fa01 f303 	lsl.w	r3, r1, r3
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d60:	4313      	orrs	r3, r2
 8005d62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d11a      	bne.n	8005db0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	791b      	ldrb	r3, [r3, #4]
 8005d94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d96:	430b      	orrs	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	0151      	lsls	r1, r2, #5
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	440a      	add	r2, r1
 8005da2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
	...

08005dc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d161      	bne.n	8005ea0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df2:	d11f      	bne.n	8005e34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	2101      	movs	r1, #1
 8005e46:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e54:	4013      	ands	r3, r2
 8005e56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	2101      	movs	r1, #1
 8005e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	43db      	mvns	r3, r3
 8005e72:	68f9      	ldr	r1, [r7, #12]
 8005e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	0159      	lsls	r1, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	440b      	add	r3, r1
 8005e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e96:	4619      	mov	r1, r3
 8005e98:	4b35      	ldr	r3, [pc, #212]	; (8005f70 <USB_DeactivateEndpoint+0x1b0>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	600b      	str	r3, [r1, #0]
 8005e9e:	e060      	b.n	8005f62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb6:	d11f      	bne.n	8005ef8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ed6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	2101      	movs	r1, #1
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	43db      	mvns	r3, r3
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f18:	4013      	ands	r3, r2
 8005f1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	43db      	mvns	r3, r3
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	0159      	lsls	r1, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	440b      	add	r3, r1
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <USB_DeactivateEndpoint+0x1b4>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	ec337800 	.word	0xec337800
 8005f74:	eff37800 	.word	0xeff37800

08005f78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	f040 815c 	bne.w	8006252 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d132      	bne.n	8006008 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006000:	0cdb      	lsrs	r3, r3, #19
 8006002:	04db      	lsls	r3, r3, #19
 8006004:	6113      	str	r3, [r2, #16]
 8006006:	e074      	b.n	80060f2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006022:	0cdb      	lsrs	r3, r3, #19
 8006024:	04db      	lsls	r3, r3, #19
 8006026:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	0151      	lsls	r1, r2, #5
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	440a      	add	r2, r1
 800603e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006042:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006046:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800604a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006058:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6999      	ldr	r1, [r3, #24]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	440b      	add	r3, r1
 8006064:	1e59      	subs	r1, r3, #1
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	fbb1 f3f3 	udiv	r3, r1, r3
 800606e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006070:	4b9d      	ldr	r3, [pc, #628]	; (80062e8 <USB_EPStartXfer+0x370>)
 8006072:	400b      	ands	r3, r1
 8006074:	69b9      	ldr	r1, [r7, #24]
 8006076:	0148      	lsls	r0, r1, #5
 8006078:	69f9      	ldr	r1, [r7, #28]
 800607a:	4401      	add	r1, r0
 800607c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006080:	4313      	orrs	r3, r2
 8006082:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	691a      	ldr	r2, [r3, #16]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800609a:	69b9      	ldr	r1, [r7, #24]
 800609c:	0148      	lsls	r0, r1, #5
 800609e:	69f9      	ldr	r1, [r7, #28]
 80060a0:	4401      	add	r1, r0
 80060a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060a6:	4313      	orrs	r3, r2
 80060a8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	791b      	ldrb	r3, [r3, #4]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d11f      	bne.n	80060f2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060d0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060f0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d14b      	bne.n	8006190 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610c:	461a      	mov	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	791b      	ldrb	r3, [r3, #4]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d128      	bne.n	800616e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d110      	bne.n	800614e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	e00f      	b.n	800616e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	69fa      	ldr	r2, [r7, #28]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006188:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e133      	b.n	80063f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	791b      	ldrb	r3, [r3, #4]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d015      	beq.n	80061e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 811b 	beq.w	80063f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	2101      	movs	r1, #1
 80061d4:	fa01 f303 	lsl.w	r3, r1, r3
 80061d8:	69f9      	ldr	r1, [r7, #28]
 80061da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061de:	4313      	orrs	r3, r2
 80061e0:	634b      	str	r3, [r1, #52]	; 0x34
 80061e2:	e109      	b.n	80063f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d110      	bne.n	8006216 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	0151      	lsls	r1, r2, #5
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	440a      	add	r2, r1
 800620a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	e00f      	b.n	8006236 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	0151      	lsls	r1, r2, #5
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	440a      	add	r2, r1
 800622c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006234:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6919      	ldr	r1, [r3, #16]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	b298      	uxth	r0, r3
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	4603      	mov	r3, r0
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fade 	bl	800680c <USB_WritePacket>
 8006250:	e0d2      	b.n	80063f8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800626c:	0cdb      	lsrs	r3, r3, #19
 800626e:	04db      	lsls	r3, r3, #19
 8006270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006290:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006294:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d126      	bne.n	80062ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b4:	69b9      	ldr	r1, [r7, #24]
 80062b6:	0148      	lsls	r0, r1, #5
 80062b8:	69f9      	ldr	r1, [r7, #28]
 80062ba:	4401      	add	r1, r0
 80062bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062c0:	4313      	orrs	r3, r2
 80062c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062e2:	6113      	str	r3, [r2, #16]
 80062e4:	e03a      	b.n	800635c <USB_EPStartXfer+0x3e4>
 80062e6:	bf00      	nop
 80062e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	1e5a      	subs	r2, r3, #1
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006300:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	8afa      	ldrh	r2, [r7, #22]
 8006308:	fb03 f202 	mul.w	r2, r3, r2
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	8afb      	ldrh	r3, [r7, #22]
 8006320:	04d9      	lsls	r1, r3, #19
 8006322:	4b38      	ldr	r3, [pc, #224]	; (8006404 <USB_EPStartXfer+0x48c>)
 8006324:	400b      	ands	r3, r1
 8006326:	69b9      	ldr	r1, [r7, #24]
 8006328:	0148      	lsls	r0, r1, #5
 800632a:	69f9      	ldr	r1, [r7, #28]
 800632c:	4401      	add	r1, r0
 800632e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006332:	4313      	orrs	r3, r2
 8006334:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634c:	69b9      	ldr	r1, [r7, #24]
 800634e:	0148      	lsls	r0, r1, #5
 8006350:	69f9      	ldr	r1, [r7, #28]
 8006352:	4401      	add	r1, r0
 8006354:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006358:	4313      	orrs	r3, r2
 800635a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d10d      	bne.n	800637e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6919      	ldr	r1, [r3, #16]
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	460a      	mov	r2, r1
 800637c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	791b      	ldrb	r3, [r3, #4]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d128      	bne.n	80063d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006392:	2b00      	cmp	r3, #0
 8006394:	d110      	bne.n	80063b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e00f      	b.n	80063d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	1ff80000 	.word	0x1ff80000

08006408 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b01      	cmp	r3, #1
 8006426:	f040 80ce 	bne.w	80065c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d132      	bne.n	8006498 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006450:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006454:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	0151      	lsls	r1, r2, #5
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	440a      	add	r2, r1
 800646c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006470:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006474:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	440a      	add	r2, r1
 800648c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006490:	0cdb      	lsrs	r3, r3, #19
 8006492:	04db      	lsls	r3, r3, #19
 8006494:	6113      	str	r3, [r2, #16]
 8006496:	e04e      	b.n	8006536 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b2:	0cdb      	lsrs	r3, r3, #19
 80064b4:	04db      	lsls	r3, r3, #19
 80064b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	699a      	ldr	r2, [r3, #24]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d903      	bls.n	80064f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800650e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006526:	6939      	ldr	r1, [r7, #16]
 8006528:	0148      	lsls	r0, r1, #5
 800652a:	6979      	ldr	r1, [r7, #20]
 800652c:	4401      	add	r1, r0
 800652e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006532:	4313      	orrs	r3, r2
 8006534:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d11e      	bne.n	800657a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d009      	beq.n	8006558 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	461a      	mov	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006572:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	e097      	b.n	80066aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006598:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8083 	beq.w	80066aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 030f 	and.w	r3, r3, #15
 80065b4:	2101      	movs	r1, #1
 80065b6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ba:	6979      	ldr	r1, [r7, #20]
 80065bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065c0:	4313      	orrs	r3, r2
 80065c2:	634b      	str	r3, [r1, #52]	; 0x34
 80065c4:	e071      	b.n	80066aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e0:	0cdb      	lsrs	r3, r3, #19
 80065e2:	04db      	lsls	r3, r3, #19
 80065e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006600:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006604:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006608:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006640:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006658:	6939      	ldr	r1, [r7, #16]
 800665a:	0148      	lsls	r0, r1, #5
 800665c:	6979      	ldr	r1, [r7, #20]
 800665e:	4401      	add	r1, r0
 8006660:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006664:	4313      	orrs	r3, r2
 8006666:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d10d      	bne.n	800668a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	6919      	ldr	r1, [r3, #16]
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	460a      	mov	r2, r1
 8006688:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d14a      	bne.n	800676c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ee:	f040 8086 	bne.w	80067fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006710:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006714:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006738:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f242 7210 	movw	r2, #10000	; 0x2710
 8006746:	4293      	cmp	r3, r2
 8006748:	d902      	bls.n	8006750 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	75fb      	strb	r3, [r7, #23]
          break;
 800674e:	e056      	b.n	80067fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006768:	d0e7      	beq.n	800673a <USB_EPStopXfer+0x82>
 800676a:	e048      	b.n	80067fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006784:	d13b      	bne.n	80067fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80067da:	4293      	cmp	r3, r2
 80067dc:	d902      	bls.n	80067e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
          break;
 80067e2:	e00c      	b.n	80067fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067fc:	d0e7      	beq.n	80067ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006800:	4618      	mov	r0, r3
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	; 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4611      	mov	r1, r2
 8006818:	461a      	mov	r2, r3
 800681a:	460b      	mov	r3, r1
 800681c:	71fb      	strb	r3, [r7, #7]
 800681e:	4613      	mov	r3, r2
 8006820:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800682a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d123      	bne.n	800687a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006832:	88bb      	ldrh	r3, [r7, #4]
 8006834:	3303      	adds	r3, #3
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800683a:	2300      	movs	r3, #0
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	e018      	b.n	8006872 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	031a      	lsls	r2, r3, #12
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4413      	add	r3, r2
 8006848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800684c:	461a      	mov	r2, r3
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	3301      	adds	r3, #1
 8006858:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3301      	adds	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	3301      	adds	r3, #1
 8006864:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3301      	adds	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	3301      	adds	r3, #1
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	429a      	cmp	r2, r3
 8006878:	d3e2      	bcc.n	8006840 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3724      	adds	r7, #36	; 0x24
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006888:	b480      	push	{r7}
 800688a:	b08b      	sub	sp, #44	; 0x2c
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	089b      	lsrs	r3, r3, #2
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068ae:	2300      	movs	r3, #0
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	e014      	b.n	80068de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	601a      	str	r2, [r3, #0]
    pDest++;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	3301      	adds	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	3301      	adds	r3, #1
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	3301      	adds	r3, #1
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	3301      	adds	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	3301      	adds	r3, #1
 80068dc:	623b      	str	r3, [r7, #32]
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d3e6      	bcc.n	80068b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068e6:	8bfb      	ldrh	r3, [r7, #30]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01e      	beq.n	800692a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f6:	461a      	mov	r2, r3
 80068f8:	f107 0310 	add.w	r3, r7, #16
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
 800690c:	b2da      	uxtb	r2, r3
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	701a      	strb	r2, [r3, #0]
      i++;
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	3301      	adds	r3, #1
 8006916:	623b      	str	r3, [r7, #32]
      pDest++;
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	3301      	adds	r3, #1
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800691e:	8bfb      	ldrh	r3, [r7, #30]
 8006920:	3b01      	subs	r3, #1
 8006922:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006924:	8bfb      	ldrh	r3, [r7, #30]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ea      	bne.n	8006900 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800692c:	4618      	mov	r0, r3
 800692e:	372c      	adds	r7, #44	; 0x2c
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d12c      	bne.n	80069ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	db12      	blt.n	800698c <USB_EPSetStall+0x54>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00f      	beq.n	800698c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006986:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800698a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e02b      	b.n	8006a06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	db12      	blt.n	80069e6 <USB_EPSetStall+0xae>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00f      	beq.n	80069e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d128      	bne.n	8006a82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	791b      	ldrb	r3, [r3, #4]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d003      	beq.n	8006a60 <USB_EPClearStall+0x4c>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	791b      	ldrb	r3, [r3, #4]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d138      	bne.n	8006ad2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	e027      	b.n	8006ad2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aa0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d003      	beq.n	8006ab2 <USB_EPClearStall+0x9e>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	791b      	ldrb	r3, [r3, #4]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d10f      	bne.n	8006ad2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006afe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006b14:	68f9      	ldr	r1, [r7, #12]
 8006b16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b5a:	f023 0302 	bic.w	r3, r3, #2
 8006b5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b88:	f023 0303 	bic.w	r3, r3, #3
 8006b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b9c:	f043 0302 	orr.w	r3, r3, #2
 8006ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	0c1b      	lsrs	r3, r3, #16
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	b29b      	uxth	r3, r3
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b087      	sub	sp, #28
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	01db      	lsls	r3, r3, #7
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d10:	f023 0307 	bic.w	r3, r3, #7
 8006d14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	460b      	mov	r3, r1
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	333c      	adds	r3, #60	; 0x3c
 8006d4e:	3304      	adds	r3, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	4a26      	ldr	r2, [pc, #152]	; (8006df0 <USB_EP0_OutStart+0xb8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d90a      	bls.n	8006d72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d6c:	d101      	bne.n	8006d72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e037      	b.n	8006de2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d78:	461a      	mov	r2, r3
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da0:	f043 0318 	orr.w	r3, r3, #24
 8006da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006db8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d10f      	bne.n	8006de0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006dde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	4f54300a 	.word	0x4f54300a

08006df4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <USB_CoreReset+0x64>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e01b      	b.n	8006e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	daf2      	bge.n	8006e00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f043 0201 	orr.w	r2, r3, #1
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4a09      	ldr	r2, [pc, #36]	; (8006e58 <USB_CoreReset+0x64>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d901      	bls.n	8006e3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e006      	b.n	8006e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d0f0      	beq.n	8006e2a <USB_CoreReset+0x36>

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	00030d40 	.word	0x00030d40

08006e5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e6c:	f002 fc9e 	bl	80097ac <USBD_static_malloc>
 8006e70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d109      	bne.n	8006e8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	32b0      	adds	r2, #176	; 0xb0
 8006e82:	2100      	movs	r1, #0
 8006e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e0d4      	b.n	8007036 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e90:	2100      	movs	r1, #0
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f002 fd06 	bl	80098a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32b0      	adds	r2, #176	; 0xb0
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	32b0      	adds	r2, #176	; 0xb0
 8006eb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7c1b      	ldrb	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d138      	bne.n	8006f36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ec4:	4b5e      	ldr	r3, [pc, #376]	; (8007040 <USBD_CDC_Init+0x1e4>)
 8006ec6:	7819      	ldrb	r1, [r3, #0]
 8006ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ecc:	2202      	movs	r2, #2
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f002 fb49 	bl	8009566 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ed4:	4b5a      	ldr	r3, [pc, #360]	; (8007040 <USBD_CDC_Init+0x1e4>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 020f 	and.w	r2, r3, #15
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3324      	adds	r3, #36	; 0x24
 8006eea:	2201      	movs	r2, #1
 8006eec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006eee:	4b55      	ldr	r3, [pc, #340]	; (8007044 <USBD_CDC_Init+0x1e8>)
 8006ef0:	7819      	ldrb	r1, [r3, #0]
 8006ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f002 fb34 	bl	8009566 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006efe:	4b51      	ldr	r3, [pc, #324]	; (8007044 <USBD_CDC_Init+0x1e8>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	f003 020f 	and.w	r2, r3, #15
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f16:	2201      	movs	r2, #1
 8006f18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f1a:	4b4b      	ldr	r3, [pc, #300]	; (8007048 <USBD_CDC_Init+0x1ec>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 020f 	and.w	r2, r3, #15
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	3326      	adds	r3, #38	; 0x26
 8006f30:	2210      	movs	r2, #16
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	e035      	b.n	8006fa2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f36:	4b42      	ldr	r3, [pc, #264]	; (8007040 <USBD_CDC_Init+0x1e4>)
 8006f38:	7819      	ldrb	r1, [r3, #0]
 8006f3a:	2340      	movs	r3, #64	; 0x40
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f002 fb11 	bl	8009566 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f44:	4b3e      	ldr	r3, [pc, #248]	; (8007040 <USBD_CDC_Init+0x1e4>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 020f 	and.w	r2, r3, #15
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	3324      	adds	r3, #36	; 0x24
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f5e:	4b39      	ldr	r3, [pc, #228]	; (8007044 <USBD_CDC_Init+0x1e8>)
 8006f60:	7819      	ldrb	r1, [r3, #0]
 8006f62:	2340      	movs	r3, #64	; 0x40
 8006f64:	2202      	movs	r2, #2
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f002 fafd 	bl	8009566 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f6c:	4b35      	ldr	r3, [pc, #212]	; (8007044 <USBD_CDC_Init+0x1e8>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f003 020f 	and.w	r2, r3, #15
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	4613      	mov	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f84:	2201      	movs	r2, #1
 8006f86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f88:	4b2f      	ldr	r3, [pc, #188]	; (8007048 <USBD_CDC_Init+0x1ec>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 020f 	and.w	r2, r3, #15
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3326      	adds	r3, #38	; 0x26
 8006f9e:	2210      	movs	r2, #16
 8006fa0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fa2:	4b29      	ldr	r3, [pc, #164]	; (8007048 <USBD_CDC_Init+0x1ec>)
 8006fa4:	7819      	ldrb	r1, [r3, #0]
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	2203      	movs	r2, #3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f002 fadb 	bl	8009566 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006fb0:	4b25      	ldr	r3, [pc, #148]	; (8007048 <USBD_CDC_Init+0x1ec>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 020f 	and.w	r2, r3, #15
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3324      	adds	r3, #36	; 0x24
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	33b0      	adds	r3, #176	; 0xb0
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007000:	2302      	movs	r3, #2
 8007002:	e018      	b.n	8007036 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	7c1b      	ldrb	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10a      	bne.n	8007022 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <USBD_CDC_Init+0x1e8>)
 800700e:	7819      	ldrb	r1, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f002 fb92 	bl	8009744 <USBD_LL_PrepareReceive>
 8007020:	e008      	b.n	8007034 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <USBD_CDC_Init+0x1e8>)
 8007024:	7819      	ldrb	r1, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f002 fb88 	bl	8009744 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000693 	.word	0x20000693
 8007044:	20000694 	.word	0x20000694
 8007048:	20000695 	.word	0x20000695

0800704c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007058:	4b3a      	ldr	r3, [pc, #232]	; (8007144 <USBD_CDC_DeInit+0xf8>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f002 faa7 	bl	80095b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007064:	4b37      	ldr	r3, [pc, #220]	; (8007144 <USBD_CDC_DeInit+0xf8>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	f003 020f 	and.w	r2, r3, #15
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	3324      	adds	r3, #36	; 0x24
 800707a:	2200      	movs	r2, #0
 800707c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800707e:	4b32      	ldr	r3, [pc, #200]	; (8007148 <USBD_CDC_DeInit+0xfc>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f002 fa94 	bl	80095b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800708a:	4b2f      	ldr	r3, [pc, #188]	; (8007148 <USBD_CDC_DeInit+0xfc>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	f003 020f 	and.w	r2, r3, #15
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070a2:	2200      	movs	r2, #0
 80070a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80070a6:	4b29      	ldr	r3, [pc, #164]	; (800714c <USBD_CDC_DeInit+0x100>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f002 fa80 	bl	80095b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <USBD_CDC_DeInit+0x100>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	f003 020f 	and.w	r2, r3, #15
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	3324      	adds	r3, #36	; 0x24
 80070c8:	2200      	movs	r2, #0
 80070ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070cc:	4b1f      	ldr	r3, [pc, #124]	; (800714c <USBD_CDC_DeInit+0x100>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	f003 020f 	and.w	r2, r3, #15
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	3326      	adds	r3, #38	; 0x26
 80070e2:	2200      	movs	r2, #0
 80070e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	32b0      	adds	r2, #176	; 0xb0
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01f      	beq.n	8007138 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	33b0      	adds	r3, #176	; 0xb0
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	32b0      	adds	r2, #176	; 0xb0
 8007116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711a:	4618      	mov	r0, r3
 800711c:	f002 fb54 	bl	80097c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	32b0      	adds	r2, #176	; 0xb0
 800712a:	2100      	movs	r1, #0
 800712c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000693 	.word	0x20000693
 8007148:	20000694 	.word	0x20000694
 800714c:	20000695 	.word	0x20000695

08007150 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	32b0      	adds	r2, #176	; 0xb0
 8007164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007168:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800717c:	2303      	movs	r3, #3
 800717e:	e0bf      	b.n	8007300 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007188:	2b00      	cmp	r3, #0
 800718a:	d050      	beq.n	800722e <USBD_CDC_Setup+0xde>
 800718c:	2b20      	cmp	r3, #32
 800718e:	f040 80af 	bne.w	80072f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	88db      	ldrh	r3, [r3, #6]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d03a      	beq.n	8007210 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	b25b      	sxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	da1b      	bge.n	80071dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	33b0      	adds	r3, #176	; 0xb0
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80071ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	88d2      	ldrh	r2, [r2, #6]
 80071c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	88db      	ldrh	r3, [r3, #6]
 80071c6:	2b07      	cmp	r3, #7
 80071c8:	bf28      	it	cs
 80071ca:	2307      	movcs	r3, #7
 80071cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	89fa      	ldrh	r2, [r7, #14]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fd89 	bl	8008cec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071da:	e090      	b.n	80072fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	785a      	ldrb	r2, [r3, #1]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	88db      	ldrh	r3, [r3, #6]
 80071ea:	2b3f      	cmp	r3, #63	; 0x3f
 80071ec:	d803      	bhi.n	80071f6 <USBD_CDC_Setup+0xa6>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	88db      	ldrh	r3, [r3, #6]
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	e000      	b.n	80071f8 <USBD_CDC_Setup+0xa8>
 80071f6:	2240      	movs	r2, #64	; 0x40
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071fe:	6939      	ldr	r1, [r7, #16]
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007206:	461a      	mov	r2, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fd9b 	bl	8008d44 <USBD_CtlPrepareRx>
      break;
 800720e:	e076      	b.n	80072fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	33b0      	adds	r3, #176	; 0xb0
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	7850      	ldrb	r0, [r2, #1]
 8007226:	2200      	movs	r2, #0
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	4798      	blx	r3
      break;
 800722c:	e067      	b.n	80072fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b0b      	cmp	r3, #11
 8007234:	d851      	bhi.n	80072da <USBD_CDC_Setup+0x18a>
 8007236:	a201      	add	r2, pc, #4	; (adr r2, 800723c <USBD_CDC_Setup+0xec>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	0800726d 	.word	0x0800726d
 8007240:	080072e9 	.word	0x080072e9
 8007244:	080072db 	.word	0x080072db
 8007248:	080072db 	.word	0x080072db
 800724c:	080072db 	.word	0x080072db
 8007250:	080072db 	.word	0x080072db
 8007254:	080072db 	.word	0x080072db
 8007258:	080072db 	.word	0x080072db
 800725c:	080072db 	.word	0x080072db
 8007260:	080072db 	.word	0x080072db
 8007264:	08007297 	.word	0x08007297
 8007268:	080072c1 	.word	0x080072c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b03      	cmp	r3, #3
 8007276:	d107      	bne.n	8007288 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007278:	f107 030a 	add.w	r3, r7, #10
 800727c:	2202      	movs	r2, #2
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 fd33 	bl	8008cec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007286:	e032      	b.n	80072ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fcbd 	bl	8008c0a <USBD_CtlError>
            ret = USBD_FAIL;
 8007290:	2303      	movs	r3, #3
 8007292:	75fb      	strb	r3, [r7, #23]
          break;
 8007294:	e02b      	b.n	80072ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d107      	bne.n	80072b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80072a2:	f107 030d 	add.w	r3, r7, #13
 80072a6:	2201      	movs	r2, #1
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fd1e 	bl	8008cec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072b0:	e01d      	b.n	80072ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 fca8 	bl	8008c0a <USBD_CtlError>
            ret = USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	75fb      	strb	r3, [r7, #23]
          break;
 80072be:	e016      	b.n	80072ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d00f      	beq.n	80072ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 fc9b 	bl	8008c0a <USBD_CtlError>
            ret = USBD_FAIL;
 80072d4:	2303      	movs	r3, #3
 80072d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072d8:	e008      	b.n	80072ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 fc94 	bl	8008c0a <USBD_CtlError>
          ret = USBD_FAIL;
 80072e2:	2303      	movs	r3, #3
 80072e4:	75fb      	strb	r3, [r7, #23]
          break;
 80072e6:	e002      	b.n	80072ee <USBD_CDC_Setup+0x19e>
          break;
 80072e8:	bf00      	nop
 80072ea:	e008      	b.n	80072fe <USBD_CDC_Setup+0x1ae>
          break;
 80072ec:	bf00      	nop
      }
      break;
 80072ee:	e006      	b.n	80072fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fc89 	bl	8008c0a <USBD_CtlError>
      ret = USBD_FAIL;
 80072f8:	2303      	movs	r3, #3
 80072fa:	75fb      	strb	r3, [r7, #23]
      break;
 80072fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800731a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	32b0      	adds	r2, #176	; 0xb0
 8007326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800732e:	2303      	movs	r3, #3
 8007330:	e065      	b.n	80073fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	32b0      	adds	r2, #176	; 0xb0
 800733c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007340:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	f003 020f 	and.w	r2, r3, #15
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	3318      	adds	r3, #24
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d02f      	beq.n	80073bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	f003 020f 	and.w	r2, r3, #15
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	3318      	adds	r3, #24
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	f003 010f 	and.w	r1, r3, #15
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	460b      	mov	r3, r1
 800737c:	00db      	lsls	r3, r3, #3
 800737e:	440b      	add	r3, r1
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4403      	add	r3, r0
 8007384:	3348      	adds	r3, #72	; 0x48
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	fbb2 f1f3 	udiv	r1, r2, r3
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007392:	2b00      	cmp	r3, #0
 8007394:	d112      	bne.n	80073bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	f003 020f 	and.w	r2, r3, #15
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	3318      	adds	r3, #24
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073ae:	78f9      	ldrb	r1, [r7, #3]
 80073b0:	2300      	movs	r3, #0
 80073b2:	2200      	movs	r2, #0
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f002 f9a4 	bl	8009702 <USBD_LL_Transmit>
 80073ba:	e01f      	b.n	80073fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	33b0      	adds	r3, #176	; 0xb0
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d010      	beq.n	80073fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	33b0      	adds	r3, #176	; 0xb0
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	32b0      	adds	r2, #176	; 0xb0
 800741c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007420:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	32b0      	adds	r2, #176	; 0xb0
 800742c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007434:	2303      	movs	r3, #3
 8007436:	e01a      	b.n	800746e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f002 f9a2 	bl	8009786 <USBD_LL_GetRxDataSize>
 8007442:	4602      	mov	r2, r0
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	33b0      	adds	r3, #176	; 0xb0
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007468:	4611      	mov	r1, r2
 800746a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	32b0      	adds	r2, #176	; 0xb0
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007494:	2303      	movs	r3, #3
 8007496:	e025      	b.n	80074e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	33b0      	adds	r3, #176	; 0xb0
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01a      	beq.n	80074e2 <USBD_CDC_EP0_RxReady+0x6c>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074b2:	2bff      	cmp	r3, #255	; 0xff
 80074b4:	d015      	beq.n	80074e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	33b0      	adds	r3, #176	; 0xb0
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80074ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074d6:	b292      	uxth	r2, r2
 80074d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	22ff      	movs	r2, #255	; 0xff
 80074de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074f4:	2182      	movs	r1, #130	; 0x82
 80074f6:	4818      	ldr	r0, [pc, #96]	; (8007558 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074f8:	f000 fd4f 	bl	8007f9a <USBD_GetEpDesc>
 80074fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074fe:	2101      	movs	r1, #1
 8007500:	4815      	ldr	r0, [pc, #84]	; (8007558 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007502:	f000 fd4a 	bl	8007f9a <USBD_GetEpDesc>
 8007506:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007508:	2181      	movs	r1, #129	; 0x81
 800750a:	4813      	ldr	r0, [pc, #76]	; (8007558 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800750c:	f000 fd45 	bl	8007f9a <USBD_GetEpDesc>
 8007510:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2210      	movs	r2, #16
 800751c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d006      	beq.n	8007532 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	2200      	movs	r2, #0
 8007528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800752c:	711a      	strb	r2, [r3, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d006      	beq.n	8007546 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007540:	711a      	strb	r2, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2243      	movs	r2, #67	; 0x43
 800754a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800754c:	4b02      	ldr	r3, [pc, #8]	; (8007558 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000650 	.word	0x20000650

0800755c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007564:	2182      	movs	r1, #130	; 0x82
 8007566:	4818      	ldr	r0, [pc, #96]	; (80075c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007568:	f000 fd17 	bl	8007f9a <USBD_GetEpDesc>
 800756c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800756e:	2101      	movs	r1, #1
 8007570:	4815      	ldr	r0, [pc, #84]	; (80075c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007572:	f000 fd12 	bl	8007f9a <USBD_GetEpDesc>
 8007576:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007578:	2181      	movs	r1, #129	; 0x81
 800757a:	4813      	ldr	r0, [pc, #76]	; (80075c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800757c:	f000 fd0d 	bl	8007f9a <USBD_GetEpDesc>
 8007580:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2210      	movs	r2, #16
 800758c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d006      	beq.n	80075a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2200      	movs	r2, #0
 8007598:	711a      	strb	r2, [r3, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f042 0202 	orr.w	r2, r2, #2
 80075a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d006      	beq.n	80075b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	711a      	strb	r2, [r3, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f042 0202 	orr.w	r2, r2, #2
 80075b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2243      	movs	r2, #67	; 0x43
 80075ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075bc:	4b02      	ldr	r3, [pc, #8]	; (80075c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000650 	.word	0x20000650

080075cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075d4:	2182      	movs	r1, #130	; 0x82
 80075d6:	4818      	ldr	r0, [pc, #96]	; (8007638 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075d8:	f000 fcdf 	bl	8007f9a <USBD_GetEpDesc>
 80075dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075de:	2101      	movs	r1, #1
 80075e0:	4815      	ldr	r0, [pc, #84]	; (8007638 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075e2:	f000 fcda 	bl	8007f9a <USBD_GetEpDesc>
 80075e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075e8:	2181      	movs	r1, #129	; 0x81
 80075ea:	4813      	ldr	r0, [pc, #76]	; (8007638 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075ec:	f000 fcd5 	bl	8007f9a <USBD_GetEpDesc>
 80075f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2210      	movs	r2, #16
 80075fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d006      	beq.n	8007612 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2200      	movs	r2, #0
 8007608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800760c:	711a      	strb	r2, [r3, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d006      	beq.n	8007626 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007620:	711a      	strb	r2, [r3, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2243      	movs	r2, #67	; 0x43
 800762a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800762c:	4b02      	ldr	r3, [pc, #8]	; (8007638 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000650 	.word	0x20000650

0800763c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	220a      	movs	r2, #10
 8007648:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800764a:	4b03      	ldr	r3, [pc, #12]	; (8007658 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	2000060c 	.word	0x2000060c

0800765c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800766c:	2303      	movs	r3, #3
 800766e:	e009      	b.n	8007684 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	33b0      	adds	r3, #176	; 0xb0
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	32b0      	adds	r2, #176	; 0xb0
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e008      	b.n	80076c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	371c      	adds	r7, #28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	32b0      	adds	r2, #176	; 0xb0
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e004      	b.n	8007702 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3714      	adds	r7, #20
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
	...

08007710 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	32b0      	adds	r2, #176	; 0xb0
 8007722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007726:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007728:	2301      	movs	r3, #1
 800772a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	32b0      	adds	r2, #176	; 0xb0
 8007736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800773e:	2303      	movs	r3, #3
 8007740:	e025      	b.n	800778e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007748:	2b00      	cmp	r3, #0
 800774a:	d11f      	bne.n	800778c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2201      	movs	r2, #1
 8007750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007754:	4b10      	ldr	r3, [pc, #64]	; (8007798 <USBD_CDC_TransmitPacket+0x88>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 020f 	and.w	r2, r3, #15
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4403      	add	r3, r0
 800776e:	3318      	adds	r3, #24
 8007770:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <USBD_CDC_TransmitPacket+0x88>)
 8007774:	7819      	ldrb	r1, [r3, #0]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 ffbd 	bl	8009702 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800778c:	7bfb      	ldrb	r3, [r7, #15]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000693 	.word	0x20000693

0800779c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	32b0      	adds	r2, #176	; 0xb0
 80077ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	32b0      	adds	r2, #176	; 0xb0
 80077be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80077c6:	2303      	movs	r3, #3
 80077c8:	e018      	b.n	80077fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7c1b      	ldrb	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <USBD_CDC_ReceivePacket+0x68>)
 80077d4:	7819      	ldrb	r1, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 ffaf 	bl	8009744 <USBD_LL_PrepareReceive>
 80077e6:	e008      	b.n	80077fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077e8:	4b06      	ldr	r3, [pc, #24]	; (8007804 <USBD_CDC_ReceivePacket+0x68>)
 80077ea:	7819      	ldrb	r1, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077f2:	2340      	movs	r3, #64	; 0x40
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 ffa5 	bl	8009744 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20000694 	.word	0x20000694

08007808 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	4613      	mov	r3, r2
 8007814:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800781c:	2303      	movs	r3, #3
 800781e:	e01f      	b.n	8007860 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	79fa      	ldrb	r2, [r7, #7]
 8007852:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f001 fe1f 	bl	8009498 <USBD_LL_Init>
 800785a:	4603      	mov	r3, r0
 800785c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800787c:	2303      	movs	r3, #3
 800787e:	e025      	b.n	80078cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	32ae      	adds	r2, #174	; 0xae
 8007892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00f      	beq.n	80078bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	32ae      	adds	r2, #174	; 0xae
 80078a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	f107 020e 	add.w	r2, r7, #14
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	4602      	mov	r2, r0
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fe27 	bl	8009530 <USBD_LL_Start>
 80078e2:	4603      	mov	r3, r0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	4611      	mov	r1, r2
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	4798      	blx	r3
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	78fa      	ldrb	r2, [r7, #3]
 8007954:	4611      	mov	r1, r2
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	4798      	blx	r3
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007960:	2303      	movs	r3, #3
 8007962:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b084      	sub	sp, #16
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f001 f908 	bl	8008b96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007994:	461a      	mov	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079a2:	f003 031f 	and.w	r3, r3, #31
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d01a      	beq.n	80079e0 <USBD_LL_SetupStage+0x72>
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d822      	bhi.n	80079f4 <USBD_LL_SetupStage+0x86>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <USBD_LL_SetupStage+0x4a>
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d00a      	beq.n	80079cc <USBD_LL_SetupStage+0x5e>
 80079b6:	e01d      	b.n	80079f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fb5f 	bl	8008084 <USBD_StdDevReq>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73fb      	strb	r3, [r7, #15]
      break;
 80079ca:	e020      	b.n	8007a0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fbc7 	bl	8008168 <USBD_StdItfReq>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
      break;
 80079de:	e016      	b.n	8007a0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fc29 	bl	8008240 <USBD_StdEPReq>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
      break;
 80079f2:	e00c      	b.n	8007a0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 fdf4 	bl	80095f0 <USBD_LL_StallEP>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a0c:	bf00      	nop
  }

  return ret;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	460b      	mov	r3, r1
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d16e      	bne.n	8007b0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	f040 8098 	bne.w	8007b74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d913      	bls.n	8007a78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	1ad2      	subs	r2, r2, r3
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	4293      	cmp	r3, r2
 8007a68:	bf28      	it	cs
 8007a6a:	4613      	movcs	r3, r2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f001 f984 	bl	8008d7e <USBD_CtlContinueRx>
 8007a76:	e07d      	b.n	8007b74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a7e:	f003 031f 	and.w	r3, r3, #31
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d014      	beq.n	8007ab0 <USBD_LL_DataOutStage+0x98>
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d81d      	bhi.n	8007ac6 <USBD_LL_DataOutStage+0xae>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <USBD_LL_DataOutStage+0x7c>
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d003      	beq.n	8007a9a <USBD_LL_DataOutStage+0x82>
 8007a92:	e018      	b.n	8007ac6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	75bb      	strb	r3, [r7, #22]
            break;
 8007a98:	e018      	b.n	8007acc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 fa5e 	bl	8007f66 <USBD_CoreFindIF>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	75bb      	strb	r3, [r7, #22]
            break;
 8007aae:	e00d      	b.n	8007acc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	4619      	mov	r1, r3
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 fa60 	bl	8007f80 <USBD_CoreFindEP>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	75bb      	strb	r3, [r7, #22]
            break;
 8007ac4:	e002      	b.n	8007acc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75bb      	strb	r3, [r7, #22]
            break;
 8007aca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007acc:	7dbb      	ldrb	r3, [r7, #22]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d119      	bne.n	8007b06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d113      	bne.n	8007b06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007ade:	7dba      	ldrb	r2, [r7, #22]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	32ae      	adds	r2, #174	; 0xae
 8007ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00b      	beq.n	8007b06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007aee:	7dba      	ldrb	r2, [r7, #22]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007af6:	7dba      	ldrb	r2, [r7, #22]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	32ae      	adds	r2, #174	; 0xae
 8007afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f001 f94a 	bl	8008da0 <USBD_CtlSendStatus>
 8007b0c:	e032      	b.n	8007b74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b0e:	7afb      	ldrb	r3, [r7, #11]
 8007b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	4619      	mov	r1, r3
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 fa31 	bl	8007f80 <USBD_CoreFindEP>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b22:	7dbb      	ldrb	r3, [r7, #22]
 8007b24:	2bff      	cmp	r3, #255	; 0xff
 8007b26:	d025      	beq.n	8007b74 <USBD_LL_DataOutStage+0x15c>
 8007b28:	7dbb      	ldrb	r3, [r7, #22]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d122      	bne.n	8007b74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d117      	bne.n	8007b6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b3a:	7dba      	ldrb	r2, [r7, #22]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	32ae      	adds	r2, #174	; 0xae
 8007b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00f      	beq.n	8007b6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b4a:	7dba      	ldrb	r2, [r7, #22]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b52:	7dba      	ldrb	r2, [r7, #22]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	32ae      	adds	r2, #174	; 0xae
 8007b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	7afa      	ldrb	r2, [r7, #11]
 8007b60:	4611      	mov	r1, r2
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	4798      	blx	r3
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	e000      	b.n	8007b76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	460b      	mov	r3, r1
 8007b88:	607a      	str	r2, [r7, #4]
 8007b8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b8c:	7afb      	ldrb	r3, [r7, #11]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d16f      	bne.n	8007c72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3314      	adds	r3, #20
 8007b96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d15a      	bne.n	8007c58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	689a      	ldr	r2, [r3, #8]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d914      	bls.n	8007bd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f001 f8ac 	bl	8008d22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2100      	movs	r1, #0
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f001 fdb7 	bl	8009744 <USBD_LL_PrepareReceive>
 8007bd6:	e03f      	b.n	8007c58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d11c      	bne.n	8007c1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d316      	bcc.n	8007c1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d20f      	bcs.n	8007c1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2100      	movs	r1, #0
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f001 f88d 	bl	8008d22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c10:	2300      	movs	r3, #0
 8007c12:	2200      	movs	r2, #0
 8007c14:	2100      	movs	r1, #0
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f001 fd94 	bl	8009744 <USBD_LL_PrepareReceive>
 8007c1c:	e01c      	b.n	8007c58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d10f      	bne.n	8007c4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c4a:	2180      	movs	r1, #128	; 0x80
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f001 fccf 	bl	80095f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f001 f8b7 	bl	8008dc6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d03a      	beq.n	8007cd8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff fe42 	bl	80078ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c70:	e032      	b.n	8007cd8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c72:	7afb      	ldrb	r3, [r7, #11]
 8007c74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 f97f 	bl	8007f80 <USBD_CoreFindEP>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	2bff      	cmp	r3, #255	; 0xff
 8007c8a:	d025      	beq.n	8007cd8 <USBD_LL_DataInStage+0x15a>
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d122      	bne.n	8007cd8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d11c      	bne.n	8007cd8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c9e:	7dfa      	ldrb	r2, [r7, #23]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	32ae      	adds	r2, #174	; 0xae
 8007ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d014      	beq.n	8007cd8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007cae:	7dfa      	ldrb	r2, [r7, #23]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007cb6:	7dfa      	ldrb	r2, [r7, #23]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	32ae      	adds	r2, #174	; 0xae
 8007cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	7afa      	ldrb	r2, [r7, #11]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	4798      	blx	r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007cce:	7dbb      	ldrb	r3, [r7, #22]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007cd4:	7dbb      	ldrb	r3, [r7, #22]
 8007cd6:	e000      	b.n	8007cda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d014      	beq.n	8007d48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00e      	beq.n	8007d48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6852      	ldr	r2, [r2, #4]
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	4611      	mov	r1, r2
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d44:	2303      	movs	r3, #3
 8007d46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 fc09 	bl	8009566 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2240      	movs	r2, #64	; 0x40
 8007d60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d64:	2340      	movs	r3, #64	; 0x40
 8007d66:	2200      	movs	r2, #0
 8007d68:	2180      	movs	r1, #128	; 0x80
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fbfb 	bl	8009566 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2240      	movs	r2, #64	; 0x40
 8007d7a:	621a      	str	r2, [r3, #32]

  return ret;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	78fa      	ldrb	r2, [r7, #3]
 8007d96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2204      	movs	r2, #4
 8007dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d106      	bne.n	8007df4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d110      	bne.n	8007e38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	32ae      	adds	r2, #174	; 0xae
 8007e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e01c      	b.n	8007e9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d115      	bne.n	8007e9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	32ae      	adds	r2, #174	; 0xae
 8007e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	32ae      	adds	r2, #174	; 0xae
 8007e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	78fa      	ldrb	r2, [r7, #3]
 8007e96:	4611      	mov	r1, r2
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	32ae      	adds	r2, #174	; 0xae
 8007ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e01c      	b.n	8007f02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d115      	bne.n	8007f00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	32ae      	adds	r2, #174	; 0xae
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	32ae      	adds	r2, #174	; 0xae
 8007ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	4611      	mov	r1, r2
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00e      	beq.n	8007f5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6852      	ldr	r2, [r2, #4]
 8007f4a:	b2d2      	uxtb	r2, r2
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b086      	sub	sp, #24
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	885b      	ldrh	r3, [r3, #2]
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d920      	bls.n	8008004 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fca:	e013      	b.n	8007ff4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007fcc:	f107 030a 	add.w	r3, r7, #10
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6978      	ldr	r0, [r7, #20]
 8007fd4:	f000 f81b 	bl	800800e <USBD_GetNextDesc>
 8007fd8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	785b      	ldrb	r3, [r3, #1]
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d108      	bne.n	8007ff4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	789b      	ldrb	r3, [r3, #2]
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d008      	beq.n	8008002 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	885b      	ldrh	r3, [r3, #2]
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	897b      	ldrh	r3, [r7, #10]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d8e5      	bhi.n	8007fcc <USBD_GetEpDesc+0x32>
 8008000:	e000      	b.n	8008004 <USBD_GetEpDesc+0x6a>
          break;
 8008002:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008004:	693b      	ldr	r3, [r7, #16]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	881a      	ldrh	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	4413      	add	r3, r2
 8008028:	b29a      	uxth	r2, r3
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4413      	add	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800803a:	68fb      	ldr	r3, [r7, #12]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	3301      	adds	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008066:	8a3b      	ldrh	r3, [r7, #16]
 8008068:	021b      	lsls	r3, r3, #8
 800806a:	b21a      	sxth	r2, r3
 800806c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008070:	4313      	orrs	r3, r2
 8008072:	b21b      	sxth	r3, r3
 8008074:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008076:	89fb      	ldrh	r3, [r7, #14]
}
 8008078:	4618      	mov	r0, r3
 800807a:	371c      	adds	r7, #28
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	d005      	beq.n	80080aa <USBD_StdDevReq+0x26>
 800809e:	2b40      	cmp	r3, #64	; 0x40
 80080a0:	d857      	bhi.n	8008152 <USBD_StdDevReq+0xce>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00f      	beq.n	80080c6 <USBD_StdDevReq+0x42>
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	d153      	bne.n	8008152 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	32ae      	adds	r2, #174	; 0xae
 80080b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
      break;
 80080c4:	e04a      	b.n	800815c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b09      	cmp	r3, #9
 80080cc:	d83b      	bhi.n	8008146 <USBD_StdDevReq+0xc2>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <USBD_StdDevReq+0x50>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	08008129 	.word	0x08008129
 80080d8:	0800813d 	.word	0x0800813d
 80080dc:	08008147 	.word	0x08008147
 80080e0:	08008133 	.word	0x08008133
 80080e4:	08008147 	.word	0x08008147
 80080e8:	08008107 	.word	0x08008107
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	08008147 	.word	0x08008147
 80080f4:	0800811f 	.word	0x0800811f
 80080f8:	08008111 	.word	0x08008111
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa3c 	bl	800857c <USBD_GetDescriptor>
          break;
 8008104:	e024      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fba1 	bl	8008850 <USBD_SetAddress>
          break;
 800810e:	e01f      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fbe0 	bl	80088d8 <USBD_SetConfig>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
          break;
 800811c:	e018      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fc83 	bl	8008a2c <USBD_GetConfig>
          break;
 8008126:	e013      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fcb4 	bl	8008a98 <USBD_GetStatus>
          break;
 8008130:	e00e      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fce3 	bl	8008b00 <USBD_SetFeature>
          break;
 800813a:	e009      	b.n	8008150 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fd07 	bl	8008b52 <USBD_ClrFeature>
          break;
 8008144:	e004      	b.n	8008150 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fd5e 	bl	8008c0a <USBD_CtlError>
          break;
 800814e:	bf00      	nop
      }
      break;
 8008150:	e004      	b.n	800815c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fd58 	bl	8008c0a <USBD_CtlError>
      break;
 800815a:	bf00      	nop
  }

  return ret;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop

08008168 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	d005      	beq.n	800818e <USBD_StdItfReq+0x26>
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d852      	bhi.n	800822c <USBD_StdItfReq+0xc4>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <USBD_StdItfReq+0x26>
 800818a:	2b20      	cmp	r3, #32
 800818c:	d14e      	bne.n	800822c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008194:	b2db      	uxtb	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	2b02      	cmp	r3, #2
 800819a:	d840      	bhi.n	800821e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	889b      	ldrh	r3, [r3, #4]
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d836      	bhi.n	8008214 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	889b      	ldrh	r3, [r3, #4]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff fed9 	bl	8007f66 <USBD_CoreFindIF>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2bff      	cmp	r3, #255	; 0xff
 80081bc:	d01d      	beq.n	80081fa <USBD_StdItfReq+0x92>
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11a      	bne.n	80081fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081c4:	7bba      	ldrb	r2, [r7, #14]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	32ae      	adds	r2, #174	; 0xae
 80081ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00f      	beq.n	80081f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081d4:	7bba      	ldrb	r2, [r7, #14]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081dc:	7bba      	ldrb	r2, [r7, #14]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	32ae      	adds	r2, #174	; 0xae
 80081e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081f2:	e004      	b.n	80081fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081f8:	e001      	b.n	80081fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80081fa:	2303      	movs	r3, #3
 80081fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	88db      	ldrh	r3, [r3, #6]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d110      	bne.n	8008228 <USBD_StdItfReq+0xc0>
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10d      	bne.n	8008228 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fdc7 	bl	8008da0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008212:	e009      	b.n	8008228 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fcf7 	bl	8008c0a <USBD_CtlError>
          break;
 800821c:	e004      	b.n	8008228 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fcf2 	bl	8008c0a <USBD_CtlError>
          break;
 8008226:	e000      	b.n	800822a <USBD_StdItfReq+0xc2>
          break;
 8008228:	bf00      	nop
      }
      break;
 800822a:	e004      	b.n	8008236 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fceb 	bl	8008c0a <USBD_CtlError>
      break;
 8008234:	bf00      	nop
  }

  return ret;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	889b      	ldrh	r3, [r3, #4]
 8008252:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d007      	beq.n	8008270 <USBD_StdEPReq+0x30>
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	f200 817f 	bhi.w	8008564 <USBD_StdEPReq+0x324>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d02a      	beq.n	80082c0 <USBD_StdEPReq+0x80>
 800826a:	2b20      	cmp	r3, #32
 800826c:	f040 817a 	bne.w	8008564 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff fe83 	bl	8007f80 <USBD_CoreFindEP>
 800827a:	4603      	mov	r3, r0
 800827c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800827e:	7b7b      	ldrb	r3, [r7, #13]
 8008280:	2bff      	cmp	r3, #255	; 0xff
 8008282:	f000 8174 	beq.w	800856e <USBD_StdEPReq+0x32e>
 8008286:	7b7b      	ldrb	r3, [r7, #13]
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 8170 	bne.w	800856e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800828e:	7b7a      	ldrb	r2, [r7, #13]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008296:	7b7a      	ldrb	r2, [r7, #13]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	32ae      	adds	r2, #174	; 0xae
 800829c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 8163 	beq.w	800856e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80082a8:	7b7a      	ldrb	r2, [r7, #13]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	32ae      	adds	r2, #174	; 0xae
 80082ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80082be:	e156      	b.n	800856e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	785b      	ldrb	r3, [r3, #1]
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d008      	beq.n	80082da <USBD_StdEPReq+0x9a>
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	f300 8145 	bgt.w	8008558 <USBD_StdEPReq+0x318>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 809b 	beq.w	800840a <USBD_StdEPReq+0x1ca>
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d03c      	beq.n	8008352 <USBD_StdEPReq+0x112>
 80082d8:	e13e      	b.n	8008558 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d002      	beq.n	80082ec <USBD_StdEPReq+0xac>
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d016      	beq.n	8008318 <USBD_StdEPReq+0xd8>
 80082ea:	e02c      	b.n	8008346 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00d      	beq.n	800830e <USBD_StdEPReq+0xce>
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	2b80      	cmp	r3, #128	; 0x80
 80082f6:	d00a      	beq.n	800830e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 f977 	bl	80095f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008302:	2180      	movs	r1, #128	; 0x80
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 f973 	bl	80095f0 <USBD_LL_StallEP>
 800830a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800830c:	e020      	b.n	8008350 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fc7a 	bl	8008c0a <USBD_CtlError>
              break;
 8008316:	e01b      	b.n	8008350 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	885b      	ldrh	r3, [r3, #2]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10e      	bne.n	800833e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <USBD_StdEPReq+0xfe>
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b80      	cmp	r3, #128	; 0x80
 800832a:	d008      	beq.n	800833e <USBD_StdEPReq+0xfe>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	88db      	ldrh	r3, [r3, #6]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d104      	bne.n	800833e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 f959 	bl	80095f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fd2e 	bl	8008da0 <USBD_CtlSendStatus>

              break;
 8008344:	e004      	b.n	8008350 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc5e 	bl	8008c0a <USBD_CtlError>
              break;
 800834e:	bf00      	nop
          }
          break;
 8008350:	e107      	b.n	8008562 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d002      	beq.n	8008364 <USBD_StdEPReq+0x124>
 800835e:	2b03      	cmp	r3, #3
 8008360:	d016      	beq.n	8008390 <USBD_StdEPReq+0x150>
 8008362:	e04b      	b.n	80083fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00d      	beq.n	8008386 <USBD_StdEPReq+0x146>
 800836a:	7bbb      	ldrb	r3, [r7, #14]
 800836c:	2b80      	cmp	r3, #128	; 0x80
 800836e:	d00a      	beq.n	8008386 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 f93b 	bl	80095f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800837a:	2180      	movs	r1, #128	; 0x80
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 f937 	bl	80095f0 <USBD_LL_StallEP>
 8008382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008384:	e040      	b.n	8008408 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fc3e 	bl	8008c0a <USBD_CtlError>
              break;
 800838e:	e03b      	b.n	8008408 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d136      	bne.n	8008406 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 f941 	bl	800962e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fcf7 	bl	8008da0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff fde2 	bl	8007f80 <USBD_CoreFindEP>
 80083bc:	4603      	mov	r3, r0
 80083be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083c0:	7b7b      	ldrb	r3, [r7, #13]
 80083c2:	2bff      	cmp	r3, #255	; 0xff
 80083c4:	d01f      	beq.n	8008406 <USBD_StdEPReq+0x1c6>
 80083c6:	7b7b      	ldrb	r3, [r7, #13]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d11c      	bne.n	8008406 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083cc:	7b7a      	ldrb	r2, [r7, #13]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083d4:	7b7a      	ldrb	r2, [r7, #13]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	32ae      	adds	r2, #174	; 0xae
 80083da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083e4:	7b7a      	ldrb	r2, [r7, #13]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	32ae      	adds	r2, #174	; 0xae
 80083ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80083fa:	e004      	b.n	8008406 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fc03 	bl	8008c0a <USBD_CtlError>
              break;
 8008404:	e000      	b.n	8008408 <USBD_StdEPReq+0x1c8>
              break;
 8008406:	bf00      	nop
          }
          break;
 8008408:	e0ab      	b.n	8008562 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d002      	beq.n	800841c <USBD_StdEPReq+0x1dc>
 8008416:	2b03      	cmp	r3, #3
 8008418:	d032      	beq.n	8008480 <USBD_StdEPReq+0x240>
 800841a:	e097      	b.n	800854c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <USBD_StdEPReq+0x1f2>
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d004      	beq.n	8008432 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fbed 	bl	8008c0a <USBD_CtlError>
                break;
 8008430:	e091      	b.n	8008556 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008432:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008436:	2b00      	cmp	r3, #0
 8008438:	da0b      	bge.n	8008452 <USBD_StdEPReq+0x212>
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	3310      	adds	r3, #16
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	4413      	add	r3, r2
 800844e:	3304      	adds	r3, #4
 8008450:	e00b      	b.n	800846a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	4413      	add	r3, r2
 8008468:	3304      	adds	r3, #4
 800846a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2202      	movs	r2, #2
 8008476:	4619      	mov	r1, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fc37 	bl	8008cec <USBD_CtlSendData>
              break;
 800847e:	e06a      	b.n	8008556 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008484:	2b00      	cmp	r3, #0
 8008486:	da11      	bge.n	80084ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	f003 020f 	and.w	r2, r3, #15
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	3324      	adds	r3, #36	; 0x24
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d117      	bne.n	80084d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fbb0 	bl	8008c0a <USBD_CtlError>
                  break;
 80084aa:	e054      	b.n	8008556 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	f003 020f 	and.w	r2, r3, #15
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d104      	bne.n	80084d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb9d 	bl	8008c0a <USBD_CtlError>
                  break;
 80084d0:	e041      	b.n	8008556 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da0b      	bge.n	80084f2 <USBD_StdEPReq+0x2b2>
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e0:	4613      	mov	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	3310      	adds	r3, #16
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	4413      	add	r3, r2
 80084ee:	3304      	adds	r3, #4
 80084f0:	e00b      	b.n	800850a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	4413      	add	r3, r2
 8008508:	3304      	adds	r3, #4
 800850a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <USBD_StdEPReq+0x2d8>
 8008512:	7bbb      	ldrb	r3, [r7, #14]
 8008514:	2b80      	cmp	r3, #128	; 0x80
 8008516:	d103      	bne.n	8008520 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e00e      	b.n	800853e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 f8a1 	bl	800966c <USBD_LL_IsStallEP>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2201      	movs	r2, #1
 8008534:	601a      	str	r2, [r3, #0]
 8008536:	e002      	b.n	800853e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2202      	movs	r2, #2
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fbd1 	bl	8008cec <USBD_CtlSendData>
              break;
 800854a:	e004      	b.n	8008556 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fb5b 	bl	8008c0a <USBD_CtlError>
              break;
 8008554:	bf00      	nop
          }
          break;
 8008556:	e004      	b.n	8008562 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fb55 	bl	8008c0a <USBD_CtlError>
          break;
 8008560:	bf00      	nop
      }
      break;
 8008562:	e005      	b.n	8008570 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fb4f 	bl	8008c0a <USBD_CtlError>
      break;
 800856c:	e000      	b.n	8008570 <USBD_StdEPReq+0x330>
      break;
 800856e:	bf00      	nop
  }

  return ret;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	885b      	ldrh	r3, [r3, #2]
 8008596:	0a1b      	lsrs	r3, r3, #8
 8008598:	b29b      	uxth	r3, r3
 800859a:	3b01      	subs	r3, #1
 800859c:	2b06      	cmp	r3, #6
 800859e:	f200 8128 	bhi.w	80087f2 <USBD_GetDescriptor+0x276>
 80085a2:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <USBD_GetDescriptor+0x2c>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	080085c5 	.word	0x080085c5
 80085ac:	080085dd 	.word	0x080085dd
 80085b0:	0800861d 	.word	0x0800861d
 80085b4:	080087f3 	.word	0x080087f3
 80085b8:	080087f3 	.word	0x080087f3
 80085bc:	08008793 	.word	0x08008793
 80085c0:	080087bf 	.word	0x080087bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
      break;
 80085da:	e112      	b.n	8008802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	7c1b      	ldrb	r3, [r3, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10d      	bne.n	8008600 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	f107 0208 	add.w	r2, r7, #8
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	2202      	movs	r2, #2
 80085fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085fe:	e100      	b.n	8008802 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	f107 0208 	add.w	r2, r7, #8
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	2202      	movs	r2, #2
 8008618:	701a      	strb	r2, [r3, #0]
      break;
 800861a:	e0f2      	b.n	8008802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	885b      	ldrh	r3, [r3, #2]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b05      	cmp	r3, #5
 8008624:	f200 80ac 	bhi.w	8008780 <USBD_GetDescriptor+0x204>
 8008628:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <USBD_GetDescriptor+0xb4>)
 800862a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862e:	bf00      	nop
 8008630:	08008649 	.word	0x08008649
 8008634:	0800867d 	.word	0x0800867d
 8008638:	080086b1 	.word	0x080086b1
 800863c:	080086e5 	.word	0x080086e5
 8008640:	08008719 	.word	0x08008719
 8008644:	0800874d 	.word	0x0800874d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	7c12      	ldrb	r2, [r2, #16]
 8008660:	f107 0108 	add.w	r1, r7, #8
 8008664:	4610      	mov	r0, r2
 8008666:	4798      	blx	r3
 8008668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800866a:	e091      	b.n	8008790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 facb 	bl	8008c0a <USBD_CtlError>
            err++;
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	3301      	adds	r3, #1
 8008678:	72fb      	strb	r3, [r7, #11]
          break;
 800867a:	e089      	b.n	8008790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00b      	beq.n	80086a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	7c12      	ldrb	r2, [r2, #16]
 8008694:	f107 0108 	add.w	r1, r7, #8
 8008698:	4610      	mov	r0, r2
 800869a:	4798      	blx	r3
 800869c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800869e:	e077      	b.n	8008790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fab1 	bl	8008c0a <USBD_CtlError>
            err++;
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	3301      	adds	r3, #1
 80086ac:	72fb      	strb	r3, [r7, #11]
          break;
 80086ae:	e06f      	b.n	8008790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00b      	beq.n	80086d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	7c12      	ldrb	r2, [r2, #16]
 80086c8:	f107 0108 	add.w	r1, r7, #8
 80086cc:	4610      	mov	r0, r2
 80086ce:	4798      	blx	r3
 80086d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086d2:	e05d      	b.n	8008790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fa97 	bl	8008c0a <USBD_CtlError>
            err++;
 80086dc:	7afb      	ldrb	r3, [r7, #11]
 80086de:	3301      	adds	r3, #1
 80086e0:	72fb      	strb	r3, [r7, #11]
          break;
 80086e2:	e055      	b.n	8008790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00b      	beq.n	8008708 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	7c12      	ldrb	r2, [r2, #16]
 80086fc:	f107 0108 	add.w	r1, r7, #8
 8008700:	4610      	mov	r0, r2
 8008702:	4798      	blx	r3
 8008704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008706:	e043      	b.n	8008790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fa7d 	bl	8008c0a <USBD_CtlError>
            err++;
 8008710:	7afb      	ldrb	r3, [r7, #11]
 8008712:	3301      	adds	r3, #1
 8008714:	72fb      	strb	r3, [r7, #11]
          break;
 8008716:	e03b      	b.n	8008790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	695b      	ldr	r3, [r3, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00b      	beq.n	800873c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	7c12      	ldrb	r2, [r2, #16]
 8008730:	f107 0108 	add.w	r1, r7, #8
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800873a:	e029      	b.n	8008790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fa63 	bl	8008c0a <USBD_CtlError>
            err++;
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	3301      	adds	r3, #1
 8008748:	72fb      	strb	r3, [r7, #11]
          break;
 800874a:	e021      	b.n	8008790 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	7c12      	ldrb	r2, [r2, #16]
 8008764:	f107 0108 	add.w	r1, r7, #8
 8008768:	4610      	mov	r0, r2
 800876a:	4798      	blx	r3
 800876c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800876e:	e00f      	b.n	8008790 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa49 	bl	8008c0a <USBD_CtlError>
            err++;
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	3301      	adds	r3, #1
 800877c:	72fb      	strb	r3, [r7, #11]
          break;
 800877e:	e007      	b.n	8008790 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa41 	bl	8008c0a <USBD_CtlError>
          err++;
 8008788:	7afb      	ldrb	r3, [r7, #11]
 800878a:	3301      	adds	r3, #1
 800878c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800878e:	bf00      	nop
      }
      break;
 8008790:	e037      	b.n	8008802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	7c1b      	ldrb	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d109      	bne.n	80087ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	f107 0208 	add.w	r2, r7, #8
 80087a6:	4610      	mov	r0, r2
 80087a8:	4798      	blx	r3
 80087aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087ac:	e029      	b.n	8008802 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fa2a 	bl	8008c0a <USBD_CtlError>
        err++;
 80087b6:	7afb      	ldrb	r3, [r7, #11]
 80087b8:	3301      	adds	r3, #1
 80087ba:	72fb      	strb	r3, [r7, #11]
      break;
 80087bc:	e021      	b.n	8008802 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	7c1b      	ldrb	r3, [r3, #16]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10d      	bne.n	80087e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	f107 0208 	add.w	r2, r7, #8
 80087d2:	4610      	mov	r0, r2
 80087d4:	4798      	blx	r3
 80087d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	2207      	movs	r2, #7
 80087de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087e0:	e00f      	b.n	8008802 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fa10 	bl	8008c0a <USBD_CtlError>
        err++;
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	3301      	adds	r3, #1
 80087ee:	72fb      	strb	r3, [r7, #11]
      break;
 80087f0:	e007      	b.n	8008802 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fa08 	bl	8008c0a <USBD_CtlError>
      err++;
 80087fa:	7afb      	ldrb	r3, [r7, #11]
 80087fc:	3301      	adds	r3, #1
 80087fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008800:	bf00      	nop
  }

  if (err != 0U)
 8008802:	7afb      	ldrb	r3, [r7, #11]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d11e      	bne.n	8008846 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	88db      	ldrh	r3, [r3, #6]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d016      	beq.n	800883e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008810:	893b      	ldrh	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00e      	beq.n	8008834 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	88da      	ldrh	r2, [r3, #6]
 800881a:	893b      	ldrh	r3, [r7, #8]
 800881c:	4293      	cmp	r3, r2
 800881e:	bf28      	it	cs
 8008820:	4613      	movcs	r3, r2
 8008822:	b29b      	uxth	r3, r3
 8008824:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008826:	893b      	ldrh	r3, [r7, #8]
 8008828:	461a      	mov	r2, r3
 800882a:	68f9      	ldr	r1, [r7, #12]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fa5d 	bl	8008cec <USBD_CtlSendData>
 8008832:	e009      	b.n	8008848 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f9e7 	bl	8008c0a <USBD_CtlError>
 800883c:	e004      	b.n	8008848 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 faae 	bl	8008da0 <USBD_CtlSendStatus>
 8008844:	e000      	b.n	8008848 <USBD_GetDescriptor+0x2cc>
    return;
 8008846:	bf00      	nop
  }
}
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop

08008850 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	889b      	ldrh	r3, [r3, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d131      	bne.n	80088c6 <USBD_SetAddress+0x76>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	88db      	ldrh	r3, [r3, #6]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d12d      	bne.n	80088c6 <USBD_SetAddress+0x76>
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	885b      	ldrh	r3, [r3, #2]
 800886e:	2b7f      	cmp	r3, #127	; 0x7f
 8008870:	d829      	bhi.n	80088c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	885b      	ldrh	r3, [r3, #2]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800887c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008884:	b2db      	uxtb	r3, r3
 8008886:	2b03      	cmp	r3, #3
 8008888:	d104      	bne.n	8008894 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f9bc 	bl	8008c0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008892:	e01d      	b.n	80088d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7bfa      	ldrb	r2, [r7, #15]
 8008898:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 ff0f 	bl	80096c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fa7a 	bl	8008da0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ba:	e009      	b.n	80088d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c4:	e004      	b.n	80088d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f99e 	bl	8008c0a <USBD_CtlError>
  }
}
 80088ce:	bf00      	nop
 80088d0:	bf00      	nop
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	885b      	ldrh	r3, [r3, #2]
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	4b4e      	ldr	r3, [pc, #312]	; (8008a28 <USBD_SetConfig+0x150>)
 80088ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088f0:	4b4d      	ldr	r3, [pc, #308]	; (8008a28 <USBD_SetConfig+0x150>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d905      	bls.n	8008904 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f985 	bl	8008c0a <USBD_CtlError>
    return USBD_FAIL;
 8008900:	2303      	movs	r3, #3
 8008902:	e08c      	b.n	8008a1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d002      	beq.n	8008916 <USBD_SetConfig+0x3e>
 8008910:	2b03      	cmp	r3, #3
 8008912:	d029      	beq.n	8008968 <USBD_SetConfig+0x90>
 8008914:	e075      	b.n	8008a02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008916:	4b44      	ldr	r3, [pc, #272]	; (8008a28 <USBD_SetConfig+0x150>)
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d020      	beq.n	8008960 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800891e:	4b42      	ldr	r3, [pc, #264]	; (8008a28 <USBD_SetConfig+0x150>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008928:	4b3f      	ldr	r3, [pc, #252]	; (8008a28 <USBD_SetConfig+0x150>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7fe ffe7 	bl	8007902 <USBD_SetClassConfig>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d008      	beq.n	8008950 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f962 	bl	8008c0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2202      	movs	r2, #2
 800894a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800894e:	e065      	b.n	8008a1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fa25 	bl	8008da0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2203      	movs	r2, #3
 800895a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800895e:	e05d      	b.n	8008a1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fa1d 	bl	8008da0 <USBD_CtlSendStatus>
      break;
 8008966:	e059      	b.n	8008a1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008968:	4b2f      	ldr	r3, [pc, #188]	; (8008a28 <USBD_SetConfig+0x150>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d112      	bne.n	8008996 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008978:	4b2b      	ldr	r3, [pc, #172]	; (8008a28 <USBD_SetConfig+0x150>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008982:	4b29      	ldr	r3, [pc, #164]	; (8008a28 <USBD_SetConfig+0x150>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7fe ffd6 	bl	800793a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa06 	bl	8008da0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008994:	e042      	b.n	8008a1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008996:	4b24      	ldr	r3, [pc, #144]	; (8008a28 <USBD_SetConfig+0x150>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d02a      	beq.n	80089fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7fe ffc4 	bl	800793a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80089b2:	4b1d      	ldr	r3, [pc, #116]	; (8008a28 <USBD_SetConfig+0x150>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089bc:	4b1a      	ldr	r3, [pc, #104]	; (8008a28 <USBD_SetConfig+0x150>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7fe ff9d 	bl	8007902 <USBD_SetClassConfig>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00f      	beq.n	80089f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f918 	bl	8008c0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7fe ffa9 	bl	800793a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089f0:	e014      	b.n	8008a1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f9d4 	bl	8008da0 <USBD_CtlSendStatus>
      break;
 80089f8:	e010      	b.n	8008a1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f9d0 	bl	8008da0 <USBD_CtlSendStatus>
      break;
 8008a00:	e00c      	b.n	8008a1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f900 	bl	8008c0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a0a:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <USBD_SetConfig+0x150>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7fe ff92 	bl	800793a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a16:	2303      	movs	r3, #3
 8008a18:	73fb      	strb	r3, [r7, #15]
      break;
 8008a1a:	bf00      	nop
  }

  return ret;
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	200008e4 	.word	0x200008e4

08008a2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	88db      	ldrh	r3, [r3, #6]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d004      	beq.n	8008a48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f8e2 	bl	8008c0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a46:	e023      	b.n	8008a90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	dc02      	bgt.n	8008a5a <USBD_GetConfig+0x2e>
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dc03      	bgt.n	8008a60 <USBD_GetConfig+0x34>
 8008a58:	e015      	b.n	8008a86 <USBD_GetConfig+0x5a>
 8008a5a:	2b03      	cmp	r3, #3
 8008a5c:	d00b      	beq.n	8008a76 <USBD_GetConfig+0x4a>
 8008a5e:	e012      	b.n	8008a86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f93c 	bl	8008cec <USBD_CtlSendData>
        break;
 8008a74:	e00c      	b.n	8008a90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f934 	bl	8008cec <USBD_CtlSendData>
        break;
 8008a84:	e004      	b.n	8008a90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f8be 	bl	8008c0a <USBD_CtlError>
        break;
 8008a8e:	bf00      	nop
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d81e      	bhi.n	8008aee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	88db      	ldrh	r3, [r3, #6]
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d004      	beq.n	8008ac2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f8a5 	bl	8008c0a <USBD_CtlError>
        break;
 8008ac0:	e01a      	b.n	8008af8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f043 0202 	orr.w	r2, r3, #2
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	330c      	adds	r3, #12
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f900 	bl	8008cec <USBD_CtlSendData>
      break;
 8008aec:	e004      	b.n	8008af8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f88a 	bl	8008c0a <USBD_CtlError>
      break;
 8008af6:	bf00      	nop
  }
}
 8008af8:	bf00      	nop
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d107      	bne.n	8008b22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f940 	bl	8008da0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b20:	e013      	b.n	8008b4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	885b      	ldrh	r3, [r3, #2]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d10b      	bne.n	8008b42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	889b      	ldrh	r3, [r3, #4]
 8008b2e:	0a1b      	lsrs	r3, r3, #8
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f930 	bl	8008da0 <USBD_CtlSendStatus>
}
 8008b40:	e003      	b.n	8008b4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f860 	bl	8008c0a <USBD_CtlError>
}
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d80b      	bhi.n	8008b82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	885b      	ldrh	r3, [r3, #2]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d10c      	bne.n	8008b8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f910 	bl	8008da0 <USBD_CtlSendStatus>
      }
      break;
 8008b80:	e004      	b.n	8008b8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f840 	bl	8008c0a <USBD_CtlError>
      break;
 8008b8a:	e000      	b.n	8008b8e <USBD_ClrFeature+0x3c>
      break;
 8008b8c:	bf00      	nop
  }
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	781a      	ldrb	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7ff fa41 	bl	8008048 <SWAPBYTE>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	461a      	mov	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f7ff fa34 	bl	8008048 <SWAPBYTE>
 8008be0:	4603      	mov	r3, r0
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3301      	adds	r3, #1
 8008bec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f7ff fa27 	bl	8008048 <SWAPBYTE>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	80da      	strh	r2, [r3, #6]
}
 8008c02:	bf00      	nop
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c14:	2180      	movs	r1, #128	; 0x80
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fcea 	bl	80095f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fce6 	bl	80095f0 <USBD_LL_StallEP>
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d036      	beq.n	8008cb0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c46:	6938      	ldr	r0, [r7, #16]
 8008c48:	f000 f836 	bl	8008cb8 <USBD_GetLen>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	3301      	adds	r3, #1
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	4413      	add	r3, r2
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	4413      	add	r3, r2
 8008c72:	2203      	movs	r2, #3
 8008c74:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c7c:	e013      	b.n	8008ca6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	4413      	add	r3, r2
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	7812      	ldrb	r2, [r2, #0]
 8008c88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	613b      	str	r3, [r7, #16]
    idx++;
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	3301      	adds	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e7      	bne.n	8008c7e <USBD_GetString+0x52>
 8008cae:	e000      	b.n	8008cb2 <USBD_GetString+0x86>
    return;
 8008cb0:	bf00      	nop
  }
}
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008cc8:	e005      	b.n	8008cd6 <USBD_GetLen+0x1e>
  {
    len++;
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1f5      	bne.n	8008cca <USBD_GetLen+0x12>
  }

  return len;
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	2100      	movs	r1, #0
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 fcf5 	bl	8009702 <USBD_LL_Transmit>

  return USBD_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	2100      	movs	r1, #0
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fce4 	bl	8009702 <USBD_LL_Transmit>

  return USBD_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2203      	movs	r2, #3
 8008d54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 fce8 	bl	8009744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	2100      	movs	r1, #0
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fcd7 	bl	8009744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2204      	movs	r2, #4
 8008dac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008db0:	2300      	movs	r3, #0
 8008db2:	2200      	movs	r2, #0
 8008db4:	2100      	movs	r1, #0
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fca3 	bl	8009702 <USBD_LL_Transmit>

  return USBD_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2205      	movs	r2, #5
 8008dd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2100      	movs	r1, #0
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fcb1 	bl	8009744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008df0:	2200      	movs	r2, #0
 8008df2:	4912      	ldr	r1, [pc, #72]	; (8008e3c <MX_USB_DEVICE_Init+0x50>)
 8008df4:	4812      	ldr	r0, [pc, #72]	; (8008e40 <MX_USB_DEVICE_Init+0x54>)
 8008df6:	f7fe fd07 	bl	8007808 <USBD_Init>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e00:	f7f8 fa76 	bl	80012f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e04:	490f      	ldr	r1, [pc, #60]	; (8008e44 <MX_USB_DEVICE_Init+0x58>)
 8008e06:	480e      	ldr	r0, [pc, #56]	; (8008e40 <MX_USB_DEVICE_Init+0x54>)
 8008e08:	f7fe fd2e 	bl	8007868 <USBD_RegisterClass>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e12:	f7f8 fa6d 	bl	80012f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e16:	490c      	ldr	r1, [pc, #48]	; (8008e48 <MX_USB_DEVICE_Init+0x5c>)
 8008e18:	4809      	ldr	r0, [pc, #36]	; (8008e40 <MX_USB_DEVICE_Init+0x54>)
 8008e1a:	f7fe fc1f 	bl	800765c <USBD_CDC_RegisterInterface>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e24:	f7f8 fa64 	bl	80012f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e28:	4805      	ldr	r0, [pc, #20]	; (8008e40 <MX_USB_DEVICE_Init+0x54>)
 8008e2a:	f7fe fd53 	bl	80078d4 <USBD_Start>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e34:	f7f8 fa5c 	bl	80012f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e38:	bf00      	nop
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	200006ac 	.word	0x200006ac
 8008e40:	200008e8 	.word	0x200008e8
 8008e44:	20000618 	.word	0x20000618
 8008e48:	20000698 	.word	0x20000698

08008e4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e50:	2200      	movs	r2, #0
 8008e52:	4905      	ldr	r1, [pc, #20]	; (8008e68 <CDC_Init_FS+0x1c>)
 8008e54:	4805      	ldr	r0, [pc, #20]	; (8008e6c <CDC_Init_FS+0x20>)
 8008e56:	f7fe fc1b 	bl	8007690 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e5a:	4905      	ldr	r1, [pc, #20]	; (8008e70 <CDC_Init_FS+0x24>)
 8008e5c:	4803      	ldr	r0, [pc, #12]	; (8008e6c <CDC_Init_FS+0x20>)
 8008e5e:	f7fe fc39 	bl	80076d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200013c4 	.word	0x200013c4
 8008e6c:	200008e8 	.word	0x200008e8
 8008e70:	20000bc4 	.word	0x20000bc4

08008e74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	6039      	str	r1, [r7, #0]
 8008e8e:	71fb      	strb	r3, [r7, #7]
 8008e90:	4613      	mov	r3, r2
 8008e92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	2b23      	cmp	r3, #35	; 0x23
 8008e98:	d84a      	bhi.n	8008f30 <CDC_Control_FS+0xac>
 8008e9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <CDC_Control_FS+0x1c>)
 8008e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea0:	08008f31 	.word	0x08008f31
 8008ea4:	08008f31 	.word	0x08008f31
 8008ea8:	08008f31 	.word	0x08008f31
 8008eac:	08008f31 	.word	0x08008f31
 8008eb0:	08008f31 	.word	0x08008f31
 8008eb4:	08008f31 	.word	0x08008f31
 8008eb8:	08008f31 	.word	0x08008f31
 8008ebc:	08008f31 	.word	0x08008f31
 8008ec0:	08008f31 	.word	0x08008f31
 8008ec4:	08008f31 	.word	0x08008f31
 8008ec8:	08008f31 	.word	0x08008f31
 8008ecc:	08008f31 	.word	0x08008f31
 8008ed0:	08008f31 	.word	0x08008f31
 8008ed4:	08008f31 	.word	0x08008f31
 8008ed8:	08008f31 	.word	0x08008f31
 8008edc:	08008f31 	.word	0x08008f31
 8008ee0:	08008f31 	.word	0x08008f31
 8008ee4:	08008f31 	.word	0x08008f31
 8008ee8:	08008f31 	.word	0x08008f31
 8008eec:	08008f31 	.word	0x08008f31
 8008ef0:	08008f31 	.word	0x08008f31
 8008ef4:	08008f31 	.word	0x08008f31
 8008ef8:	08008f31 	.word	0x08008f31
 8008efc:	08008f31 	.word	0x08008f31
 8008f00:	08008f31 	.word	0x08008f31
 8008f04:	08008f31 	.word	0x08008f31
 8008f08:	08008f31 	.word	0x08008f31
 8008f0c:	08008f31 	.word	0x08008f31
 8008f10:	08008f31 	.word	0x08008f31
 8008f14:	08008f31 	.word	0x08008f31
 8008f18:	08008f31 	.word	0x08008f31
 8008f1c:	08008f31 	.word	0x08008f31
 8008f20:	08008f31 	.word	0x08008f31
 8008f24:	08008f31 	.word	0x08008f31
 8008f28:	08008f31 	.word	0x08008f31
 8008f2c:	08008f31 	.word	0x08008f31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f30:	bf00      	nop
  }

  return (USBD_OK);
 8008f32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f4a:	6879      	ldr	r1, [r7, #4]
 8008f4c:	4809      	ldr	r0, [pc, #36]	; (8008f74 <CDC_Receive_FS+0x34>)
 8008f4e:	f7fe fbc1 	bl	80076d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f52:	4808      	ldr	r0, [pc, #32]	; (8008f74 <CDC_Receive_FS+0x34>)
 8008f54:	f7fe fc22 	bl	800779c <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer,Buf,len);
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	461a      	mov	r2, r3
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	4804      	ldr	r0, [pc, #16]	; (8008f78 <CDC_Receive_FS+0x38>)
 8008f66:	f000 fc8f 	bl	8009888 <memcpy>
  return (USBD_OK);
 8008f6a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	200008e8 	.word	0x200008e8
 8008f78:	20000868 	.word	0x20000868

08008f7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f8c:	4b0d      	ldr	r3, [pc, #52]	; (8008fc4 <CDC_Transmit_FS+0x48>)
 8008f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e00b      	b.n	8008fba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008fa2:	887b      	ldrh	r3, [r7, #2]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	4806      	ldr	r0, [pc, #24]	; (8008fc4 <CDC_Transmit_FS+0x48>)
 8008faa:	f7fe fb71 	bl	8007690 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008fae:	4805      	ldr	r0, [pc, #20]	; (8008fc4 <CDC_Transmit_FS+0x48>)
 8008fb0:	f7fe fbae 	bl	8007710 <USBD_CDC_TransmitPacket>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	200008e8 	.word	0x200008e8

08008fc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
	...

08008fec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2212      	movs	r2, #18
 8008ffc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ffe:	4b03      	ldr	r3, [pc, #12]	; (800900c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	200006c8 	.word	0x200006c8

08009010 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2204      	movs	r2, #4
 8009020:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009022:	4b03      	ldr	r3, [pc, #12]	; (8009030 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009024:	4618      	mov	r0, r3
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	200006dc 	.word	0x200006dc

08009034 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d105      	bne.n	8009052 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	4907      	ldr	r1, [pc, #28]	; (8009068 <USBD_FS_ProductStrDescriptor+0x34>)
 800904a:	4808      	ldr	r0, [pc, #32]	; (800906c <USBD_FS_ProductStrDescriptor+0x38>)
 800904c:	f7ff fdee 	bl	8008c2c <USBD_GetString>
 8009050:	e004      	b.n	800905c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	4904      	ldr	r1, [pc, #16]	; (8009068 <USBD_FS_ProductStrDescriptor+0x34>)
 8009056:	4805      	ldr	r0, [pc, #20]	; (800906c <USBD_FS_ProductStrDescriptor+0x38>)
 8009058:	f7ff fde8 	bl	8008c2c <USBD_GetString>
  }
  return USBD_StrDesc;
 800905c:	4b02      	ldr	r3, [pc, #8]	; (8009068 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20001bc4 	.word	0x20001bc4
 800906c:	0800a22c 	.word	0x0800a22c

08009070 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	4904      	ldr	r1, [pc, #16]	; (8009090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009080:	4804      	ldr	r0, [pc, #16]	; (8009094 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009082:	f7ff fdd3 	bl	8008c2c <USBD_GetString>
  return USBD_StrDesc;
 8009086:	4b02      	ldr	r3, [pc, #8]	; (8009090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009088:	4618      	mov	r0, r3
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	20001bc4 	.word	0x20001bc4
 8009094:	0800a244 	.word	0x0800a244

08009098 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	221a      	movs	r2, #26
 80090a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090aa:	f000 f843 	bl	8009134 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090ae:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	200006e0 	.word	0x200006e0

080090bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	6039      	str	r1, [r7, #0]
 80090c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	4907      	ldr	r1, [pc, #28]	; (80090f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090d2:	4808      	ldr	r0, [pc, #32]	; (80090f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090d4:	f7ff fdaa 	bl	8008c2c <USBD_GetString>
 80090d8:	e004      	b.n	80090e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	4904      	ldr	r1, [pc, #16]	; (80090f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090de:	4805      	ldr	r0, [pc, #20]	; (80090f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090e0:	f7ff fda4 	bl	8008c2c <USBD_GetString>
  }
  return USBD_StrDesc;
 80090e4:	4b02      	ldr	r3, [pc, #8]	; (80090f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20001bc4 	.word	0x20001bc4
 80090f4:	0800a258 	.word	0x0800a258

080090f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d105      	bne.n	8009116 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	4907      	ldr	r1, [pc, #28]	; (800912c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800910e:	4808      	ldr	r0, [pc, #32]	; (8009130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009110:	f7ff fd8c 	bl	8008c2c <USBD_GetString>
 8009114:	e004      	b.n	8009120 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	4904      	ldr	r1, [pc, #16]	; (800912c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800911a:	4805      	ldr	r0, [pc, #20]	; (8009130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800911c:	f7ff fd86 	bl	8008c2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009120:	4b02      	ldr	r3, [pc, #8]	; (800912c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20001bc4 	.word	0x20001bc4
 8009130:	0800a264 	.word	0x0800a264

08009134 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800913a:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <Get_SerialNum+0x44>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009140:	4b0e      	ldr	r3, [pc, #56]	; (800917c <Get_SerialNum+0x48>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009146:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <Get_SerialNum+0x4c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4413      	add	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d009      	beq.n	800916e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800915a:	2208      	movs	r2, #8
 800915c:	4909      	ldr	r1, [pc, #36]	; (8009184 <Get_SerialNum+0x50>)
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 f814 	bl	800918c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009164:	2204      	movs	r2, #4
 8009166:	4908      	ldr	r1, [pc, #32]	; (8009188 <Get_SerialNum+0x54>)
 8009168:	68b8      	ldr	r0, [r7, #8]
 800916a:	f000 f80f 	bl	800918c <IntToUnicode>
  }
}
 800916e:	bf00      	nop
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	1fff7a10 	.word	0x1fff7a10
 800917c:	1fff7a14 	.word	0x1fff7a14
 8009180:	1fff7a18 	.word	0x1fff7a18
 8009184:	200006e2 	.word	0x200006e2
 8009188:	200006f2 	.word	0x200006f2

0800918c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]
 80091a2:	e027      	b.n	80091f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	0f1b      	lsrs	r3, r3, #28
 80091a8:	2b09      	cmp	r3, #9
 80091aa:	d80b      	bhi.n	80091c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	0f1b      	lsrs	r3, r3, #28
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4619      	mov	r1, r3
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	440b      	add	r3, r1
 80091bc:	3230      	adds	r2, #48	; 0x30
 80091be:	b2d2      	uxtb	r2, r2
 80091c0:	701a      	strb	r2, [r3, #0]
 80091c2:	e00a      	b.n	80091da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	0f1b      	lsrs	r3, r3, #28
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	7dfb      	ldrb	r3, [r7, #23]
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	4619      	mov	r1, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	440b      	add	r3, r1
 80091d4:	3237      	adds	r2, #55	; 0x37
 80091d6:	b2d2      	uxtb	r2, r2
 80091d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	011b      	lsls	r3, r3, #4
 80091de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	3301      	adds	r3, #1
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	4413      	add	r3, r2
 80091ea:	2200      	movs	r2, #0
 80091ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	3301      	adds	r3, #1
 80091f2:	75fb      	strb	r3, [r7, #23]
 80091f4:	7dfa      	ldrb	r2, [r7, #23]
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d3d3      	bcc.n	80091a4 <IntToUnicode+0x18>
  }
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
	...

0800920c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08a      	sub	sp, #40	; 0x28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009214:	f107 0314 	add.w	r3, r7, #20
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	605a      	str	r2, [r3, #4]
 800921e:	609a      	str	r2, [r3, #8]
 8009220:	60da      	str	r2, [r3, #12]
 8009222:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800922c:	d13a      	bne.n	80092a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800922e:	2300      	movs	r3, #0
 8009230:	613b      	str	r3, [r7, #16]
 8009232:	4b1e      	ldr	r3, [pc, #120]	; (80092ac <HAL_PCD_MspInit+0xa0>)
 8009234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009236:	4a1d      	ldr	r2, [pc, #116]	; (80092ac <HAL_PCD_MspInit+0xa0>)
 8009238:	f043 0301 	orr.w	r3, r3, #1
 800923c:	6313      	str	r3, [r2, #48]	; 0x30
 800923e:	4b1b      	ldr	r3, [pc, #108]	; (80092ac <HAL_PCD_MspInit+0xa0>)
 8009240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	613b      	str	r3, [r7, #16]
 8009248:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800924a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800924e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009250:	2302      	movs	r3, #2
 8009252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009254:	2300      	movs	r3, #0
 8009256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009258:	2303      	movs	r3, #3
 800925a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800925c:	230a      	movs	r3, #10
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009260:	f107 0314 	add.w	r3, r7, #20
 8009264:	4619      	mov	r1, r3
 8009266:	4812      	ldr	r0, [pc, #72]	; (80092b0 <HAL_PCD_MspInit+0xa4>)
 8009268:	f7f8 ffc0 	bl	80021ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800926c:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <HAL_PCD_MspInit+0xa0>)
 800926e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009270:	4a0e      	ldr	r2, [pc, #56]	; (80092ac <HAL_PCD_MspInit+0xa0>)
 8009272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009276:	6353      	str	r3, [r2, #52]	; 0x34
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <HAL_PCD_MspInit+0xa0>)
 800927e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009280:	4a0a      	ldr	r2, [pc, #40]	; (80092ac <HAL_PCD_MspInit+0xa0>)
 8009282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009286:	6453      	str	r3, [r2, #68]	; 0x44
 8009288:	4b08      	ldr	r3, [pc, #32]	; (80092ac <HAL_PCD_MspInit+0xa0>)
 800928a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009290:	60fb      	str	r3, [r7, #12]
 8009292:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009294:	2200      	movs	r2, #0
 8009296:	2100      	movs	r1, #0
 8009298:	2043      	movs	r0, #67	; 0x43
 800929a:	f7f8 ff70 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800929e:	2043      	movs	r0, #67	; 0x43
 80092a0:	f7f8 ff89 	bl	80021b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092a4:	bf00      	nop
 80092a6:	3728      	adds	r7, #40	; 0x28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	40023800 	.word	0x40023800
 80092b0:	40020000 	.word	0x40020000

080092b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092c8:	4619      	mov	r1, r3
 80092ca:	4610      	mov	r0, r2
 80092cc:	f7fe fb4f 	bl	800796e <USBD_LL_SetupStage>
}
 80092d0:	bf00      	nop
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	00db      	lsls	r3, r3, #3
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	440b      	add	r3, r1
 80092f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	78fb      	ldrb	r3, [r7, #3]
 8009300:	4619      	mov	r1, r3
 8009302:	f7fe fb89 	bl	8007a18 <USBD_LL_DataOutStage>
}
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009320:	78fa      	ldrb	r2, [r7, #3]
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	4613      	mov	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	440b      	add	r3, r1
 800932e:	334c      	adds	r3, #76	; 0x4c
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	78fb      	ldrb	r3, [r7, #3]
 8009334:	4619      	mov	r1, r3
 8009336:	f7fe fc22 	bl	8007b7e <USBD_LL_DataInStage>
}
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b082      	sub	sp, #8
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fd56 	bl	8007e02 <USBD_LL_SOF>
}
 8009356:	bf00      	nop
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009366:	2301      	movs	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d102      	bne.n	8009378 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]
 8009376:	e008      	b.n	800938a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	2b02      	cmp	r3, #2
 800937e:	d102      	bne.n	8009386 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009380:	2301      	movs	r3, #1
 8009382:	73fb      	strb	r3, [r7, #15]
 8009384:	e001      	b.n	800938a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009386:	f7f7 ffb3 	bl	80012f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009390:	7bfa      	ldrb	r2, [r7, #15]
 8009392:	4611      	mov	r1, r2
 8009394:	4618      	mov	r0, r3
 8009396:	f7fe fcf6 	bl	8007d86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fc9e 	bl	8007ce2 <USBD_LL_Reset>
}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe fcf1 	bl	8007da6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	6812      	ldr	r2, [r2, #0]
 80093d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093d6:	f043 0301 	orr.w	r3, r3, #1
 80093da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093e4:	4b04      	ldr	r3, [pc, #16]	; (80093f8 <HAL_PCD_SuspendCallback+0x48>)
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	4a03      	ldr	r2, [pc, #12]	; (80093f8 <HAL_PCD_SuspendCallback+0x48>)
 80093ea:	f043 0306 	orr.w	r3, r3, #6
 80093ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	e000ed00 	.word	0xe000ed00

080093fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe fce1 	bl	8007dd2 <USBD_LL_Resume>
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800942a:	78fa      	ldrb	r2, [r7, #3]
 800942c:	4611      	mov	r1, r2
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fd39 	bl	8007ea6 <USBD_LL_IsoOUTIncomplete>
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	4611      	mov	r1, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe fcf5 	bl	8007e42 <USBD_LL_IsoINIncomplete>
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fd4b 	bl	8007f0a <USBD_LL_DevConnected>
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe fd48 	bl	8007f20 <USBD_LL_DevDisconnected>
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d13c      	bne.n	8009522 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094a8:	4a20      	ldr	r2, [pc, #128]	; (800952c <USBD_LL_Init+0x94>)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a1e      	ldr	r2, [pc, #120]	; (800952c <USBD_LL_Init+0x94>)
 80094b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094b8:	4b1c      	ldr	r3, [pc, #112]	; (800952c <USBD_LL_Init+0x94>)
 80094ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80094be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094c0:	4b1a      	ldr	r3, [pc, #104]	; (800952c <USBD_LL_Init+0x94>)
 80094c2:	2204      	movs	r2, #4
 80094c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094c6:	4b19      	ldr	r3, [pc, #100]	; (800952c <USBD_LL_Init+0x94>)
 80094c8:	2202      	movs	r2, #2
 80094ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094cc:	4b17      	ldr	r3, [pc, #92]	; (800952c <USBD_LL_Init+0x94>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094d2:	4b16      	ldr	r3, [pc, #88]	; (800952c <USBD_LL_Init+0x94>)
 80094d4:	2202      	movs	r2, #2
 80094d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094d8:	4b14      	ldr	r3, [pc, #80]	; (800952c <USBD_LL_Init+0x94>)
 80094da:	2200      	movs	r2, #0
 80094dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094de:	4b13      	ldr	r3, [pc, #76]	; (800952c <USBD_LL_Init+0x94>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094e4:	4b11      	ldr	r3, [pc, #68]	; (800952c <USBD_LL_Init+0x94>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094ea:	4b10      	ldr	r3, [pc, #64]	; (800952c <USBD_LL_Init+0x94>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094f0:	4b0e      	ldr	r3, [pc, #56]	; (800952c <USBD_LL_Init+0x94>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094f6:	480d      	ldr	r0, [pc, #52]	; (800952c <USBD_LL_Init+0x94>)
 80094f8:	f7f9 f847 	bl	800258a <HAL_PCD_Init>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009502:	f7f7 fef5 	bl	80012f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009506:	2180      	movs	r1, #128	; 0x80
 8009508:	4808      	ldr	r0, [pc, #32]	; (800952c <USBD_LL_Init+0x94>)
 800950a:	f7fa fa9e 	bl	8003a4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800950e:	2240      	movs	r2, #64	; 0x40
 8009510:	2100      	movs	r1, #0
 8009512:	4806      	ldr	r0, [pc, #24]	; (800952c <USBD_LL_Init+0x94>)
 8009514:	f7fa fa52 	bl	80039bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009518:	2280      	movs	r2, #128	; 0x80
 800951a:	2101      	movs	r1, #1
 800951c:	4803      	ldr	r0, [pc, #12]	; (800952c <USBD_LL_Init+0x94>)
 800951e:	f7fa fa4d 	bl	80039bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20001dc4 	.word	0x20001dc4

08009530 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009546:	4618      	mov	r0, r3
 8009548:	f7f9 f93c 	bl	80027c4 <HAL_PCD_Start>
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	4618      	mov	r0, r3
 8009554:	f000 f942 	bl	80097dc <USBD_Get_USB_Status>
 8009558:	4603      	mov	r3, r0
 800955a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955c:	7bbb      	ldrb	r3, [r7, #14]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	4608      	mov	r0, r1
 8009570:	4611      	mov	r1, r2
 8009572:	461a      	mov	r2, r3
 8009574:	4603      	mov	r3, r0
 8009576:	70fb      	strb	r3, [r7, #3]
 8009578:	460b      	mov	r3, r1
 800957a:	70bb      	strb	r3, [r7, #2]
 800957c:	4613      	mov	r3, r2
 800957e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800958e:	78bb      	ldrb	r3, [r7, #2]
 8009590:	883a      	ldrh	r2, [r7, #0]
 8009592:	78f9      	ldrb	r1, [r7, #3]
 8009594:	f7f9 fe0d 	bl	80031b2 <HAL_PCD_EP_Open>
 8009598:	4603      	mov	r3, r0
 800959a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f91c 	bl	80097dc <USBD_Get_USB_Status>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095cc:	78fa      	ldrb	r2, [r7, #3]
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7f9 fe56 	bl	8003282 <HAL_PCD_EP_Close>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 f8fd 	bl	80097dc <USBD_Get_USB_Status>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800960a:	78fa      	ldrb	r2, [r7, #3]
 800960c:	4611      	mov	r1, r2
 800960e:	4618      	mov	r0, r3
 8009610:	f7f9 ff2e 	bl	8003470 <HAL_PCD_EP_SetStall>
 8009614:	4603      	mov	r3, r0
 8009616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 f8de 	bl	80097dc <USBD_Get_USB_Status>
 8009620:	4603      	mov	r3, r0
 8009622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009624:	7bbb      	ldrb	r3, [r7, #14]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	460b      	mov	r3, r1
 8009638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009648:	78fa      	ldrb	r2, [r7, #3]
 800964a:	4611      	mov	r1, r2
 800964c:	4618      	mov	r0, r3
 800964e:	f7f9 ff73 	bl	8003538 <HAL_PCD_EP_ClrStall>
 8009652:	4603      	mov	r3, r0
 8009654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 f8bf 	bl	80097dc <USBD_Get_USB_Status>
 800965e:	4603      	mov	r3, r0
 8009660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009662:	7bbb      	ldrb	r3, [r7, #14]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800967e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009684:	2b00      	cmp	r3, #0
 8009686:	da0b      	bge.n	80096a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800968e:	68f9      	ldr	r1, [r7, #12]
 8009690:	4613      	mov	r3, r2
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	4413      	add	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	333e      	adds	r3, #62	; 0x3e
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	e00b      	b.n	80096b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	4613      	mov	r3, r2
 80096aa:	00db      	lsls	r3, r3, #3
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80096b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096de:	78fa      	ldrb	r2, [r7, #3]
 80096e0:	4611      	mov	r1, r2
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7f9 fd40 	bl	8003168 <HAL_PCD_SetAddress>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f874 	bl	80097dc <USBD_Get_USB_Status>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b086      	sub	sp, #24
 8009706:	af00      	add	r7, sp, #0
 8009708:	60f8      	str	r0, [r7, #12]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	603b      	str	r3, [r7, #0]
 800970e:	460b      	mov	r3, r1
 8009710:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009720:	7af9      	ldrb	r1, [r7, #11]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	f7f9 fe59 	bl	80033dc <HAL_PCD_EP_Transmit>
 800972a:	4603      	mov	r3, r0
 800972c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972e:	7dfb      	ldrb	r3, [r7, #23]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f853 	bl	80097dc <USBD_Get_USB_Status>
 8009736:	4603      	mov	r3, r0
 8009738:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800973a:	7dbb      	ldrb	r3, [r7, #22]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	607a      	str	r2, [r7, #4]
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	460b      	mov	r3, r1
 8009752:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009762:	7af9      	ldrb	r1, [r7, #11]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	f7f9 fdd5 	bl	8003316 <HAL_PCD_EP_Receive>
 800976c:	4603      	mov	r3, r0
 800976e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009770:	7dfb      	ldrb	r3, [r7, #23]
 8009772:	4618      	mov	r0, r3
 8009774:	f000 f832 	bl	80097dc <USBD_Get_USB_Status>
 8009778:	4603      	mov	r3, r0
 800977a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800977c:	7dbb      	ldrb	r3, [r7, #22]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	460b      	mov	r3, r1
 8009790:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009798:	78fa      	ldrb	r2, [r7, #3]
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f7f9 fe05 	bl	80033ac <HAL_PCD_EP_GetRxCount>
 80097a2:	4603      	mov	r3, r0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097b4:	4b03      	ldr	r3, [pc, #12]	; (80097c4 <USBD_static_malloc+0x18>)
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	200022d0 	.word	0x200022d0

080097c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]

}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d817      	bhi.n	8009820 <USBD_Get_USB_Status+0x44>
 80097f0:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <USBD_Get_USB_Status+0x1c>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	08009809 	.word	0x08009809
 80097fc:	0800980f 	.word	0x0800980f
 8009800:	08009815 	.word	0x08009815
 8009804:	0800981b 	.word	0x0800981b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73fb      	strb	r3, [r7, #15]
    break;
 800980c:	e00b      	b.n	8009826 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800980e:	2303      	movs	r3, #3
 8009810:	73fb      	strb	r3, [r7, #15]
    break;
 8009812:	e008      	b.n	8009826 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009814:	2301      	movs	r3, #1
 8009816:	73fb      	strb	r3, [r7, #15]
    break;
 8009818:	e005      	b.n	8009826 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800981a:	2303      	movs	r3, #3
 800981c:	73fb      	strb	r3, [r7, #15]
    break;
 800981e:	e002      	b.n	8009826 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009820:	2303      	movs	r3, #3
 8009822:	73fb      	strb	r3, [r7, #15]
    break;
 8009824:	bf00      	nop
  }
  return usb_status;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <__errno>:
 8009834:	4b01      	ldr	r3, [pc, #4]	; (800983c <__errno+0x8>)
 8009836:	6818      	ldr	r0, [r3, #0]
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	200006fc 	.word	0x200006fc

08009840 <__libc_init_array>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4d0d      	ldr	r5, [pc, #52]	; (8009878 <__libc_init_array+0x38>)
 8009844:	4c0d      	ldr	r4, [pc, #52]	; (800987c <__libc_init_array+0x3c>)
 8009846:	1b64      	subs	r4, r4, r5
 8009848:	10a4      	asrs	r4, r4, #2
 800984a:	2600      	movs	r6, #0
 800984c:	42a6      	cmp	r6, r4
 800984e:	d109      	bne.n	8009864 <__libc_init_array+0x24>
 8009850:	4d0b      	ldr	r5, [pc, #44]	; (8009880 <__libc_init_array+0x40>)
 8009852:	4c0c      	ldr	r4, [pc, #48]	; (8009884 <__libc_init_array+0x44>)
 8009854:	f000 fc8e 	bl	800a174 <_init>
 8009858:	1b64      	subs	r4, r4, r5
 800985a:	10a4      	asrs	r4, r4, #2
 800985c:	2600      	movs	r6, #0
 800985e:	42a6      	cmp	r6, r4
 8009860:	d105      	bne.n	800986e <__libc_init_array+0x2e>
 8009862:	bd70      	pop	{r4, r5, r6, pc}
 8009864:	f855 3b04 	ldr.w	r3, [r5], #4
 8009868:	4798      	blx	r3
 800986a:	3601      	adds	r6, #1
 800986c:	e7ee      	b.n	800984c <__libc_init_array+0xc>
 800986e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009872:	4798      	blx	r3
 8009874:	3601      	adds	r6, #1
 8009876:	e7f2      	b.n	800985e <__libc_init_array+0x1e>
 8009878:	0800a2c0 	.word	0x0800a2c0
 800987c:	0800a2c0 	.word	0x0800a2c0
 8009880:	0800a2c0 	.word	0x0800a2c0
 8009884:	0800a2c4 	.word	0x0800a2c4

08009888 <memcpy>:
 8009888:	440a      	add	r2, r1
 800988a:	4291      	cmp	r1, r2
 800988c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009890:	d100      	bne.n	8009894 <memcpy+0xc>
 8009892:	4770      	bx	lr
 8009894:	b510      	push	{r4, lr}
 8009896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800989a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800989e:	4291      	cmp	r1, r2
 80098a0:	d1f9      	bne.n	8009896 <memcpy+0xe>
 80098a2:	bd10      	pop	{r4, pc}

080098a4 <memset>:
 80098a4:	4402      	add	r2, r0
 80098a6:	4603      	mov	r3, r0
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d100      	bne.n	80098ae <memset+0xa>
 80098ac:	4770      	bx	lr
 80098ae:	f803 1b01 	strb.w	r1, [r3], #1
 80098b2:	e7f9      	b.n	80098a8 <memset+0x4>

080098b4 <siprintf>:
 80098b4:	b40e      	push	{r1, r2, r3}
 80098b6:	b500      	push	{lr}
 80098b8:	b09c      	sub	sp, #112	; 0x70
 80098ba:	ab1d      	add	r3, sp, #116	; 0x74
 80098bc:	9002      	str	r0, [sp, #8]
 80098be:	9006      	str	r0, [sp, #24]
 80098c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098c4:	4809      	ldr	r0, [pc, #36]	; (80098ec <siprintf+0x38>)
 80098c6:	9107      	str	r1, [sp, #28]
 80098c8:	9104      	str	r1, [sp, #16]
 80098ca:	4909      	ldr	r1, [pc, #36]	; (80098f0 <siprintf+0x3c>)
 80098cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d0:	9105      	str	r1, [sp, #20]
 80098d2:	6800      	ldr	r0, [r0, #0]
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	a902      	add	r1, sp, #8
 80098d8:	f000 f868 	bl	80099ac <_svfiprintf_r>
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	2200      	movs	r2, #0
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	b01c      	add	sp, #112	; 0x70
 80098e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098e8:	b003      	add	sp, #12
 80098ea:	4770      	bx	lr
 80098ec:	200006fc 	.word	0x200006fc
 80098f0:	ffff0208 	.word	0xffff0208

080098f4 <__ssputs_r>:
 80098f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f8:	688e      	ldr	r6, [r1, #8]
 80098fa:	429e      	cmp	r6, r3
 80098fc:	4682      	mov	sl, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	4690      	mov	r8, r2
 8009902:	461f      	mov	r7, r3
 8009904:	d838      	bhi.n	8009978 <__ssputs_r+0x84>
 8009906:	898a      	ldrh	r2, [r1, #12]
 8009908:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800990c:	d032      	beq.n	8009974 <__ssputs_r+0x80>
 800990e:	6825      	ldr	r5, [r4, #0]
 8009910:	6909      	ldr	r1, [r1, #16]
 8009912:	eba5 0901 	sub.w	r9, r5, r1
 8009916:	6965      	ldr	r5, [r4, #20]
 8009918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800991c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009920:	3301      	adds	r3, #1
 8009922:	444b      	add	r3, r9
 8009924:	106d      	asrs	r5, r5, #1
 8009926:	429d      	cmp	r5, r3
 8009928:	bf38      	it	cc
 800992a:	461d      	movcc	r5, r3
 800992c:	0553      	lsls	r3, r2, #21
 800992e:	d531      	bpl.n	8009994 <__ssputs_r+0xa0>
 8009930:	4629      	mov	r1, r5
 8009932:	f000 fb55 	bl	8009fe0 <_malloc_r>
 8009936:	4606      	mov	r6, r0
 8009938:	b950      	cbnz	r0, 8009950 <__ssputs_r+0x5c>
 800993a:	230c      	movs	r3, #12
 800993c:	f8ca 3000 	str.w	r3, [sl]
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009946:	81a3      	strh	r3, [r4, #12]
 8009948:	f04f 30ff 	mov.w	r0, #4294967295
 800994c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009950:	6921      	ldr	r1, [r4, #16]
 8009952:	464a      	mov	r2, r9
 8009954:	f7ff ff98 	bl	8009888 <memcpy>
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800995e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	6126      	str	r6, [r4, #16]
 8009966:	6165      	str	r5, [r4, #20]
 8009968:	444e      	add	r6, r9
 800996a:	eba5 0509 	sub.w	r5, r5, r9
 800996e:	6026      	str	r6, [r4, #0]
 8009970:	60a5      	str	r5, [r4, #8]
 8009972:	463e      	mov	r6, r7
 8009974:	42be      	cmp	r6, r7
 8009976:	d900      	bls.n	800997a <__ssputs_r+0x86>
 8009978:	463e      	mov	r6, r7
 800997a:	6820      	ldr	r0, [r4, #0]
 800997c:	4632      	mov	r2, r6
 800997e:	4641      	mov	r1, r8
 8009980:	f000 faa8 	bl	8009ed4 <memmove>
 8009984:	68a3      	ldr	r3, [r4, #8]
 8009986:	1b9b      	subs	r3, r3, r6
 8009988:	60a3      	str	r3, [r4, #8]
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	4433      	add	r3, r6
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	2000      	movs	r0, #0
 8009992:	e7db      	b.n	800994c <__ssputs_r+0x58>
 8009994:	462a      	mov	r2, r5
 8009996:	f000 fb97 	bl	800a0c8 <_realloc_r>
 800999a:	4606      	mov	r6, r0
 800999c:	2800      	cmp	r0, #0
 800999e:	d1e1      	bne.n	8009964 <__ssputs_r+0x70>
 80099a0:	6921      	ldr	r1, [r4, #16]
 80099a2:	4650      	mov	r0, sl
 80099a4:	f000 fab0 	bl	8009f08 <_free_r>
 80099a8:	e7c7      	b.n	800993a <__ssputs_r+0x46>
	...

080099ac <_svfiprintf_r>:
 80099ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b0:	4698      	mov	r8, r3
 80099b2:	898b      	ldrh	r3, [r1, #12]
 80099b4:	061b      	lsls	r3, r3, #24
 80099b6:	b09d      	sub	sp, #116	; 0x74
 80099b8:	4607      	mov	r7, r0
 80099ba:	460d      	mov	r5, r1
 80099bc:	4614      	mov	r4, r2
 80099be:	d50e      	bpl.n	80099de <_svfiprintf_r+0x32>
 80099c0:	690b      	ldr	r3, [r1, #16]
 80099c2:	b963      	cbnz	r3, 80099de <_svfiprintf_r+0x32>
 80099c4:	2140      	movs	r1, #64	; 0x40
 80099c6:	f000 fb0b 	bl	8009fe0 <_malloc_r>
 80099ca:	6028      	str	r0, [r5, #0]
 80099cc:	6128      	str	r0, [r5, #16]
 80099ce:	b920      	cbnz	r0, 80099da <_svfiprintf_r+0x2e>
 80099d0:	230c      	movs	r3, #12
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295
 80099d8:	e0d1      	b.n	8009b7e <_svfiprintf_r+0x1d2>
 80099da:	2340      	movs	r3, #64	; 0x40
 80099dc:	616b      	str	r3, [r5, #20]
 80099de:	2300      	movs	r3, #0
 80099e0:	9309      	str	r3, [sp, #36]	; 0x24
 80099e2:	2320      	movs	r3, #32
 80099e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ec:	2330      	movs	r3, #48	; 0x30
 80099ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b98 <_svfiprintf_r+0x1ec>
 80099f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099f6:	f04f 0901 	mov.w	r9, #1
 80099fa:	4623      	mov	r3, r4
 80099fc:	469a      	mov	sl, r3
 80099fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a02:	b10a      	cbz	r2, 8009a08 <_svfiprintf_r+0x5c>
 8009a04:	2a25      	cmp	r2, #37	; 0x25
 8009a06:	d1f9      	bne.n	80099fc <_svfiprintf_r+0x50>
 8009a08:	ebba 0b04 	subs.w	fp, sl, r4
 8009a0c:	d00b      	beq.n	8009a26 <_svfiprintf_r+0x7a>
 8009a0e:	465b      	mov	r3, fp
 8009a10:	4622      	mov	r2, r4
 8009a12:	4629      	mov	r1, r5
 8009a14:	4638      	mov	r0, r7
 8009a16:	f7ff ff6d 	bl	80098f4 <__ssputs_r>
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	f000 80aa 	beq.w	8009b74 <_svfiprintf_r+0x1c8>
 8009a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a22:	445a      	add	r2, fp
 8009a24:	9209      	str	r2, [sp, #36]	; 0x24
 8009a26:	f89a 3000 	ldrb.w	r3, [sl]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 80a2 	beq.w	8009b74 <_svfiprintf_r+0x1c8>
 8009a30:	2300      	movs	r3, #0
 8009a32:	f04f 32ff 	mov.w	r2, #4294967295
 8009a36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a3a:	f10a 0a01 	add.w	sl, sl, #1
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	9307      	str	r3, [sp, #28]
 8009a42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a46:	931a      	str	r3, [sp, #104]	; 0x68
 8009a48:	4654      	mov	r4, sl
 8009a4a:	2205      	movs	r2, #5
 8009a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a50:	4851      	ldr	r0, [pc, #324]	; (8009b98 <_svfiprintf_r+0x1ec>)
 8009a52:	f7f6 fbc5 	bl	80001e0 <memchr>
 8009a56:	9a04      	ldr	r2, [sp, #16]
 8009a58:	b9d8      	cbnz	r0, 8009a92 <_svfiprintf_r+0xe6>
 8009a5a:	06d0      	lsls	r0, r2, #27
 8009a5c:	bf44      	itt	mi
 8009a5e:	2320      	movmi	r3, #32
 8009a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a64:	0711      	lsls	r1, r2, #28
 8009a66:	bf44      	itt	mi
 8009a68:	232b      	movmi	r3, #43	; 0x2b
 8009a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a72:	2b2a      	cmp	r3, #42	; 0x2a
 8009a74:	d015      	beq.n	8009aa2 <_svfiprintf_r+0xf6>
 8009a76:	9a07      	ldr	r2, [sp, #28]
 8009a78:	4654      	mov	r4, sl
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	f04f 0c0a 	mov.w	ip, #10
 8009a80:	4621      	mov	r1, r4
 8009a82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a86:	3b30      	subs	r3, #48	; 0x30
 8009a88:	2b09      	cmp	r3, #9
 8009a8a:	d94e      	bls.n	8009b2a <_svfiprintf_r+0x17e>
 8009a8c:	b1b0      	cbz	r0, 8009abc <_svfiprintf_r+0x110>
 8009a8e:	9207      	str	r2, [sp, #28]
 8009a90:	e014      	b.n	8009abc <_svfiprintf_r+0x110>
 8009a92:	eba0 0308 	sub.w	r3, r0, r8
 8009a96:	fa09 f303 	lsl.w	r3, r9, r3
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	46a2      	mov	sl, r4
 8009aa0:	e7d2      	b.n	8009a48 <_svfiprintf_r+0x9c>
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	1d19      	adds	r1, r3, #4
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	9103      	str	r1, [sp, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bfbb      	ittet	lt
 8009aae:	425b      	neglt	r3, r3
 8009ab0:	f042 0202 	orrlt.w	r2, r2, #2
 8009ab4:	9307      	strge	r3, [sp, #28]
 8009ab6:	9307      	strlt	r3, [sp, #28]
 8009ab8:	bfb8      	it	lt
 8009aba:	9204      	strlt	r2, [sp, #16]
 8009abc:	7823      	ldrb	r3, [r4, #0]
 8009abe:	2b2e      	cmp	r3, #46	; 0x2e
 8009ac0:	d10c      	bne.n	8009adc <_svfiprintf_r+0x130>
 8009ac2:	7863      	ldrb	r3, [r4, #1]
 8009ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ac6:	d135      	bne.n	8009b34 <_svfiprintf_r+0x188>
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	1d1a      	adds	r2, r3, #4
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	9203      	str	r2, [sp, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	bfb8      	it	lt
 8009ad4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ad8:	3402      	adds	r4, #2
 8009ada:	9305      	str	r3, [sp, #20]
 8009adc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ba8 <_svfiprintf_r+0x1fc>
 8009ae0:	7821      	ldrb	r1, [r4, #0]
 8009ae2:	2203      	movs	r2, #3
 8009ae4:	4650      	mov	r0, sl
 8009ae6:	f7f6 fb7b 	bl	80001e0 <memchr>
 8009aea:	b140      	cbz	r0, 8009afe <_svfiprintf_r+0x152>
 8009aec:	2340      	movs	r3, #64	; 0x40
 8009aee:	eba0 000a 	sub.w	r0, r0, sl
 8009af2:	fa03 f000 	lsl.w	r0, r3, r0
 8009af6:	9b04      	ldr	r3, [sp, #16]
 8009af8:	4303      	orrs	r3, r0
 8009afa:	3401      	adds	r4, #1
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b02:	4826      	ldr	r0, [pc, #152]	; (8009b9c <_svfiprintf_r+0x1f0>)
 8009b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b08:	2206      	movs	r2, #6
 8009b0a:	f7f6 fb69 	bl	80001e0 <memchr>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d038      	beq.n	8009b84 <_svfiprintf_r+0x1d8>
 8009b12:	4b23      	ldr	r3, [pc, #140]	; (8009ba0 <_svfiprintf_r+0x1f4>)
 8009b14:	bb1b      	cbnz	r3, 8009b5e <_svfiprintf_r+0x1b2>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	3307      	adds	r3, #7
 8009b1a:	f023 0307 	bic.w	r3, r3, #7
 8009b1e:	3308      	adds	r3, #8
 8009b20:	9303      	str	r3, [sp, #12]
 8009b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b24:	4433      	add	r3, r6
 8009b26:	9309      	str	r3, [sp, #36]	; 0x24
 8009b28:	e767      	b.n	80099fa <_svfiprintf_r+0x4e>
 8009b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b2e:	460c      	mov	r4, r1
 8009b30:	2001      	movs	r0, #1
 8009b32:	e7a5      	b.n	8009a80 <_svfiprintf_r+0xd4>
 8009b34:	2300      	movs	r3, #0
 8009b36:	3401      	adds	r4, #1
 8009b38:	9305      	str	r3, [sp, #20]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	f04f 0c0a 	mov.w	ip, #10
 8009b40:	4620      	mov	r0, r4
 8009b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b46:	3a30      	subs	r2, #48	; 0x30
 8009b48:	2a09      	cmp	r2, #9
 8009b4a:	d903      	bls.n	8009b54 <_svfiprintf_r+0x1a8>
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0c5      	beq.n	8009adc <_svfiprintf_r+0x130>
 8009b50:	9105      	str	r1, [sp, #20]
 8009b52:	e7c3      	b.n	8009adc <_svfiprintf_r+0x130>
 8009b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b58:	4604      	mov	r4, r0
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e7f0      	b.n	8009b40 <_svfiprintf_r+0x194>
 8009b5e:	ab03      	add	r3, sp, #12
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	462a      	mov	r2, r5
 8009b64:	4b0f      	ldr	r3, [pc, #60]	; (8009ba4 <_svfiprintf_r+0x1f8>)
 8009b66:	a904      	add	r1, sp, #16
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f3af 8000 	nop.w
 8009b6e:	1c42      	adds	r2, r0, #1
 8009b70:	4606      	mov	r6, r0
 8009b72:	d1d6      	bne.n	8009b22 <_svfiprintf_r+0x176>
 8009b74:	89ab      	ldrh	r3, [r5, #12]
 8009b76:	065b      	lsls	r3, r3, #25
 8009b78:	f53f af2c 	bmi.w	80099d4 <_svfiprintf_r+0x28>
 8009b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b7e:	b01d      	add	sp, #116	; 0x74
 8009b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b84:	ab03      	add	r3, sp, #12
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	462a      	mov	r2, r5
 8009b8a:	4b06      	ldr	r3, [pc, #24]	; (8009ba4 <_svfiprintf_r+0x1f8>)
 8009b8c:	a904      	add	r1, sp, #16
 8009b8e:	4638      	mov	r0, r7
 8009b90:	f000 f87a 	bl	8009c88 <_printf_i>
 8009b94:	e7eb      	b.n	8009b6e <_svfiprintf_r+0x1c2>
 8009b96:	bf00      	nop
 8009b98:	0800a284 	.word	0x0800a284
 8009b9c:	0800a28e 	.word	0x0800a28e
 8009ba0:	00000000 	.word	0x00000000
 8009ba4:	080098f5 	.word	0x080098f5
 8009ba8:	0800a28a 	.word	0x0800a28a

08009bac <_printf_common>:
 8009bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb0:	4616      	mov	r6, r2
 8009bb2:	4699      	mov	r9, r3
 8009bb4:	688a      	ldr	r2, [r1, #8]
 8009bb6:	690b      	ldr	r3, [r1, #16]
 8009bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	bfb8      	it	lt
 8009bc0:	4613      	movlt	r3, r2
 8009bc2:	6033      	str	r3, [r6, #0]
 8009bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bc8:	4607      	mov	r7, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	b10a      	cbz	r2, 8009bd2 <_printf_common+0x26>
 8009bce:	3301      	adds	r3, #1
 8009bd0:	6033      	str	r3, [r6, #0]
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	0699      	lsls	r1, r3, #26
 8009bd6:	bf42      	ittt	mi
 8009bd8:	6833      	ldrmi	r3, [r6, #0]
 8009bda:	3302      	addmi	r3, #2
 8009bdc:	6033      	strmi	r3, [r6, #0]
 8009bde:	6825      	ldr	r5, [r4, #0]
 8009be0:	f015 0506 	ands.w	r5, r5, #6
 8009be4:	d106      	bne.n	8009bf4 <_printf_common+0x48>
 8009be6:	f104 0a19 	add.w	sl, r4, #25
 8009bea:	68e3      	ldr	r3, [r4, #12]
 8009bec:	6832      	ldr	r2, [r6, #0]
 8009bee:	1a9b      	subs	r3, r3, r2
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	dc26      	bgt.n	8009c42 <_printf_common+0x96>
 8009bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bf8:	1e13      	subs	r3, r2, #0
 8009bfa:	6822      	ldr	r2, [r4, #0]
 8009bfc:	bf18      	it	ne
 8009bfe:	2301      	movne	r3, #1
 8009c00:	0692      	lsls	r2, r2, #26
 8009c02:	d42b      	bmi.n	8009c5c <_printf_common+0xb0>
 8009c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	47c0      	blx	r8
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d01e      	beq.n	8009c50 <_printf_common+0xa4>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	68e5      	ldr	r5, [r4, #12]
 8009c16:	6832      	ldr	r2, [r6, #0]
 8009c18:	f003 0306 	and.w	r3, r3, #6
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	bf08      	it	eq
 8009c20:	1aad      	subeq	r5, r5, r2
 8009c22:	68a3      	ldr	r3, [r4, #8]
 8009c24:	6922      	ldr	r2, [r4, #16]
 8009c26:	bf0c      	ite	eq
 8009c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c2c:	2500      	movne	r5, #0
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	bfc4      	itt	gt
 8009c32:	1a9b      	subgt	r3, r3, r2
 8009c34:	18ed      	addgt	r5, r5, r3
 8009c36:	2600      	movs	r6, #0
 8009c38:	341a      	adds	r4, #26
 8009c3a:	42b5      	cmp	r5, r6
 8009c3c:	d11a      	bne.n	8009c74 <_printf_common+0xc8>
 8009c3e:	2000      	movs	r0, #0
 8009c40:	e008      	b.n	8009c54 <_printf_common+0xa8>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4652      	mov	r2, sl
 8009c46:	4649      	mov	r1, r9
 8009c48:	4638      	mov	r0, r7
 8009c4a:	47c0      	blx	r8
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d103      	bne.n	8009c58 <_printf_common+0xac>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c58:	3501      	adds	r5, #1
 8009c5a:	e7c6      	b.n	8009bea <_printf_common+0x3e>
 8009c5c:	18e1      	adds	r1, r4, r3
 8009c5e:	1c5a      	adds	r2, r3, #1
 8009c60:	2030      	movs	r0, #48	; 0x30
 8009c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c66:	4422      	add	r2, r4
 8009c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c70:	3302      	adds	r3, #2
 8009c72:	e7c7      	b.n	8009c04 <_printf_common+0x58>
 8009c74:	2301      	movs	r3, #1
 8009c76:	4622      	mov	r2, r4
 8009c78:	4649      	mov	r1, r9
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	47c0      	blx	r8
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d0e6      	beq.n	8009c50 <_printf_common+0xa4>
 8009c82:	3601      	adds	r6, #1
 8009c84:	e7d9      	b.n	8009c3a <_printf_common+0x8e>
	...

08009c88 <_printf_i>:
 8009c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c8c:	7e0f      	ldrb	r7, [r1, #24]
 8009c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c90:	2f78      	cmp	r7, #120	; 0x78
 8009c92:	4691      	mov	r9, r2
 8009c94:	4680      	mov	r8, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	469a      	mov	sl, r3
 8009c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c9e:	d807      	bhi.n	8009cb0 <_printf_i+0x28>
 8009ca0:	2f62      	cmp	r7, #98	; 0x62
 8009ca2:	d80a      	bhi.n	8009cba <_printf_i+0x32>
 8009ca4:	2f00      	cmp	r7, #0
 8009ca6:	f000 80d8 	beq.w	8009e5a <_printf_i+0x1d2>
 8009caa:	2f58      	cmp	r7, #88	; 0x58
 8009cac:	f000 80a3 	beq.w	8009df6 <_printf_i+0x16e>
 8009cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cb8:	e03a      	b.n	8009d30 <_printf_i+0xa8>
 8009cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cbe:	2b15      	cmp	r3, #21
 8009cc0:	d8f6      	bhi.n	8009cb0 <_printf_i+0x28>
 8009cc2:	a101      	add	r1, pc, #4	; (adr r1, 8009cc8 <_printf_i+0x40>)
 8009cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cc8:	08009d21 	.word	0x08009d21
 8009ccc:	08009d35 	.word	0x08009d35
 8009cd0:	08009cb1 	.word	0x08009cb1
 8009cd4:	08009cb1 	.word	0x08009cb1
 8009cd8:	08009cb1 	.word	0x08009cb1
 8009cdc:	08009cb1 	.word	0x08009cb1
 8009ce0:	08009d35 	.word	0x08009d35
 8009ce4:	08009cb1 	.word	0x08009cb1
 8009ce8:	08009cb1 	.word	0x08009cb1
 8009cec:	08009cb1 	.word	0x08009cb1
 8009cf0:	08009cb1 	.word	0x08009cb1
 8009cf4:	08009e41 	.word	0x08009e41
 8009cf8:	08009d65 	.word	0x08009d65
 8009cfc:	08009e23 	.word	0x08009e23
 8009d00:	08009cb1 	.word	0x08009cb1
 8009d04:	08009cb1 	.word	0x08009cb1
 8009d08:	08009e63 	.word	0x08009e63
 8009d0c:	08009cb1 	.word	0x08009cb1
 8009d10:	08009d65 	.word	0x08009d65
 8009d14:	08009cb1 	.word	0x08009cb1
 8009d18:	08009cb1 	.word	0x08009cb1
 8009d1c:	08009e2b 	.word	0x08009e2b
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	1d1a      	adds	r2, r3, #4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	602a      	str	r2, [r5, #0]
 8009d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d30:	2301      	movs	r3, #1
 8009d32:	e0a3      	b.n	8009e7c <_printf_i+0x1f4>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	6829      	ldr	r1, [r5, #0]
 8009d38:	0606      	lsls	r6, r0, #24
 8009d3a:	f101 0304 	add.w	r3, r1, #4
 8009d3e:	d50a      	bpl.n	8009d56 <_printf_i+0xce>
 8009d40:	680e      	ldr	r6, [r1, #0]
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	2e00      	cmp	r6, #0
 8009d46:	da03      	bge.n	8009d50 <_printf_i+0xc8>
 8009d48:	232d      	movs	r3, #45	; 0x2d
 8009d4a:	4276      	negs	r6, r6
 8009d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d50:	485e      	ldr	r0, [pc, #376]	; (8009ecc <_printf_i+0x244>)
 8009d52:	230a      	movs	r3, #10
 8009d54:	e019      	b.n	8009d8a <_printf_i+0x102>
 8009d56:	680e      	ldr	r6, [r1, #0]
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d5e:	bf18      	it	ne
 8009d60:	b236      	sxthne	r6, r6
 8009d62:	e7ef      	b.n	8009d44 <_printf_i+0xbc>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	6820      	ldr	r0, [r4, #0]
 8009d68:	1d19      	adds	r1, r3, #4
 8009d6a:	6029      	str	r1, [r5, #0]
 8009d6c:	0601      	lsls	r1, r0, #24
 8009d6e:	d501      	bpl.n	8009d74 <_printf_i+0xec>
 8009d70:	681e      	ldr	r6, [r3, #0]
 8009d72:	e002      	b.n	8009d7a <_printf_i+0xf2>
 8009d74:	0646      	lsls	r6, r0, #25
 8009d76:	d5fb      	bpl.n	8009d70 <_printf_i+0xe8>
 8009d78:	881e      	ldrh	r6, [r3, #0]
 8009d7a:	4854      	ldr	r0, [pc, #336]	; (8009ecc <_printf_i+0x244>)
 8009d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8009d7e:	bf0c      	ite	eq
 8009d80:	2308      	moveq	r3, #8
 8009d82:	230a      	movne	r3, #10
 8009d84:	2100      	movs	r1, #0
 8009d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d8a:	6865      	ldr	r5, [r4, #4]
 8009d8c:	60a5      	str	r5, [r4, #8]
 8009d8e:	2d00      	cmp	r5, #0
 8009d90:	bfa2      	ittt	ge
 8009d92:	6821      	ldrge	r1, [r4, #0]
 8009d94:	f021 0104 	bicge.w	r1, r1, #4
 8009d98:	6021      	strge	r1, [r4, #0]
 8009d9a:	b90e      	cbnz	r6, 8009da0 <_printf_i+0x118>
 8009d9c:	2d00      	cmp	r5, #0
 8009d9e:	d04d      	beq.n	8009e3c <_printf_i+0x1b4>
 8009da0:	4615      	mov	r5, r2
 8009da2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009da6:	fb03 6711 	mls	r7, r3, r1, r6
 8009daa:	5dc7      	ldrb	r7, [r0, r7]
 8009dac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009db0:	4637      	mov	r7, r6
 8009db2:	42bb      	cmp	r3, r7
 8009db4:	460e      	mov	r6, r1
 8009db6:	d9f4      	bls.n	8009da2 <_printf_i+0x11a>
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d10b      	bne.n	8009dd4 <_printf_i+0x14c>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	07de      	lsls	r6, r3, #31
 8009dc0:	d508      	bpl.n	8009dd4 <_printf_i+0x14c>
 8009dc2:	6923      	ldr	r3, [r4, #16]
 8009dc4:	6861      	ldr	r1, [r4, #4]
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	bfde      	ittt	le
 8009dca:	2330      	movle	r3, #48	; 0x30
 8009dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dd4:	1b52      	subs	r2, r2, r5
 8009dd6:	6122      	str	r2, [r4, #16]
 8009dd8:	f8cd a000 	str.w	sl, [sp]
 8009ddc:	464b      	mov	r3, r9
 8009dde:	aa03      	add	r2, sp, #12
 8009de0:	4621      	mov	r1, r4
 8009de2:	4640      	mov	r0, r8
 8009de4:	f7ff fee2 	bl	8009bac <_printf_common>
 8009de8:	3001      	adds	r0, #1
 8009dea:	d14c      	bne.n	8009e86 <_printf_i+0x1fe>
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	b004      	add	sp, #16
 8009df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df6:	4835      	ldr	r0, [pc, #212]	; (8009ecc <_printf_i+0x244>)
 8009df8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009dfc:	6829      	ldr	r1, [r5, #0]
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e04:	6029      	str	r1, [r5, #0]
 8009e06:	061d      	lsls	r5, r3, #24
 8009e08:	d514      	bpl.n	8009e34 <_printf_i+0x1ac>
 8009e0a:	07df      	lsls	r7, r3, #31
 8009e0c:	bf44      	itt	mi
 8009e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8009e12:	6023      	strmi	r3, [r4, #0]
 8009e14:	b91e      	cbnz	r6, 8009e1e <_printf_i+0x196>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	f023 0320 	bic.w	r3, r3, #32
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	2310      	movs	r3, #16
 8009e20:	e7b0      	b.n	8009d84 <_printf_i+0xfc>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	f043 0320 	orr.w	r3, r3, #32
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	2378      	movs	r3, #120	; 0x78
 8009e2c:	4828      	ldr	r0, [pc, #160]	; (8009ed0 <_printf_i+0x248>)
 8009e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e32:	e7e3      	b.n	8009dfc <_printf_i+0x174>
 8009e34:	0659      	lsls	r1, r3, #25
 8009e36:	bf48      	it	mi
 8009e38:	b2b6      	uxthmi	r6, r6
 8009e3a:	e7e6      	b.n	8009e0a <_printf_i+0x182>
 8009e3c:	4615      	mov	r5, r2
 8009e3e:	e7bb      	b.n	8009db8 <_printf_i+0x130>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	6826      	ldr	r6, [r4, #0]
 8009e44:	6961      	ldr	r1, [r4, #20]
 8009e46:	1d18      	adds	r0, r3, #4
 8009e48:	6028      	str	r0, [r5, #0]
 8009e4a:	0635      	lsls	r5, r6, #24
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	d501      	bpl.n	8009e54 <_printf_i+0x1cc>
 8009e50:	6019      	str	r1, [r3, #0]
 8009e52:	e002      	b.n	8009e5a <_printf_i+0x1d2>
 8009e54:	0670      	lsls	r0, r6, #25
 8009e56:	d5fb      	bpl.n	8009e50 <_printf_i+0x1c8>
 8009e58:	8019      	strh	r1, [r3, #0]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	6123      	str	r3, [r4, #16]
 8009e5e:	4615      	mov	r5, r2
 8009e60:	e7ba      	b.n	8009dd8 <_printf_i+0x150>
 8009e62:	682b      	ldr	r3, [r5, #0]
 8009e64:	1d1a      	adds	r2, r3, #4
 8009e66:	602a      	str	r2, [r5, #0]
 8009e68:	681d      	ldr	r5, [r3, #0]
 8009e6a:	6862      	ldr	r2, [r4, #4]
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f7f6 f9b6 	bl	80001e0 <memchr>
 8009e74:	b108      	cbz	r0, 8009e7a <_printf_i+0x1f2>
 8009e76:	1b40      	subs	r0, r0, r5
 8009e78:	6060      	str	r0, [r4, #4]
 8009e7a:	6863      	ldr	r3, [r4, #4]
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e84:	e7a8      	b.n	8009dd8 <_printf_i+0x150>
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	462a      	mov	r2, r5
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	47d0      	blx	sl
 8009e90:	3001      	adds	r0, #1
 8009e92:	d0ab      	beq.n	8009dec <_printf_i+0x164>
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	079b      	lsls	r3, r3, #30
 8009e98:	d413      	bmi.n	8009ec2 <_printf_i+0x23a>
 8009e9a:	68e0      	ldr	r0, [r4, #12]
 8009e9c:	9b03      	ldr	r3, [sp, #12]
 8009e9e:	4298      	cmp	r0, r3
 8009ea0:	bfb8      	it	lt
 8009ea2:	4618      	movlt	r0, r3
 8009ea4:	e7a4      	b.n	8009df0 <_printf_i+0x168>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	4649      	mov	r1, r9
 8009eac:	4640      	mov	r0, r8
 8009eae:	47d0      	blx	sl
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	d09b      	beq.n	8009dec <_printf_i+0x164>
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	68e3      	ldr	r3, [r4, #12]
 8009eb8:	9903      	ldr	r1, [sp, #12]
 8009eba:	1a5b      	subs	r3, r3, r1
 8009ebc:	42ab      	cmp	r3, r5
 8009ebe:	dcf2      	bgt.n	8009ea6 <_printf_i+0x21e>
 8009ec0:	e7eb      	b.n	8009e9a <_printf_i+0x212>
 8009ec2:	2500      	movs	r5, #0
 8009ec4:	f104 0619 	add.w	r6, r4, #25
 8009ec8:	e7f5      	b.n	8009eb6 <_printf_i+0x22e>
 8009eca:	bf00      	nop
 8009ecc:	0800a295 	.word	0x0800a295
 8009ed0:	0800a2a6 	.word	0x0800a2a6

08009ed4 <memmove>:
 8009ed4:	4288      	cmp	r0, r1
 8009ed6:	b510      	push	{r4, lr}
 8009ed8:	eb01 0402 	add.w	r4, r1, r2
 8009edc:	d902      	bls.n	8009ee4 <memmove+0x10>
 8009ede:	4284      	cmp	r4, r0
 8009ee0:	4623      	mov	r3, r4
 8009ee2:	d807      	bhi.n	8009ef4 <memmove+0x20>
 8009ee4:	1e43      	subs	r3, r0, #1
 8009ee6:	42a1      	cmp	r1, r4
 8009ee8:	d008      	beq.n	8009efc <memmove+0x28>
 8009eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ef2:	e7f8      	b.n	8009ee6 <memmove+0x12>
 8009ef4:	4402      	add	r2, r0
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	428a      	cmp	r2, r1
 8009efa:	d100      	bne.n	8009efe <memmove+0x2a>
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f06:	e7f7      	b.n	8009ef8 <memmove+0x24>

08009f08 <_free_r>:
 8009f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f0a:	2900      	cmp	r1, #0
 8009f0c:	d044      	beq.n	8009f98 <_free_r+0x90>
 8009f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f12:	9001      	str	r0, [sp, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f1a1 0404 	sub.w	r4, r1, #4
 8009f1a:	bfb8      	it	lt
 8009f1c:	18e4      	addlt	r4, r4, r3
 8009f1e:	f000 f913 	bl	800a148 <__malloc_lock>
 8009f22:	4a1e      	ldr	r2, [pc, #120]	; (8009f9c <_free_r+0x94>)
 8009f24:	9801      	ldr	r0, [sp, #4]
 8009f26:	6813      	ldr	r3, [r2, #0]
 8009f28:	b933      	cbnz	r3, 8009f38 <_free_r+0x30>
 8009f2a:	6063      	str	r3, [r4, #4]
 8009f2c:	6014      	str	r4, [r2, #0]
 8009f2e:	b003      	add	sp, #12
 8009f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f34:	f000 b90e 	b.w	800a154 <__malloc_unlock>
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d908      	bls.n	8009f4e <_free_r+0x46>
 8009f3c:	6825      	ldr	r5, [r4, #0]
 8009f3e:	1961      	adds	r1, r4, r5
 8009f40:	428b      	cmp	r3, r1
 8009f42:	bf01      	itttt	eq
 8009f44:	6819      	ldreq	r1, [r3, #0]
 8009f46:	685b      	ldreq	r3, [r3, #4]
 8009f48:	1949      	addeq	r1, r1, r5
 8009f4a:	6021      	streq	r1, [r4, #0]
 8009f4c:	e7ed      	b.n	8009f2a <_free_r+0x22>
 8009f4e:	461a      	mov	r2, r3
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	b10b      	cbz	r3, 8009f58 <_free_r+0x50>
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	d9fa      	bls.n	8009f4e <_free_r+0x46>
 8009f58:	6811      	ldr	r1, [r2, #0]
 8009f5a:	1855      	adds	r5, r2, r1
 8009f5c:	42a5      	cmp	r5, r4
 8009f5e:	d10b      	bne.n	8009f78 <_free_r+0x70>
 8009f60:	6824      	ldr	r4, [r4, #0]
 8009f62:	4421      	add	r1, r4
 8009f64:	1854      	adds	r4, r2, r1
 8009f66:	42a3      	cmp	r3, r4
 8009f68:	6011      	str	r1, [r2, #0]
 8009f6a:	d1e0      	bne.n	8009f2e <_free_r+0x26>
 8009f6c:	681c      	ldr	r4, [r3, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	6053      	str	r3, [r2, #4]
 8009f72:	4421      	add	r1, r4
 8009f74:	6011      	str	r1, [r2, #0]
 8009f76:	e7da      	b.n	8009f2e <_free_r+0x26>
 8009f78:	d902      	bls.n	8009f80 <_free_r+0x78>
 8009f7a:	230c      	movs	r3, #12
 8009f7c:	6003      	str	r3, [r0, #0]
 8009f7e:	e7d6      	b.n	8009f2e <_free_r+0x26>
 8009f80:	6825      	ldr	r5, [r4, #0]
 8009f82:	1961      	adds	r1, r4, r5
 8009f84:	428b      	cmp	r3, r1
 8009f86:	bf04      	itt	eq
 8009f88:	6819      	ldreq	r1, [r3, #0]
 8009f8a:	685b      	ldreq	r3, [r3, #4]
 8009f8c:	6063      	str	r3, [r4, #4]
 8009f8e:	bf04      	itt	eq
 8009f90:	1949      	addeq	r1, r1, r5
 8009f92:	6021      	streq	r1, [r4, #0]
 8009f94:	6054      	str	r4, [r2, #4]
 8009f96:	e7ca      	b.n	8009f2e <_free_r+0x26>
 8009f98:	b003      	add	sp, #12
 8009f9a:	bd30      	pop	{r4, r5, pc}
 8009f9c:	200024f0 	.word	0x200024f0

08009fa0 <sbrk_aligned>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	4e0e      	ldr	r6, [pc, #56]	; (8009fdc <sbrk_aligned+0x3c>)
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	6831      	ldr	r1, [r6, #0]
 8009fa8:	4605      	mov	r5, r0
 8009faa:	b911      	cbnz	r1, 8009fb2 <sbrk_aligned+0x12>
 8009fac:	f000 f8bc 	bl	800a128 <_sbrk_r>
 8009fb0:	6030      	str	r0, [r6, #0]
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f000 f8b7 	bl	800a128 <_sbrk_r>
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	d00a      	beq.n	8009fd4 <sbrk_aligned+0x34>
 8009fbe:	1cc4      	adds	r4, r0, #3
 8009fc0:	f024 0403 	bic.w	r4, r4, #3
 8009fc4:	42a0      	cmp	r0, r4
 8009fc6:	d007      	beq.n	8009fd8 <sbrk_aligned+0x38>
 8009fc8:	1a21      	subs	r1, r4, r0
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 f8ac 	bl	800a128 <_sbrk_r>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d101      	bne.n	8009fd8 <sbrk_aligned+0x38>
 8009fd4:	f04f 34ff 	mov.w	r4, #4294967295
 8009fd8:	4620      	mov	r0, r4
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	200024f4 	.word	0x200024f4

08009fe0 <_malloc_r>:
 8009fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe4:	1ccd      	adds	r5, r1, #3
 8009fe6:	f025 0503 	bic.w	r5, r5, #3
 8009fea:	3508      	adds	r5, #8
 8009fec:	2d0c      	cmp	r5, #12
 8009fee:	bf38      	it	cc
 8009ff0:	250c      	movcc	r5, #12
 8009ff2:	2d00      	cmp	r5, #0
 8009ff4:	4607      	mov	r7, r0
 8009ff6:	db01      	blt.n	8009ffc <_malloc_r+0x1c>
 8009ff8:	42a9      	cmp	r1, r5
 8009ffa:	d905      	bls.n	800a008 <_malloc_r+0x28>
 8009ffc:	230c      	movs	r3, #12
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	2600      	movs	r6, #0
 800a002:	4630      	mov	r0, r6
 800a004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a008:	4e2e      	ldr	r6, [pc, #184]	; (800a0c4 <_malloc_r+0xe4>)
 800a00a:	f000 f89d 	bl	800a148 <__malloc_lock>
 800a00e:	6833      	ldr	r3, [r6, #0]
 800a010:	461c      	mov	r4, r3
 800a012:	bb34      	cbnz	r4, 800a062 <_malloc_r+0x82>
 800a014:	4629      	mov	r1, r5
 800a016:	4638      	mov	r0, r7
 800a018:	f7ff ffc2 	bl	8009fa0 <sbrk_aligned>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	4604      	mov	r4, r0
 800a020:	d14d      	bne.n	800a0be <_malloc_r+0xde>
 800a022:	6834      	ldr	r4, [r6, #0]
 800a024:	4626      	mov	r6, r4
 800a026:	2e00      	cmp	r6, #0
 800a028:	d140      	bne.n	800a0ac <_malloc_r+0xcc>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	4631      	mov	r1, r6
 800a02e:	4638      	mov	r0, r7
 800a030:	eb04 0803 	add.w	r8, r4, r3
 800a034:	f000 f878 	bl	800a128 <_sbrk_r>
 800a038:	4580      	cmp	r8, r0
 800a03a:	d13a      	bne.n	800a0b2 <_malloc_r+0xd2>
 800a03c:	6821      	ldr	r1, [r4, #0]
 800a03e:	3503      	adds	r5, #3
 800a040:	1a6d      	subs	r5, r5, r1
 800a042:	f025 0503 	bic.w	r5, r5, #3
 800a046:	3508      	adds	r5, #8
 800a048:	2d0c      	cmp	r5, #12
 800a04a:	bf38      	it	cc
 800a04c:	250c      	movcc	r5, #12
 800a04e:	4629      	mov	r1, r5
 800a050:	4638      	mov	r0, r7
 800a052:	f7ff ffa5 	bl	8009fa0 <sbrk_aligned>
 800a056:	3001      	adds	r0, #1
 800a058:	d02b      	beq.n	800a0b2 <_malloc_r+0xd2>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	442b      	add	r3, r5
 800a05e:	6023      	str	r3, [r4, #0]
 800a060:	e00e      	b.n	800a080 <_malloc_r+0xa0>
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	1b52      	subs	r2, r2, r5
 800a066:	d41e      	bmi.n	800a0a6 <_malloc_r+0xc6>
 800a068:	2a0b      	cmp	r2, #11
 800a06a:	d916      	bls.n	800a09a <_malloc_r+0xba>
 800a06c:	1961      	adds	r1, r4, r5
 800a06e:	42a3      	cmp	r3, r4
 800a070:	6025      	str	r5, [r4, #0]
 800a072:	bf18      	it	ne
 800a074:	6059      	strne	r1, [r3, #4]
 800a076:	6863      	ldr	r3, [r4, #4]
 800a078:	bf08      	it	eq
 800a07a:	6031      	streq	r1, [r6, #0]
 800a07c:	5162      	str	r2, [r4, r5]
 800a07e:	604b      	str	r3, [r1, #4]
 800a080:	4638      	mov	r0, r7
 800a082:	f104 060b 	add.w	r6, r4, #11
 800a086:	f000 f865 	bl	800a154 <__malloc_unlock>
 800a08a:	f026 0607 	bic.w	r6, r6, #7
 800a08e:	1d23      	adds	r3, r4, #4
 800a090:	1af2      	subs	r2, r6, r3
 800a092:	d0b6      	beq.n	800a002 <_malloc_r+0x22>
 800a094:	1b9b      	subs	r3, r3, r6
 800a096:	50a3      	str	r3, [r4, r2]
 800a098:	e7b3      	b.n	800a002 <_malloc_r+0x22>
 800a09a:	6862      	ldr	r2, [r4, #4]
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	bf0c      	ite	eq
 800a0a0:	6032      	streq	r2, [r6, #0]
 800a0a2:	605a      	strne	r2, [r3, #4]
 800a0a4:	e7ec      	b.n	800a080 <_malloc_r+0xa0>
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	6864      	ldr	r4, [r4, #4]
 800a0aa:	e7b2      	b.n	800a012 <_malloc_r+0x32>
 800a0ac:	4634      	mov	r4, r6
 800a0ae:	6876      	ldr	r6, [r6, #4]
 800a0b0:	e7b9      	b.n	800a026 <_malloc_r+0x46>
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	603b      	str	r3, [r7, #0]
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	f000 f84c 	bl	800a154 <__malloc_unlock>
 800a0bc:	e7a1      	b.n	800a002 <_malloc_r+0x22>
 800a0be:	6025      	str	r5, [r4, #0]
 800a0c0:	e7de      	b.n	800a080 <_malloc_r+0xa0>
 800a0c2:	bf00      	nop
 800a0c4:	200024f0 	.word	0x200024f0

0800a0c8 <_realloc_r>:
 800a0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0cc:	4680      	mov	r8, r0
 800a0ce:	4614      	mov	r4, r2
 800a0d0:	460e      	mov	r6, r1
 800a0d2:	b921      	cbnz	r1, 800a0de <_realloc_r+0x16>
 800a0d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d8:	4611      	mov	r1, r2
 800a0da:	f7ff bf81 	b.w	8009fe0 <_malloc_r>
 800a0de:	b92a      	cbnz	r2, 800a0ec <_realloc_r+0x24>
 800a0e0:	f7ff ff12 	bl	8009f08 <_free_r>
 800a0e4:	4625      	mov	r5, r4
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ec:	f000 f838 	bl	800a160 <_malloc_usable_size_r>
 800a0f0:	4284      	cmp	r4, r0
 800a0f2:	4607      	mov	r7, r0
 800a0f4:	d802      	bhi.n	800a0fc <_realloc_r+0x34>
 800a0f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0fa:	d812      	bhi.n	800a122 <_realloc_r+0x5a>
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	4640      	mov	r0, r8
 800a100:	f7ff ff6e 	bl	8009fe0 <_malloc_r>
 800a104:	4605      	mov	r5, r0
 800a106:	2800      	cmp	r0, #0
 800a108:	d0ed      	beq.n	800a0e6 <_realloc_r+0x1e>
 800a10a:	42bc      	cmp	r4, r7
 800a10c:	4622      	mov	r2, r4
 800a10e:	4631      	mov	r1, r6
 800a110:	bf28      	it	cs
 800a112:	463a      	movcs	r2, r7
 800a114:	f7ff fbb8 	bl	8009888 <memcpy>
 800a118:	4631      	mov	r1, r6
 800a11a:	4640      	mov	r0, r8
 800a11c:	f7ff fef4 	bl	8009f08 <_free_r>
 800a120:	e7e1      	b.n	800a0e6 <_realloc_r+0x1e>
 800a122:	4635      	mov	r5, r6
 800a124:	e7df      	b.n	800a0e6 <_realloc_r+0x1e>
	...

0800a128 <_sbrk_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4d06      	ldr	r5, [pc, #24]	; (800a144 <_sbrk_r+0x1c>)
 800a12c:	2300      	movs	r3, #0
 800a12e:	4604      	mov	r4, r0
 800a130:	4608      	mov	r0, r1
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	f7f7 fa40 	bl	80015b8 <_sbrk>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_sbrk_r+0x1a>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_sbrk_r+0x1a>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	200024f8 	.word	0x200024f8

0800a148 <__malloc_lock>:
 800a148:	4801      	ldr	r0, [pc, #4]	; (800a150 <__malloc_lock+0x8>)
 800a14a:	f000 b811 	b.w	800a170 <__retarget_lock_acquire_recursive>
 800a14e:	bf00      	nop
 800a150:	200024fc 	.word	0x200024fc

0800a154 <__malloc_unlock>:
 800a154:	4801      	ldr	r0, [pc, #4]	; (800a15c <__malloc_unlock+0x8>)
 800a156:	f000 b80c 	b.w	800a172 <__retarget_lock_release_recursive>
 800a15a:	bf00      	nop
 800a15c:	200024fc 	.word	0x200024fc

0800a160 <_malloc_usable_size_r>:
 800a160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a164:	1f18      	subs	r0, r3, #4
 800a166:	2b00      	cmp	r3, #0
 800a168:	bfbc      	itt	lt
 800a16a:	580b      	ldrlt	r3, [r1, r0]
 800a16c:	18c0      	addlt	r0, r0, r3
 800a16e:	4770      	bx	lr

0800a170 <__retarget_lock_acquire_recursive>:
 800a170:	4770      	bx	lr

0800a172 <__retarget_lock_release_recursive>:
 800a172:	4770      	bx	lr

0800a174 <_init>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr

0800a180 <_fini>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr
