
2_3_23_VESC_Board_Test_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008400  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e0  080085e0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085e8  080085e8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085ec  080085ec  000185ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080085f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001d04  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001e00  20001e00  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c3b  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003123  00000000  00000000  00034d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00037e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001040  00000000  00000000  00039038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002354f  00000000  00000000  0003a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b4a  00000000  00000000  0005d5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce577  00000000  00000000  00073111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141688  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049b0  00000000  00000000  001416d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008570 	.word	0x08008570

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008570 	.word	0x08008570

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fbba 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f80c 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9c8 	bl	800086c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004dc:	f000 f870 	bl	80005c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e0:	f000 f8c0 	bl	8000664 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004e4:	f000 f976 	bl	80007d4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f007 fb22 	bl	8007b30 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0x20>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f008 f82e 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <SystemClock_Config+0xc8>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a26      	ldr	r2, [pc, #152]	; (80005b8 <SystemClock_Config+0xc8>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <SystemClock_Config+0xc8>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b21      	ldr	r3, [pc, #132]	; (80005bc <SystemClock_Config+0xcc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a20      	ldr	r2, [pc, #128]	; (80005bc <SystemClock_Config+0xcc>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <SystemClock_Config+0xcc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2310      	movs	r3, #16
 8000556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000560:	2310      	movs	r3, #16
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000564:	23c0      	movs	r3, #192	; 0xc0
 8000566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f002 fba3 	bl	8002cc0 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000580:	f000 f9de 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fe06 	bl	80031b0 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005aa:	f000 f9c9 	bl	8000940 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	; 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_ADC1_Init+0x98>)
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <MX_ADC1_Init+0x9c>)
 80005d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <MX_ADC1_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_ADC1_Init+0x98>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_ADC1_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_ADC1_Init+0x98>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_ADC1_Init+0x98>)
 8000600:	4a17      	ldr	r2, [pc, #92]	; (8000660 <MX_ADC1_Init+0xa0>)
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_ADC1_Init+0x98>)
 800060c:	2201      	movs	r2, #1
 800060e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_ADC1_Init+0x98>)
 800061a:	2201      	movs	r2, #1
 800061c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <MX_ADC1_Init+0x98>)
 8000620:	f000 fba8 	bl	8000d74 <HAL_ADC_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800062a:	f000 f989 	bl	8000940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <MX_ADC1_Init+0x98>)
 8000640:	f000 fbdc 	bl	8000dfc <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800064a:	f000 f979 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000118 	.word	0x20000118
 800065c:	40012000 	.word	0x40012000
 8000660:	0f000001 	.word	0x0f000001

08000664 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b096      	sub	sp, #88	; 0x58
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2220      	movs	r2, #32
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f007 ff5f 	bl	8008560 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a2:	4b4a      	ldr	r3, [pc, #296]	; (80007cc <MX_TIM1_Init+0x168>)
 80006a4:	4a4a      	ldr	r2, [pc, #296]	; (80007d0 <MX_TIM1_Init+0x16c>)
 80006a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 13;
 80006a8:	4b48      	ldr	r3, [pc, #288]	; (80007cc <MX_TIM1_Init+0x168>)
 80006aa:	220d      	movs	r2, #13
 80006ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ae:	4b47      	ldr	r3, [pc, #284]	; (80007cc <MX_TIM1_Init+0x168>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 102;
 80006b4:	4b45      	ldr	r3, [pc, #276]	; (80007cc <MX_TIM1_Init+0x168>)
 80006b6:	2266      	movs	r2, #102	; 0x66
 80006b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b44      	ldr	r3, [pc, #272]	; (80007cc <MX_TIM1_Init+0x168>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c0:	4b42      	ldr	r3, [pc, #264]	; (80007cc <MX_TIM1_Init+0x168>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c6:	4b41      	ldr	r3, [pc, #260]	; (80007cc <MX_TIM1_Init+0x168>)
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006cc:	483f      	ldr	r0, [pc, #252]	; (80007cc <MX_TIM1_Init+0x168>)
 80006ce:	f002 ff27 	bl	8003520 <HAL_TIM_Base_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80006d8:	f000 f932 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e6:	4619      	mov	r1, r3
 80006e8:	4838      	ldr	r0, [pc, #224]	; (80007cc <MX_TIM1_Init+0x168>)
 80006ea:	f003 f98b 	bl	8003a04 <HAL_TIM_ConfigClockSource>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006f4:	f000 f924 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f8:	4834      	ldr	r0, [pc, #208]	; (80007cc <MX_TIM1_Init+0x168>)
 80006fa:	f002 ff60 	bl	80035be <HAL_TIM_PWM_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000704:	f000 f91c 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000708:	2300      	movs	r3, #0
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000710:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000714:	4619      	mov	r1, r3
 8000716:	482d      	ldr	r0, [pc, #180]	; (80007cc <MX_TIM1_Init+0x168>)
 8000718:	f003 fd58 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000722:	f000 f90d 	bl	8000940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000726:	2360      	movs	r3, #96	; 0x60
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072e:	2300      	movs	r3, #0
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000732:	2300      	movs	r3, #0
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800073e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000748:	2200      	movs	r2, #0
 800074a:	4619      	mov	r1, r3
 800074c:	481f      	ldr	r0, [pc, #124]	; (80007cc <MX_TIM1_Init+0x168>)
 800074e:	f003 f897 	bl	8003880 <HAL_TIM_PWM_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000758:	f000 f8f2 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800075c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000760:	2204      	movs	r2, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4819      	ldr	r0, [pc, #100]	; (80007cc <MX_TIM1_Init+0x168>)
 8000766:	f003 f88b 	bl	8003880 <HAL_TIM_PWM_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000770:	f000 f8e6 	bl	8000940 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	2208      	movs	r2, #8
 800077a:	4619      	mov	r1, r3
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <MX_TIM1_Init+0x168>)
 800077e:	f003 f87f 	bl	8003880 <HAL_TIM_PWM_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000788:	f000 f8da 	bl	8000940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8000798:	2314      	movs	r3, #20
 800079a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM1_Init+0x168>)
 80007b0:	f003 fd88 	bl	80042c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80007ba:	f000 f8c1 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM1_Init+0x168>)
 80007c0:	f000 f96c 	bl	8000a9c <HAL_TIM_MspPostInit>

}
 80007c4:	bf00      	nop
 80007c6:	3758      	adds	r7, #88	; 0x58
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000160 	.word	0x20000160
 80007d0:	40010000 	.word	0x40010000

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_TIM2_Init+0x94>)
 80007f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_TIM2_Init+0x94>)
 80007fa:	220e      	movs	r2, #14
 80007fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_TIM2_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM2_Init+0x94>)
 8000806:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800080a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_TIM2_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM2_Init+0x94>)
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <MX_TIM2_Init+0x94>)
 800081a:	f002 fe81 	bl	8003520 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000824:	f000 f88c 	bl	8000940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_TIM2_Init+0x94>)
 8000836:	f003 f8e5 	bl	8003a04 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 f87e 	bl	8000940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_TIM2_Init+0x94>)
 8000852:	f003 fcbb 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800085c:	f000 f870 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200001a8 	.word	0x200001a8

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <MX_GPIO_Init+0xcc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <MX_GPIO_Init+0xcc>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_GPIO_Init+0xcc>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a24      	ldr	r2, [pc, #144]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a1d      	ldr	r2, [pc, #116]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_GPIO_Init+0xcc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2123      	movs	r1, #35	; 0x23
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_GPIO_Init+0xd0>)
 80008f8:	f000 ff4c 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin EN_GATE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|EN_GATE_Pin;
 80008fc:	2323      	movs	r3, #35	; 0x23
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <MX_GPIO_Init+0xd0>)
 8000914:	f000 fda2 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_Pin */
  GPIO_InitStruct.Pin = FAULT_Pin;
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_GPIO_Init+0xd0>)
 800092c:	f000 fd96 	bl	800145c <HAL_GPIO_Init>

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_ADC_MspInit+0x7c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d127      	bne.n	8000a0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = VSENS_1_Pin|VSENS_2_Pin|VSENS_3_Pin|TEMP_NTC_Pin
 80009f6:	236f      	movs	r3, #111	; 0x6f
 80009f8:	617b      	str	r3, [r7, #20]
                          |ADC_EXT1_Pin|ADC_EXT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_ADC_MspInit+0x84>)
 8000a0a:	f000 fd27 	bl	800145c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <HAL_TIM_Base_MspInit+0x70>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d10e      	bne.n	8000a54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <HAL_TIM_Base_MspInit+0x74>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a16      	ldr	r2, [pc, #88]	; (8000a98 <HAL_TIM_Base_MspInit+0x74>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <HAL_TIM_Base_MspInit+0x74>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a52:	e01a      	b.n	8000a8a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a5c:	d115      	bne.n	8000a8a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <HAL_TIM_Base_MspInit+0x74>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <HAL_TIM_Base_MspInit+0x74>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_TIM_Base_MspInit+0x74>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	201c      	movs	r0, #28
 8000a80:	f000 fcb5 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a84:	201c      	movs	r0, #28
 8000a86:	f000 fcce 	bl	8001426 <HAL_NVIC_EnableIRQ>
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40010000 	.word	0x40010000
 8000a98:	40023800 	.word	0x40023800

08000a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <HAL_TIM_MspPostInit+0xa8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d13d      	bne.n	8000b3a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <HAL_TIM_MspPostInit+0xac>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a20      	ldr	r2, [pc, #128]	; (8000b48 <HAL_TIM_MspPostInit+0xac>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_TIM_MspPostInit+0xac>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_TIM_MspPostInit+0xac>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_TIM_MspPostInit+0xac>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_TIM_MspPostInit+0xac>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L1_Pin|L2_Pin|L3_Pin;
 8000af6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <HAL_TIM_MspPostInit+0xb0>)
 8000b14:	f000 fca2 	bl	800145c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 8000b18:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <HAL_TIM_MspPostInit+0xb4>)
 8000b36:	f000 fc91 	bl	800145c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010000 	.word	0x40010000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020000 	.word	0x40020000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f8a4 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <TIM2_IRQHandler+0x10>)
 8000bae:	f002 fd5f 	bl	8003670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200001a8 	.word	0x200001a8

08000bbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <OTG_FS_IRQHandler+0x10>)
 8000bc2:	f000 ff50 	bl	8001a66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200016d4 	.word	0x200016d4

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfa:	490e      	ldr	r1, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c10:	4c0b      	ldr	r4, [pc, #44]	; (8000c40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1e:	f7ff ffd7 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f007 fc79 	bl	8008518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c26:	f7ff fc51 	bl	80004cc <main>
  bx  lr    
 8000c2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000c38:	080085f0 	.word	0x080085f0
  ldr r2, =_sbss
 8000c3c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000c40:	20001e00 	.word	0x20001e00

08000c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <HAL_Init+0x40>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_Init+0x40>)
 8000c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <HAL_Init+0x40>)
 8000c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 fbb1 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c76:	200f      	movs	r0, #15
 8000c78:	f000 f808 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7c:	f7ff fe66 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fbc9 	bl	8001442 <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 fb91 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	200001f0 	.word	0x200001f0

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200001f0 	.word	0x200001f0

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e033      	b.n	8000df2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d109      	bne.n	8000da6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fe02 	bl	800099c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d118      	bne.n	8000de4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dba:	f023 0302 	bic.w	r3, r3, #2
 8000dbe:	f043 0202 	orr.w	r2, r3, #2
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f93a 	bl	8001040 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f023 0303 	bic.w	r3, r3, #3
 8000dda:	f043 0201 	orr.w	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
 8000de2:	e001      	b.n	8000de8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d101      	bne.n	8000e18 <HAL_ADC_ConfigChannel+0x1c>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e105      	b.n	8001024 <HAL_ADC_ConfigChannel+0x228>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b09      	cmp	r3, #9
 8000e26:	d925      	bls.n	8000e74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68d9      	ldr	r1, [r3, #12]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3b1e      	subs	r3, #30
 8000e3e:	2207      	movs	r2, #7
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43da      	mvns	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68d9      	ldr	r1, [r3, #12]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	4603      	mov	r3, r0
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4403      	add	r3, r0
 8000e66:	3b1e      	subs	r3, #30
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	e022      	b.n	8000eba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6919      	ldr	r1, [r3, #16]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	2207      	movs	r2, #7
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	400a      	ands	r2, r1
 8000e96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6919      	ldr	r1, [r3, #16]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4403      	add	r3, r0
 8000eb0:	409a      	lsls	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b06      	cmp	r3, #6
 8000ec0:	d824      	bhi.n	8000f0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3b05      	subs	r3, #5
 8000ed4:	221f      	movs	r2, #31
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	3b05      	subs	r3, #5
 8000efe:	fa00 f203 	lsl.w	r2, r0, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
 8000f0a:	e04c      	b.n	8000fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b0c      	cmp	r3, #12
 8000f12:	d824      	bhi.n	8000f5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	3b23      	subs	r3, #35	; 0x23
 8000f26:	221f      	movs	r2, #31
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	400a      	ands	r2, r1
 8000f34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b23      	subs	r3, #35	; 0x23
 8000f50:	fa00 f203 	lsl.w	r2, r0, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f5c:	e023      	b.n	8000fa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b41      	subs	r3, #65	; 0x41
 8000f70:	221f      	movs	r2, #31
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	3b41      	subs	r3, #65	; 0x41
 8000f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <HAL_ADC_ConfigChannel+0x234>)
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a21      	ldr	r2, [pc, #132]	; (8001034 <HAL_ADC_ConfigChannel+0x238>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d109      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1cc>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b12      	cmp	r3, #18
 8000fba:	d105      	bne.n	8000fc8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_ADC_ConfigChannel+0x238>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d123      	bne.n	800101a <HAL_ADC_ConfigChannel+0x21e>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d003      	beq.n	8000fe2 <HAL_ADC_ConfigChannel+0x1e6>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b11      	cmp	r3, #17
 8000fe0:	d11b      	bne.n	800101a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	d111      	bne.n	800101a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_ADC_ConfigChannel+0x23c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_ADC_ConfigChannel+0x240>)
 8000ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8001000:	0c9a      	lsrs	r2, r3, #18
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800100c:	e002      	b.n	8001014 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	3b01      	subs	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f9      	bne.n	800100e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40012300 	.word	0x40012300
 8001034:	40012000 	.word	0x40012000
 8001038:	20000000 	.word	0x20000000
 800103c:	431bde83 	.word	0x431bde83

08001040 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001048:	4b79      	ldr	r3, [pc, #484]	; (8001230 <ADC_Init+0x1f0>)
 800104a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	431a      	orrs	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	021a      	lsls	r2, r3, #8
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001098:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6859      	ldr	r1, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6899      	ldr	r1, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	4a58      	ldr	r2, [pc, #352]	; (8001234 <ADC_Init+0x1f4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d022      	beq.n	800111e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6899      	ldr	r1, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6899      	ldr	r1, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	e00f      	b.n	800113e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800112c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800113c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0202 	bic.w	r2, r2, #2
 800114c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6899      	ldr	r1, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7e1b      	ldrb	r3, [r3, #24]
 8001158:	005a      	lsls	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d01b      	beq.n	80011a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800117a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800118a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6859      	ldr	r1, [r3, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	3b01      	subs	r3, #1
 8001198:	035a      	lsls	r2, r3, #13
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	e007      	b.n	80011b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	051a      	lsls	r2, r3, #20
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6899      	ldr	r1, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011f6:	025a      	lsls	r2, r3, #9
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800120e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6899      	ldr	r1, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	029a      	lsls	r2, r3, #10
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	609a      	str	r2, [r3, #8]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40012300 	.word	0x40012300
 8001234:	0f000001 	.word	0x0f000001

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4907      	ldr	r1, [pc, #28]	; (80012d4 <__NVIC_EnableIRQ+0x38>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff29 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff3e 	bl	8001280 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff8e 	bl	800132c <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff31 	bl	800129c <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa2 	bl	8001394 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	e16b      	b.n	8001750 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001478:	2201      	movs	r2, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	429a      	cmp	r2, r3
 8001492:	f040 815a 	bne.w	800174a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d005      	beq.n	80014ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d130      	bne.n	8001510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e4:	2201      	movs	r2, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 0201 	and.w	r2, r3, #1
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b03      	cmp	r3, #3
 800151a:	d017      	beq.n	800154c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d123      	bne.n	80015a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	08da      	lsrs	r2, r3, #3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3208      	adds	r2, #8
 800159a:	69b9      	ldr	r1, [r7, #24]
 800159c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0203 	and.w	r2, r3, #3
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80b4 	beq.w	800174a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b60      	ldr	r3, [pc, #384]	; (8001768 <HAL_GPIO_Init+0x30c>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a5f      	ldr	r2, [pc, #380]	; (8001768 <HAL_GPIO_Init+0x30c>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <HAL_GPIO_Init+0x30c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015fe:	4a5b      	ldr	r2, [pc, #364]	; (800176c <HAL_GPIO_Init+0x310>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a52      	ldr	r2, [pc, #328]	; (8001770 <HAL_GPIO_Init+0x314>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d02b      	beq.n	8001682 <HAL_GPIO_Init+0x226>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a51      	ldr	r2, [pc, #324]	; (8001774 <HAL_GPIO_Init+0x318>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d025      	beq.n	800167e <HAL_GPIO_Init+0x222>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a50      	ldr	r2, [pc, #320]	; (8001778 <HAL_GPIO_Init+0x31c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d01f      	beq.n	800167a <HAL_GPIO_Init+0x21e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4f      	ldr	r2, [pc, #316]	; (800177c <HAL_GPIO_Init+0x320>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <HAL_GPIO_Init+0x21a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4e      	ldr	r2, [pc, #312]	; (8001780 <HAL_GPIO_Init+0x324>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0x216>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4d      	ldr	r2, [pc, #308]	; (8001784 <HAL_GPIO_Init+0x328>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00d      	beq.n	800166e <HAL_GPIO_Init+0x212>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <HAL_GPIO_Init+0x32c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d007      	beq.n	800166a <HAL_GPIO_Init+0x20e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4b      	ldr	r2, [pc, #300]	; (800178c <HAL_GPIO_Init+0x330>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_GPIO_Init+0x20a>
 8001662:	2307      	movs	r3, #7
 8001664:	e00e      	b.n	8001684 <HAL_GPIO_Init+0x228>
 8001666:	2308      	movs	r3, #8
 8001668:	e00c      	b.n	8001684 <HAL_GPIO_Init+0x228>
 800166a:	2306      	movs	r3, #6
 800166c:	e00a      	b.n	8001684 <HAL_GPIO_Init+0x228>
 800166e:	2305      	movs	r3, #5
 8001670:	e008      	b.n	8001684 <HAL_GPIO_Init+0x228>
 8001672:	2304      	movs	r3, #4
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x228>
 8001676:	2303      	movs	r3, #3
 8001678:	e004      	b.n	8001684 <HAL_GPIO_Init+0x228>
 800167a:	2302      	movs	r3, #2
 800167c:	e002      	b.n	8001684 <HAL_GPIO_Init+0x228>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x228>
 8001682:	2300      	movs	r3, #0
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	f002 0203 	and.w	r2, r2, #3
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	4093      	lsls	r3, r2
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001694:	4935      	ldr	r1, [pc, #212]	; (800176c <HAL_GPIO_Init+0x310>)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a2:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016c6:	4a32      	ldr	r2, [pc, #200]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016cc:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_GPIO_Init+0x334>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800171a:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <HAL_GPIO_Init+0x334>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <HAL_GPIO_Init+0x334>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001744:	4a12      	ldr	r2, [pc, #72]	; (8001790 <HAL_GPIO_Init+0x334>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3301      	adds	r3, #1
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	2b0f      	cmp	r3, #15
 8001754:	f67f ae90 	bls.w	8001478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3724      	adds	r7, #36	; 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40013800 	.word	0x40013800
 8001770:	40020000 	.word	0x40020000
 8001774:	40020400 	.word	0x40020400
 8001778:	40020800 	.word	0x40020800
 800177c:	40020c00 	.word	0x40020c00
 8001780:	40021000 	.word	0x40021000
 8001784:	40021400 	.word	0x40021400
 8001788:	40021800 	.word	0x40021800
 800178c:	40021c00 	.word	0x40021c00
 8001790:	40013c00 	.word	0x40013c00

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	041a      	lsls	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	619a      	str	r2, [r3, #24]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c8:	b08f      	sub	sp, #60	; 0x3c
 80017ca:	af0a      	add	r7, sp, #40	; 0x28
 80017cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e10f      	b.n	80019f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f006 fb7c 	bl	8007ef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2203      	movs	r2, #3
 80017fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f002 fecf 	bl	80045ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	687e      	ldr	r6, [r7, #4]
 8001824:	466d      	mov	r5, sp
 8001826:	f106 0410 	add.w	r4, r6, #16
 800182a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001832:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001836:	e885 0003 	stmia.w	r5, {r0, r1}
 800183a:	1d33      	adds	r3, r6, #4
 800183c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183e:	6838      	ldr	r0, [r7, #0]
 8001840:	f002 fda6 	bl	8004390 <USB_CoreInit>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2202      	movs	r2, #2
 800184e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0d0      	b.n	80019f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f002 febd 	bl	80045dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e04a      	b.n	80018fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	333d      	adds	r3, #61	; 0x3d
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	333c      	adds	r3, #60	; 0x3c
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	b298      	uxth	r0, r3
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3344      	adds	r3, #68	; 0x44
 80018a4:	4602      	mov	r2, r0
 80018a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	3340      	adds	r3, #64	; 0x40
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3348      	adds	r3, #72	; 0x48
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	334c      	adds	r3, #76	; 0x4c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3354      	adds	r3, #84	; 0x54
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	3301      	adds	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3af      	bcc.n	8001868 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e044      	b.n	8001998 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3301      	adds	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d3b5      	bcc.n	800190e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	687e      	ldr	r6, [r7, #4]
 80019aa:	466d      	mov	r5, sp
 80019ac:	f106 0410 	add.w	r4, r6, #16
 80019b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80019c0:	1d33      	adds	r3, r6, #4
 80019c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c4:	6838      	ldr	r0, [r7, #0]
 80019c6:	f002 fe55 	bl	8004674 <USB_DevInit>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e00d      	b.n	80019f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 ffa4 	bl	800593e <USB_DevDisconnect>

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_PCD_Start+0x1c>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e020      	b.n	8001a5e <HAL_PCD_Start+0x5e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d109      	bne.n	8001a40 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d005      	beq.n	8001a40 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 fda7 	bl	8004598 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 ff54 	bl	80058fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a66:	b590      	push	{r4, r7, lr}
 8001a68:	b08d      	sub	sp, #52	; 0x34
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 f812 	bl	8005aa6 <USB_GetMode>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f040 848a 	bne.w	800239e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 ff76 	bl	8005980 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8480 	beq.w	800239c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 ff63 	bl	8005980 <USB_ReadInterrupts>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d107      	bne.n	8001ad4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f002 0202 	and.w	r2, r2, #2
 8001ad2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 ff51 	bl	8005980 <USB_ReadInterrupts>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d161      	bne.n	8001bac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0210 	bic.w	r2, r2, #16
 8001af6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f003 020f 	and.w	r2, r3, #15
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	3304      	adds	r3, #4
 8001b16:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	0c5b      	lsrs	r3, r3, #17
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d124      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d035      	beq.n	8001b9c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	6a38      	ldr	r0, [r7, #32]
 8001b44:	f003 fd88 	bl	8005658 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b54:	441a      	add	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	6a1a      	ldr	r2, [r3, #32]
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b66:	441a      	add	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	621a      	str	r2, [r3, #32]
 8001b6c:	e016      	b.n	8001b9c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	0c5b      	lsrs	r3, r3, #17
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d110      	bne.n	8001b9c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b80:	2208      	movs	r2, #8
 8001b82:	4619      	mov	r1, r3
 8001b84:	6a38      	ldr	r0, [r7, #32]
 8001b86:	f003 fd67 	bl	8005658 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b96:	441a      	add	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0210 	orr.w	r2, r2, #16
 8001baa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fee5 	bl	8005980 <USB_ReadInterrupts>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bc0:	f040 80a7 	bne.w	8001d12 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 feea 	bl	80059a6 <USB_ReadDevAllOutEpInterrupt>
 8001bd2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bd4:	e099      	b.n	8001d0a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 808e 	beq.w	8001cfe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 ff0e 	bl	8005a0e <USB_ReadDevOutEPInterrupt>
 8001bf2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00c      	beq.n	8001c18 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fec2 	bl	800299c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00c      	beq.n	8001c3c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2308      	movs	r3, #8
 8001c32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 ff98 	bl	8002b6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c52:	461a      	mov	r2, r3
 8001c54:	2310      	movs	r3, #16
 8001c56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d030      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b80      	cmp	r3, #128	; 0x80
 8001c6c:	d109      	bne.n	8001c82 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c80:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	3304      	adds	r3, #4
 8001c96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	78db      	ldrb	r3, [r3, #3]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f006 fa25 	bl	80080fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2320      	movs	r3, #32
 8001cde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cfc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f af62 	bne.w	8001bd6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fe32 	bl	8005980 <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d26:	f040 80db 	bne.w	8001ee0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fe53 	bl	80059da <USB_ReadDevAllInEpInterrupt>
 8001d34:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d3a:	e0cd      	b.n	8001ed8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80c2 	beq.w	8001ecc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fe79 	bl	8005a4a <USB_ReadDevInEPInterrupt>
 8001d58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d057      	beq.n	8001e14 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69f9      	ldr	r1, [r7, #28]
 8001d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d84:	4013      	ands	r3, r2
 8001d86:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d94:	461a      	mov	r2, r3
 8001d96:	2301      	movs	r3, #1
 8001d98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d132      	bne.n	8001e08 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	334c      	adds	r3, #76	; 0x4c
 8001db2:	6819      	ldr	r1, [r3, #0]
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4403      	add	r3, r0
 8001dc2:	3348      	adds	r3, #72	; 0x48
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4419      	add	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4403      	add	r3, r0
 8001dd6:	334c      	adds	r3, #76	; 0x4c
 8001dd8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d113      	bne.n	8001e08 <HAL_PCD_IRQHandler+0x3a2>
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	3354      	adds	r3, #84	; 0x54
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d108      	bne.n	8001e08 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e00:	461a      	mov	r2, r3
 8001e02:	2101      	movs	r1, #1
 8001e04:	f003 fe80 	bl	8005b08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f006 f8ef 	bl	8007ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e46:	461a      	mov	r2, r3
 8001e48:	2310      	movs	r3, #16
 8001e4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d008      	beq.n	8001e68 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e62:	461a      	mov	r2, r3
 8001e64:	2340      	movs	r3, #64	; 0x40
 8001e66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d023      	beq.n	8001eba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e74:	6a38      	ldr	r0, [r7, #32]
 8001e76:	f002 fd61 	bl	800493c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	3338      	adds	r3, #56	; 0x38
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	78db      	ldrb	r3, [r3, #3]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d108      	bne.n	8001ea8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f006 f93c 	bl	8008120 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fcdb 	bl	8002882 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	3301      	adds	r3, #1
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f47f af2e 	bne.w	8001d3c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fd4b 	bl	8005980 <USB_ReadInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ef4:	d122      	bne.n	8001f3c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d108      	bne.n	8001f26 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fec2 	bl	8002ca8 <HAL_PCDEx_LPM_Callback>
 8001f24:	e002      	b.n	8001f2c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f006 f8da 	bl	80080e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 fd1d 	bl	8005980 <USB_ReadInterrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f50:	d112      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d102      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f006 f896 	bl	8008094 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f76:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fcff 	bl	8005980 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8c:	f040 80b7 	bne.w	80020fe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2110      	movs	r1, #16
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fcc6 	bl	800493c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb4:	e046      	b.n	8002044 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fc8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fda:	0151      	lsls	r1, r2, #5
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	440a      	add	r2, r1
 8001fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fe4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fe8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ffc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800200e:	0151      	lsls	r1, r2, #5
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	440a      	add	r2, r1
 8002014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002018:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800201c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800202e:	0151      	lsls	r1, r2, #5
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	440a      	add	r2, r1
 8002034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002038:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800203c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	3301      	adds	r3, #1
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800204a:	429a      	cmp	r2, r3
 800204c:	d3b3      	bcc.n	8001fb6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800205c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002060:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800207a:	f043 030b 	orr.w	r3, r3, #11
 800207e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002090:	f043 030b 	orr.w	r3, r3, #11
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	e015      	b.n	80020c4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020be:	f043 030b 	orr.w	r3, r3, #11
 80020c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020e8:	461a      	mov	r2, r3
 80020ea:	f003 fd0d 	bl	8005b08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fc3c 	bl	8005980 <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800210e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002112:	d124      	bne.n	800215e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fcd2 	bl	8005ac2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fc87 	bl	8004a36 <USB_GetDevSpeed>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681c      	ldr	r4, [r3, #0]
 8002134:	f001 f9e8 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8002138:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	4620      	mov	r0, r4
 8002144:	f002 f986 	bl	8004454 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f005 ff7a 	bl	8008042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800215c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fc0c 	bl	8005980 <USB_ReadInterrupts>
 8002168:	4603      	mov	r3, r0
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b08      	cmp	r3, #8
 8002170:	d10a      	bne.n	8002188 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f005 ff57 	bl	8008026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f002 0208 	and.w	r2, r2, #8
 8002186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fbf7 	bl	8005980 <USB_ReadInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002198:	2b80      	cmp	r3, #128	; 0x80
 800219a:	d122      	bne.n	80021e2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021a8:	2301      	movs	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
 80021ac:	e014      	b.n	80021d8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fb27 	bl	8002820 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	3301      	adds	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021de:	429a      	cmp	r2, r3
 80021e0:	d3e5      	bcc.n	80021ae <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fbca 	bl	8005980 <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021f6:	d13b      	bne.n	8002270 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021f8:	2301      	movs	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
 80021fc:	e02b      	b.n	8002256 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3340      	adds	r3, #64	; 0x40
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d115      	bne.n	8002250 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002224:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	da12      	bge.n	8002250 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	333f      	adds	r3, #63	; 0x3f
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fae8 	bl	8002820 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	3301      	adds	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	429a      	cmp	r2, r3
 800225e:	d3ce      	bcc.n	80021fe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800226e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 fb83 	bl	8005980 <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002280:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002284:	d155      	bne.n	8002332 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002286:	2301      	movs	r3, #1
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	e045      	b.n	8002318 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d12e      	bne.n	8002312 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da2b      	bge.n	8002312 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80022c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d121      	bne.n	8002312 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10a      	bne.n	8002312 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800230a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230e:	6053      	str	r3, [r2, #4]
            break;
 8002310:	e007      	b.n	8002322 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	3301      	adds	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	429a      	cmp	r2, r3
 8002320:	d3b4      	bcc.n	800228c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fb22 	bl	8005980 <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d10a      	bne.n	800235e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f005 fefb 	bl	8008144 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800235c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fb0c 	bl	8005980 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b04      	cmp	r3, #4
 8002370:	d115      	bne.n	800239e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f005 feeb 	bl	8008160 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6859      	ldr	r1, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	e000      	b.n	800239e <HAL_PCD_IRQHandler+0x938>
      return;
 800239c:	bf00      	nop
    }
  }
}
 800239e:	3734      	adds	r7, #52	; 0x34
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd90      	pop	{r4, r7, pc}

080023a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_PCD_SetAddress+0x1a>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e013      	b.n	80023e6 <HAL_PCD_SetAddress+0x42>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 fa6a 	bl	80058b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	4608      	mov	r0, r1
 80023f8:	4611      	mov	r1, r2
 80023fa:	461a      	mov	r2, r3
 80023fc:	4603      	mov	r3, r0
 80023fe:	70fb      	strb	r3, [r7, #3]
 8002400:	460b      	mov	r3, r1
 8002402:	803b      	strh	r3, [r7, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800240c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da0f      	bge.n	8002434 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	f003 020f 	and.w	r2, r3, #15
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	3338      	adds	r3, #56	; 0x38
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	3304      	adds	r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	705a      	strb	r2, [r3, #1]
 8002432:	e00f      	b.n	8002454 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	f003 020f 	and.w	r2, r3, #15
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	b2da      	uxtb	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002460:	883a      	ldrh	r2, [r7, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	78ba      	ldrb	r2, [r7, #2]
 800246a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800247e:	78bb      	ldrb	r3, [r7, #2]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d102      	bne.n	800248a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_PCD_EP_Open+0xaa>
 8002494:	2302      	movs	r3, #2
 8002496:	e00e      	b.n	80024b6 <HAL_PCD_EP_Open+0xc8>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 faea 	bl	8004a80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80024b4:	7afb      	ldrb	r3, [r7, #11]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	da0f      	bge.n	80024f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	3338      	adds	r3, #56	; 0x38
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	705a      	strb	r2, [r3, #1]
 80024f0:	e00f      	b.n	8002512 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 020f 	and.w	r2, r3, #15
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	3304      	adds	r3, #4
 800250a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	b2da      	uxtb	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_PCD_EP_Close+0x6e>
 8002528:	2302      	movs	r3, #2
 800252a:	e00e      	b.n	800254a <HAL_PCD_EP_Close+0x8c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fb28 	bl	8004b90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	460b      	mov	r3, r1
 8002560:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	f003 020f 	and.w	r2, r3, #15
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	3304      	adds	r3, #4
 800257a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2200      	movs	r2, #0
 800258c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	b2da      	uxtb	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d102      	bne.n	80025ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ae:	7afb      	ldrb	r3, [r7, #11]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	6979      	ldr	r1, [r7, #20]
 80025c6:	f002 fe07 	bl	80051d8 <USB_EP0StartXfer>
 80025ca:	e008      	b.n	80025de <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	6979      	ldr	r1, [r7, #20]
 80025da:	f002 fbb5 	bl	8004d48 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	f003 020f 	and.w	r2, r3, #15
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	460b      	mov	r3, r1
 8002626:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002628:	7afb      	ldrb	r3, [r7, #11]
 800262a:	f003 020f 	and.w	r2, r3, #15
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	3338      	adds	r3, #56	; 0x38
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4413      	add	r3, r2
 800263c:	3304      	adds	r3, #4
 800263e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2201      	movs	r2, #1
 8002656:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002658:	7afb      	ldrb	r3, [r7, #11]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	b2da      	uxtb	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d102      	bne.n	8002672 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002672:	7afb      	ldrb	r3, [r7, #11]
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	6979      	ldr	r1, [r7, #20]
 800268a:	f002 fda5 	bl	80051d8 <USB_EP0StartXfer>
 800268e:	e008      	b.n	80026a2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6979      	ldr	r1, [r7, #20]
 800269e:	f002 fb53 	bl	8004d48 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 020f 	and.w	r2, r3, #15
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d901      	bls.n	80026ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e050      	b.n	800276c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	da0f      	bge.n	80026f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	f003 020f 	and.w	r2, r3, #15
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	3338      	adds	r3, #56	; 0x38
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	3304      	adds	r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	705a      	strb	r2, [r3, #1]
 80026f0:	e00d      	b.n	800270e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	4413      	add	r3, r2
 8002704:	3304      	adds	r3, #4
 8002706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	b2da      	uxtb	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_PCD_EP_SetStall+0x82>
 800272a:	2302      	movs	r3, #2
 800272c:	e01e      	b.n	800276c <HAL_PCD_EP_SetStall+0xc0>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68f9      	ldr	r1, [r7, #12]
 800273c:	4618      	mov	r0, r3
 800273e:	f002 ffe3 	bl	8005708 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	b2d9      	uxtb	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800275c:	461a      	mov	r2, r3
 800275e:	f003 f9d3 	bl	8005b08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	f003 020f 	and.w	r2, r3, #15
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d901      	bls.n	8002792 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e042      	b.n	8002818 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002796:	2b00      	cmp	r3, #0
 8002798:	da0f      	bge.n	80027ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	3338      	adds	r3, #56	; 0x38
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	705a      	strb	r2, [r3, #1]
 80027b8:	e00f      	b.n	80027da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	f003 020f 	and.w	r2, r3, #15
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	4413      	add	r3, r2
 80027d0:	3304      	adds	r3, #4
 80027d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_PCD_EP_ClrStall+0x86>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e00e      	b.n	8002818 <HAL_PCD_EP_ClrStall+0xa4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68f9      	ldr	r1, [r7, #12]
 8002808:	4618      	mov	r0, r3
 800280a:	f002 ffeb 	bl	80057e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800282c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002830:	2b00      	cmp	r3, #0
 8002832:	da0c      	bge.n	800284e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 020f 	and.w	r2, r3, #15
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	3338      	adds	r3, #56	; 0x38
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	3304      	adds	r3, #4
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e00c      	b.n	8002868 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	4413      	add	r3, r2
 8002864:	3304      	adds	r3, #4
 8002866:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68f9      	ldr	r1, [r7, #12]
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fe0a 	bl	8005488 <USB_EPStopXfer>
 8002874:	4603      	mov	r3, r0
 8002876:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002878:	7afb      	ldrb	r3, [r7, #11]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b08a      	sub	sp, #40	; 0x28
 8002886:	af02      	add	r7, sp, #8
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	3338      	adds	r3, #56	; 0x38
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	3304      	adds	r3, #4
 80028a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d901      	bls.n	80028ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06c      	b.n	8002994 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d902      	bls.n	80028d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3303      	adds	r3, #3
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028de:	e02b      	b.n	8002938 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d902      	bls.n	80028fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	3303      	adds	r3, #3
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6919      	ldr	r1, [r3, #16]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002914:	b2db      	uxtb	r3, r3
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4603      	mov	r3, r0
 800291a:	6978      	ldr	r0, [r7, #20]
 800291c:	f002 fe5e 	bl	80055dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	441a      	add	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1a      	ldr	r2, [r3, #32]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	441a      	add	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	b29b      	uxth	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	429a      	cmp	r2, r3
 800294c:	d809      	bhi.n	8002962 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002956:	429a      	cmp	r2, r3
 8002958:	d203      	bcs.n	8002962 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1be      	bne.n	80028e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	429a      	cmp	r2, r3
 800296c:	d811      	bhi.n	8002992 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	2201      	movs	r2, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	43db      	mvns	r3, r3
 8002988:	6939      	ldr	r1, [r7, #16]
 800298a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800298e:	4013      	ands	r3, r2
 8002990:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3720      	adds	r7, #32
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	333c      	adds	r3, #60	; 0x3c
 80029b4:	3304      	adds	r3, #4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d17b      	bne.n	8002aca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4a61      	ldr	r2, [pc, #388]	; (8002b64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	f240 80b9 	bls.w	8002b58 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80b3 	beq.w	8002b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fe:	461a      	mov	r2, r3
 8002a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a04:	6093      	str	r3, [r2, #8]
 8002a06:	e0a7      	b.n	8002b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2320      	movs	r3, #32
 8002a22:	6093      	str	r3, [r2, #8]
 8002a24:	e098      	b.n	8002b58 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 8093 	bne.w	8002b58 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d90f      	bls.n	8002a5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a50:	461a      	mov	r2, r3
 8002a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a56:	6093      	str	r3, [r2, #8]
 8002a58:	e07e      	b.n	8002b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	0159      	lsls	r1, r3, #5
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	1ad2      	subs	r2, r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d114      	bne.n	8002abc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	f003 f82e 	bl	8005b08 <USB_EP0_OutStart>
 8002aac:	e006      	b.n	8002abc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	441a      	add	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f005 fa7a 	bl	8007fbc <HAL_PCD_DataOutStageCallback>
 8002ac8:	e046      	b.n	8002b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d124      	bne.n	8002b1c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aee:	6093      	str	r3, [r2, #8]
 8002af0:	e032      	b.n	8002b58 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f005 fa51 	bl	8007fbc <HAL_PCD_DataOutStageCallback>
 8002b1a:	e01d      	b.n	8002b58 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d114      	bne.n	8002b4c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b44:	461a      	mov	r2, r3
 8002b46:	2100      	movs	r1, #0
 8002b48:	f002 ffde 	bl	8005b08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	4619      	mov	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f005 fa32 	bl	8007fbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	4f54300a 	.word	0x4f54300a
 8002b68:	4f54310a 	.word	0x4f54310a

08002b6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	333c      	adds	r3, #60	; 0x3c
 8002b84:	3304      	adds	r3, #4
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d90e      	bls.n	8002bc0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bbe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f005 f9e9 	bl	8007f98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d90c      	bls.n	8002be8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d108      	bne.n	8002be8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002be0:	461a      	mov	r2, r3
 8002be2:	2101      	movs	r1, #1
 8002be4:	f002 ff90 	bl	8005b08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	4f54300a 	.word	0x4f54300a

08002bf8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
 8002c04:	4613      	mov	r3, r2
 8002c06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c16:	883b      	ldrh	r3, [r7, #0]
 8002c18:	0419      	lsls	r1, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
 8002c24:	e028      	b.n	8002c78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4413      	add	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
 8002c38:	e00d      	b.n	8002c56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	3340      	adds	r3, #64	; 0x40
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	3301      	adds	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d3ec      	bcc.n	8002c3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c60:	883b      	ldrh	r3, [r7, #0]
 8002c62:	0418      	lsls	r0, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	4302      	orrs	r2, r0
 8002c70:	3340      	adds	r3, #64	; 0x40
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e267      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d075      	beq.n	8002dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cde:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d00c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d112      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf6:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05b      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x108>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d157      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e242      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x74>
 8002d26:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e01d      	b.n	8002d70 <HAL_RCC_OscConfig+0xb0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x98>
 8002d3e:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6f      	ldr	r2, [pc, #444]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b6d      	ldr	r3, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6c      	ldr	r2, [pc, #432]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0xb0>
 8002d58:	4b69      	ldr	r3, [pc, #420]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a68      	ldr	r2, [pc, #416]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a65      	ldr	r2, [pc, #404]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fd ffcc 	bl	8000d14 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fd ffc8 	bl	8000d14 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e207      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0xc0>
 8002d9e:	e014      	b.n	8002dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fd ffb8 	bl	8000d14 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fd ffb4 	bl	8000d14 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e1f3      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	4b51      	ldr	r3, [pc, #324]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0xe8>
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d063      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d11c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b44      	ldr	r3, [pc, #272]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d116      	bne.n	8002e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCC_OscConfig+0x152>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e1c7      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4937      	ldr	r1, [pc, #220]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	e03a      	b.n	8002e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e30:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_OscConfig+0x244>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fd ff6d 	bl	8000d14 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7fd ff69 	bl	8000d14 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1a8      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4925      	ldr	r1, [pc, #148]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	e015      	b.n	8002e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x244>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fd ff4c 	bl	8000d14 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e80:	f7fd ff48 	bl	8000d14 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e187      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d036      	beq.n	8002f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_RCC_OscConfig+0x248>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fd ff2c 	bl	8000d14 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7fd ff28 	bl	8000d14 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e167      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x200>
 8002ede:	e01b      	b.n	8002f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_OscConfig+0x248>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee6:	f7fd ff15 	bl	8000d14 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	e00e      	b.n	8002f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eee:	f7fd ff11 	bl	8000d14 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d907      	bls.n	8002f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e150      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	42470000 	.word	0x42470000
 8002f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	4b88      	ldr	r3, [pc, #544]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ea      	bne.n	8002eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8097 	beq.w	8003054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a7c      	ldr	r2, [pc, #496]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b77      	ldr	r3, [pc, #476]	; (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d118      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b74      	ldr	r3, [pc, #464]	; (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a73      	ldr	r2, [pc, #460]	; (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fd fed1 	bl	8000d14 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fd fecd 	bl	8000d14 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e10c      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x2ea>
 8002f9c:	4b64      	ldr	r3, [pc, #400]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4a63      	ldr	r2, [pc, #396]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x324>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x30c>
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbe:	4b5c      	ldr	r3, [pc, #368]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	4a5b      	ldr	r2, [pc, #364]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x324>
 8002fcc:	4b58      	ldr	r3, [pc, #352]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a57      	ldr	r2, [pc, #348]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	4b55      	ldr	r3, [pc, #340]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a54      	ldr	r2, [pc, #336]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fde:	f023 0304 	bic.w	r3, r3, #4
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fd fe92 	bl	8000d14 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fd fe8e 	bl	8000d14 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0cb      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	4b49      	ldr	r3, [pc, #292]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ee      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x334>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003018:	f7fd fe7c 	bl	8000d14 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fd fe78 	bl	8000d14 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0b5      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003036:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ee      	bne.n	8003020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	4a38      	ldr	r2, [pc, #224]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 800304e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a1 	beq.w	80031a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305e:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b08      	cmp	r3, #8
 8003068:	d05c      	beq.n	8003124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d141      	bne.n	80030f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <HAL_RCC_OscConfig+0x478>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fd fe4c 	bl	8000d14 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003080:	f7fd fe48 	bl	8000d14 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e087      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	4b27      	ldr	r3, [pc, #156]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	019b      	lsls	r3, r3, #6
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	3b01      	subs	r3, #1
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	491b      	ldr	r1, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_RCC_OscConfig+0x478>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fd fe21 	bl	8000d14 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fd fe1d 	bl	8000d14 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e05c      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x416>
 80030f4:	e054      	b.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_RCC_OscConfig+0x478>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fd fe0a 	bl	8000d14 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003104:	f7fd fe06 	bl	8000d14 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e045      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x444>
 8003122:	e03d      	b.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e038      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
 8003130:	40023800 	.word	0x40023800
 8003134:	40007000 	.word	0x40007000
 8003138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <HAL_RCC_OscConfig+0x4ec>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d028      	beq.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d121      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d11a      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003174:	4293      	cmp	r3, r2
 8003176:	d111      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	3b01      	subs	r3, #1
 8003186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0cc      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b68      	ldr	r3, [pc, #416]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d90c      	bls.n	80031ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b65      	ldr	r3, [pc, #404]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b63      	ldr	r3, [pc, #396]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0b8      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003204:	4b59      	ldr	r3, [pc, #356]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a58      	ldr	r2, [pc, #352]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800320e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800321c:	4b53      	ldr	r3, [pc, #332]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a52      	ldr	r2, [pc, #328]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003228:	4b50      	ldr	r3, [pc, #320]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	494d      	ldr	r1, [pc, #308]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d044      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d119      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e07f      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d003      	beq.n	800326e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326a:	2b03      	cmp	r3, #3
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	4b3f      	ldr	r3, [pc, #252]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e06f      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e067      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328e:	4b37      	ldr	r3, [pc, #220]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 0203 	bic.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4934      	ldr	r1, [pc, #208]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7fd fd38 	bl	8000d14 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	e00a      	b.n	80032be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7fd fd34 	bl	8000d14 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e04f      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 020c 	and.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1eb      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d20c      	bcs.n	80032f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e032      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4916      	ldr	r1, [pc, #88]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	490e      	ldr	r1, [pc, #56]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003336:	f000 f821 	bl	800337c <HAL_RCC_GetSysClockFreq>
 800333a:	4602      	mov	r2, r0
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	490a      	ldr	r1, [pc, #40]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	5ccb      	ldrb	r3, [r1, r3]
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd fc98 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023c00 	.word	0x40023c00
 800336c:	40023800 	.word	0x40023800
 8003370:	080085d0 	.word	0x080085d0
 8003374:	20000000 	.word	0x20000000
 8003378:	20000004 	.word	0x20000004

0800337c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b090      	sub	sp, #64	; 0x40
 8003382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
 8003388:	2300      	movs	r3, #0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	2300      	movs	r3, #0
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003394:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d00d      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x40>
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	f200 80a1 	bhi.w	80034e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x34>
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d003      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ae:	e09b      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_GetSysClockFreq+0x184>)
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033b4:	e09b      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b6:	4b53      	ldr	r3, [pc, #332]	; (8003504 <HAL_RCC_GetSysClockFreq+0x188>)
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033ba:	e098      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033bc:	4b4f      	ldr	r3, [pc, #316]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c6:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d028      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	2200      	movs	r2, #0
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	627a      	str	r2, [r7, #36]	; 0x24
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e4:	2100      	movs	r1, #0
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e8:	fb03 f201 	mul.w	r2, r3, r1
 80033ec:	2300      	movs	r3, #0
 80033ee:	fb00 f303 	mul.w	r3, r0, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	4a43      	ldr	r2, [pc, #268]	; (8003504 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f6:	fba0 1202 	umull	r1, r2, r0, r2
 80033fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033fc:	460a      	mov	r2, r1
 80033fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003402:	4413      	add	r3, r2
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003408:	2200      	movs	r2, #0
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	61fa      	str	r2, [r7, #28]
 800340e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003412:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003416:	f7fc fed7 	bl	80001c8 <__aeabi_uldivmod>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4613      	mov	r3, r2
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003422:	e053      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	2200      	movs	r2, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	617a      	str	r2, [r7, #20]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003436:	f04f 0b00 	mov.w	fp, #0
 800343a:	4652      	mov	r2, sl
 800343c:	465b      	mov	r3, fp
 800343e:	f04f 0000 	mov.w	r0, #0
 8003442:	f04f 0100 	mov.w	r1, #0
 8003446:	0159      	lsls	r1, r3, #5
 8003448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800344c:	0150      	lsls	r0, r2, #5
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	ebb2 080a 	subs.w	r8, r2, sl
 8003456:	eb63 090b 	sbc.w	r9, r3, fp
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003466:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800346a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800346e:	ebb2 0408 	subs.w	r4, r2, r8
 8003472:	eb63 0509 	sbc.w	r5, r3, r9
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	00eb      	lsls	r3, r5, #3
 8003480:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003484:	00e2      	lsls	r2, r4, #3
 8003486:	4614      	mov	r4, r2
 8003488:	461d      	mov	r5, r3
 800348a:	eb14 030a 	adds.w	r3, r4, sl
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	eb45 030b 	adc.w	r3, r5, fp
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034a2:	4629      	mov	r1, r5
 80034a4:	028b      	lsls	r3, r1, #10
 80034a6:	4621      	mov	r1, r4
 80034a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034ac:	4621      	mov	r1, r4
 80034ae:	028a      	lsls	r2, r1, #10
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	2200      	movs	r2, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	60fa      	str	r2, [r7, #12]
 80034bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034c0:	f7fc fe82 	bl	80001c8 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4613      	mov	r3, r2
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	3301      	adds	r3, #1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034e6:	e002      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3740      	adds	r7, #64	; 0x40
 80034f4:	46bd      	mov	sp, r7
 80034f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	00f42400 	.word	0x00f42400
 8003504:	017d7840 	.word	0x017d7840

08003508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <HAL_RCC_GetHCLKFreq+0x14>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000000 	.word	0x20000000

08003520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e041      	b.n	80035b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fd fa6c 	bl	8000a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f000 fb4a 	bl	8003bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e041      	b.n	8003654 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f839 	bl	800365c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	4619      	mov	r1, r3
 80035fc:	4610      	mov	r0, r2
 80035fe:	f000 fafb 	bl	8003bf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b02      	cmp	r3, #2
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b02      	cmp	r3, #2
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0202 	mvn.w	r2, #2
 800369c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fa81 	bl	8003bba <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa73 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fa84 	bl	8003bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0204 	mvn.w	r2, #4
 80036f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa57 	bl	8003bba <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fa49 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fa5a 	bl	8003bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b08      	cmp	r3, #8
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b08      	cmp	r3, #8
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0208 	mvn.w	r2, #8
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2204      	movs	r2, #4
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fa2d 	bl	8003bba <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fa1f 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fa30 	bl	8003bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b10      	cmp	r3, #16
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b10      	cmp	r3, #16
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0210 	mvn.w	r2, #16
 8003798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2208      	movs	r2, #8
 800379e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fa03 	bl	8003bba <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9f5 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fa06 	bl	8003bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10e      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d107      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0201 	mvn.w	r2, #1
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9cf 	bl	8003b92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b80      	cmp	r3, #128	; 0x80
 8003800:	d10e      	bne.n	8003820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d107      	bne.n	8003820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fdae 	bl	800437c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b40      	cmp	r3, #64	; 0x40
 800382c:	d10e      	bne.n	800384c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d107      	bne.n	800384c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f9cb 	bl	8003be2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b20      	cmp	r3, #32
 8003858:	d10e      	bne.n	8003878 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b20      	cmp	r3, #32
 8003866:	d107      	bne.n	8003878 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0220 	mvn.w	r2, #32
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fd78 	bl	8004368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800389a:	2302      	movs	r3, #2
 800389c:	e0ae      	b.n	80039fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	f200 809f 	bhi.w	80039ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038ae:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	080038e9 	.word	0x080038e9
 80038b8:	080039ed 	.word	0x080039ed
 80038bc:	080039ed 	.word	0x080039ed
 80038c0:	080039ed 	.word	0x080039ed
 80038c4:	08003929 	.word	0x08003929
 80038c8:	080039ed 	.word	0x080039ed
 80038cc:	080039ed 	.word	0x080039ed
 80038d0:	080039ed 	.word	0x080039ed
 80038d4:	0800396b 	.word	0x0800396b
 80038d8:	080039ed 	.word	0x080039ed
 80038dc:	080039ed 	.word	0x080039ed
 80038e0:	080039ed 	.word	0x080039ed
 80038e4:	080039ab 	.word	0x080039ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fa22 	bl	8003d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0208 	orr.w	r2, r2, #8
 8003902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0204 	bic.w	r2, r2, #4
 8003912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6999      	ldr	r1, [r3, #24]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	619a      	str	r2, [r3, #24]
      break;
 8003926:	e064      	b.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fa72 	bl	8003e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6999      	ldr	r1, [r3, #24]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	021a      	lsls	r2, r3, #8
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	619a      	str	r2, [r3, #24]
      break;
 8003968:	e043      	b.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fac7 	bl	8003f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0208 	orr.w	r2, r2, #8
 8003984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0204 	bic.w	r2, r2, #4
 8003994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69d9      	ldr	r1, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	61da      	str	r2, [r3, #28]
      break;
 80039a8:	e023      	b.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fb1b 	bl	8003fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69d9      	ldr	r1, [r3, #28]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	021a      	lsls	r2, r3, #8
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	61da      	str	r2, [r3, #28]
      break;
 80039ea:	e002      	b.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	75fb      	strb	r3, [r7, #23]
      break;
 80039f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIM_ConfigClockSource+0x1c>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e0b4      	b.n	8003b8a <HAL_TIM_ConfigClockSource+0x186>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a58:	d03e      	beq.n	8003ad8 <HAL_TIM_ConfigClockSource+0xd4>
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5e:	f200 8087 	bhi.w	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a66:	f000 8086 	beq.w	8003b76 <HAL_TIM_ConfigClockSource+0x172>
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	d87f      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b70      	cmp	r3, #112	; 0x70
 8003a72:	d01a      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0xa6>
 8003a74:	2b70      	cmp	r3, #112	; 0x70
 8003a76:	d87b      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a78:	2b60      	cmp	r3, #96	; 0x60
 8003a7a:	d050      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x11a>
 8003a7c:	2b60      	cmp	r3, #96	; 0x60
 8003a7e:	d877      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a80:	2b50      	cmp	r3, #80	; 0x50
 8003a82:	d03c      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0xfa>
 8003a84:	2b50      	cmp	r3, #80	; 0x50
 8003a86:	d873      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d058      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x13a>
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d86f      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a90:	2b30      	cmp	r3, #48	; 0x30
 8003a92:	d064      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x15a>
 8003a94:	2b30      	cmp	r3, #48	; 0x30
 8003a96:	d86b      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d060      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x15a>
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d867      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05c      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x15a>
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d05a      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x15a>
 8003aa8:	e062      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f000 fb67 	bl	800418c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	609a      	str	r2, [r3, #8]
      break;
 8003ad6:	e04f      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6899      	ldr	r1, [r3, #8]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f000 fb50 	bl	800418c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003afa:	609a      	str	r2, [r3, #8]
      break;
 8003afc:	e03c      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f000 fac4 	bl	8004098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2150      	movs	r1, #80	; 0x50
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fb1d 	bl	8004156 <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e02c      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6859      	ldr	r1, [r3, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f000 fae3 	bl	80040f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2160      	movs	r1, #96	; 0x60
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fb0d 	bl	8004156 <TIM_ITRx_SetConfig>
      break;
 8003b3c:	e01c      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f000 faa4 	bl	8004098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2140      	movs	r1, #64	; 0x40
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fafd 	bl	8004156 <TIM_ITRx_SetConfig>
      break;
 8003b5c:	e00c      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f000 faf4 	bl	8004156 <TIM_ITRx_SetConfig>
      break;
 8003b6e:	e003      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	e000      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a40      	ldr	r2, [pc, #256]	; (8003d0c <TIM_Base_SetConfig+0x114>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d013      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c16:	d00f      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a3d      	ldr	r2, [pc, #244]	; (8003d10 <TIM_Base_SetConfig+0x118>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a3c      	ldr	r2, [pc, #240]	; (8003d14 <TIM_Base_SetConfig+0x11c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a3b      	ldr	r2, [pc, #236]	; (8003d18 <TIM_Base_SetConfig+0x120>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0x40>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3a      	ldr	r2, [pc, #232]	; (8003d1c <TIM_Base_SetConfig+0x124>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2f      	ldr	r2, [pc, #188]	; (8003d0c <TIM_Base_SetConfig+0x114>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d02b      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d027      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <TIM_Base_SetConfig+0x118>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d023      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <TIM_Base_SetConfig+0x11c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01f      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <TIM_Base_SetConfig+0x120>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01b      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a29      	ldr	r2, [pc, #164]	; (8003d1c <TIM_Base_SetConfig+0x124>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d017      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <TIM_Base_SetConfig+0x128>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a27      	ldr	r2, [pc, #156]	; (8003d24 <TIM_Base_SetConfig+0x12c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00f      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a26      	ldr	r2, [pc, #152]	; (8003d28 <TIM_Base_SetConfig+0x130>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00b      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <TIM_Base_SetConfig+0x134>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <TIM_Base_SetConfig+0x138>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d003      	beq.n	8003caa <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <TIM_Base_SetConfig+0x13c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d108      	bne.n	8003cbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <TIM_Base_SetConfig+0x114>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_Base_SetConfig+0xf8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <TIM_Base_SetConfig+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d103      	bne.n	8003cf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	615a      	str	r2, [r3, #20]
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800
 8003d18:	40000c00 	.word	0x40000c00
 8003d1c:	40010400 	.word	0x40010400
 8003d20:	40014000 	.word	0x40014000
 8003d24:	40014400 	.word	0x40014400
 8003d28:	40014800 	.word	0x40014800
 8003d2c:	40001800 	.word	0x40001800
 8003d30:	40001c00 	.word	0x40001c00
 8003d34:	40002000 	.word	0x40002000

08003d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0201 	bic.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 0302 	bic.w	r3, r3, #2
 8003d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <TIM_OC1_SetConfig+0xd8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_OC1_SetConfig+0x64>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a1f      	ldr	r2, [pc, #124]	; (8003e14 <TIM_OC1_SetConfig+0xdc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10c      	bne.n	8003db6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0308 	bic.w	r3, r3, #8
 8003da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <TIM_OC1_SetConfig+0xd8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_OC1_SetConfig+0x8e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <TIM_OC1_SetConfig+0xdc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d111      	bne.n	8003dea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40010400 	.word	0x40010400

08003e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0210 	bic.w	r2, r3, #16
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0320 	bic.w	r3, r3, #32
 8003e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a22      	ldr	r2, [pc, #136]	; (8003efc <TIM_OC2_SetConfig+0xe4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_OC2_SetConfig+0x68>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <TIM_OC2_SetConfig+0xe8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10d      	bne.n	8003e9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	; (8003efc <TIM_OC2_SetConfig+0xe4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC2_SetConfig+0x94>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a16      	ldr	r2, [pc, #88]	; (8003f00 <TIM_OC2_SetConfig+0xe8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d113      	bne.n	8003ed4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010400 	.word	0x40010400

08003f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0303 	bic.w	r3, r3, #3
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a21      	ldr	r2, [pc, #132]	; (8003fe4 <TIM_OC3_SetConfig+0xe0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_OC3_SetConfig+0x66>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a20      	ldr	r2, [pc, #128]	; (8003fe8 <TIM_OC3_SetConfig+0xe4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d10d      	bne.n	8003f86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <TIM_OC3_SetConfig+0xe0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <TIM_OC3_SetConfig+0x92>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <TIM_OC3_SetConfig+0xe4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d113      	bne.n	8003fbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	621a      	str	r2, [r3, #32]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010400 	.word	0x40010400

08003fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <TIM_OC4_SetConfig+0xa4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <TIM_OC4_SetConfig+0x68>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a11      	ldr	r2, [pc, #68]	; (8004094 <TIM_OC4_SetConfig+0xa8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d109      	bne.n	8004068 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800405a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	019b      	lsls	r3, r3, #6
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000
 8004094:	40010400 	.word	0x40010400

08004098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f023 0201 	bic.w	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 030a 	bic.w	r3, r3, #10
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b087      	sub	sp, #28
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	f023 0210 	bic.w	r2, r3, #16
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	031b      	lsls	r3, r3, #12
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	621a      	str	r2, [r3, #32]
}
 800414a:	bf00      	nop
 800414c:	371c      	adds	r7, #28
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	f043 0307 	orr.w	r3, r3, #7
 8004178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	609a      	str	r2, [r3, #8]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	021a      	lsls	r2, r3, #8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	609a      	str	r2, [r3, #8]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e05a      	b.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a21      	ldr	r2, [pc, #132]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	d01d      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a17      	ldr	r2, [pc, #92]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10c      	bne.n	8004288 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	4313      	orrs	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40000800 	.word	0x40000800
 80042b4:	40000c00 	.word	0x40000c00
 80042b8:	40010400 	.word	0x40010400
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40001800 	.word	0x40001800

080042c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042dc:	2302      	movs	r3, #2
 80042de:	e03d      	b.n	800435c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004390:	b084      	sub	sp, #16
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	f107 001c 	add.w	r0, r7, #28
 800439e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d122      	bne.n	80043ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d105      	bne.n	80043e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f001 fbee 	bl	8005bc4 <USB_CoreReset>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	e01a      	b.n	8004424 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f001 fbe2 	bl	8005bc4 <USB_CoreReset>
 8004400:	4603      	mov	r3, r0
 8004402:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	639a      	str	r2, [r3, #56]	; 0x38
 8004416:	e005      	b.n	8004424 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	2b01      	cmp	r3, #1
 8004428:	d10b      	bne.n	8004442 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f043 0206 	orr.w	r2, r3, #6
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800444e:	b004      	add	sp, #16
 8004450:	4770      	bx	lr
	...

08004454 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	4613      	mov	r3, r2
 8004460:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d165      	bne.n	8004534 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a41      	ldr	r2, [pc, #260]	; (8004570 <USB_SetTurnaroundTime+0x11c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d906      	bls.n	800447e <USB_SetTurnaroundTime+0x2a>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a40      	ldr	r2, [pc, #256]	; (8004574 <USB_SetTurnaroundTime+0x120>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d202      	bcs.n	800447e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004478:	230f      	movs	r3, #15
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e062      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4a3c      	ldr	r2, [pc, #240]	; (8004574 <USB_SetTurnaroundTime+0x120>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d306      	bcc.n	8004494 <USB_SetTurnaroundTime+0x40>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4a3b      	ldr	r2, [pc, #236]	; (8004578 <USB_SetTurnaroundTime+0x124>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d202      	bcs.n	8004494 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800448e:	230e      	movs	r3, #14
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	e057      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4a38      	ldr	r2, [pc, #224]	; (8004578 <USB_SetTurnaroundTime+0x124>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d306      	bcc.n	80044aa <USB_SetTurnaroundTime+0x56>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4a37      	ldr	r2, [pc, #220]	; (800457c <USB_SetTurnaroundTime+0x128>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d202      	bcs.n	80044aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044a4:	230d      	movs	r3, #13
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e04c      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4a33      	ldr	r2, [pc, #204]	; (800457c <USB_SetTurnaroundTime+0x128>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d306      	bcc.n	80044c0 <USB_SetTurnaroundTime+0x6c>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4a32      	ldr	r2, [pc, #200]	; (8004580 <USB_SetTurnaroundTime+0x12c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d802      	bhi.n	80044c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044ba:	230c      	movs	r3, #12
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e041      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <USB_SetTurnaroundTime+0x12c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d906      	bls.n	80044d6 <USB_SetTurnaroundTime+0x82>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4a2e      	ldr	r2, [pc, #184]	; (8004584 <USB_SetTurnaroundTime+0x130>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d802      	bhi.n	80044d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044d0:	230b      	movs	r3, #11
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e036      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <USB_SetTurnaroundTime+0x130>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d906      	bls.n	80044ec <USB_SetTurnaroundTime+0x98>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4a29      	ldr	r2, [pc, #164]	; (8004588 <USB_SetTurnaroundTime+0x134>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d802      	bhi.n	80044ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044e6:	230a      	movs	r3, #10
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e02b      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4a26      	ldr	r2, [pc, #152]	; (8004588 <USB_SetTurnaroundTime+0x134>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d906      	bls.n	8004502 <USB_SetTurnaroundTime+0xae>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4a25      	ldr	r2, [pc, #148]	; (800458c <USB_SetTurnaroundTime+0x138>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d202      	bcs.n	8004502 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044fc:	2309      	movs	r3, #9
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	e020      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4a21      	ldr	r2, [pc, #132]	; (800458c <USB_SetTurnaroundTime+0x138>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d306      	bcc.n	8004518 <USB_SetTurnaroundTime+0xc4>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4a20      	ldr	r2, [pc, #128]	; (8004590 <USB_SetTurnaroundTime+0x13c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d802      	bhi.n	8004518 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004512:	2308      	movs	r3, #8
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e015      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <USB_SetTurnaroundTime+0x13c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d906      	bls.n	800452e <USB_SetTurnaroundTime+0xda>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4a1c      	ldr	r2, [pc, #112]	; (8004594 <USB_SetTurnaroundTime+0x140>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d202      	bcs.n	800452e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004528:	2307      	movs	r3, #7
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e00a      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800452e:	2306      	movs	r3, #6
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e007      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800453a:	2309      	movs	r3, #9
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	e001      	b.n	8004544 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004540:	2309      	movs	r3, #9
 8004542:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	029b      	lsls	r3, r3, #10
 8004558:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	00d8acbf 	.word	0x00d8acbf
 8004574:	00e4e1c0 	.word	0x00e4e1c0
 8004578:	00f42400 	.word	0x00f42400
 800457c:	01067380 	.word	0x01067380
 8004580:	011a499f 	.word	0x011a499f
 8004584:	01312cff 	.word	0x01312cff
 8004588:	014ca43f 	.word	0x014ca43f
 800458c:	016e3600 	.word	0x016e3600
 8004590:	01a6ab1f 	.word	0x01a6ab1f
 8004594:	01e84800 	.word	0x01e84800

08004598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f023 0201 	bic.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d115      	bne.n	800462a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800460a:	2001      	movs	r0, #1
 800460c:	f7fc fb8e 	bl	8000d2c <HAL_Delay>
      ms++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3301      	adds	r3, #1
 8004614:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f001 fa45 	bl	8005aa6 <USB_GetMode>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	d01e      	beq.n	8004660 <USB_SetCurrentMode+0x84>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b31      	cmp	r3, #49	; 0x31
 8004626:	d9f0      	bls.n	800460a <USB_SetCurrentMode+0x2e>
 8004628:	e01a      	b.n	8004660 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d115      	bne.n	800465c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800463c:	2001      	movs	r0, #1
 800463e:	f7fc fb75 	bl	8000d2c <HAL_Delay>
      ms++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3301      	adds	r3, #1
 8004646:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 fa2c 	bl	8005aa6 <USB_GetMode>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <USB_SetCurrentMode+0x84>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b31      	cmp	r3, #49	; 0x31
 8004658:	d9f0      	bls.n	800463c <USB_SetCurrentMode+0x60>
 800465a:	e001      	b.n	8004660 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e005      	b.n	800466c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b32      	cmp	r3, #50	; 0x32
 8004664:	d101      	bne.n	800466a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004674:	b084      	sub	sp, #16
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e009      	b.n	80046a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	3340      	adds	r3, #64	; 0x40
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	2200      	movs	r2, #0
 80046a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	3301      	adds	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b0e      	cmp	r3, #14
 80046ac:	d9f2      	bls.n	8004694 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d11c      	bne.n	80046ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046c2:	f043 0302 	orr.w	r3, r3, #2
 80046c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38
 80046ec:	e00b      	b.n	8004706 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800470c:	461a      	mov	r2, r3
 800470e:	2300      	movs	r3, #0
 8004710:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004718:	4619      	mov	r1, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004720:	461a      	mov	r2, r3
 8004722:	680b      	ldr	r3, [r1, #0]
 8004724:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	2b01      	cmp	r3, #1
 800472a:	d10c      	bne.n	8004746 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004732:	2100      	movs	r1, #0
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f965 	bl	8004a04 <USB_SetDevSpeed>
 800473a:	e008      	b.n	800474e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800473c:	2101      	movs	r1, #1
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f960 	bl	8004a04 <USB_SetDevSpeed>
 8004744:	e003      	b.n	800474e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004746:	2103      	movs	r1, #3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f95b 	bl	8004a04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800474e:	2110      	movs	r1, #16
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f8f3 	bl	800493c <USB_FlushTxFifo>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f91f 	bl	80049a4 <USB_FlushRxFifo>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004776:	461a      	mov	r2, r3
 8004778:	2300      	movs	r3, #0
 800477a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	461a      	mov	r2, r3
 8004784:	2300      	movs	r3, #0
 8004786:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	461a      	mov	r2, r3
 8004790:	2300      	movs	r3, #0
 8004792:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	e043      	b.n	8004822 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b0:	d118      	bne.n	80047e4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c4:	461a      	mov	r2, r3
 80047c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e013      	b.n	80047f6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	461a      	mov	r2, r3
 80047dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	e008      	b.n	80047f6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	461a      	mov	r2, r3
 80047f2:	2300      	movs	r3, #0
 80047f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	461a      	mov	r2, r3
 8004804:	2300      	movs	r3, #0
 8004806:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	461a      	mov	r2, r3
 8004816:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800481a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	3301      	adds	r3, #1
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	429a      	cmp	r2, r3
 8004828:	d3b7      	bcc.n	800479a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800482a:	2300      	movs	r3, #0
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e043      	b.n	80048b8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004846:	d118      	bne.n	800487a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	461a      	mov	r2, r3
 800485c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e013      	b.n	800488c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	e008      	b.n	800488c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004886:	461a      	mov	r2, r3
 8004888:	2300      	movs	r3, #0
 800488a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004898:	461a      	mov	r2, r3
 800489a:	2300      	movs	r3, #0
 800489c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048aa:	461a      	mov	r2, r3
 80048ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3301      	adds	r3, #1
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d3b7      	bcc.n	8004830 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	f043 0210 	orr.w	r2, r3, #16
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <USB_DevInit+0x2c4>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f043 0208 	orr.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d107      	bne.n	8004928 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004920:	f043 0304 	orr.w	r3, r3, #4
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004934:	b004      	add	sp, #16
 8004936:	4770      	bx	lr
 8004938:	803c3800 	.word	0x803c3800

0800493c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <USB_FlushTxFifo+0x64>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e01b      	b.n	8004994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	daf2      	bge.n	800494a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	019b      	lsls	r3, r3, #6
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3301      	adds	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <USB_FlushTxFifo+0x64>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e006      	b.n	8004994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b20      	cmp	r3, #32
 8004990:	d0f0      	beq.n	8004974 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	00030d40 	.word	0x00030d40

080049a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <USB_FlushRxFifo+0x5c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e018      	b.n	80049f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	daf2      	bge.n	80049b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2210      	movs	r2, #16
 80049d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <USB_FlushRxFifo+0x5c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e006      	b.n	80049f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d0f0      	beq.n	80049d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	00030d40 	.word	0x00030d40

08004a04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a24:	4313      	orrs	r3, r2
 8004a26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b087      	sub	sp, #28
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0306 	and.w	r3, r3, #6
 8004a4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]
 8004a5a:	e00a      	b.n	8004a72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d002      	beq.n	8004a68 <USB_GetDevSpeed+0x32>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b06      	cmp	r3, #6
 8004a66:	d102      	bne.n	8004a6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	75fb      	strb	r3, [r7, #23]
 8004a6c:	e001      	b.n	8004a72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a6e:	230f      	movs	r3, #15
 8004a70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d13a      	bne.n	8004b12 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	2101      	movs	r1, #1
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	68f9      	ldr	r1, [r7, #12]
 8004ab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d155      	bne.n	8004b80 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	791b      	ldrb	r3, [r3, #4]
 8004aee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004af0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	059b      	lsls	r3, r3, #22
 8004af6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004af8:	4313      	orrs	r3, r2
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	0151      	lsls	r1, r2, #5
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	440a      	add	r2, r1
 8004b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	e036      	b.n	8004b80 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f303 	lsl.w	r3, r1, r3
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	68f9      	ldr	r1, [r7, #12]
 8004b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11a      	bne.n	8004b80 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	791b      	ldrb	r3, [r3, #4]
 8004b64:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b66:	430b      	orrs	r3, r1
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d161      	bne.n	8004c70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bc2:	d11f      	bne.n	8004c04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004be2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	2101      	movs	r1, #1
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	68f9      	ldr	r1, [r7, #12]
 8004c20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c24:	4013      	ands	r3, r2
 8004c26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	43db      	mvns	r3, r3
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	0159      	lsls	r1, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	440b      	add	r3, r1
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	4619      	mov	r1, r3
 8004c68:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <USB_DeactivateEndpoint+0x1b0>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]
 8004c6e:	e060      	b.n	8004d32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c86:	d11f      	bne.n	8004cc8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ca6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce8:	4013      	ands	r3, r2
 8004cea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004d02:	041b      	lsls	r3, r3, #16
 8004d04:	43db      	mvns	r3, r3
 8004d06:	68f9      	ldr	r1, [r7, #12]
 8004d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	0159      	lsls	r1, r3, #5
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	440b      	add	r3, r1
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <USB_DeactivateEndpoint+0x1b4>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	ec337800 	.word	0xec337800
 8004d44:	eff37800 	.word	0xeff37800

08004d48 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	f040 815c 	bne.w	8005022 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d132      	bne.n	8004dd8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd0:	0cdb      	lsrs	r3, r3, #19
 8004dd2:	04db      	lsls	r3, r3, #19
 8004dd4:	6113      	str	r3, [r2, #16]
 8004dd6:	e074      	b.n	8004ec2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df2:	0cdb      	lsrs	r3, r3, #19
 8004df4:	04db      	lsls	r3, r3, #19
 8004df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e28:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6999      	ldr	r1, [r3, #24]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	440b      	add	r3, r1
 8004e34:	1e59      	subs	r1, r3, #1
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e3e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e40:	4b9d      	ldr	r3, [pc, #628]	; (80050b8 <USB_EPStartXfer+0x370>)
 8004e42:	400b      	ands	r3, r1
 8004e44:	69b9      	ldr	r1, [r7, #24]
 8004e46:	0148      	lsls	r0, r1, #5
 8004e48:	69f9      	ldr	r1, [r7, #28]
 8004e4a:	4401      	add	r1, r0
 8004e4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e50:	4313      	orrs	r3, r2
 8004e52:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e60:	691a      	ldr	r2, [r3, #16]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6a:	69b9      	ldr	r1, [r7, #24]
 8004e6c:	0148      	lsls	r0, r1, #5
 8004e6e:	69f9      	ldr	r1, [r7, #28]
 8004e70:	4401      	add	r1, r0
 8004e72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e76:	4313      	orrs	r3, r2
 8004e78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	791b      	ldrb	r3, [r3, #4]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d11f      	bne.n	8004ec2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ea0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d14b      	bne.n	8004f60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	461a      	mov	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	791b      	ldrb	r3, [r3, #4]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d128      	bne.n	8004f3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d110      	bne.n	8004f1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	e00f      	b.n	8004f3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e133      	b.n	80051c8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	791b      	ldrb	r3, [r3, #4]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d015      	beq.n	8004fb4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 811b 	beq.w	80051c8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	69f9      	ldr	r1, [r7, #28]
 8004faa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	634b      	str	r3, [r1, #52]	; 0x34
 8004fb2:	e109      	b.n	80051c8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d110      	bne.n	8004fe6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e00f      	b.n	8005006 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6919      	ldr	r1, [r3, #16]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	b298      	uxth	r0, r3
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	4603      	mov	r3, r0
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fade 	bl	80055dc <USB_WritePacket>
 8005020:	e0d2      	b.n	80051c8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503c:	0cdb      	lsrs	r3, r3, #19
 800503e:	04db      	lsls	r3, r3, #19
 8005040:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800505c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005060:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005064:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d126      	bne.n	80050bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005084:	69b9      	ldr	r1, [r7, #24]
 8005086:	0148      	lsls	r0, r1, #5
 8005088:	69f9      	ldr	r1, [r7, #28]
 800508a:	4401      	add	r1, r0
 800508c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005090:	4313      	orrs	r3, r2
 8005092:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050b2:	6113      	str	r3, [r2, #16]
 80050b4:	e03a      	b.n	800512c <USB_EPStartXfer+0x3e4>
 80050b6:	bf00      	nop
 80050b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	1e5a      	subs	r2, r3, #1
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	8afa      	ldrh	r2, [r7, #22]
 80050d8:	fb03 f202 	mul.w	r2, r3, r2
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	8afb      	ldrh	r3, [r7, #22]
 80050f0:	04d9      	lsls	r1, r3, #19
 80050f2:	4b38      	ldr	r3, [pc, #224]	; (80051d4 <USB_EPStartXfer+0x48c>)
 80050f4:	400b      	ands	r3, r1
 80050f6:	69b9      	ldr	r1, [r7, #24]
 80050f8:	0148      	lsls	r0, r1, #5
 80050fa:	69f9      	ldr	r1, [r7, #28]
 80050fc:	4401      	add	r1, r0
 80050fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005102:	4313      	orrs	r3, r2
 8005104:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511c:	69b9      	ldr	r1, [r7, #24]
 800511e:	0148      	lsls	r0, r1, #5
 8005120:	69f9      	ldr	r1, [r7, #28]
 8005122:	4401      	add	r1, r0
 8005124:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005128:	4313      	orrs	r3, r2
 800512a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d10d      	bne.n	800514e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	6919      	ldr	r1, [r3, #16]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	460a      	mov	r2, r1
 800514c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	791b      	ldrb	r3, [r3, #4]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d128      	bne.n	80051a8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d110      	bne.n	8005188 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	440a      	add	r2, r1
 800517c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e00f      	b.n	80051a8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	0151      	lsls	r1, r2, #5
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	440a      	add	r2, r1
 80051be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	1ff80000 	.word	0x1ff80000

080051d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	785b      	ldrb	r3, [r3, #1]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	f040 80ce 	bne.w	8005396 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d132      	bne.n	8005268 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005220:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005224:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005244:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005260:	0cdb      	lsrs	r3, r3, #19
 8005262:	04db      	lsls	r3, r3, #19
 8005264:	6113      	str	r3, [r2, #16]
 8005266:	e04e      	b.n	8005306 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005282:	0cdb      	lsrs	r3, r3, #19
 8005284:	04db      	lsls	r3, r3, #19
 8005286:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d903      	bls.n	80052c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f6:	6939      	ldr	r1, [r7, #16]
 80052f8:	0148      	lsls	r0, r1, #5
 80052fa:	6979      	ldr	r1, [r7, #20]
 80052fc:	4401      	add	r1, r0
 80052fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d11e      	bne.n	800534a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d009      	beq.n	8005328 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	461a      	mov	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005342:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e097      	b.n	800547a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	0151      	lsls	r1, r2, #5
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	440a      	add	r2, r1
 8005360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005368:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8083 	beq.w	800547a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	2101      	movs	r1, #1
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	6979      	ldr	r1, [r7, #20]
 800538c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005390:	4313      	orrs	r3, r2
 8005392:	634b      	str	r3, [r1, #52]	; 0x34
 8005394:	e071      	b.n	800547a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b0:	0cdb      	lsrs	r3, r3, #19
 80053b2:	04db      	lsls	r3, r3, #19
 80053b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005410:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005428:	6939      	ldr	r1, [r7, #16]
 800542a:	0148      	lsls	r0, r1, #5
 800542c:	6979      	ldr	r1, [r7, #20]
 800542e:	4401      	add	r1, r0
 8005430:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005434:	4313      	orrs	r3, r2
 8005436:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d10d      	bne.n	800545a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6919      	ldr	r1, [r3, #16]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	460a      	mov	r2, r1
 8005458:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005474:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005478:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d14a      	bne.n	800553c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054be:	f040 8086 	bne.w	80055ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	7812      	ldrb	r2, [r2, #0]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005508:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3301      	adds	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f242 7210 	movw	r2, #10000	; 0x2710
 8005516:	4293      	cmp	r3, r2
 8005518:	d902      	bls.n	8005520 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
          break;
 800551e:	e056      	b.n	80055ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005538:	d0e7      	beq.n	800550a <USB_EPStopXfer+0x82>
 800553a:	e048      	b.n	80055ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005554:	d13b      	bne.n	80055ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	7812      	ldrb	r2, [r2, #0]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005574:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005578:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	7812      	ldrb	r2, [r2, #0]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800559c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d902      	bls.n	80055b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
          break;
 80055b2:	e00c      	b.n	80055ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055cc:	d0e7      	beq.n	800559e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055dc:	b480      	push	{r7}
 80055de:	b089      	sub	sp, #36	; 0x24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	4611      	mov	r1, r2
 80055e8:	461a      	mov	r2, r3
 80055ea:	460b      	mov	r3, r1
 80055ec:	71fb      	strb	r3, [r7, #7]
 80055ee:	4613      	mov	r3, r2
 80055f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d123      	bne.n	800564a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005602:	88bb      	ldrh	r3, [r7, #4]
 8005604:	3303      	adds	r3, #3
 8005606:	089b      	lsrs	r3, r3, #2
 8005608:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	e018      	b.n	8005642 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	031a      	lsls	r2, r3, #12
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	4413      	add	r3, r2
 8005618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561c:	461a      	mov	r2, r3
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	3301      	adds	r3, #1
 8005628:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3301      	adds	r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	3301      	adds	r3, #1
 8005634:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3301      	adds	r3, #1
 800563a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	3301      	adds	r3, #1
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	429a      	cmp	r2, r3
 8005648:	d3e2      	bcc.n	8005610 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3724      	adds	r7, #36	; 0x24
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005658:	b480      	push	{r7}
 800565a:	b08b      	sub	sp, #44	; 0x2c
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	b29b      	uxth	r3, r3
 8005674:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800567e:	2300      	movs	r3, #0
 8005680:	623b      	str	r3, [r7, #32]
 8005682:	e014      	b.n	80056ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	3301      	adds	r3, #1
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	3301      	adds	r3, #1
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	3301      	adds	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	3301      	adds	r3, #1
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	3301      	adds	r3, #1
 80056ac:	623b      	str	r3, [r7, #32]
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d3e6      	bcc.n	8005684 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056b6:	8bfb      	ldrh	r3, [r7, #30]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01e      	beq.n	80056fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c6:	461a      	mov	r2, r3
 80056c8:	f107 0310 	add.w	r3, r7, #16
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	701a      	strb	r2, [r3, #0]
      i++;
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	3301      	adds	r3, #1
 80056e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	3301      	adds	r3, #1
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056ee:	8bfb      	ldrh	r3, [r7, #30]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056f4:	8bfb      	ldrh	r3, [r7, #30]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1ea      	bne.n	80056d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	372c      	adds	r7, #44	; 0x2c
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d12c      	bne.n	800577e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	db12      	blt.n	800575c <USB_EPSetStall+0x54>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00f      	beq.n	800575c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	440a      	add	r2, r1
 8005752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005756:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800575a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	440a      	add	r2, r1
 8005772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005776:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	e02b      	b.n	80057d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	db12      	blt.n	80057b6 <USB_EPSetStall+0xae>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00f      	beq.n	80057b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	785b      	ldrb	r3, [r3, #1]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d128      	bne.n	8005852 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800581e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	791b      	ldrb	r3, [r3, #4]
 8005824:	2b03      	cmp	r3, #3
 8005826:	d003      	beq.n	8005830 <USB_EPClearStall+0x4c>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	791b      	ldrb	r3, [r3, #4]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d138      	bne.n	80058a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e027      	b.n	80058a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005870:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	791b      	ldrb	r3, [r3, #4]
 8005876:	2b03      	cmp	r3, #3
 8005878:	d003      	beq.n	8005882 <USB_EPClearStall+0x9e>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	791b      	ldrb	r3, [r3, #4]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d10f      	bne.n	80058a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	440a      	add	r2, r1
 8005898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80058d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80058e4:	68f9      	ldr	r1, [r7, #12]
 80058e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592a:	f023 0302 	bic.w	r3, r3, #2
 800592e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800593e:	b480      	push	{r7}
 8005940:	b085      	sub	sp, #20
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005958:	f023 0303 	bic.w	r3, r3, #3
 800595c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800596c:	f043 0302 	orr.w	r3, r3, #2
 8005970:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4013      	ands	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005998:	68fb      	ldr	r3, [r7, #12]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	0c1b      	lsrs	r3, r3, #16
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	4013      	ands	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	b29b      	uxth	r3, r3
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b087      	sub	sp, #28
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7a:	01db      	lsls	r3, r3, #7
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4013      	ands	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a98:	68bb      	ldr	r3, [r7, #8]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005adc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ae0:	f023 0307 	bic.w	r3, r3, #7
 8005ae4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	460b      	mov	r3, r1
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	333c      	adds	r3, #60	; 0x3c
 8005b1e:	3304      	adds	r3, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4a26      	ldr	r2, [pc, #152]	; (8005bc0 <USB_EP0_OutStart+0xb8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d90a      	bls.n	8005b42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3c:	d101      	bne.n	8005b42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e037      	b.n	8005bb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b70:	f043 0318 	orr.w	r3, r3, #24
 8005b74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b8a:	7afb      	ldrb	r3, [r7, #11]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d10f      	bne.n	8005bb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005baa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005bae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	4f54300a 	.word	0x4f54300a

08005bc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <USB_CoreReset+0x64>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e01b      	b.n	8005c1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	daf2      	bge.n	8005bd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f043 0201 	orr.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <USB_CoreReset+0x64>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d901      	bls.n	8005c0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e006      	b.n	8005c1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d0f0      	beq.n	8005bfa <USB_CoreReset+0x36>

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	00030d40 	.word	0x00030d40

08005c2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c3c:	f002 fc28 	bl	8008490 <USBD_static_malloc>
 8005c40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	32b0      	adds	r2, #176	; 0xb0
 8005c52:	2100      	movs	r1, #0
 8005c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e0d4      	b.n	8005e06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005c5c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005c60:	2100      	movs	r1, #0
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f002 fc7c 	bl	8008560 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	32b0      	adds	r2, #176	; 0xb0
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	32b0      	adds	r2, #176	; 0xb0
 8005c82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7c1b      	ldrb	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d138      	bne.n	8005d06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c94:	4b5e      	ldr	r3, [pc, #376]	; (8005e10 <USBD_CDC_Init+0x1e4>)
 8005c96:	7819      	ldrb	r1, [r3, #0]
 8005c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f002 fad3 	bl	800824a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ca4:	4b5a      	ldr	r3, [pc, #360]	; (8005e10 <USBD_CDC_Init+0x1e4>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	f003 020f 	and.w	r2, r3, #15
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3324      	adds	r3, #36	; 0x24
 8005cba:	2201      	movs	r2, #1
 8005cbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005cbe:	4b55      	ldr	r3, [pc, #340]	; (8005e14 <USBD_CDC_Init+0x1e8>)
 8005cc0:	7819      	ldrb	r1, [r3, #0]
 8005cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f002 fabe 	bl	800824a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005cce:	4b51      	ldr	r3, [pc, #324]	; (8005e14 <USBD_CDC_Init+0x1e8>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	f003 020f 	and.w	r2, r3, #15
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005cea:	4b4b      	ldr	r3, [pc, #300]	; (8005e18 <USBD_CDC_Init+0x1ec>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	f003 020f 	and.w	r2, r3, #15
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	3326      	adds	r3, #38	; 0x26
 8005d00:	2210      	movs	r2, #16
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	e035      	b.n	8005d72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d06:	4b42      	ldr	r3, [pc, #264]	; (8005e10 <USBD_CDC_Init+0x1e4>)
 8005d08:	7819      	ldrb	r1, [r3, #0]
 8005d0a:	2340      	movs	r3, #64	; 0x40
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f002 fa9b 	bl	800824a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d14:	4b3e      	ldr	r3, [pc, #248]	; (8005e10 <USBD_CDC_Init+0x1e4>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f003 020f 	and.w	r2, r3, #15
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	3324      	adds	r3, #36	; 0x24
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d2e:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <USBD_CDC_Init+0x1e8>)
 8005d30:	7819      	ldrb	r1, [r3, #0]
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	2202      	movs	r2, #2
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f002 fa87 	bl	800824a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d3c:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <USBD_CDC_Init+0x1e8>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	f003 020f 	and.w	r2, r3, #15
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	440b      	add	r3, r1
 8005d50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d54:	2201      	movs	r2, #1
 8005d56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d58:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <USBD_CDC_Init+0x1ec>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	f003 020f 	and.w	r2, r3, #15
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3326      	adds	r3, #38	; 0x26
 8005d6e:	2210      	movs	r2, #16
 8005d70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d72:	4b29      	ldr	r3, [pc, #164]	; (8005e18 <USBD_CDC_Init+0x1ec>)
 8005d74:	7819      	ldrb	r1, [r3, #0]
 8005d76:	2308      	movs	r3, #8
 8005d78:	2203      	movs	r2, #3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f002 fa65 	bl	800824a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005d80:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <USBD_CDC_Init+0x1ec>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3324      	adds	r3, #36	; 0x24
 8005d96:	2201      	movs	r2, #1
 8005d98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	33b0      	adds	r3, #176	; 0xb0
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e018      	b.n	8005e06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	7c1b      	ldrb	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ddc:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <USBD_CDC_Init+0x1e8>)
 8005dde:	7819      	ldrb	r1, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f002 fb1c 	bl	8008428 <USBD_LL_PrepareReceive>
 8005df0:	e008      	b.n	8005e04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005df2:	4b08      	ldr	r3, [pc, #32]	; (8005e14 <USBD_CDC_Init+0x1e8>)
 8005df4:	7819      	ldrb	r1, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dfc:	2340      	movs	r3, #64	; 0x40
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f002 fb12 	bl	8008428 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000093 	.word	0x20000093
 8005e14:	20000094 	.word	0x20000094
 8005e18:	20000095 	.word	0x20000095

08005e1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e28:	4b3a      	ldr	r3, [pc, #232]	; (8005f14 <USBD_CDC_DeInit+0xf8>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f002 fa31 	bl	8008296 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e34:	4b37      	ldr	r3, [pc, #220]	; (8005f14 <USBD_CDC_DeInit+0xf8>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f003 020f 	and.w	r2, r3, #15
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	3324      	adds	r3, #36	; 0x24
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005e4e:	4b32      	ldr	r3, [pc, #200]	; (8005f18 <USBD_CDC_DeInit+0xfc>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f002 fa1e 	bl	8008296 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005e5a:	4b2f      	ldr	r3, [pc, #188]	; (8005f18 <USBD_CDC_DeInit+0xfc>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f003 020f 	and.w	r2, r3, #15
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e72:	2200      	movs	r2, #0
 8005e74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005e76:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <USBD_CDC_DeInit+0x100>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f002 fa0a 	bl	8008296 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005e82:	4b26      	ldr	r3, [pc, #152]	; (8005f1c <USBD_CDC_DeInit+0x100>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f003 020f 	and.w	r2, r3, #15
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	3324      	adds	r3, #36	; 0x24
 8005e98:	2200      	movs	r2, #0
 8005e9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005e9c:	4b1f      	ldr	r3, [pc, #124]	; (8005f1c <USBD_CDC_DeInit+0x100>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3326      	adds	r3, #38	; 0x26
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	32b0      	adds	r2, #176	; 0xb0
 8005ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01f      	beq.n	8005f08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	33b0      	adds	r3, #176	; 0xb0
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	32b0      	adds	r2, #176	; 0xb0
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f002 fade 	bl	80084ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	32b0      	adds	r2, #176	; 0xb0
 8005efa:	2100      	movs	r1, #0
 8005efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000093 	.word	0x20000093
 8005f18:	20000094 	.word	0x20000094
 8005f1c:	20000095 	.word	0x20000095

08005f20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	32b0      	adds	r2, #176	; 0xb0
 8005f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e0bf      	b.n	80060d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d050      	beq.n	8005ffe <USBD_CDC_Setup+0xde>
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	f040 80af 	bne.w	80060c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	88db      	ldrh	r3, [r3, #6]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03a      	beq.n	8005fe0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	b25b      	sxtb	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	da1b      	bge.n	8005fac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	33b0      	adds	r3, #176	; 0xb0
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005f8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	88d2      	ldrh	r2, [r2, #6]
 8005f90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	88db      	ldrh	r3, [r3, #6]
 8005f96:	2b07      	cmp	r3, #7
 8005f98:	bf28      	it	cs
 8005f9a:	2307      	movcs	r3, #7
 8005f9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	89fa      	ldrh	r2, [r7, #14]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 fd43 	bl	8007a30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005faa:	e090      	b.n	80060ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	785a      	ldrb	r2, [r3, #1]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	88db      	ldrh	r3, [r3, #6]
 8005fba:	2b3f      	cmp	r3, #63	; 0x3f
 8005fbc:	d803      	bhi.n	8005fc6 <USBD_CDC_Setup+0xa6>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	88db      	ldrh	r3, [r3, #6]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	e000      	b.n	8005fc8 <USBD_CDC_Setup+0xa8>
 8005fc6:	2240      	movs	r2, #64	; 0x40
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005fce:	6939      	ldr	r1, [r7, #16]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 fd55 	bl	8007a88 <USBD_CtlPrepareRx>
      break;
 8005fde:	e076      	b.n	80060ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	33b0      	adds	r3, #176	; 0xb0
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	7850      	ldrb	r0, [r2, #1]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	4798      	blx	r3
      break;
 8005ffc:	e067      	b.n	80060ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b0b      	cmp	r3, #11
 8006004:	d851      	bhi.n	80060aa <USBD_CDC_Setup+0x18a>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <USBD_CDC_Setup+0xec>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800603d 	.word	0x0800603d
 8006010:	080060b9 	.word	0x080060b9
 8006014:	080060ab 	.word	0x080060ab
 8006018:	080060ab 	.word	0x080060ab
 800601c:	080060ab 	.word	0x080060ab
 8006020:	080060ab 	.word	0x080060ab
 8006024:	080060ab 	.word	0x080060ab
 8006028:	080060ab 	.word	0x080060ab
 800602c:	080060ab 	.word	0x080060ab
 8006030:	080060ab 	.word	0x080060ab
 8006034:	08006067 	.word	0x08006067
 8006038:	08006091 	.word	0x08006091
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b03      	cmp	r3, #3
 8006046:	d107      	bne.n	8006058 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006048:	f107 030a 	add.w	r3, r7, #10
 800604c:	2202      	movs	r2, #2
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 fced 	bl	8007a30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006056:	e032      	b.n	80060be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fc77 	bl	800794e <USBD_CtlError>
            ret = USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	75fb      	strb	r3, [r7, #23]
          break;
 8006064:	e02b      	b.n	80060be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b03      	cmp	r3, #3
 8006070:	d107      	bne.n	8006082 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006072:	f107 030d 	add.w	r3, r7, #13
 8006076:	2201      	movs	r2, #1
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 fcd8 	bl	8007a30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006080:	e01d      	b.n	80060be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fc62 	bl	800794e <USBD_CtlError>
            ret = USBD_FAIL;
 800608a:	2303      	movs	r3, #3
 800608c:	75fb      	strb	r3, [r7, #23]
          break;
 800608e:	e016      	b.n	80060be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b03      	cmp	r3, #3
 800609a:	d00f      	beq.n	80060bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 fc55 	bl	800794e <USBD_CtlError>
            ret = USBD_FAIL;
 80060a4:	2303      	movs	r3, #3
 80060a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060a8:	e008      	b.n	80060bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 fc4e 	bl	800794e <USBD_CtlError>
          ret = USBD_FAIL;
 80060b2:	2303      	movs	r3, #3
 80060b4:	75fb      	strb	r3, [r7, #23]
          break;
 80060b6:	e002      	b.n	80060be <USBD_CDC_Setup+0x19e>
          break;
 80060b8:	bf00      	nop
 80060ba:	e008      	b.n	80060ce <USBD_CDC_Setup+0x1ae>
          break;
 80060bc:	bf00      	nop
      }
      break;
 80060be:	e006      	b.n	80060ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 fc43 	bl	800794e <USBD_CtlError>
      ret = USBD_FAIL;
 80060c8:	2303      	movs	r3, #3
 80060ca:	75fb      	strb	r3, [r7, #23]
      break;
 80060cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80060ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	32b0      	adds	r2, #176	; 0xb0
 80060f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80060fe:	2303      	movs	r3, #3
 8006100:	e065      	b.n	80061ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	32b0      	adds	r2, #176	; 0xb0
 800610c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006110:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	3318      	adds	r3, #24
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d02f      	beq.n	800618c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	f003 020f 	and.w	r2, r3, #15
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	3318      	adds	r3, #24
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	78fb      	ldrb	r3, [r7, #3]
 8006144:	f003 010f 	and.w	r1, r3, #15
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	460b      	mov	r3, r1
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	440b      	add	r3, r1
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4403      	add	r3, r0
 8006154:	3348      	adds	r3, #72	; 0x48
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	fbb2 f1f3 	udiv	r1, r2, r3
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006162:	2b00      	cmp	r3, #0
 8006164:	d112      	bne.n	800618c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006166:	78fb      	ldrb	r3, [r7, #3]
 8006168:	f003 020f 	and.w	r2, r3, #15
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3318      	adds	r3, #24
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800617e:	78f9      	ldrb	r1, [r7, #3]
 8006180:	2300      	movs	r3, #0
 8006182:	2200      	movs	r2, #0
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f002 f92e 	bl	80083e6 <USBD_LL_Transmit>
 800618a:	e01f      	b.n	80061cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	33b0      	adds	r3, #176	; 0xb0
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d010      	beq.n	80061cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	33b0      	adds	r3, #176	; 0xb0
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80061c8:	78fa      	ldrb	r2, [r7, #3]
 80061ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	32b0      	adds	r2, #176	; 0xb0
 80061ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	32b0      	adds	r2, #176	; 0xb0
 80061fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006204:	2303      	movs	r3, #3
 8006206:	e01a      	b.n	800623e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f002 f92c 	bl	800846a <USBD_LL_GetRxDataSize>
 8006212:	4602      	mov	r2, r0
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	33b0      	adds	r3, #176	; 0xb0
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006238:	4611      	mov	r1, r2
 800623a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	32b0      	adds	r2, #176	; 0xb0
 8006258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006264:	2303      	movs	r3, #3
 8006266:	e025      	b.n	80062b4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	33b0      	adds	r3, #176	; 0xb0
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01a      	beq.n	80062b2 <USBD_CDC_EP0_RxReady+0x6c>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006282:	2bff      	cmp	r3, #255	; 0xff
 8006284:	d015      	beq.n	80062b2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	33b0      	adds	r3, #176	; 0xb0
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800629e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062a6:	b292      	uxth	r2, r2
 80062a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	22ff      	movs	r2, #255	; 0xff
 80062ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062c4:	2182      	movs	r1, #130	; 0x82
 80062c6:	4818      	ldr	r0, [pc, #96]	; (8006328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062c8:	f000 fd09 	bl	8006cde <USBD_GetEpDesc>
 80062cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062ce:	2101      	movs	r1, #1
 80062d0:	4815      	ldr	r0, [pc, #84]	; (8006328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062d2:	f000 fd04 	bl	8006cde <USBD_GetEpDesc>
 80062d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062d8:	2181      	movs	r1, #129	; 0x81
 80062da:	4813      	ldr	r0, [pc, #76]	; (8006328 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80062dc:	f000 fcff 	bl	8006cde <USBD_GetEpDesc>
 80062e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2210      	movs	r2, #16
 80062ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d006      	beq.n	8006302 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062fc:	711a      	strb	r2, [r3, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d006      	beq.n	8006316 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006310:	711a      	strb	r2, [r3, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2243      	movs	r2, #67	; 0x43
 800631a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800631c:	4b02      	ldr	r3, [pc, #8]	; (8006328 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000050 	.word	0x20000050

0800632c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006334:	2182      	movs	r1, #130	; 0x82
 8006336:	4818      	ldr	r0, [pc, #96]	; (8006398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006338:	f000 fcd1 	bl	8006cde <USBD_GetEpDesc>
 800633c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800633e:	2101      	movs	r1, #1
 8006340:	4815      	ldr	r0, [pc, #84]	; (8006398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006342:	f000 fccc 	bl	8006cde <USBD_GetEpDesc>
 8006346:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006348:	2181      	movs	r1, #129	; 0x81
 800634a:	4813      	ldr	r0, [pc, #76]	; (8006398 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800634c:	f000 fcc7 	bl	8006cde <USBD_GetEpDesc>
 8006350:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2210      	movs	r2, #16
 800635c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d006      	beq.n	8006372 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2200      	movs	r2, #0
 8006368:	711a      	strb	r2, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f042 0202 	orr.w	r2, r2, #2
 8006370:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	711a      	strb	r2, [r3, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f042 0202 	orr.w	r2, r2, #2
 8006384:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2243      	movs	r2, #67	; 0x43
 800638a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800638c:	4b02      	ldr	r3, [pc, #8]	; (8006398 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000050 	.word	0x20000050

0800639c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063a4:	2182      	movs	r1, #130	; 0x82
 80063a6:	4818      	ldr	r0, [pc, #96]	; (8006408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063a8:	f000 fc99 	bl	8006cde <USBD_GetEpDesc>
 80063ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063ae:	2101      	movs	r1, #1
 80063b0:	4815      	ldr	r0, [pc, #84]	; (8006408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063b2:	f000 fc94 	bl	8006cde <USBD_GetEpDesc>
 80063b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063b8:	2181      	movs	r1, #129	; 0x81
 80063ba:	4813      	ldr	r0, [pc, #76]	; (8006408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063bc:	f000 fc8f 	bl	8006cde <USBD_GetEpDesc>
 80063c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2210      	movs	r2, #16
 80063cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d006      	beq.n	80063e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063dc:	711a      	strb	r2, [r3, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d006      	beq.n	80063f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f0:	711a      	strb	r2, [r3, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2243      	movs	r2, #67	; 0x43
 80063fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063fc:	4b02      	ldr	r3, [pc, #8]	; (8006408 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20000050 	.word	0x20000050

0800640c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	220a      	movs	r2, #10
 8006418:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800641a:	4b03      	ldr	r3, [pc, #12]	; (8006428 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	2000000c 	.word	0x2000000c

0800642c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e009      	b.n	8006454 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	33b0      	adds	r3, #176	; 0xb0
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	32b0      	adds	r2, #176	; 0xb0
 8006476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006482:	2303      	movs	r3, #3
 8006484:	e008      	b.n	8006498 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	32b0      	adds	r2, #176	; 0xb0
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e004      	b.n	80064d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	32b0      	adds	r2, #176	; 0xb0
 80064f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32b0      	adds	r2, #176	; 0xb0
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800650a:	2303      	movs	r3, #3
 800650c:	e018      	b.n	8006540 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	7c1b      	ldrb	r3, [r3, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <USBD_CDC_ReceivePacket+0x68>)
 8006518:	7819      	ldrb	r1, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 ff7f 	bl	8008428 <USBD_LL_PrepareReceive>
 800652a:	e008      	b.n	800653e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800652c:	4b06      	ldr	r3, [pc, #24]	; (8006548 <USBD_CDC_ReceivePacket+0x68>)
 800652e:	7819      	ldrb	r1, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006536:	2340      	movs	r3, #64	; 0x40
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 ff75 	bl	8008428 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000094 	.word	0x20000094

0800654c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006560:	2303      	movs	r3, #3
 8006562:	e01f      	b.n	80065a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	79fa      	ldrb	r2, [r7, #7]
 8006596:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f001 fdef 	bl	800817c <USBD_LL_Init>
 800659e:	4603      	mov	r3, r0
 80065a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e025      	b.n	8006610 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	32ae      	adds	r2, #174	; 0xae
 80065d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00f      	beq.n	8006600 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	32ae      	adds	r2, #174	; 0xae
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	f107 020e 	add.w	r2, r7, #14
 80065f4:	4610      	mov	r0, r2
 80065f6:	4798      	blx	r3
 80065f8:	4602      	mov	r2, r0
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 fdf7 	bl	8008214 <USBD_LL_Start>
 8006626:	4603      	mov	r3, r0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006638:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	78fa      	ldrb	r2, [r7, #3]
 800666a:	4611      	mov	r1, r2
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
 8006670:	4603      	mov	r3, r0
 8006672:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	78fa      	ldrb	r2, [r7, #3]
 8006698:	4611      	mov	r1, r2
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80066a4:	2303      	movs	r3, #3
 80066a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 f908 	bl	80078da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066d8:	461a      	mov	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d01a      	beq.n	8006724 <USBD_LL_SetupStage+0x72>
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d822      	bhi.n	8006738 <USBD_LL_SetupStage+0x86>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <USBD_LL_SetupStage+0x4a>
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d00a      	beq.n	8006710 <USBD_LL_SetupStage+0x5e>
 80066fa:	e01d      	b.n	8006738 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fb5f 	bl	8006dc8 <USBD_StdDevReq>
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]
      break;
 800670e:	e020      	b.n	8006752 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fbc7 	bl	8006eac <USBD_StdItfReq>
 800671e:	4603      	mov	r3, r0
 8006720:	73fb      	strb	r3, [r7, #15]
      break;
 8006722:	e016      	b.n	8006752 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fc29 	bl	8006f84 <USBD_StdEPReq>
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
      break;
 8006736:	e00c      	b.n	8006752 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800673e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006742:	b2db      	uxtb	r3, r3
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fdc4 	bl	80082d4 <USBD_LL_StallEP>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
      break;
 8006750:	bf00      	nop
  }

  return ret;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	460b      	mov	r3, r1
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800676e:	7afb      	ldrb	r3, [r7, #11]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d16e      	bne.n	8006852 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800677a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006782:	2b03      	cmp	r3, #3
 8006784:	f040 8098 	bne.w	80068b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	429a      	cmp	r2, r3
 8006792:	d913      	bls.n	80067bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	4293      	cmp	r3, r2
 80067ac:	bf28      	it	cs
 80067ae:	4613      	movcs	r3, r2
 80067b0:	461a      	mov	r2, r3
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f001 f984 	bl	8007ac2 <USBD_CtlContinueRx>
 80067ba:	e07d      	b.n	80068b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d014      	beq.n	80067f4 <USBD_LL_DataOutStage+0x98>
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d81d      	bhi.n	800680a <USBD_LL_DataOutStage+0xae>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <USBD_LL_DataOutStage+0x7c>
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d003      	beq.n	80067de <USBD_LL_DataOutStage+0x82>
 80067d6:	e018      	b.n	800680a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	75bb      	strb	r3, [r7, #22]
            break;
 80067dc:	e018      	b.n	8006810 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	4619      	mov	r1, r3
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fa5e 	bl	8006caa <USBD_CoreFindIF>
 80067ee:	4603      	mov	r3, r0
 80067f0:	75bb      	strb	r3, [r7, #22]
            break;
 80067f2:	e00d      	b.n	8006810 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	4619      	mov	r1, r3
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f000 fa60 	bl	8006cc4 <USBD_CoreFindEP>
 8006804:	4603      	mov	r3, r0
 8006806:	75bb      	strb	r3, [r7, #22]
            break;
 8006808:	e002      	b.n	8006810 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	75bb      	strb	r3, [r7, #22]
            break;
 800680e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006810:	7dbb      	ldrb	r3, [r7, #22]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d119      	bne.n	800684a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b03      	cmp	r3, #3
 8006820:	d113      	bne.n	800684a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006822:	7dba      	ldrb	r2, [r7, #22]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	32ae      	adds	r2, #174	; 0xae
 8006828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00b      	beq.n	800684a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006832:	7dba      	ldrb	r2, [r7, #22]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800683a:	7dba      	ldrb	r2, [r7, #22]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	32ae      	adds	r2, #174	; 0xae
 8006840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f001 f94a 	bl	8007ae4 <USBD_CtlSendStatus>
 8006850:	e032      	b.n	80068b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006858:	b2db      	uxtb	r3, r3
 800685a:	4619      	mov	r1, r3
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fa31 	bl	8006cc4 <USBD_CoreFindEP>
 8006862:	4603      	mov	r3, r0
 8006864:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006866:	7dbb      	ldrb	r3, [r7, #22]
 8006868:	2bff      	cmp	r3, #255	; 0xff
 800686a:	d025      	beq.n	80068b8 <USBD_LL_DataOutStage+0x15c>
 800686c:	7dbb      	ldrb	r3, [r7, #22]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d122      	bne.n	80068b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b03      	cmp	r3, #3
 800687c:	d117      	bne.n	80068ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800687e:	7dba      	ldrb	r2, [r7, #22]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	32ae      	adds	r2, #174	; 0xae
 8006884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00f      	beq.n	80068ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800688e:	7dba      	ldrb	r2, [r7, #22]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006896:	7dba      	ldrb	r2, [r7, #22]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	32ae      	adds	r2, #174	; 0xae
 800689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	7afa      	ldrb	r2, [r7, #11]
 80068a4:	4611      	mov	r1, r2
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	4798      	blx	r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	e000      	b.n	80068ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b086      	sub	sp, #24
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	460b      	mov	r3, r1
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d16f      	bne.n	80069b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3314      	adds	r3, #20
 80068da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d15a      	bne.n	800699c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d914      	bls.n	800691c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	461a      	mov	r2, r3
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f001 f8ac 	bl	8007a66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800690e:	2300      	movs	r3, #0
 8006910:	2200      	movs	r2, #0
 8006912:	2100      	movs	r1, #0
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f001 fd87 	bl	8008428 <USBD_LL_PrepareReceive>
 800691a:	e03f      	b.n	800699c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	d11c      	bne.n	8006962 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006930:	429a      	cmp	r2, r3
 8006932:	d316      	bcc.n	8006962 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800693e:	429a      	cmp	r2, r3
 8006940:	d20f      	bcs.n	8006962 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006942:	2200      	movs	r2, #0
 8006944:	2100      	movs	r1, #0
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f001 f88d 	bl	8007a66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006954:	2300      	movs	r3, #0
 8006956:	2200      	movs	r2, #0
 8006958:	2100      	movs	r1, #0
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f001 fd64 	bl	8008428 <USBD_LL_PrepareReceive>
 8006960:	e01c      	b.n	800699c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b03      	cmp	r3, #3
 800696c:	d10f      	bne.n	800698e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800698e:	2180      	movs	r1, #128	; 0x80
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f001 fc9f 	bl	80082d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f001 f8b7 	bl	8007b0a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d03a      	beq.n	8006a1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff fe42 	bl	8006630 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069b4:	e032      	b.n	8006a1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80069b6:	7afb      	ldrb	r3, [r7, #11]
 80069b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	4619      	mov	r1, r3
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f97f 	bl	8006cc4 <USBD_CoreFindEP>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	2bff      	cmp	r3, #255	; 0xff
 80069ce:	d025      	beq.n	8006a1c <USBD_LL_DataInStage+0x15a>
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d122      	bne.n	8006a1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d11c      	bne.n	8006a1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80069e2:	7dfa      	ldrb	r2, [r7, #23]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	32ae      	adds	r2, #174	; 0xae
 80069e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d014      	beq.n	8006a1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80069f2:	7dfa      	ldrb	r2, [r7, #23]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80069fa:	7dfa      	ldrb	r2, [r7, #23]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	32ae      	adds	r2, #174	; 0xae
 8006a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	7afa      	ldrb	r2, [r7, #11]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	4798      	blx	r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a12:	7dbb      	ldrb	r3, [r7, #22]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a18:	7dbb      	ldrb	r3, [r7, #22]
 8006a1a:	e000      	b.n	8006a1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d014      	beq.n	8006a8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	6852      	ldr	r2, [r2, #4]
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a8c:	2340      	movs	r3, #64	; 0x40
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2100      	movs	r1, #0
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fbd9 	bl	800824a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2240      	movs	r2, #64	; 0x40
 8006aa4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aa8:	2340      	movs	r3, #64	; 0x40
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 fbcb 	bl	800824a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2240      	movs	r2, #64	; 0x40
 8006abe:	621a      	str	r2, [r3, #32]

  return ret;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	78fa      	ldrb	r2, [r7, #3]
 8006ada:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2204      	movs	r2, #4
 8006b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d106      	bne.n	8006b38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d110      	bne.n	8006b7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	32ae      	adds	r2, #174	; 0xae
 8006b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e01c      	b.n	8006be2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d115      	bne.n	8006be0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	32ae      	adds	r2, #174	; 0xae
 8006bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	32ae      	adds	r2, #174	; 0xae
 8006bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	32ae      	adds	r2, #174	; 0xae
 8006c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e01c      	b.n	8006c46 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d115      	bne.n	8006c44 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	32ae      	adds	r2, #174	; 0xae
 8006c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00b      	beq.n	8006c44 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32ae      	adds	r2, #174	; 0xae
 8006c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	78fa      	ldrb	r2, [r7, #3]
 8006c3e:	4611      	mov	r1, r2
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00e      	beq.n	8006ca0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6852      	ldr	r2, [r2, #4]
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	4611      	mov	r1, r2
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cd0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	885b      	ldrh	r3, [r3, #2]
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d920      	bls.n	8006d48 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d0e:	e013      	b.n	8006d38 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d10:	f107 030a 	add.w	r3, r7, #10
 8006d14:	4619      	mov	r1, r3
 8006d16:	6978      	ldr	r0, [r7, #20]
 8006d18:	f000 f81b 	bl	8006d52 <USBD_GetNextDesc>
 8006d1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b05      	cmp	r3, #5
 8006d24:	d108      	bne.n	8006d38 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	789b      	ldrb	r3, [r3, #2]
 8006d2e:	78fa      	ldrb	r2, [r7, #3]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d008      	beq.n	8006d46 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	885b      	ldrh	r3, [r3, #2]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	897b      	ldrh	r3, [r7, #10]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d8e5      	bhi.n	8006d10 <USBD_GetEpDesc+0x32>
 8006d44:	e000      	b.n	8006d48 <USBD_GetEpDesc+0x6a>
          break;
 8006d46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d48:	693b      	ldr	r3, [r7, #16]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	881a      	ldrh	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	3301      	adds	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006daa:	8a3b      	ldrh	r3, [r7, #16]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	b21a      	sxth	r2, r3
 8006db0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	b21b      	sxth	r3, r3
 8006db8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006dba:	89fb      	ldrh	r3, [r7, #14]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d005      	beq.n	8006dee <USBD_StdDevReq+0x26>
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d857      	bhi.n	8006e96 <USBD_StdDevReq+0xce>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00f      	beq.n	8006e0a <USBD_StdDevReq+0x42>
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d153      	bne.n	8006e96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	32ae      	adds	r2, #174	; 0xae
 8006df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	4798      	blx	r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]
      break;
 8006e08:	e04a      	b.n	8006ea0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b09      	cmp	r3, #9
 8006e10:	d83b      	bhi.n	8006e8a <USBD_StdDevReq+0xc2>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <USBD_StdDevReq+0x50>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e6d 	.word	0x08006e6d
 8006e1c:	08006e81 	.word	0x08006e81
 8006e20:	08006e8b 	.word	0x08006e8b
 8006e24:	08006e77 	.word	0x08006e77
 8006e28:	08006e8b 	.word	0x08006e8b
 8006e2c:	08006e4b 	.word	0x08006e4b
 8006e30:	08006e41 	.word	0x08006e41
 8006e34:	08006e8b 	.word	0x08006e8b
 8006e38:	08006e63 	.word	0x08006e63
 8006e3c:	08006e55 	.word	0x08006e55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa3c 	bl	80072c0 <USBD_GetDescriptor>
          break;
 8006e48:	e024      	b.n	8006e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fba1 	bl	8007594 <USBD_SetAddress>
          break;
 8006e52:	e01f      	b.n	8006e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fbe0 	bl	800761c <USBD_SetConfig>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
          break;
 8006e60:	e018      	b.n	8006e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fc83 	bl	8007770 <USBD_GetConfig>
          break;
 8006e6a:	e013      	b.n	8006e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fcb4 	bl	80077dc <USBD_GetStatus>
          break;
 8006e74:	e00e      	b.n	8006e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fce3 	bl	8007844 <USBD_SetFeature>
          break;
 8006e7e:	e009      	b.n	8006e94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fd07 	bl	8007896 <USBD_ClrFeature>
          break;
 8006e88:	e004      	b.n	8006e94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fd5e 	bl	800794e <USBD_CtlError>
          break;
 8006e92:	bf00      	nop
      }
      break;
 8006e94:	e004      	b.n	8006ea0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fd58 	bl	800794e <USBD_CtlError>
      break;
 8006e9e:	bf00      	nop
  }

  return ret;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop

08006eac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d005      	beq.n	8006ed2 <USBD_StdItfReq+0x26>
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d852      	bhi.n	8006f70 <USBD_StdItfReq+0xc4>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <USBD_StdItfReq+0x26>
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d14e      	bne.n	8006f70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d840      	bhi.n	8006f62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	889b      	ldrh	r3, [r3, #4]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d836      	bhi.n	8006f58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	889b      	ldrh	r3, [r3, #4]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff fed9 	bl	8006caa <USBD_CoreFindIF>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	2bff      	cmp	r3, #255	; 0xff
 8006f00:	d01d      	beq.n	8006f3e <USBD_StdItfReq+0x92>
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d11a      	bne.n	8006f3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f08:	7bba      	ldrb	r2, [r7, #14]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	32ae      	adds	r2, #174	; 0xae
 8006f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00f      	beq.n	8006f38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f18:	7bba      	ldrb	r2, [r7, #14]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f20:	7bba      	ldrb	r2, [r7, #14]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	32ae      	adds	r2, #174	; 0xae
 8006f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f36:	e004      	b.n	8006f42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f3c:	e001      	b.n	8006f42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	88db      	ldrh	r3, [r3, #6]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d110      	bne.n	8006f6c <USBD_StdItfReq+0xc0>
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fdc7 	bl	8007ae4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f56:	e009      	b.n	8006f6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fcf7 	bl	800794e <USBD_CtlError>
          break;
 8006f60:	e004      	b.n	8006f6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fcf2 	bl	800794e <USBD_CtlError>
          break;
 8006f6a:	e000      	b.n	8006f6e <USBD_StdItfReq+0xc2>
          break;
 8006f6c:	bf00      	nop
      }
      break;
 8006f6e:	e004      	b.n	8006f7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fceb 	bl	800794e <USBD_CtlError>
      break;
 8006f78:	bf00      	nop
  }

  return ret;
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	889b      	ldrh	r3, [r3, #4]
 8006f96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fa0:	2b40      	cmp	r3, #64	; 0x40
 8006fa2:	d007      	beq.n	8006fb4 <USBD_StdEPReq+0x30>
 8006fa4:	2b40      	cmp	r3, #64	; 0x40
 8006fa6:	f200 817f 	bhi.w	80072a8 <USBD_StdEPReq+0x324>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d02a      	beq.n	8007004 <USBD_StdEPReq+0x80>
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	f040 817a 	bne.w	80072a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff fe83 	bl	8006cc4 <USBD_CoreFindEP>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fc2:	7b7b      	ldrb	r3, [r7, #13]
 8006fc4:	2bff      	cmp	r3, #255	; 0xff
 8006fc6:	f000 8174 	beq.w	80072b2 <USBD_StdEPReq+0x32e>
 8006fca:	7b7b      	ldrb	r3, [r7, #13]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f040 8170 	bne.w	80072b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006fd2:	7b7a      	ldrb	r2, [r7, #13]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006fda:	7b7a      	ldrb	r2, [r7, #13]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	32ae      	adds	r2, #174	; 0xae
 8006fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 8163 	beq.w	80072b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006fec:	7b7a      	ldrb	r2, [r7, #13]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	32ae      	adds	r2, #174	; 0xae
 8006ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007002:	e156      	b.n	80072b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d008      	beq.n	800701e <USBD_StdEPReq+0x9a>
 800700c:	2b03      	cmp	r3, #3
 800700e:	f300 8145 	bgt.w	800729c <USBD_StdEPReq+0x318>
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 809b 	beq.w	800714e <USBD_StdEPReq+0x1ca>
 8007018:	2b01      	cmp	r3, #1
 800701a:	d03c      	beq.n	8007096 <USBD_StdEPReq+0x112>
 800701c:	e13e      	b.n	800729c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b02      	cmp	r3, #2
 8007028:	d002      	beq.n	8007030 <USBD_StdEPReq+0xac>
 800702a:	2b03      	cmp	r3, #3
 800702c:	d016      	beq.n	800705c <USBD_StdEPReq+0xd8>
 800702e:	e02c      	b.n	800708a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <USBD_StdEPReq+0xce>
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b80      	cmp	r3, #128	; 0x80
 800703a:	d00a      	beq.n	8007052 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f947 	bl	80082d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007046:	2180      	movs	r1, #128	; 0x80
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 f943 	bl	80082d4 <USBD_LL_StallEP>
 800704e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007050:	e020      	b.n	8007094 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fc7a 	bl	800794e <USBD_CtlError>
              break;
 800705a:	e01b      	b.n	8007094 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	885b      	ldrh	r3, [r3, #2]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10e      	bne.n	8007082 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00b      	beq.n	8007082 <USBD_StdEPReq+0xfe>
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	2b80      	cmp	r3, #128	; 0x80
 800706e:	d008      	beq.n	8007082 <USBD_StdEPReq+0xfe>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	88db      	ldrh	r3, [r3, #6]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 f929 	bl	80082d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fd2e 	bl	8007ae4 <USBD_CtlSendStatus>

              break;
 8007088:	e004      	b.n	8007094 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fc5e 	bl	800794e <USBD_CtlError>
              break;
 8007092:	bf00      	nop
          }
          break;
 8007094:	e107      	b.n	80072a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d002      	beq.n	80070a8 <USBD_StdEPReq+0x124>
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d016      	beq.n	80070d4 <USBD_StdEPReq+0x150>
 80070a6:	e04b      	b.n	8007140 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <USBD_StdEPReq+0x146>
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b80      	cmp	r3, #128	; 0x80
 80070b2:	d00a      	beq.n	80070ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 f90b 	bl	80082d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070be:	2180      	movs	r1, #128	; 0x80
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f907 	bl	80082d4 <USBD_LL_StallEP>
 80070c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070c8:	e040      	b.n	800714c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fc3e 	bl	800794e <USBD_CtlError>
              break;
 80070d2:	e03b      	b.n	800714c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	885b      	ldrh	r3, [r3, #2]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d136      	bne.n	800714a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f911 	bl	8008312 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fcf7 	bl	8007ae4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff fde2 	bl	8006cc4 <USBD_CoreFindEP>
 8007100:	4603      	mov	r3, r0
 8007102:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007104:	7b7b      	ldrb	r3, [r7, #13]
 8007106:	2bff      	cmp	r3, #255	; 0xff
 8007108:	d01f      	beq.n	800714a <USBD_StdEPReq+0x1c6>
 800710a:	7b7b      	ldrb	r3, [r7, #13]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d11c      	bne.n	800714a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007110:	7b7a      	ldrb	r2, [r7, #13]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007118:	7b7a      	ldrb	r2, [r7, #13]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	32ae      	adds	r2, #174	; 0xae
 800711e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d010      	beq.n	800714a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007128:	7b7a      	ldrb	r2, [r7, #13]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	32ae      	adds	r2, #174	; 0xae
 800712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	4798      	blx	r3
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800713e:	e004      	b.n	800714a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fc03 	bl	800794e <USBD_CtlError>
              break;
 8007148:	e000      	b.n	800714c <USBD_StdEPReq+0x1c8>
              break;
 800714a:	bf00      	nop
          }
          break;
 800714c:	e0ab      	b.n	80072a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d002      	beq.n	8007160 <USBD_StdEPReq+0x1dc>
 800715a:	2b03      	cmp	r3, #3
 800715c:	d032      	beq.n	80071c4 <USBD_StdEPReq+0x240>
 800715e:	e097      	b.n	8007290 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <USBD_StdEPReq+0x1f2>
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b80      	cmp	r3, #128	; 0x80
 800716a:	d004      	beq.n	8007176 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fbed 	bl	800794e <USBD_CtlError>
                break;
 8007174:	e091      	b.n	800729a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007176:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800717a:	2b00      	cmp	r3, #0
 800717c:	da0b      	bge.n	8007196 <USBD_StdEPReq+0x212>
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007184:	4613      	mov	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	3310      	adds	r3, #16
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	4413      	add	r3, r2
 8007192:	3304      	adds	r3, #4
 8007194:	e00b      	b.n	80071ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	4413      	add	r3, r2
 80071ac:	3304      	adds	r3, #4
 80071ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2202      	movs	r2, #2
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fc37 	bl	8007a30 <USBD_CtlSendData>
              break;
 80071c2:	e06a      	b.n	800729a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	da11      	bge.n	80071f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	f003 020f 	and.w	r2, r3, #15
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	3324      	adds	r3, #36	; 0x24
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d117      	bne.n	8007216 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fbb0 	bl	800794e <USBD_CtlError>
                  break;
 80071ee:	e054      	b.n	800729a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	f003 020f 	and.w	r2, r3, #15
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d104      	bne.n	8007216 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fb9d 	bl	800794e <USBD_CtlError>
                  break;
 8007214:	e041      	b.n	800729a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721a:	2b00      	cmp	r3, #0
 800721c:	da0b      	bge.n	8007236 <USBD_StdEPReq+0x2b2>
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	3310      	adds	r3, #16
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	4413      	add	r3, r2
 8007232:	3304      	adds	r3, #4
 8007234:	e00b      	b.n	800724e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	4413      	add	r3, r2
 800724c:	3304      	adds	r3, #4
 800724e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <USBD_StdEPReq+0x2d8>
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	2b80      	cmp	r3, #128	; 0x80
 800725a:	d103      	bne.n	8007264 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	e00e      	b.n	8007282 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 f871 	bl	8008350 <USBD_LL_IsStallEP>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	e002      	b.n	8007282 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2202      	movs	r2, #2
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fbd1 	bl	8007a30 <USBD_CtlSendData>
              break;
 800728e:	e004      	b.n	800729a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fb5b 	bl	800794e <USBD_CtlError>
              break;
 8007298:	bf00      	nop
          }
          break;
 800729a:	e004      	b.n	80072a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fb55 	bl	800794e <USBD_CtlError>
          break;
 80072a4:	bf00      	nop
      }
      break;
 80072a6:	e005      	b.n	80072b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fb4f 	bl	800794e <USBD_CtlError>
      break;
 80072b0:	e000      	b.n	80072b4 <USBD_StdEPReq+0x330>
      break;
 80072b2:	bf00      	nop
  }

  return ret;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	885b      	ldrh	r3, [r3, #2]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	2b06      	cmp	r3, #6
 80072e2:	f200 8128 	bhi.w	8007536 <USBD_GetDescriptor+0x276>
 80072e6:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <USBD_GetDescriptor+0x2c>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	08007309 	.word	0x08007309
 80072f0:	08007321 	.word	0x08007321
 80072f4:	08007361 	.word	0x08007361
 80072f8:	08007537 	.word	0x08007537
 80072fc:	08007537 	.word	0x08007537
 8007300:	080074d7 	.word	0x080074d7
 8007304:	08007503 	.word	0x08007503
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7c12      	ldrb	r2, [r2, #16]
 8007314:	f107 0108 	add.w	r1, r7, #8
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
 800731c:	60f8      	str	r0, [r7, #12]
      break;
 800731e:	e112      	b.n	8007546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	7c1b      	ldrb	r3, [r3, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10d      	bne.n	8007344 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	f107 0208 	add.w	r2, r7, #8
 8007334:	4610      	mov	r0, r2
 8007336:	4798      	blx	r3
 8007338:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	2202      	movs	r2, #2
 8007340:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007342:	e100      	b.n	8007546 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	f107 0208 	add.w	r2, r7, #8
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
 8007354:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3301      	adds	r3, #1
 800735a:	2202      	movs	r2, #2
 800735c:	701a      	strb	r2, [r3, #0]
      break;
 800735e:	e0f2      	b.n	8007546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	885b      	ldrh	r3, [r3, #2]
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b05      	cmp	r3, #5
 8007368:	f200 80ac 	bhi.w	80074c4 <USBD_GetDescriptor+0x204>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <USBD_GetDescriptor+0xb4>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	0800738d 	.word	0x0800738d
 8007378:	080073c1 	.word	0x080073c1
 800737c:	080073f5 	.word	0x080073f5
 8007380:	08007429 	.word	0x08007429
 8007384:	0800745d 	.word	0x0800745d
 8007388:	08007491 	.word	0x08007491
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	7c12      	ldrb	r2, [r2, #16]
 80073a4:	f107 0108 	add.w	r1, r7, #8
 80073a8:	4610      	mov	r0, r2
 80073aa:	4798      	blx	r3
 80073ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ae:	e091      	b.n	80074d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 facb 	bl	800794e <USBD_CtlError>
            err++;
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	3301      	adds	r3, #1
 80073bc:	72fb      	strb	r3, [r7, #11]
          break;
 80073be:	e089      	b.n	80074d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	7c12      	ldrb	r2, [r2, #16]
 80073d8:	f107 0108 	add.w	r1, r7, #8
 80073dc:	4610      	mov	r0, r2
 80073de:	4798      	blx	r3
 80073e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e2:	e077      	b.n	80074d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fab1 	bl	800794e <USBD_CtlError>
            err++;
 80073ec:	7afb      	ldrb	r3, [r7, #11]
 80073ee:	3301      	adds	r3, #1
 80073f0:	72fb      	strb	r3, [r7, #11]
          break;
 80073f2:	e06f      	b.n	80074d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	7c12      	ldrb	r2, [r2, #16]
 800740c:	f107 0108 	add.w	r1, r7, #8
 8007410:	4610      	mov	r0, r2
 8007412:	4798      	blx	r3
 8007414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007416:	e05d      	b.n	80074d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fa97 	bl	800794e <USBD_CtlError>
            err++;
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	3301      	adds	r3, #1
 8007424:	72fb      	strb	r3, [r7, #11]
          break;
 8007426:	e055      	b.n	80074d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	7c12      	ldrb	r2, [r2, #16]
 8007440:	f107 0108 	add.w	r1, r7, #8
 8007444:	4610      	mov	r0, r2
 8007446:	4798      	blx	r3
 8007448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800744a:	e043      	b.n	80074d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fa7d 	bl	800794e <USBD_CtlError>
            err++;
 8007454:	7afb      	ldrb	r3, [r7, #11]
 8007456:	3301      	adds	r3, #1
 8007458:	72fb      	strb	r3, [r7, #11]
          break;
 800745a:	e03b      	b.n	80074d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00b      	beq.n	8007480 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	7c12      	ldrb	r2, [r2, #16]
 8007474:	f107 0108 	add.w	r1, r7, #8
 8007478:	4610      	mov	r0, r2
 800747a:	4798      	blx	r3
 800747c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800747e:	e029      	b.n	80074d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa63 	bl	800794e <USBD_CtlError>
            err++;
 8007488:	7afb      	ldrb	r3, [r7, #11]
 800748a:	3301      	adds	r3, #1
 800748c:	72fb      	strb	r3, [r7, #11]
          break;
 800748e:	e021      	b.n	80074d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00b      	beq.n	80074b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	7c12      	ldrb	r2, [r2, #16]
 80074a8:	f107 0108 	add.w	r1, r7, #8
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
 80074b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b2:	e00f      	b.n	80074d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa49 	bl	800794e <USBD_CtlError>
            err++;
 80074bc:	7afb      	ldrb	r3, [r7, #11]
 80074be:	3301      	adds	r3, #1
 80074c0:	72fb      	strb	r3, [r7, #11]
          break;
 80074c2:	e007      	b.n	80074d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa41 	bl	800794e <USBD_CtlError>
          err++;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	3301      	adds	r3, #1
 80074d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80074d2:	bf00      	nop
      }
      break;
 80074d4:	e037      	b.n	8007546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7c1b      	ldrb	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	f107 0208 	add.w	r2, r7, #8
 80074ea:	4610      	mov	r0, r2
 80074ec:	4798      	blx	r3
 80074ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f0:	e029      	b.n	8007546 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fa2a 	bl	800794e <USBD_CtlError>
        err++;
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	3301      	adds	r3, #1
 80074fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007500:	e021      	b.n	8007546 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	7c1b      	ldrb	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10d      	bne.n	8007526 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	f107 0208 	add.w	r2, r7, #8
 8007516:	4610      	mov	r0, r2
 8007518:	4798      	blx	r3
 800751a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3301      	adds	r3, #1
 8007520:	2207      	movs	r2, #7
 8007522:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007524:	e00f      	b.n	8007546 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fa10 	bl	800794e <USBD_CtlError>
        err++;
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	3301      	adds	r3, #1
 8007532:	72fb      	strb	r3, [r7, #11]
      break;
 8007534:	e007      	b.n	8007546 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa08 	bl	800794e <USBD_CtlError>
      err++;
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	3301      	adds	r3, #1
 8007542:	72fb      	strb	r3, [r7, #11]
      break;
 8007544:	bf00      	nop
  }

  if (err != 0U)
 8007546:	7afb      	ldrb	r3, [r7, #11]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d11e      	bne.n	800758a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	88db      	ldrh	r3, [r3, #6]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d016      	beq.n	8007582 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007554:	893b      	ldrh	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00e      	beq.n	8007578 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	88da      	ldrh	r2, [r3, #6]
 800755e:	893b      	ldrh	r3, [r7, #8]
 8007560:	4293      	cmp	r3, r2
 8007562:	bf28      	it	cs
 8007564:	4613      	movcs	r3, r2
 8007566:	b29b      	uxth	r3, r3
 8007568:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800756a:	893b      	ldrh	r3, [r7, #8]
 800756c:	461a      	mov	r2, r3
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fa5d 	bl	8007a30 <USBD_CtlSendData>
 8007576:	e009      	b.n	800758c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9e7 	bl	800794e <USBD_CtlError>
 8007580:	e004      	b.n	800758c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 faae 	bl	8007ae4 <USBD_CtlSendStatus>
 8007588:	e000      	b.n	800758c <USBD_GetDescriptor+0x2cc>
    return;
 800758a:	bf00      	nop
  }
}
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop

08007594 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	889b      	ldrh	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d131      	bne.n	800760a <USBD_SetAddress+0x76>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88db      	ldrh	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d12d      	bne.n	800760a <USBD_SetAddress+0x76>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	885b      	ldrh	r3, [r3, #2]
 80075b2:	2b7f      	cmp	r3, #127	; 0x7f
 80075b4:	d829      	bhi.n	800760a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d104      	bne.n	80075d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9bc 	bl	800794e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d6:	e01d      	b.n	8007614 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	7bfa      	ldrb	r2, [r7, #15]
 80075dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fedf 	bl	80083a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa7a 	bl	8007ae4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2202      	movs	r2, #2
 80075fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fe:	e009      	b.n	8007614 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007608:	e004      	b.n	8007614 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f99e 	bl	800794e <USBD_CtlError>
  }
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	885b      	ldrh	r3, [r3, #2]
 800762e:	b2da      	uxtb	r2, r3
 8007630:	4b4e      	ldr	r3, [pc, #312]	; (800776c <USBD_SetConfig+0x150>)
 8007632:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007634:	4b4d      	ldr	r3, [pc, #308]	; (800776c <USBD_SetConfig+0x150>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d905      	bls.n	8007648 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f985 	bl	800794e <USBD_CtlError>
    return USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	e08c      	b.n	8007762 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d002      	beq.n	800765a <USBD_SetConfig+0x3e>
 8007654:	2b03      	cmp	r3, #3
 8007656:	d029      	beq.n	80076ac <USBD_SetConfig+0x90>
 8007658:	e075      	b.n	8007746 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800765a:	4b44      	ldr	r3, [pc, #272]	; (800776c <USBD_SetConfig+0x150>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d020      	beq.n	80076a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007662:	4b42      	ldr	r3, [pc, #264]	; (800776c <USBD_SetConfig+0x150>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800766c:	4b3f      	ldr	r3, [pc, #252]	; (800776c <USBD_SetConfig+0x150>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fe ffe7 	bl	8006646 <USBD_SetClassConfig>
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d008      	beq.n	8007694 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f962 	bl	800794e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2202      	movs	r2, #2
 800768e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007692:	e065      	b.n	8007760 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fa25 	bl	8007ae4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2203      	movs	r2, #3
 800769e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076a2:	e05d      	b.n	8007760 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fa1d 	bl	8007ae4 <USBD_CtlSendStatus>
      break;
 80076aa:	e059      	b.n	8007760 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076ac:	4b2f      	ldr	r3, [pc, #188]	; (800776c <USBD_SetConfig+0x150>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d112      	bne.n	80076da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80076bc:	4b2b      	ldr	r3, [pc, #172]	; (800776c <USBD_SetConfig+0x150>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076c6:	4b29      	ldr	r3, [pc, #164]	; (800776c <USBD_SetConfig+0x150>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7fe ffd6 	bl	800667e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa06 	bl	8007ae4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076d8:	e042      	b.n	8007760 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80076da:	4b24      	ldr	r3, [pc, #144]	; (800776c <USBD_SetConfig+0x150>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d02a      	beq.n	800773e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fe ffc4 	bl	800667e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80076f6:	4b1d      	ldr	r3, [pc, #116]	; (800776c <USBD_SetConfig+0x150>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007700:	4b1a      	ldr	r3, [pc, #104]	; (800776c <USBD_SetConfig+0x150>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fe ff9d 	bl	8006646 <USBD_SetClassConfig>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00f      	beq.n	8007736 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f918 	bl	800794e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fe ffa9 	bl	800667e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007734:	e014      	b.n	8007760 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f9d4 	bl	8007ae4 <USBD_CtlSendStatus>
      break;
 800773c:	e010      	b.n	8007760 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9d0 	bl	8007ae4 <USBD_CtlSendStatus>
      break;
 8007744:	e00c      	b.n	8007760 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f900 	bl	800794e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800774e:	4b07      	ldr	r3, [pc, #28]	; (800776c <USBD_SetConfig+0x150>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7fe ff92 	bl	800667e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800775a:	2303      	movs	r3, #3
 800775c:	73fb      	strb	r3, [r7, #15]
      break;
 800775e:	bf00      	nop
  }

  return ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	200001f4 	.word	0x200001f4

08007770 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	88db      	ldrh	r3, [r3, #6]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d004      	beq.n	800778c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f8e2 	bl	800794e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800778a:	e023      	b.n	80077d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b02      	cmp	r3, #2
 8007796:	dc02      	bgt.n	800779e <USBD_GetConfig+0x2e>
 8007798:	2b00      	cmp	r3, #0
 800779a:	dc03      	bgt.n	80077a4 <USBD_GetConfig+0x34>
 800779c:	e015      	b.n	80077ca <USBD_GetConfig+0x5a>
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d00b      	beq.n	80077ba <USBD_GetConfig+0x4a>
 80077a2:	e012      	b.n	80077ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3308      	adds	r3, #8
 80077ae:	2201      	movs	r2, #1
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f93c 	bl	8007a30 <USBD_CtlSendData>
        break;
 80077b8:	e00c      	b.n	80077d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3304      	adds	r3, #4
 80077be:	2201      	movs	r2, #1
 80077c0:	4619      	mov	r1, r3
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f934 	bl	8007a30 <USBD_CtlSendData>
        break;
 80077c8:	e004      	b.n	80077d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f8be 	bl	800794e <USBD_CtlError>
        break;
 80077d2:	bf00      	nop
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d81e      	bhi.n	8007832 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	88db      	ldrh	r3, [r3, #6]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d004      	beq.n	8007806 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f8a5 	bl	800794e <USBD_CtlError>
        break;
 8007804:	e01a      	b.n	800783c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d005      	beq.n	8007822 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f043 0202 	orr.w	r2, r3, #2
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	330c      	adds	r3, #12
 8007826:	2202      	movs	r2, #2
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f900 	bl	8007a30 <USBD_CtlSendData>
      break;
 8007830:	e004      	b.n	800783c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f88a 	bl	800794e <USBD_CtlError>
      break;
 800783a:	bf00      	nop
  }
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	885b      	ldrh	r3, [r3, #2]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d107      	bne.n	8007866 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f940 	bl	8007ae4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007864:	e013      	b.n	800788e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	885b      	ldrh	r3, [r3, #2]
 800786a:	2b02      	cmp	r3, #2
 800786c:	d10b      	bne.n	8007886 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	889b      	ldrh	r3, [r3, #4]
 8007872:	0a1b      	lsrs	r3, r3, #8
 8007874:	b29b      	uxth	r3, r3
 8007876:	b2da      	uxtb	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f930 	bl	8007ae4 <USBD_CtlSendStatus>
}
 8007884:	e003      	b.n	800788e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f860 	bl	800794e <USBD_CtlError>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	3b01      	subs	r3, #1
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d80b      	bhi.n	80078c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	885b      	ldrh	r3, [r3, #2]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d10c      	bne.n	80078d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f910 	bl	8007ae4 <USBD_CtlSendStatus>
      }
      break;
 80078c4:	e004      	b.n	80078d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f840 	bl	800794e <USBD_CtlError>
      break;
 80078ce:	e000      	b.n	80078d2 <USBD_ClrFeature+0x3c>
      break;
 80078d0:	bf00      	nop
  }
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	781a      	ldrb	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f7ff fa41 	bl	8006d8c <SWAPBYTE>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3301      	adds	r3, #1
 8007916:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3301      	adds	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f7ff fa34 	bl	8006d8c <SWAPBYTE>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3301      	adds	r3, #1
 8007930:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3301      	adds	r3, #1
 8007936:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fa27 	bl	8006d8c <SWAPBYTE>
 800793e:	4603      	mov	r3, r0
 8007940:	461a      	mov	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	80da      	strh	r2, [r3, #6]
}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007958:	2180      	movs	r1, #128	; 0x80
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fcba 	bl	80082d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007960:	2100      	movs	r1, #0
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fcb6 	bl	80082d4 <USBD_LL_StallEP>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d036      	beq.n	80079f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800798a:	6938      	ldr	r0, [r7, #16]
 800798c:	f000 f836 	bl	80079fc <USBD_GetLen>
 8007990:	4603      	mov	r3, r0
 8007992:	3301      	adds	r3, #1
 8007994:	b29b      	uxth	r3, r3
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	b29a      	uxth	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	4413      	add	r3, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	7812      	ldrb	r2, [r2, #0]
 80079a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80079aa:	7dfb      	ldrb	r3, [r7, #23]
 80079ac:	3301      	adds	r3, #1
 80079ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4413      	add	r3, r2
 80079b6:	2203      	movs	r2, #3
 80079b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	3301      	adds	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80079c0:	e013      	b.n	80079ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	4413      	add	r3, r2
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	7812      	ldrb	r2, [r2, #0]
 80079cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	3301      	adds	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
    idx++;
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	3301      	adds	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	4413      	add	r3, r2
 80079e0:	2200      	movs	r2, #0
 80079e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	3301      	adds	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e7      	bne.n	80079c2 <USBD_GetString+0x52>
 80079f2:	e000      	b.n	80079f6 <USBD_GetString+0x86>
    return;
 80079f4:	bf00      	nop
  }
}
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a0c:	e005      	b.n	8007a1a <USBD_GetLen+0x1e>
  {
    len++;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	3301      	adds	r3, #1
 8007a12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	3301      	adds	r3, #1
 8007a18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f5      	bne.n	8007a0e <USBD_GetLen+0x12>
  }

  return len;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	2100      	movs	r1, #0
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 fcc5 	bl	80083e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	2100      	movs	r1, #0
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 fcb4 	bl	80083e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2203      	movs	r2, #3
 8007a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fcb8 	bl	8008428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fca7 	bl	8008428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2204      	movs	r2, #4
 8007af0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007af4:	2300      	movs	r3, #0
 8007af6:	2200      	movs	r2, #0
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fc73 	bl	80083e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2205      	movs	r2, #5
 8007b16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2100      	movs	r1, #0
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fc81 	bl	8008428 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b34:	2200      	movs	r2, #0
 8007b36:	4912      	ldr	r1, [pc, #72]	; (8007b80 <MX_USB_DEVICE_Init+0x50>)
 8007b38:	4812      	ldr	r0, [pc, #72]	; (8007b84 <MX_USB_DEVICE_Init+0x54>)
 8007b3a:	f7fe fd07 	bl	800654c <USBD_Init>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b44:	f7f8 fefc 	bl	8000940 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b48:	490f      	ldr	r1, [pc, #60]	; (8007b88 <MX_USB_DEVICE_Init+0x58>)
 8007b4a:	480e      	ldr	r0, [pc, #56]	; (8007b84 <MX_USB_DEVICE_Init+0x54>)
 8007b4c:	f7fe fd2e 	bl	80065ac <USBD_RegisterClass>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b56:	f7f8 fef3 	bl	8000940 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b5a:	490c      	ldr	r1, [pc, #48]	; (8007b8c <MX_USB_DEVICE_Init+0x5c>)
 8007b5c:	4809      	ldr	r0, [pc, #36]	; (8007b84 <MX_USB_DEVICE_Init+0x54>)
 8007b5e:	f7fe fc65 	bl	800642c <USBD_CDC_RegisterInterface>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b68:	f7f8 feea 	bl	8000940 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b6c:	4805      	ldr	r0, [pc, #20]	; (8007b84 <MX_USB_DEVICE_Init+0x54>)
 8007b6e:	f7fe fd53 	bl	8006618 <USBD_Start>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b78:	f7f8 fee2 	bl	8000940 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b7c:	bf00      	nop
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	200000ac 	.word	0x200000ac
 8007b84:	200001f8 	.word	0x200001f8
 8007b88:	20000018 	.word	0x20000018
 8007b8c:	20000098 	.word	0x20000098

08007b90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b94:	2200      	movs	r2, #0
 8007b96:	4905      	ldr	r1, [pc, #20]	; (8007bac <CDC_Init_FS+0x1c>)
 8007b98:	4805      	ldr	r0, [pc, #20]	; (8007bb0 <CDC_Init_FS+0x20>)
 8007b9a:	f7fe fc61 	bl	8006460 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b9e:	4905      	ldr	r1, [pc, #20]	; (8007bb4 <CDC_Init_FS+0x24>)
 8007ba0:	4803      	ldr	r0, [pc, #12]	; (8007bb0 <CDC_Init_FS+0x20>)
 8007ba2:	f7fe fc7f 	bl	80064a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ba6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20000cd4 	.word	0x20000cd4
 8007bb0:	200001f8 	.word	0x200001f8
 8007bb4:	200004d4 	.word	0x200004d4

08007bb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	6039      	str	r1, [r7, #0]
 8007bd2:	71fb      	strb	r3, [r7, #7]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	2b23      	cmp	r3, #35	; 0x23
 8007bdc:	d84a      	bhi.n	8007c74 <CDC_Control_FS+0xac>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <CDC_Control_FS+0x1c>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c75 	.word	0x08007c75
 8007be8:	08007c75 	.word	0x08007c75
 8007bec:	08007c75 	.word	0x08007c75
 8007bf0:	08007c75 	.word	0x08007c75
 8007bf4:	08007c75 	.word	0x08007c75
 8007bf8:	08007c75 	.word	0x08007c75
 8007bfc:	08007c75 	.word	0x08007c75
 8007c00:	08007c75 	.word	0x08007c75
 8007c04:	08007c75 	.word	0x08007c75
 8007c08:	08007c75 	.word	0x08007c75
 8007c0c:	08007c75 	.word	0x08007c75
 8007c10:	08007c75 	.word	0x08007c75
 8007c14:	08007c75 	.word	0x08007c75
 8007c18:	08007c75 	.word	0x08007c75
 8007c1c:	08007c75 	.word	0x08007c75
 8007c20:	08007c75 	.word	0x08007c75
 8007c24:	08007c75 	.word	0x08007c75
 8007c28:	08007c75 	.word	0x08007c75
 8007c2c:	08007c75 	.word	0x08007c75
 8007c30:	08007c75 	.word	0x08007c75
 8007c34:	08007c75 	.word	0x08007c75
 8007c38:	08007c75 	.word	0x08007c75
 8007c3c:	08007c75 	.word	0x08007c75
 8007c40:	08007c75 	.word	0x08007c75
 8007c44:	08007c75 	.word	0x08007c75
 8007c48:	08007c75 	.word	0x08007c75
 8007c4c:	08007c75 	.word	0x08007c75
 8007c50:	08007c75 	.word	0x08007c75
 8007c54:	08007c75 	.word	0x08007c75
 8007c58:	08007c75 	.word	0x08007c75
 8007c5c:	08007c75 	.word	0x08007c75
 8007c60:	08007c75 	.word	0x08007c75
 8007c64:	08007c75 	.word	0x08007c75
 8007c68:	08007c75 	.word	0x08007c75
 8007c6c:	08007c75 	.word	0x08007c75
 8007c70:	08007c75 	.word	0x08007c75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c74:	bf00      	nop
  }

  return (USBD_OK);
 8007c76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <CDC_Receive_FS+0x24>)
 8007c92:	f7fe fc07 	bl	80064a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c96:	4804      	ldr	r0, [pc, #16]	; (8007ca8 <CDC_Receive_FS+0x24>)
 8007c98:	f7fe fc22 	bl	80064e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	200001f8 	.word	0x200001f8

08007cac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	6039      	str	r1, [r7, #0]
 8007cda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2212      	movs	r2, #18
 8007ce0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ce2:	4b03      	ldr	r3, [pc, #12]	; (8007cf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	200000c8 	.word	0x200000c8

08007cf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2204      	movs	r2, #4
 8007d04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d06:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	200000dc 	.word	0x200000dc

08007d18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	6039      	str	r1, [r7, #0]
 8007d22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d105      	bne.n	8007d36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	4907      	ldr	r1, [pc, #28]	; (8007d4c <USBD_FS_ProductStrDescriptor+0x34>)
 8007d2e:	4808      	ldr	r0, [pc, #32]	; (8007d50 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d30:	f7ff fe1e 	bl	8007970 <USBD_GetString>
 8007d34:	e004      	b.n	8007d40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	4904      	ldr	r1, [pc, #16]	; (8007d4c <USBD_FS_ProductStrDescriptor+0x34>)
 8007d3a:	4805      	ldr	r0, [pc, #20]	; (8007d50 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d3c:	f7ff fe18 	bl	8007970 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d40:	4b02      	ldr	r3, [pc, #8]	; (8007d4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	200014d4 	.word	0x200014d4
 8007d50:	08008588 	.word	0x08008588

08007d54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	6039      	str	r1, [r7, #0]
 8007d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	4904      	ldr	r1, [pc, #16]	; (8007d74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d64:	4804      	ldr	r0, [pc, #16]	; (8007d78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d66:	f7ff fe03 	bl	8007970 <USBD_GetString>
  return USBD_StrDesc;
 8007d6a:	4b02      	ldr	r3, [pc, #8]	; (8007d74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	200014d4 	.word	0x200014d4
 8007d78:	080085a0 	.word	0x080085a0

08007d7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	6039      	str	r1, [r7, #0]
 8007d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	221a      	movs	r2, #26
 8007d8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d8e:	f000 f843 	bl	8007e18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d92:	4b02      	ldr	r3, [pc, #8]	; (8007d9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	200000e0 	.word	0x200000e0

08007da0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	6039      	str	r1, [r7, #0]
 8007daa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007dac:	79fb      	ldrb	r3, [r7, #7]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d105      	bne.n	8007dbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	4907      	ldr	r1, [pc, #28]	; (8007dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007db6:	4808      	ldr	r0, [pc, #32]	; (8007dd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007db8:	f7ff fdda 	bl	8007970 <USBD_GetString>
 8007dbc:	e004      	b.n	8007dc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4904      	ldr	r1, [pc, #16]	; (8007dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dc2:	4805      	ldr	r0, [pc, #20]	; (8007dd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dc4:	f7ff fdd4 	bl	8007970 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dc8:	4b02      	ldr	r3, [pc, #8]	; (8007dd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	200014d4 	.word	0x200014d4
 8007dd8:	080085b4 	.word	0x080085b4

08007ddc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	6039      	str	r1, [r7, #0]
 8007de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d105      	bne.n	8007dfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	4907      	ldr	r1, [pc, #28]	; (8007e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007df2:	4808      	ldr	r0, [pc, #32]	; (8007e14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007df4:	f7ff fdbc 	bl	8007970 <USBD_GetString>
 8007df8:	e004      	b.n	8007e04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	4904      	ldr	r1, [pc, #16]	; (8007e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dfe:	4805      	ldr	r0, [pc, #20]	; (8007e14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e00:	f7ff fdb6 	bl	8007970 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e04:	4b02      	ldr	r3, [pc, #8]	; (8007e10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	200014d4 	.word	0x200014d4
 8007e14:	080085c0 	.word	0x080085c0

08007e18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e1e:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <Get_SerialNum+0x44>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e24:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <Get_SerialNum+0x48>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <Get_SerialNum+0x4c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d009      	beq.n	8007e52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e3e:	2208      	movs	r2, #8
 8007e40:	4909      	ldr	r1, [pc, #36]	; (8007e68 <Get_SerialNum+0x50>)
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 f814 	bl	8007e70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e48:	2204      	movs	r2, #4
 8007e4a:	4908      	ldr	r1, [pc, #32]	; (8007e6c <Get_SerialNum+0x54>)
 8007e4c:	68b8      	ldr	r0, [r7, #8]
 8007e4e:	f000 f80f 	bl	8007e70 <IntToUnicode>
  }
}
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	1fff7a10 	.word	0x1fff7a10
 8007e60:	1fff7a14 	.word	0x1fff7a14
 8007e64:	1fff7a18 	.word	0x1fff7a18
 8007e68:	200000e2 	.word	0x200000e2
 8007e6c:	200000f2 	.word	0x200000f2

08007e70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]
 8007e86:	e027      	b.n	8007ed8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	0f1b      	lsrs	r3, r3, #28
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	d80b      	bhi.n	8007ea8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	0f1b      	lsrs	r3, r3, #28
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	440b      	add	r3, r1
 8007ea0:	3230      	adds	r2, #48	; 0x30
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e00a      	b.n	8007ebe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	0f1b      	lsrs	r3, r3, #28
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3237      	adds	r2, #55	; 0x37
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	011b      	lsls	r3, r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	3301      	adds	r3, #1
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	4413      	add	r3, r2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ed2:	7dfb      	ldrb	r3, [r7, #23]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	75fb      	strb	r3, [r7, #23]
 8007ed8:	7dfa      	ldrb	r2, [r7, #23]
 8007eda:	79fb      	ldrb	r3, [r7, #7]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d3d3      	bcc.n	8007e88 <IntToUnicode+0x18>
  }
}
 8007ee0:	bf00      	nop
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
	...

08007ef0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08a      	sub	sp, #40	; 0x28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef8:	f107 0314 	add.w	r3, r7, #20
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	609a      	str	r2, [r3, #8]
 8007f04:	60da      	str	r2, [r3, #12]
 8007f06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f10:	d13a      	bne.n	8007f88 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f12:	2300      	movs	r3, #0
 8007f14:	613b      	str	r3, [r7, #16]
 8007f16:	4b1e      	ldr	r3, [pc, #120]	; (8007f90 <HAL_PCD_MspInit+0xa0>)
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	4a1d      	ldr	r2, [pc, #116]	; (8007f90 <HAL_PCD_MspInit+0xa0>)
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	6313      	str	r3, [r2, #48]	; 0x30
 8007f22:	4b1b      	ldr	r3, [pc, #108]	; (8007f90 <HAL_PCD_MspInit+0xa0>)
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	613b      	str	r3, [r7, #16]
 8007f2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f34:	2302      	movs	r3, #2
 8007f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f40:	230a      	movs	r3, #10
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f44:	f107 0314 	add.w	r3, r7, #20
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4812      	ldr	r0, [pc, #72]	; (8007f94 <HAL_PCD_MspInit+0xa4>)
 8007f4c:	f7f9 fa86 	bl	800145c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f50:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <HAL_PCD_MspInit+0xa0>)
 8007f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f54:	4a0e      	ldr	r2, [pc, #56]	; (8007f90 <HAL_PCD_MspInit+0xa0>)
 8007f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5a:	6353      	str	r3, [r2, #52]	; 0x34
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <HAL_PCD_MspInit+0xa0>)
 8007f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f64:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <HAL_PCD_MspInit+0xa0>)
 8007f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6c:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <HAL_PCD_MspInit+0xa0>)
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f74:	60fb      	str	r3, [r7, #12]
 8007f76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	2043      	movs	r0, #67	; 0x43
 8007f7e:	f7f9 fa36 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f82:	2043      	movs	r0, #67	; 0x43
 8007f84:	f7f9 fa4f 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f88:	bf00      	nop
 8007f8a:	3728      	adds	r7, #40	; 0x28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40023800 	.word	0x40023800
 8007f94:	40020000 	.word	0x40020000

08007f98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007fac:	4619      	mov	r1, r3
 8007fae:	4610      	mov	r0, r2
 8007fb0:	f7fe fb7f 	bl	80066b2 <USBD_LL_SetupStage>
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	00db      	lsls	r3, r3, #3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	78fb      	ldrb	r3, [r7, #3]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	f7fe fbb9 	bl	800675c <USBD_LL_DataOutStage>
}
 8007fea:	bf00      	nop
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008004:	78fa      	ldrb	r2, [r7, #3]
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	4613      	mov	r3, r2
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	440b      	add	r3, r1
 8008012:	334c      	adds	r3, #76	; 0x4c
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	4619      	mov	r1, r3
 800801a:	f7fe fc52 	bl	80068c2 <USBD_LL_DataInStage>
}
 800801e:	bf00      	nop
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe fd86 	bl	8006b46 <USBD_LL_SOF>
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800804a:	2301      	movs	r3, #1
 800804c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
 800805a:	e008      	b.n	800806e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d102      	bne.n	800806a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008064:	2301      	movs	r3, #1
 8008066:	73fb      	strb	r3, [r7, #15]
 8008068:	e001      	b.n	800806e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800806a:	f7f8 fc69 	bl	8000940 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008074:	7bfa      	ldrb	r2, [r7, #15]
 8008076:	4611      	mov	r1, r2
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe fd26 	bl	8006aca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe fcce 	bl	8006a26 <USBD_LL_Reset>
}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fd21 	bl	8006aea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80080ba:	f043 0301 	orr.w	r3, r3, #1
 80080be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080c8:	4b04      	ldr	r3, [pc, #16]	; (80080dc <HAL_PCD_SuspendCallback+0x48>)
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	4a03      	ldr	r2, [pc, #12]	; (80080dc <HAL_PCD_SuspendCallback+0x48>)
 80080ce:	f043 0306 	orr.w	r3, r3, #6
 80080d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	e000ed00 	.word	0xe000ed00

080080e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fd11 	bl	8006b16 <USBD_LL_Resume>
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	4611      	mov	r1, r2
 8008112:	4618      	mov	r0, r3
 8008114:	f7fe fd69 	bl	8006bea <USBD_LL_IsoOUTIncomplete>
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008132:	78fa      	ldrb	r2, [r7, #3]
 8008134:	4611      	mov	r1, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fd25 	bl	8006b86 <USBD_LL_IsoINIncomplete>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fd7b 	bl	8006c4e <USBD_LL_DevConnected>
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe fd78 	bl	8006c64 <USBD_LL_DevDisconnected>
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d13c      	bne.n	8008206 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800818c:	4a20      	ldr	r2, [pc, #128]	; (8008210 <USBD_LL_Init+0x94>)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a1e      	ldr	r2, [pc, #120]	; (8008210 <USBD_LL_Init+0x94>)
 8008198:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800819c:	4b1c      	ldr	r3, [pc, #112]	; (8008210 <USBD_LL_Init+0x94>)
 800819e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80081a4:	4b1a      	ldr	r3, [pc, #104]	; (8008210 <USBD_LL_Init+0x94>)
 80081a6:	2204      	movs	r2, #4
 80081a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081aa:	4b19      	ldr	r3, [pc, #100]	; (8008210 <USBD_LL_Init+0x94>)
 80081ac:	2202      	movs	r2, #2
 80081ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081b0:	4b17      	ldr	r3, [pc, #92]	; (8008210 <USBD_LL_Init+0x94>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80081b6:	4b16      	ldr	r3, [pc, #88]	; (8008210 <USBD_LL_Init+0x94>)
 80081b8:	2202      	movs	r2, #2
 80081ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081bc:	4b14      	ldr	r3, [pc, #80]	; (8008210 <USBD_LL_Init+0x94>)
 80081be:	2200      	movs	r2, #0
 80081c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80081c2:	4b13      	ldr	r3, [pc, #76]	; (8008210 <USBD_LL_Init+0x94>)
 80081c4:	2200      	movs	r2, #0
 80081c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80081c8:	4b11      	ldr	r3, [pc, #68]	; (8008210 <USBD_LL_Init+0x94>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80081ce:	4b10      	ldr	r3, [pc, #64]	; (8008210 <USBD_LL_Init+0x94>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80081d4:	4b0e      	ldr	r3, [pc, #56]	; (8008210 <USBD_LL_Init+0x94>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80081da:	480d      	ldr	r0, [pc, #52]	; (8008210 <USBD_LL_Init+0x94>)
 80081dc:	f7f9 faf3 	bl	80017c6 <HAL_PCD_Init>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80081e6:	f7f8 fbab 	bl	8000940 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80081ea:	2180      	movs	r1, #128	; 0x80
 80081ec:	4808      	ldr	r0, [pc, #32]	; (8008210 <USBD_LL_Init+0x94>)
 80081ee:	f7fa fd4a 	bl	8002c86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80081f2:	2240      	movs	r2, #64	; 0x40
 80081f4:	2100      	movs	r1, #0
 80081f6:	4806      	ldr	r0, [pc, #24]	; (8008210 <USBD_LL_Init+0x94>)
 80081f8:	f7fa fcfe 	bl	8002bf8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80081fc:	2280      	movs	r2, #128	; 0x80
 80081fe:	2101      	movs	r1, #1
 8008200:	4803      	ldr	r0, [pc, #12]	; (8008210 <USBD_LL_Init+0x94>)
 8008202:	f7fa fcf9 	bl	8002bf8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	200016d4 	.word	0x200016d4

08008214 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800822a:	4618      	mov	r0, r3
 800822c:	f7f9 fbe8 	bl	8001a00 <HAL_PCD_Start>
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	4618      	mov	r0, r3
 8008238:	f000 f942 	bl	80084c0 <USBD_Get_USB_Status>
 800823c:	4603      	mov	r3, r0
 800823e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008240:	7bbb      	ldrb	r3, [r7, #14]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	4608      	mov	r0, r1
 8008254:	4611      	mov	r1, r2
 8008256:	461a      	mov	r2, r3
 8008258:	4603      	mov	r3, r0
 800825a:	70fb      	strb	r3, [r7, #3]
 800825c:	460b      	mov	r3, r1
 800825e:	70bb      	strb	r3, [r7, #2]
 8008260:	4613      	mov	r3, r2
 8008262:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008272:	78bb      	ldrb	r3, [r7, #2]
 8008274:	883a      	ldrh	r2, [r7, #0]
 8008276:	78f9      	ldrb	r1, [r7, #3]
 8008278:	f7fa f8b9 	bl	80023ee <HAL_PCD_EP_Open>
 800827c:	4603      	mov	r3, r0
 800827e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	4618      	mov	r0, r3
 8008284:	f000 f91c 	bl	80084c0 <USBD_Get_USB_Status>
 8008288:	4603      	mov	r3, r0
 800828a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800828c:	7bbb      	ldrb	r3, [r7, #14]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082b0:	78fa      	ldrb	r2, [r7, #3]
 80082b2:	4611      	mov	r1, r2
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fa f902 	bl	80024be <HAL_PCD_EP_Close>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082be:	7bfb      	ldrb	r3, [r7, #15]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 f8fd 	bl	80084c0 <USBD_Get_USB_Status>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fa f9da 	bl	80026ac <HAL_PCD_EP_SetStall>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 f8de 	bl	80084c0 <USBD_Get_USB_Status>
 8008304:	4603      	mov	r3, r0
 8008306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008308:	7bbb      	ldrb	r3, [r7, #14]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800832c:	78fa      	ldrb	r2, [r7, #3]
 800832e:	4611      	mov	r1, r2
 8008330:	4618      	mov	r0, r3
 8008332:	f7fa fa1f 	bl	8002774 <HAL_PCD_EP_ClrStall>
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	4618      	mov	r0, r3
 800833e:	f000 f8bf 	bl	80084c0 <USBD_Get_USB_Status>
 8008342:	4603      	mov	r3, r0
 8008344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008346:	7bbb      	ldrb	r3, [r7, #14]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008362:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008368:	2b00      	cmp	r3, #0
 800836a:	da0b      	bge.n	8008384 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008372:	68f9      	ldr	r1, [r7, #12]
 8008374:	4613      	mov	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	333e      	adds	r3, #62	; 0x3e
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	e00b      	b.n	800839c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800838a:	68f9      	ldr	r1, [r7, #12]
 800838c:	4613      	mov	r3, r2
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800839a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083c2:	78fa      	ldrb	r2, [r7, #3]
 80083c4:	4611      	mov	r1, r2
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f9 ffec 	bl	80023a4 <HAL_PCD_SetAddress>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f874 	bl	80084c0 <USBD_Get_USB_Status>
 80083d8:	4603      	mov	r3, r0
 80083da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b086      	sub	sp, #24
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
 80083f2:	460b      	mov	r3, r1
 80083f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008404:	7af9      	ldrb	r1, [r7, #11]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	f7fa f905 	bl	8002618 <HAL_PCD_EP_Transmit>
 800840e:	4603      	mov	r3, r0
 8008410:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	4618      	mov	r0, r3
 8008416:	f000 f853 	bl	80084c0 <USBD_Get_USB_Status>
 800841a:	4603      	mov	r3, r0
 800841c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800841e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	607a      	str	r2, [r7, #4]
 8008432:	603b      	str	r3, [r7, #0]
 8008434:	460b      	mov	r3, r1
 8008436:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008446:	7af9      	ldrb	r1, [r7, #11]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	f7fa f881 	bl	8002552 <HAL_PCD_EP_Receive>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f832 	bl	80084c0 <USBD_Get_USB_Status>
 800845c:	4603      	mov	r3, r0
 800845e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008460:	7dbb      	ldrb	r3, [r7, #22]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800847c:	78fa      	ldrb	r2, [r7, #3]
 800847e:	4611      	mov	r1, r2
 8008480:	4618      	mov	r0, r3
 8008482:	f7fa f8b1 	bl	80025e8 <HAL_PCD_EP_GetRxCount>
 8008486:	4603      	mov	r3, r0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008498:	4b03      	ldr	r3, [pc, #12]	; (80084a8 <USBD_static_malloc+0x18>)
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20001be0 	.word	0x20001be0

080084ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]

}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d817      	bhi.n	8008504 <USBD_Get_USB_Status+0x44>
 80084d4:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <USBD_Get_USB_Status+0x1c>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	080084ed 	.word	0x080084ed
 80084e0:	080084f3 	.word	0x080084f3
 80084e4:	080084f9 	.word	0x080084f9
 80084e8:	080084ff 	.word	0x080084ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	73fb      	strb	r3, [r7, #15]
    break;
 80084f0:	e00b      	b.n	800850a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084f2:	2303      	movs	r3, #3
 80084f4:	73fb      	strb	r3, [r7, #15]
    break;
 80084f6:	e008      	b.n	800850a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084f8:	2301      	movs	r3, #1
 80084fa:	73fb      	strb	r3, [r7, #15]
    break;
 80084fc:	e005      	b.n	800850a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084fe:	2303      	movs	r3, #3
 8008500:	73fb      	strb	r3, [r7, #15]
    break;
 8008502:	e002      	b.n	800850a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008504:	2303      	movs	r3, #3
 8008506:	73fb      	strb	r3, [r7, #15]
    break;
 8008508:	bf00      	nop
  }
  return usb_status;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <__libc_init_array>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4d0d      	ldr	r5, [pc, #52]	; (8008550 <__libc_init_array+0x38>)
 800851c:	4c0d      	ldr	r4, [pc, #52]	; (8008554 <__libc_init_array+0x3c>)
 800851e:	1b64      	subs	r4, r4, r5
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	2600      	movs	r6, #0
 8008524:	42a6      	cmp	r6, r4
 8008526:	d109      	bne.n	800853c <__libc_init_array+0x24>
 8008528:	4d0b      	ldr	r5, [pc, #44]	; (8008558 <__libc_init_array+0x40>)
 800852a:	4c0c      	ldr	r4, [pc, #48]	; (800855c <__libc_init_array+0x44>)
 800852c:	f000 f820 	bl	8008570 <_init>
 8008530:	1b64      	subs	r4, r4, r5
 8008532:	10a4      	asrs	r4, r4, #2
 8008534:	2600      	movs	r6, #0
 8008536:	42a6      	cmp	r6, r4
 8008538:	d105      	bne.n	8008546 <__libc_init_array+0x2e>
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008540:	4798      	blx	r3
 8008542:	3601      	adds	r6, #1
 8008544:	e7ee      	b.n	8008524 <__libc_init_array+0xc>
 8008546:	f855 3b04 	ldr.w	r3, [r5], #4
 800854a:	4798      	blx	r3
 800854c:	3601      	adds	r6, #1
 800854e:	e7f2      	b.n	8008536 <__libc_init_array+0x1e>
 8008550:	080085e8 	.word	0x080085e8
 8008554:	080085e8 	.word	0x080085e8
 8008558:	080085e8 	.word	0x080085e8
 800855c:	080085ec 	.word	0x080085ec

08008560 <memset>:
 8008560:	4402      	add	r2, r0
 8008562:	4603      	mov	r3, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <_init>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr

0800857c <_fini>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr
